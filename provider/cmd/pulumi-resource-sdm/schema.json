{
    "name": "sdm",
    "displayName": "StrongDM",
    "description": "A Pulumi package for creating and managing StrongDM cloud resources.",
    "keywords": [
        "pulumi",
        "sdm",
        "category/cloud"
    ],
    "homepage": "https://github.com/pierskarsenbarg/pulumi-sdm",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`sdm` Terraform Provider](https://github.com/strongdm/terraform-provider-sdm).",
    "repository": "https://github.com/pierskarsenbarg/pulumi-sdm",
    "logoUrl": "https://raw.githubusercontent.com/pierskarsenbarg/pulumi-sdm/main/docs/strongdm-logo.svg",
    "pluginDownloadURL": "github://api.github.com/pierskarsenbarg/pulumi-sdm",
    "publisher": "Piers Karsenbarg",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "PiersKarsenbarg"
        },
        "go": {
            "importBasePath": "github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@pierskarsenbarg/sdm",
            "packageDescription": "A Pulumi package for creating and managing StrongDM cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/strongdm/terraform-provider-sdm)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-sdm` repo](https://github.com/pierskarsenbarg/pulumi-sdm/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-sdm` repo](https://github.com/strongdm/terraform-provider-sdm/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pierskarsenbarg_pulumi_sdm",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/strongdm/terraform-provider-sdm)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-sdm` repo](https://github.com/pierskarsenbarg/pulumi-sdm/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-sdm` repo](https://github.com/strongdm/terraform-provider-sdm/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "apiAccessKey": {
                "type": "string",
                "description": "A GUID identifying the API key used to authenticate with the StrongDM API.\n"
            },
            "apiSecretKey": {
                "type": "string",
                "description": "A base64 encoded secret key used to authenticate with the StrongDM API.\n"
            },
            "host": {
                "type": "string",
                "description": "The host and port of the StrongDM API endpoint.\n"
            },
            "retryRateLimitErrors": {
                "type": "boolean",
                "description": "Whether experienced rate limits should cause the client to sleep instead of erroring out\n"
            }
        }
    },
    "types": {
        "sdm:index/AccountService:AccountService": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Service.\n"
                },
                "suspended": {
                    "type": "boolean",
                    "description": "The User's suspended state.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "token": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "token"
                    ]
                }
            }
        },
        "sdm:index/AccountUser:AccountUser": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The User's email address. Must be unique.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "External ID is an alternative unique ID this user is represented by within an external service.\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "The User's first name.\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "The User's last name.\n"
                },
                "managedBy": {
                    "type": "string",
                    "description": "Managed By is a read only field for what service manages this user, e.g. StrongDM, Okta, Azure.\n"
                },
                "permissionLevel": {
                    "type": "string",
                    "description": "PermissionLevel is a read only field for the user's permission level e.g. admin, DBA, user.\n"
                },
                "suspended": {
                    "type": "boolean",
                    "description": "The User's suspended state.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "email",
                        "firstName",
                        "lastName",
                        "managedBy",
                        "permissionLevel"
                    ]
                }
            }
        },
        "sdm:index/NodeGateway:NodeGateway": {
            "properties": {
                "bindAddress": {
                    "type": "string",
                    "description": "The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to \"0.0.0.0:listen_address_port\".\n",
                    "willReplaceOnChanges": true
                },
                "device": {
                    "type": "string",
                    "description": "Device is a read only device name uploaded by the gateway process when it comes online.\n"
                },
                "gatewayFilter": {
                    "type": "string",
                    "description": "GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.\n"
                },
                "listenAddress": {
                    "type": "string",
                    "description": "The public hostname/port tuple at which the gateway will be accessible to clients.\n",
                    "willReplaceOnChanges": true
                },
                "location": {
                    "type": "string",
                    "description": "Location is a read only network location uploaded by the gateway process when it comes online.\n"
                },
                "maintenanceWindows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/NodeGatewayMaintenanceWindow:NodeGatewayMaintenanceWindow"
                    },
                    "description": "Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "version": {
                    "type": "string",
                    "description": "Version is a read only sdm binary version uploaded by the gateway process when it comes online.\n"
                }
            },
            "type": "object",
            "required": [
                "listenAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindAddress",
                        "device",
                        "listenAddress",
                        "location",
                        "name",
                        "token",
                        "version"
                    ]
                }
            }
        },
        "sdm:index/NodeGatewayMaintenanceWindow:NodeGatewayMaintenanceWindow": {
            "properties": {
                "cronSchedule": {
                    "type": "string"
                },
                "requireIdleness": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "cronSchedule",
                "requireIdleness"
            ]
        },
        "sdm:index/NodeRelay:NodeRelay": {
            "properties": {
                "device": {
                    "type": "string",
                    "description": "Device is a read only device name uploaded by the gateway process when it comes online.\n"
                },
                "gatewayFilter": {
                    "type": "string",
                    "description": "GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location is a read only network location uploaded by the gateway process when it comes online.\n"
                },
                "maintenanceWindows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/NodeRelayMaintenanceWindow:NodeRelayMaintenanceWindow"
                    },
                    "description": "Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "version": {
                    "type": "string",
                    "description": "Version is a read only sdm binary version uploaded by the gateway process when it comes online.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "device",
                        "location",
                        "name",
                        "token",
                        "version"
                    ]
                }
            }
        },
        "sdm:index/NodeRelayMaintenanceWindow:NodeRelayMaintenanceWindow": {
            "properties": {
                "cronSchedule": {
                    "type": "string"
                },
                "requireIdleness": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "cronSchedule",
                "requireIdleness"
            ]
        },
        "sdm:index/ResourceAks:ResourceAks": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "The certificate to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientKey": {
                    "type": "string",
                    "description": "The key to authenticate TLS connections with.\n",
                    "secret": true
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "port",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAksBasicAuth:ResourceAksBasicAuth": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "port",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAksServiceAccount:ResourceAksServiceAccount": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The API token to authenticate with.\n* kubernetes_user_impersonation:\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "port",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAksServiceAccountUserImpersonation:ResourceAksServiceAccountUserImpersonation": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The API token to authenticate with.\n* kubernetes_user_impersonation:\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "port",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAksUserImpersonation:ResourceAksUserImpersonation": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "The certificate to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientKey": {
                    "type": "string",
                    "description": "The key to authenticate TLS connections with.\n",
                    "secret": true
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "port",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAmazonEks:ResourceAmazonEks": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID to use to authenticate.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the cluster to connect to.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The Secret Access Key to use to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "endpoint",
                "name",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "clusterName",
                        "endpoint",
                        "name",
                        "portOverride",
                        "region",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAmazonEksInstanceProfile:ResourceAmazonEksInstanceProfile": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the cluster to connect to.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "endpoint",
                "name",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "clusterName",
                        "endpoint",
                        "name",
                        "portOverride",
                        "region",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAmazonEksInstanceProfileUserImpersonation:ResourceAmazonEksInstanceProfileUserImpersonation": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the cluster to connect to.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "endpoint",
                "name",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "clusterName",
                        "endpoint",
                        "name",
                        "portOverride",
                        "region",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAmazonEksUserImpersonation:ResourceAmazonEksUserImpersonation": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID to use to authenticate.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the cluster to connect to.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The Secret Access Key to use to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "clusterName",
                "endpoint",
                "name",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "clusterName",
                        "endpoint",
                        "name",
                        "portOverride",
                        "region",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAmazonEs:ResourceAmazonEs": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID to use to authenticate.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The Secret Access Key to use to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "name",
                        "portOverride",
                        "region",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAmazonmqAmqp091:ResourceAmazonmqAmqp091": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAthena:ResourceAthena": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID to use to authenticate.\n"
                },
                "athenaOutput": {
                    "type": "string",
                    "description": "The AWS S3 output location.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The Secret Access Key to use to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "athenaOutput"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "athenaOutput",
                        "bindInterface",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAuroraMysql:ResourceAuroraMysql": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "requireNativeAuth": {
                    "type": "boolean",
                    "description": "Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAuroraPostgres:ResourceAuroraPostgres": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAws:ResourceAws": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID to use to authenticate.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckRegion": {
                    "type": "string",
                    "description": "The AWS region healthcheck requests should attempt to connect to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The Secret Access Key to use to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "healthcheckRegion",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "healthcheckRegion",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAwsConsole:ResourceAwsConsole": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "enableEnvVariables": {
                    "type": "boolean",
                    "description": "If true, prefer environment variables to authenticate connection even if EC2 roles are configured.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "sessionExpiry": {
                    "type": "integer",
                    "description": "The length of time in seconds AWS console sessions will live before needing to reauthenticate.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "region",
                "subdomain"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "name",
                        "portOverride",
                        "region",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAwsConsoleStaticKeyPair:ResourceAwsConsoleStaticKeyPair": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID to use to authenticate.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The Secret Access Key to use to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "sessionExpiry": {
                    "type": "integer",
                    "description": "The length of time in seconds AWS console sessions will live before needing to reauthenticate.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "region",
                "subdomain"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "name",
                        "portOverride",
                        "region",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAzure:ResourceAzure": {
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The application ID to authenticate with.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The Azure AD directory (tenant) ID with which to authenticate.\n* sql_server_kerberos_ad:\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAzureCertificate:ResourceAzureCertificate": {
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The application ID to authenticate with.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "The certificate to authenticate TLS connections with.\n",
                    "secret": true
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The Azure AD directory (tenant) ID with which to authenticate.\n* sql_server_kerberos_ad:\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAzureMysql:ResourceAzureMysql": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "requireNativeAuth": {
                    "type": "boolean",
                    "description": "Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAzurePostgres:ResourceAzurePostgres": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceAzurePostgresManagedIdentity:ResourceAzurePostgresManagedIdentity": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceBigQuery:ResourceBigQuery": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key used to authenticate with the server.\n",
                    "secret": true
                },
                "project": {
                    "type": "string",
                    "description": "The project to connect to.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "name",
                "project"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "endpoint",
                        "name",
                        "portOverride",
                        "project",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceCassandra:ResourceCassandra": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceCitus:ResourceCitus": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceClustrix:ResourceClustrix": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "requireNativeAuth": {
                    "type": "boolean",
                    "description": "Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceCockroach:ResourceCockroach": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceDb2I:ResourceDb2I": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "port",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceDb2Luw:ResourceDb2Luw": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceDocumentDbHost:ResourceDocumentDbHost": {
            "properties": {
                "authDatabase": {
                    "type": "string",
                    "description": "The authentication database to use.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "authDatabase",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authDatabase",
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceDocumentDbReplicaSet:ResourceDocumentDbReplicaSet": {
            "properties": {
                "authDatabase": {
                    "type": "string",
                    "description": "The authentication database to use.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "connectToReplica": {
                    "type": "boolean",
                    "description": "Set to connect to a replica instead of the primary node.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "replicaSet": {
                    "type": "string",
                    "description": "The name of the mongo replicaset.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "authDatabase",
                "hostname",
                "name",
                "replicaSet"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authDatabase",
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "replicaSet",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceDruid:ResourceDruid": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceDynamoDb:ResourceDynamoDb": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID to use to authenticate.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The Secret Access Key to use to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "name",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "endpoint",
                        "name",
                        "portOverride",
                        "region",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceElastic:ResourceElastic": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceElasticacheRedis:ResourceElasticacheRedis": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceGcp:ResourceGcp": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "keyfile": {
                    "type": "string",
                    "description": "The service account keyfile to authenticate with.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "scopes": {
                    "type": "string",
                    "description": "Space separated scopes that this login should assume into when authenticating.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "scopes"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "name",
                        "portOverride",
                        "scopes",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceGoogleGke:ResourceGoogleGke": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "serviceAccountKey": {
                    "type": "string",
                    "description": "The service account key to authenticate with.\n",
                    "secret": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "endpoint",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceGoogleGkeUserImpersonation:ResourceGoogleGkeUserImpersonation": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "serviceAccountKey": {
                    "type": "string",
                    "description": "The service account key to authenticate with.\n",
                    "secret": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "endpoint",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceGreenplum:ResourceGreenplum": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceHttpAuth:ResourceHttpAuth": {
            "properties": {
                "authHeader": {
                    "type": "string",
                    "description": "The content to set as the authorization header.\n",
                    "secret": true
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "defaultPath": {
                    "type": "string",
                    "description": "Automatically redirect to this path upon connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "headersBlacklist": {
                    "type": "string",
                    "description": "Header names (e.g. Authorization), to omit from logs.\n"
                },
                "healthcheckPath": {
                    "type": "string",
                    "description": "This path will be used to check the health of your site.\n"
                },
                "hostOverride": {
                    "type": "string",
                    "description": "The host header will be overwritten with this field if provided.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The base address of your website without the path.\n* kubernetes:\n"
                }
            },
            "type": "object",
            "required": [
                "healthcheckPath",
                "name",
                "subdomain",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "healthcheckPath",
                        "name",
                        "subdomain",
                        "url"
                    ]
                }
            }
        },
        "sdm:index/ResourceHttpBasicAuth:ResourceHttpBasicAuth": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "defaultPath": {
                    "type": "string",
                    "description": "Automatically redirect to this path upon connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "headersBlacklist": {
                    "type": "string",
                    "description": "Header names (e.g. Authorization), to omit from logs.\n"
                },
                "healthcheckPath": {
                    "type": "string",
                    "description": "This path will be used to check the health of your site.\n"
                },
                "hostOverride": {
                    "type": "string",
                    "description": "The host header will be overwritten with this field if provided.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The base address of your website without the path.\n* kubernetes:\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "healthcheckPath",
                "name",
                "subdomain",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "healthcheckPath",
                        "name",
                        "subdomain",
                        "url"
                    ]
                }
            }
        },
        "sdm:index/ResourceHttpNoAuth:ResourceHttpNoAuth": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "defaultPath": {
                    "type": "string",
                    "description": "Automatically redirect to this path upon connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "headersBlacklist": {
                    "type": "string",
                    "description": "Header names (e.g. Authorization), to omit from logs.\n"
                },
                "healthcheckPath": {
                    "type": "string",
                    "description": "This path will be used to check the health of your site.\n"
                },
                "hostOverride": {
                    "type": "string",
                    "description": "The host header will be overwritten with this field if provided.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The base address of your website without the path.\n* kubernetes:\n"
                }
            },
            "type": "object",
            "required": [
                "healthcheckPath",
                "name",
                "subdomain",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "healthcheckPath",
                        "name",
                        "subdomain",
                        "url"
                    ]
                }
            }
        },
        "sdm:index/ResourceKubernetes:ResourceKubernetes": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "The certificate to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientKey": {
                    "type": "string",
                    "description": "The key to authenticate TLS connections with.\n",
                    "secret": true
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "port",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceKubernetesBasicAuth:ResourceKubernetesBasicAuth": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "port",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceKubernetesServiceAccount:ResourceKubernetesServiceAccount": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The API token to authenticate with.\n* kubernetes_user_impersonation:\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "port",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceKubernetesServiceAccountUserImpersonation:ResourceKubernetesServiceAccountUserImpersonation": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The API token to authenticate with.\n* kubernetes_user_impersonation:\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "port",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceKubernetesUserImpersonation:ResourceKubernetesUserImpersonation": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "The certificate to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientKey": {
                    "type": "string",
                    "description": "The key to authenticate TLS connections with.\n",
                    "secret": true
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "port",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceMaria:ResourceMaria": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "requireNativeAuth": {
                    "type": "boolean",
                    "description": "Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceMemcached:ResourceMemcached": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceMemsql:ResourceMemsql": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "requireNativeAuth": {
                    "type": "boolean",
                    "description": "Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceMongoHost:ResourceMongoHost": {
            "properties": {
                "authDatabase": {
                    "type": "string",
                    "description": "The authentication database to use.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "authDatabase",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authDatabase",
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceMongoLegacyHost:ResourceMongoLegacyHost": {
            "properties": {
                "authDatabase": {
                    "type": "string",
                    "description": "The authentication database to use.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "replicaSet": {
                    "type": "string",
                    "description": "The name of the mongo replicaset.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "authDatabase",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authDatabase",
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceMongoLegacyReplicaset:ResourceMongoLegacyReplicaset": {
            "properties": {
                "authDatabase": {
                    "type": "string",
                    "description": "The authentication database to use.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "connectToReplica": {
                    "type": "boolean",
                    "description": "Set to connect to a replica instead of the primary node.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "replicaSet": {
                    "type": "string",
                    "description": "The name of the mongo replicaset.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "authDatabase",
                "hostname",
                "name",
                "replicaSet"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authDatabase",
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "replicaSet",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceMongoReplicaSet:ResourceMongoReplicaSet": {
            "properties": {
                "authDatabase": {
                    "type": "string",
                    "description": "The authentication database to use.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "connectToReplica": {
                    "type": "boolean",
                    "description": "Set to connect to a replica instead of the primary node.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "replicaSet": {
                    "type": "string",
                    "description": "The name of the mongo replicaset.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "authDatabase",
                "hostname",
                "name",
                "replicaSet"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authDatabase",
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "replicaSet",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceMongoShardedCluster:ResourceMongoShardedCluster": {
            "properties": {
                "authDatabase": {
                    "type": "string",
                    "description": "The authentication database to use.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "authDatabase",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authDatabase",
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceMtlsMysql:ResourceMtlsMysql": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "The certificate to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientKey": {
                    "type": "string",
                    "description": "The key to authenticate TLS connections with.\n",
                    "secret": true
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "requireNativeAuth": {
                    "type": "boolean",
                    "description": "Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "serverName": {
                    "type": "string",
                    "description": "Server name for TLS verification (unverified by StrongDM if empty)\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceMtlsPostgres:ResourceMtlsPostgres": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "The certificate to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientKey": {
                    "type": "string",
                    "description": "The key to authenticate TLS connections with.\n",
                    "secret": true
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "serverName": {
                    "type": "string",
                    "description": "Server name for TLS verification (unverified by StrongDM if empty)\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceMysql:ResourceMysql": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "requireNativeAuth": {
                    "type": "boolean",
                    "description": "Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceNeptune:ResourceNeptune": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "endpoint",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceNeptuneIam:ResourceNeptuneIam": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID to use to authenticate.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The Secret Access Key to use to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "name",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "endpoint",
                        "name",
                        "portOverride",
                        "region",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceOracle:ResourceOracle": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "port",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourcePostgres:ResourcePostgres": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourcePresto:ResourcePresto": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceRabbitmqAmqp091:ResourceRabbitmqAmqp091": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceRawTcp:ResourceRawTcp": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceRdp:ResourceRdp": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "downgradeNlaConnections": {
                    "type": "boolean",
                    "description": "When set, network level authentication will not be used. May resolve unexpected authentication errors to older servers. When set, healthchecks cannot detect if a provided username / password pair is correct.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceRedis:ResourceRedis": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceRedshift:ResourceRedshift": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceSingleStore:ResourceSingleStore": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "requireNativeAuth": {
                    "type": "boolean",
                    "description": "Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceSnowflake:ResourceSnowflake": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The Schema to use to direct initial requests.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceSnowsight:ResourceSnowsight": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckUsername": {
                    "type": "string",
                    "description": "The StrongDM user email to use for healthchecks.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "samlMetadata": {
                    "type": "string",
                    "description": "The Metadata for your snowflake IDP integration\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "healthcheckUsername",
                "name",
                "subdomain"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "healthcheckUsername",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceSqlServer:ResourceSqlServer": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The Schema to use to direct initial requests.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceSqlServerAzureAd:ResourceSqlServerAzureAd": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The Azure AD application (client) ID with which to authenticate.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The Schema to use to direct initial requests.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The Azure AD client secret (application password) with which to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The Azure AD directory (tenant) ID with which to authenticate.\n* sql_server_kerberos_ad:\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceSqlServerKerberosAd:ResourceSqlServerKerberosAd": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "keytab": {
                    "type": "string",
                    "description": "The keytab file in base64 format containing an entry with the principal name (username@realm) and key version number with which to authenticate.\n",
                    "secret": true
                },
                "krbConfig": {
                    "type": "string",
                    "description": "The Kerberos 5 configuration file (krb5.conf) specifying the Active Directory server (KDC) for the configured realm.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "realm": {
                    "type": "string",
                    "description": "The Active Directory domain (realm) to which the configured username belongs.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The Schema to use to direct initial requests.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "serverSpn": {
                    "type": "string",
                    "description": "The Service Principal Name of the Microsoft SQL Server instance in Active Directory.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceSsh:ResourceSsh": {
            "properties": {
                "allowDeprecatedKeyExchanges": {
                    "type": "boolean",
                    "description": "Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "keyType": {
                    "type": "string",
                    "description": "The key type to use e.g. rsa-2048 or ed25519\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portForwarding": {
                    "type": "boolean",
                    "description": "Whether port forwarding is allowed through this server.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key to append to a server's authorized keys. This will be generated after resource creation.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "keyType",
                        "name",
                        "port",
                        "portOverride",
                        "publicKey",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceSshCert:ResourceSshCert": {
            "properties": {
                "allowDeprecatedKeyExchanges": {
                    "type": "boolean",
                    "description": "Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "keyType": {
                    "type": "string",
                    "description": "The key type to use e.g. rsa-2048 or ed25519\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portForwarding": {
                    "type": "boolean",
                    "description": "Whether port forwarding is allowed through this server.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "keyType",
                        "name",
                        "port",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceSshCustomerKey:ResourceSshCustomerKey": {
            "properties": {
                "allowDeprecatedKeyExchanges": {
                    "type": "boolean",
                    "description": "Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portForwarding": {
                    "type": "boolean",
                    "description": "Whether port forwarding is allowed through this server.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key used to authenticate with the server.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "port",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceSybase:ResourceSybase": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceSybaseIq:ResourceSybaseIq": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceTeradata:ResourceTeradata": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/ResourceTrino:ResourceTrino": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n",
                    "willReplaceOnChanges": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "hostname",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindInterface",
                        "database",
                        "hostname",
                        "name",
                        "portOverride",
                        "subdomain"
                    ]
                }
            }
        },
        "sdm:index/SecretStoreAws:SecretStoreAws": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to target e.g. us-east-1\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "region"
            ]
        },
        "sdm:index/SecretStoreAzureStore:SecretStoreAzureStore": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "vaultUri": {
                    "type": "string",
                    "description": "The URI of the key vault to target e.g. https://myvault.vault.azure.net\n* cyberark_conjur:\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "vaultUri"
            ]
        },
        "sdm:index/SecretStoreCyberarkConjur:SecretStoreCyberarkConjur": {
            "properties": {
                "appUrl": {
                    "type": "string",
                    "description": "The URL of the Cyberark instance\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "appUrl",
                "name"
            ]
        },
        "sdm:index/SecretStoreCyberarkPam:SecretStoreCyberarkPam": {
            "properties": {
                "appUrl": {
                    "type": "string",
                    "description": "The URL of the Cyberark instance\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "appUrl",
                "name"
            ]
        },
        "sdm:index/SecretStoreCyberarkPamExperimental:SecretStoreCyberarkPamExperimental": {
            "properties": {
                "appUrl": {
                    "type": "string",
                    "description": "The URL of the Cyberark instance\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "appUrl",
                "name"
            ]
        },
        "sdm:index/SecretStoreDelineaStore:SecretStoreDelineaStore": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "serverUrl": {
                    "type": "string",
                    "description": "The URL of the Delinea instance\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tenantName": {
                    "type": "string",
                    "description": "The tenant name to target\n* gcp_store:\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "sdm:index/SecretStoreGcpStore:SecretStoreGcpStore": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The GCP project ID to target.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "projectId"
            ]
        },
        "sdm:index/SecretStoreVaultApprole:SecretStoreVaultApprole": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to make requests within\n"
                },
                "serverAddress": {
                    "type": "string",
                    "description": "The URL of the Vault to target\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "serverAddress"
            ]
        },
        "sdm:index/SecretStoreVaultTls:SecretStoreVaultTls": {
            "properties": {
                "caCertPath": {
                    "type": "string",
                    "description": "A path to a CA file accessible by a Node\n"
                },
                "clientCertPath": {
                    "type": "string",
                    "description": "A path to a client certificate file accessible by a Node\n"
                },
                "clientKeyPath": {
                    "type": "string",
                    "description": "A path to a client key file accessible by a Node\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to make requests within\n"
                },
                "serverAddress": {
                    "type": "string",
                    "description": "The URL of the Vault to target\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "clientCertPath",
                "clientKeyPath",
                "name",
                "serverAddress"
            ]
        },
        "sdm:index/SecretStoreVaultToken:SecretStoreVaultToken": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to make requests within\n"
                },
                "serverAddress": {
                    "type": "string",
                    "description": "The URL of the Vault to target\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "serverAddress"
            ]
        },
        "sdm:index/getAccountAccount:getAccountAccount": {
            "properties": {
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getAccountAccountService:getAccountAccountService"
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getAccountAccountUser:getAccountAccountUser"
                    }
                }
            },
            "type": "object",
            "required": [
                "services",
                "users"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sdm:index/getAccountAccountService:getAccountAccountService": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the User.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Service.\n"
                },
                "suspended": {
                    "type": "boolean",
                    "description": "The User's suspended state.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getAccountAccountUser:getAccountAccountUser": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The User's email address. Must be unique.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "External ID is an alternative unique ID this user is represented by within an external service.\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "The User's first name.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the User.\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "The User's last name.\n"
                },
                "managedBy": {
                    "type": "string",
                    "description": "Managed By is a read only field for what service manages this user, e.g. StrongDM, Okta, Azure.\n"
                },
                "permissionLevel": {
                    "type": "string",
                    "description": "PermissionLevel is a read only field for the user's permission level e.g. admin, DBA, user.\n"
                },
                "suspended": {
                    "type": "boolean",
                    "description": "The User's suspended state.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "managedBy",
                "permissionLevel"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sdm:index/getAccountAttachmentAccountAttachment:getAccountAttachmentAccountAttachment": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The id of the account of this AccountAttachment.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the AccountAttachment.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "The id of the attached role of this AccountAttachment.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getNodeNode:getNodeNode": {
            "properties": {
                "gateways": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getNodeNodeGateway:getNodeNodeGateway"
                    }
                },
                "relays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getNodeNodeRelay:getNodeNodeRelay"
                    }
                }
            },
            "type": "object",
            "required": [
                "gateways",
                "relays"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sdm:index/getNodeNodeGateway:getNodeNodeGateway": {
            "properties": {
                "bindAddress": {
                    "type": "string",
                    "description": "The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to \"0.0.0.0:listen_address_port\".\n"
                },
                "device": {
                    "type": "string",
                    "description": "Device is a read only device name uploaded by the gateway process when it comes online.\n"
                },
                "gatewayFilter": {
                    "type": "string",
                    "description": "GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Relay.\n"
                },
                "listenAddress": {
                    "type": "string",
                    "description": "The public hostname/port tuple at which the gateway will be accessible to clients.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location is a read only network location uploaded by the gateway process when it comes online.\n"
                },
                "maintenanceWindows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getNodeNodeGatewayMaintenanceWindow:getNodeNodeGatewayMaintenanceWindow"
                    },
                    "description": "Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version is a read only sdm binary version uploaded by the gateway process when it comes online.\n"
                }
            },
            "type": "object",
            "required": [
                "device",
                "location",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sdm:index/getNodeNodeGatewayMaintenanceWindow:getNodeNodeGatewayMaintenanceWindow": {
            "properties": {
                "cronSchedule": {
                    "type": "string"
                },
                "requireIdleness": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "cronSchedule",
                "requireIdleness"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sdm:index/getNodeNodeRelay:getNodeNodeRelay": {
            "properties": {
                "device": {
                    "type": "string",
                    "description": "Device is a read only device name uploaded by the gateway process when it comes online.\n"
                },
                "gatewayFilter": {
                    "type": "string",
                    "description": "GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Relay.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location is a read only network location uploaded by the gateway process when it comes online.\n"
                },
                "maintenanceWindows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getNodeNodeRelayMaintenanceWindow:getNodeNodeRelayMaintenanceWindow"
                    },
                    "description": "Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version is a read only sdm binary version uploaded by the gateway process when it comes online.\n"
                }
            },
            "type": "object",
            "required": [
                "device",
                "location",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sdm:index/getNodeNodeRelayMaintenanceWindow:getNodeNodeRelayMaintenanceWindow": {
            "properties": {
                "cronSchedule": {
                    "type": "string"
                },
                "requireIdleness": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "cronSchedule",
                "requireIdleness"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sdm:index/getPeeringGroupNodePeeringGroupNode:getPeeringGroupNodePeeringGroupNode": {
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "Peering Group ID to which the node will be attached to.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Attachment.\n"
                },
                "nodeId": {
                    "type": "string",
                    "description": "Node ID to be attached.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getPeeringGroupPeerPeeringGroupPeer:getPeeringGroupPeerPeeringGroupPeer": {
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "Group ID from which the link will originate.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Attachment.\n"
                },
                "peersWithGroupId": {
                    "type": "string",
                    "description": "Peering Group ID to which Group ID will link.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getPeeringGroupPeeringGroup:getPeeringGroupPeeringGroup": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the PeeringGroup.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the PeeringGroup.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getPeeringGroupResourcePeeringGroupResource:getPeeringGroupResourcePeeringGroupResource": {
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "Peering Group ID to which the resource will be attached to.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Attachment.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "Resource ID to be attached.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getRemoteIdentityGroupRemoteIdentityGroup:getRemoteIdentityGroupRemoteIdentityGroup": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the RemoteIdentityGroup.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the RemoteIdentityGroup.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getRemoteIdentityRemoteIdentity:getRemoteIdentityRemoteIdentity": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account for this remote identity.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the RemoteIdentity.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The remote identity group.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to be used as the remote identity for this account.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResource:getResourceResource": {
            "properties": {
                "aks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAk:getResourceResourceAk"
                    }
                },
                "aksBasicAuths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAksBasicAuth:getResourceResourceAksBasicAuth"
                    }
                },
                "aksServiceAccountUserImpersonations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAksServiceAccountUserImpersonation:getResourceResourceAksServiceAccountUserImpersonation"
                    }
                },
                "aksServiceAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAksServiceAccount:getResourceResourceAksServiceAccount"
                    }
                },
                "aksUserImpersonations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAksUserImpersonation:getResourceResourceAksUserImpersonation"
                    }
                },
                "amazonEks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAmazonEk:getResourceResourceAmazonEk"
                    }
                },
                "amazonEksInstanceProfileUserImpersonations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAmazonEksInstanceProfileUserImpersonation:getResourceResourceAmazonEksInstanceProfileUserImpersonation"
                    }
                },
                "amazonEksInstanceProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAmazonEksInstanceProfile:getResourceResourceAmazonEksInstanceProfile"
                    }
                },
                "amazonEksUserImpersonations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAmazonEksUserImpersonation:getResourceResourceAmazonEksUserImpersonation"
                    }
                },
                "amazonEs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAmazonE:getResourceResourceAmazonE"
                    }
                },
                "amazonmqAmqp091s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAmazonmqAmqp091:getResourceResourceAmazonmqAmqp091"
                    }
                },
                "athenas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAthena:getResourceResourceAthena"
                    }
                },
                "auroraMysqls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAuroraMysql:getResourceResourceAuroraMysql"
                    }
                },
                "auroraPostgres": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAuroraPostgre:getResourceResourceAuroraPostgre"
                    }
                },
                "aws": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAw:getResourceResourceAw"
                    }
                },
                "awsConsoleStaticKeyPairs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAwsConsoleStaticKeyPair:getResourceResourceAwsConsoleStaticKeyPair"
                    }
                },
                "awsConsoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAwsConsole:getResourceResourceAwsConsole"
                    }
                },
                "azureCertificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAzureCertificate:getResourceResourceAzureCertificate"
                    }
                },
                "azureMysqls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAzureMysql:getResourceResourceAzureMysql"
                    }
                },
                "azurePostgres": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAzurePostgre:getResourceResourceAzurePostgre"
                    }
                },
                "azurePostgresManagedIdentities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAzurePostgresManagedIdentity:getResourceResourceAzurePostgresManagedIdentity"
                    }
                },
                "azures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceAzure:getResourceResourceAzure"
                    }
                },
                "bigQueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceBigQuery:getResourceResourceBigQuery"
                    }
                },
                "cassandras": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceCassandra:getResourceResourceCassandra"
                    }
                },
                "cituses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceCitus:getResourceResourceCitus"
                    }
                },
                "clustrixes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceClustrix:getResourceResourceClustrix"
                    }
                },
                "cockroaches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceCockroach:getResourceResourceCockroach"
                    }
                },
                "db2Is": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceDb2I:getResourceResourceDb2I"
                    }
                },
                "db2Luws": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceDb2Luw:getResourceResourceDb2Luw"
                    }
                },
                "documentDbHosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceDocumentDbHost:getResourceResourceDocumentDbHost"
                    }
                },
                "documentDbReplicaSets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceDocumentDbReplicaSet:getResourceResourceDocumentDbReplicaSet"
                    }
                },
                "druids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceDruid:getResourceResourceDruid"
                    }
                },
                "dynamoDbs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceDynamoDb:getResourceResourceDynamoDb"
                    }
                },
                "elasticacheRedis": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceElasticacheRedi:getResourceResourceElasticacheRedi"
                    }
                },
                "elastics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceElastic:getResourceResourceElastic"
                    }
                },
                "gcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceGcp:getResourceResourceGcp"
                    }
                },
                "googleGkeUserImpersonations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceGoogleGkeUserImpersonation:getResourceResourceGoogleGkeUserImpersonation"
                    }
                },
                "googleGkes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceGoogleGke:getResourceResourceGoogleGke"
                    }
                },
                "greenplums": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceGreenplum:getResourceResourceGreenplum"
                    }
                },
                "httpAuths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceHttpAuth:getResourceResourceHttpAuth"
                    }
                },
                "httpBasicAuths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceHttpBasicAuth:getResourceResourceHttpBasicAuth"
                    }
                },
                "httpNoAuths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceHttpNoAuth:getResourceResourceHttpNoAuth"
                    }
                },
                "kubernetes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceKubernete:getResourceResourceKubernete"
                    }
                },
                "kubernetesBasicAuths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceKubernetesBasicAuth:getResourceResourceKubernetesBasicAuth"
                    }
                },
                "kubernetesServiceAccountUserImpersonations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceKubernetesServiceAccountUserImpersonation:getResourceResourceKubernetesServiceAccountUserImpersonation"
                    }
                },
                "kubernetesServiceAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceKubernetesServiceAccount:getResourceResourceKubernetesServiceAccount"
                    }
                },
                "kubernetesUserImpersonations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceKubernetesUserImpersonation:getResourceResourceKubernetesUserImpersonation"
                    }
                },
                "marias": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceMaria:getResourceResourceMaria"
                    }
                },
                "memcacheds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceMemcached:getResourceResourceMemcached"
                    }
                },
                "memsqls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceMemsql:getResourceResourceMemsql"
                    }
                },
                "mongoHosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceMongoHost:getResourceResourceMongoHost"
                    }
                },
                "mongoLegacyHosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceMongoLegacyHost:getResourceResourceMongoLegacyHost"
                    }
                },
                "mongoLegacyReplicasets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceMongoLegacyReplicaset:getResourceResourceMongoLegacyReplicaset"
                    }
                },
                "mongoReplicaSets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceMongoReplicaSet:getResourceResourceMongoReplicaSet"
                    }
                },
                "mongoShardedClusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceMongoShardedCluster:getResourceResourceMongoShardedCluster"
                    }
                },
                "mtlsMysqls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceMtlsMysql:getResourceResourceMtlsMysql"
                    }
                },
                "mtlsPostgres": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceMtlsPostgre:getResourceResourceMtlsPostgre"
                    }
                },
                "mysqls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceMysql:getResourceResourceMysql"
                    }
                },
                "neptuneIams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceNeptuneIam:getResourceResourceNeptuneIam"
                    }
                },
                "neptunes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceNeptune:getResourceResourceNeptune"
                    }
                },
                "oracles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceOracle:getResourceResourceOracle"
                    }
                },
                "postgres": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourcePostgre:getResourceResourcePostgre"
                    }
                },
                "prestos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourcePresto:getResourceResourcePresto"
                    }
                },
                "rabbitmqAmqp091s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceRabbitmqAmqp091:getResourceResourceRabbitmqAmqp091"
                    }
                },
                "rawTcps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceRawTcp:getResourceResourceRawTcp"
                    }
                },
                "rdps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceRdp:getResourceResourceRdp"
                    }
                },
                "redis": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceRedi:getResourceResourceRedi"
                    }
                },
                "redshifts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceRedshift:getResourceResourceRedshift"
                    }
                },
                "singleStores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceSingleStore:getResourceResourceSingleStore"
                    }
                },
                "snowflakes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceSnowflake:getResourceResourceSnowflake"
                    }
                },
                "snowsights": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceSnowsight:getResourceResourceSnowsight"
                    }
                },
                "sqlServerAzureAds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceSqlServerAzureAd:getResourceResourceSqlServerAzureAd"
                    }
                },
                "sqlServerKerberosAds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceSqlServerKerberosAd:getResourceResourceSqlServerKerberosAd"
                    }
                },
                "sqlServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceSqlServer:getResourceResourceSqlServer"
                    }
                },
                "sshCerts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceSshCert:getResourceResourceSshCert"
                    }
                },
                "sshCustomerKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceSshCustomerKey:getResourceResourceSshCustomerKey"
                    }
                },
                "sshes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceSsh:getResourceResourceSsh"
                    }
                },
                "sybaseIqs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceSybaseIq:getResourceResourceSybaseIq"
                    }
                },
                "sybases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceSybase:getResourceResourceSybase"
                    }
                },
                "teradatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceTeradata:getResourceResourceTeradata"
                    }
                },
                "trinos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getResourceResourceTrino:getResourceResourceTrino"
                    }
                }
            },
            "type": "object",
            "required": [
                "aks",
                "aksBasicAuths",
                "aksServiceAccounts",
                "aksServiceAccountUserImpersonations",
                "aksUserImpersonations",
                "amazonEks",
                "amazonEksInstanceProfiles",
                "amazonEksInstanceProfileUserImpersonations",
                "amazonEksUserImpersonations",
                "amazonEs",
                "amazonmqAmqp091s",
                "athenas",
                "auroraMysqls",
                "auroraPostgres",
                "aws",
                "awsConsoles",
                "awsConsoleStaticKeyPairs",
                "azures",
                "azureCertificates",
                "azureMysqls",
                "azurePostgres",
                "azurePostgresManagedIdentities",
                "bigQueries",
                "cassandras",
                "cituses",
                "clustrixes",
                "cockroaches",
                "db2Is",
                "db2Luws",
                "documentDbHosts",
                "documentDbReplicaSets",
                "druids",
                "dynamoDbs",
                "elastics",
                "elasticacheRedis",
                "gcps",
                "googleGkes",
                "googleGkeUserImpersonations",
                "greenplums",
                "httpAuths",
                "httpBasicAuths",
                "httpNoAuths",
                "kubernetes",
                "kubernetesBasicAuths",
                "kubernetesServiceAccounts",
                "kubernetesServiceAccountUserImpersonations",
                "kubernetesUserImpersonations",
                "marias",
                "memcacheds",
                "memsqls",
                "mongoHosts",
                "mongoLegacyHosts",
                "mongoLegacyReplicasets",
                "mongoReplicaSets",
                "mongoShardedClusters",
                "mtlsMysqls",
                "mtlsPostgres",
                "mysqls",
                "neptunes",
                "neptuneIams",
                "oracles",
                "postgres",
                "prestos",
                "rabbitmqAmqp091s",
                "rawTcps",
                "rdps",
                "redis",
                "redshifts",
                "singleStores",
                "snowflakes",
                "snowsights",
                "sqlServers",
                "sqlServerAzureAds",
                "sqlServerKerberosAds",
                "sshes",
                "sshCerts",
                "sshCustomerKeys",
                "sybases",
                "sybaseIqs",
                "teradatas",
                "trinos"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sdm:index/getResourceResourceAk:getResourceResourceAk": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "The certificate to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientKey": {
                    "type": "string",
                    "description": "The key to authenticate TLS connections with.\n",
                    "secret": true
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAksBasicAuth:getResourceResourceAksBasicAuth": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAksServiceAccount:getResourceResourceAksServiceAccount": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The API token to authenticate with.\n* kubernetes_user_impersonation:\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAksServiceAccountUserImpersonation:getResourceResourceAksServiceAccountUserImpersonation": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The API token to authenticate with.\n* kubernetes_user_impersonation:\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAksUserImpersonation:getResourceResourceAksUserImpersonation": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "The certificate to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientKey": {
                    "type": "string",
                    "description": "The key to authenticate TLS connections with.\n",
                    "secret": true
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAmazonE:getResourceResourceAmazonE": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID to use to authenticate.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The Secret Access Key to use to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAmazonEk:getResourceResourceAmazonEk": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID to use to authenticate.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the cluster to connect to.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The Secret Access Key to use to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAmazonEksInstanceProfile:getResourceResourceAmazonEksInstanceProfile": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the cluster to connect to.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAmazonEksInstanceProfileUserImpersonation:getResourceResourceAmazonEksInstanceProfileUserImpersonation": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the cluster to connect to.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAmazonEksUserImpersonation:getResourceResourceAmazonEksUserImpersonation": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID to use to authenticate.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the cluster to connect to.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The Secret Access Key to use to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAmazonmqAmqp091:getResourceResourceAmazonmqAmqp091": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAthena:getResourceResourceAthena": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID to use to authenticate.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "output": {
                    "type": "string",
                    "description": "The AWS S3 output location.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The Secret Access Key to use to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAuroraMysql:getResourceResourceAuroraMysql": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "requireNativeAuth": {
                    "type": "boolean",
                    "description": "Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAuroraPostgre:getResourceResourceAuroraPostgre": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAw:getResourceResourceAw": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID to use to authenticate.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckRegion": {
                    "type": "string",
                    "description": "The AWS region healthcheck requests should attempt to connect to.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The Secret Access Key to use to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAwsConsole:getResourceResourceAwsConsole": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "enableEnvVariables": {
                    "type": "boolean",
                    "description": "If true, prefer environment variables to authenticate connection even if EC2 roles are configured.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "sessionExpiry": {
                    "type": "integer",
                    "description": "The length of time in seconds AWS console sessions will live before needing to reauthenticate.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAwsConsoleStaticKeyPair:getResourceResourceAwsConsoleStaticKeyPair": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID to use to authenticate.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The Secret Access Key to use to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "sessionExpiry": {
                    "type": "integer",
                    "description": "The length of time in seconds AWS console sessions will live before needing to reauthenticate.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAzure:getResourceResourceAzure": {
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The application ID to authenticate with.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The Azure AD directory (tenant) ID with which to authenticate.\n* sql_server_kerberos_ad:\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAzureCertificate:getResourceResourceAzureCertificate": {
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "The application ID to authenticate with.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "The certificate to authenticate TLS connections with.\n",
                    "secret": true
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The Azure AD directory (tenant) ID with which to authenticate.\n* sql_server_kerberos_ad:\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAzureMysql:getResourceResourceAzureMysql": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "requireNativeAuth": {
                    "type": "boolean",
                    "description": "Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAzurePostgre:getResourceResourceAzurePostgre": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceAzurePostgresManagedIdentity:getResourceResourceAzurePostgresManagedIdentity": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceBigQuery:getResourceResourceBigQuery": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key used to authenticate with the server.\n",
                    "secret": true
                },
                "project": {
                    "type": "string",
                    "description": "The project to connect to.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceCassandra:getResourceResourceCassandra": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceCitus:getResourceResourceCitus": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceClustrix:getResourceResourceClustrix": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "requireNativeAuth": {
                    "type": "boolean",
                    "description": "Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceCockroach:getResourceResourceCockroach": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceDb2I:getResourceResourceDb2I": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceDb2Luw:getResourceResourceDb2Luw": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceDocumentDbHost:getResourceResourceDocumentDbHost": {
            "properties": {
                "authDatabase": {
                    "type": "string",
                    "description": "The authentication database to use.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceDocumentDbReplicaSet:getResourceResourceDocumentDbReplicaSet": {
            "properties": {
                "authDatabase": {
                    "type": "string",
                    "description": "The authentication database to use.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "connectToReplica": {
                    "type": "boolean",
                    "description": "Set to connect to a replica instead of the primary node.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "replicaSet": {
                    "type": "string",
                    "description": "The name of the mongo replicaset.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceDruid:getResourceResourceDruid": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceDynamoDb:getResourceResourceDynamoDb": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID to use to authenticate.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The Secret Access Key to use to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceElastic:getResourceResourceElastic": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceElasticacheRedi:getResourceResourceElasticacheRedi": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceGcp:getResourceResourceGcp": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "keyfile": {
                    "type": "string",
                    "description": "The service account keyfile to authenticate with.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "scopes": {
                    "type": "string",
                    "description": "Space separated scopes that this login should assume into when authenticating.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceGoogleGke:getResourceResourceGoogleGke": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "serviceAccountKey": {
                    "type": "string",
                    "description": "The service account key to authenticate with.\n",
                    "secret": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceGoogleGkeUserImpersonation:getResourceResourceGoogleGkeUserImpersonation": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "serviceAccountKey": {
                    "type": "string",
                    "description": "The service account key to authenticate with.\n",
                    "secret": true
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceGreenplum:getResourceResourceGreenplum": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceHttpAuth:getResourceResourceHttpAuth": {
            "properties": {
                "authHeader": {
                    "type": "string",
                    "description": "The content to set as the authorization header.\n",
                    "secret": true
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "defaultPath": {
                    "type": "string",
                    "description": "Automatically redirect to this path upon connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "headersBlacklist": {
                    "type": "string",
                    "description": "Header names (e.g. Authorization), to omit from logs.\n"
                },
                "healthcheckPath": {
                    "type": "string",
                    "description": "This path will be used to check the health of your site.\n"
                },
                "hostOverride": {
                    "type": "string",
                    "description": "The host header will be overwritten with this field if provided.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The base address of your website without the path.\n* kubernetes:\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceHttpBasicAuth:getResourceResourceHttpBasicAuth": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "defaultPath": {
                    "type": "string",
                    "description": "Automatically redirect to this path upon connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "headersBlacklist": {
                    "type": "string",
                    "description": "Header names (e.g. Authorization), to omit from logs.\n"
                },
                "healthcheckPath": {
                    "type": "string",
                    "description": "This path will be used to check the health of your site.\n"
                },
                "hostOverride": {
                    "type": "string",
                    "description": "The host header will be overwritten with this field if provided.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The base address of your website without the path.\n* kubernetes:\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceHttpNoAuth:getResourceResourceHttpNoAuth": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "defaultPath": {
                    "type": "string",
                    "description": "Automatically redirect to this path upon connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "headersBlacklist": {
                    "type": "string",
                    "description": "Header names (e.g. Authorization), to omit from logs.\n"
                },
                "healthcheckPath": {
                    "type": "string",
                    "description": "This path will be used to check the health of your site.\n"
                },
                "hostOverride": {
                    "type": "string",
                    "description": "The host header will be overwritten with this field if provided.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The base address of your website without the path.\n* kubernetes:\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceKubernete:getResourceResourceKubernete": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "The certificate to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientKey": {
                    "type": "string",
                    "description": "The key to authenticate TLS connections with.\n",
                    "secret": true
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceKubernetesBasicAuth:getResourceResourceKubernetesBasicAuth": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceKubernetesServiceAccount:getResourceResourceKubernetesServiceAccount": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The API token to authenticate with.\n* kubernetes_user_impersonation:\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceKubernetesServiceAccountUserImpersonation:getResourceResourceKubernetesServiceAccountUserImpersonation": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The API token to authenticate with.\n* kubernetes_user_impersonation:\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceKubernetesUserImpersonation:getResourceResourceKubernetesUserImpersonation": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "The certificate to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientKey": {
                    "type": "string",
                    "description": "The key to authenticate TLS connections with.\n",
                    "secret": true
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckNamespace": {
                    "type": "string",
                    "description": "The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceMaria:getResourceResourceMaria": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "requireNativeAuth": {
                    "type": "boolean",
                    "description": "Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceMemcached:getResourceResourceMemcached": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceMemsql:getResourceResourceMemsql": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "requireNativeAuth": {
                    "type": "boolean",
                    "description": "Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceMongoHost:getResourceResourceMongoHost": {
            "properties": {
                "authDatabase": {
                    "type": "string",
                    "description": "The authentication database to use.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceMongoLegacyHost:getResourceResourceMongoLegacyHost": {
            "properties": {
                "authDatabase": {
                    "type": "string",
                    "description": "The authentication database to use.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "replicaSet": {
                    "type": "string",
                    "description": "The name of the mongo replicaset.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceMongoLegacyReplicaset:getResourceResourceMongoLegacyReplicaset": {
            "properties": {
                "authDatabase": {
                    "type": "string",
                    "description": "The authentication database to use.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "connectToReplica": {
                    "type": "boolean",
                    "description": "Set to connect to a replica instead of the primary node.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "replicaSet": {
                    "type": "string",
                    "description": "The name of the mongo replicaset.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceMongoReplicaSet:getResourceResourceMongoReplicaSet": {
            "properties": {
                "authDatabase": {
                    "type": "string",
                    "description": "The authentication database to use.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "connectToReplica": {
                    "type": "boolean",
                    "description": "Set to connect to a replica instead of the primary node.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "replicaSet": {
                    "type": "string",
                    "description": "The name of the mongo replicaset.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceMongoShardedCluster:getResourceResourceMongoShardedCluster": {
            "properties": {
                "authDatabase": {
                    "type": "string",
                    "description": "The authentication database to use.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceMtlsMysql:getResourceResourceMtlsMysql": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "The certificate to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientKey": {
                    "type": "string",
                    "description": "The key to authenticate TLS connections with.\n",
                    "secret": true
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "requireNativeAuth": {
                    "type": "boolean",
                    "description": "Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "Server name for TLS verification (unverified by StrongDM if empty)\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceMtlsPostgre:getResourceResourceMtlsPostgre": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "certificateAuthority": {
                    "type": "string",
                    "description": "The CA to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientCertificate": {
                    "type": "string",
                    "description": "The certificate to authenticate TLS connections with.\n",
                    "secret": true
                },
                "clientKey": {
                    "type": "string",
                    "description": "The key to authenticate TLS connections with.\n",
                    "secret": true
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "Server name for TLS verification (unverified by StrongDM if empty)\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceMysql:getResourceResourceMysql": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "requireNativeAuth": {
                    "type": "boolean",
                    "description": "Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceNeptune:getResourceResourceNeptune": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceNeptuneIam:getResourceResourceNeptuneIam": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The Access Key ID to use to authenticate.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to connect to.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "The role to assume after logging in.\n"
                },
                "roleExternalId": {
                    "type": "string",
                    "description": "The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The Secret Access Key to use to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceOracle:getResourceResourceOracle": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourcePostgre:getResourceResourcePostgre": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourcePresto:getResourceResourcePresto": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceRabbitmqAmqp091:getResourceResourceRabbitmqAmqp091": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceRawTcp:getResourceResourceRawTcp": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceRdp:getResourceResourceRdp": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "downgradeNlaConnections": {
                    "type": "boolean",
                    "description": "When set, network level authentication will not be used. May resolve unexpected authentication errors to older servers. When set, healthchecks cannot detect if a provided username / password pair is correct.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceRedi:getResourceResourceRedi": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tlsRequired": {
                    "type": "boolean",
                    "description": "If set, TLS must be used to connect to this resource.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceRedshift:getResourceResourceRedshift": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceSingleStore:getResourceResourceSingleStore": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "requireNativeAuth": {
                    "type": "boolean",
                    "description": "Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "useAzureSingleServerUsernames": {
                    "type": "boolean",
                    "description": "If true, appends the hostname to the username when hitting a database.azure.com address\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceSnowflake:getResourceResourceSnowflake": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The Schema to use to direct initial requests.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceSnowsight:getResourceResourceSnowsight": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "healthcheckUsername": {
                    "type": "string",
                    "description": "The StrongDM user email to use for healthchecks.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "samlMetadata": {
                    "type": "string",
                    "description": "The Metadata for your snowflake IDP integration\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceSqlServer:getResourceResourceSqlServer": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The Schema to use to direct initial requests.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceSqlServerAzureAd:getResourceResourceSqlServerAzureAd": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The Azure AD application (client) ID with which to authenticate.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The Schema to use to direct initial requests.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The Azure AD client secret (application password) with which to authenticate.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The Azure AD directory (tenant) ID with which to authenticate.\n* sql_server_kerberos_ad:\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceSqlServerKerberosAd:getResourceResourceSqlServerKerberosAd": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "keytab": {
                    "type": "string",
                    "description": "The keytab file in base64 format containing an entry with the principal name (username@realm) and key version number with which to authenticate.\n",
                    "secret": true
                },
                "krbConfig": {
                    "type": "string",
                    "description": "The Kerberos 5 configuration file (krb5.conf) specifying the Active Directory server (KDC) for the configured realm.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "overrideDatabase": {
                    "type": "boolean",
                    "description": "If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "realm": {
                    "type": "string",
                    "description": "The Active Directory domain (realm) to which the configured username belongs.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The Schema to use to direct initial requests.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "serverSpn": {
                    "type": "string",
                    "description": "The Service Principal Name of the Microsoft SQL Server instance in Active Directory.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceSsh:getResourceResourceSsh": {
            "properties": {
                "allowDeprecatedKeyExchanges": {
                    "type": "boolean",
                    "description": "Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "keyType": {
                    "type": "string",
                    "description": "The key type to use e.g. rsa-2048 or ed25519\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portForwarding": {
                    "type": "boolean",
                    "description": "Whether port forwarding is allowed through this server.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key to append to a server's authorized keys. This will be generated after resource creation.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object",
            "required": [
                "publicKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sdm:index/getResourceResourceSshCert:getResourceResourceSshCert": {
            "properties": {
                "allowDeprecatedKeyExchanges": {
                    "type": "boolean",
                    "description": "Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "keyType": {
                    "type": "string",
                    "description": "The key type to use e.g. rsa-2048 or ed25519\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portForwarding": {
                    "type": "boolean",
                    "description": "Whether port forwarding is allowed through this server.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The ID of the remote identity group to use for remote identity connections.\n"
                },
                "remoteIdentityHealthcheckUsername": {
                    "type": "string",
                    "description": "The username to use for healthchecks, when clients otherwise connect with their own remote identity username.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceSshCustomerKey:getResourceResourceSshCustomerKey": {
            "properties": {
                "allowDeprecatedKeyExchanges": {
                    "type": "boolean",
                    "description": "Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.\n"
                },
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portForwarding": {
                    "type": "boolean",
                    "description": "Whether port forwarding is allowed through this server.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key used to authenticate with the server.\n",
                    "secret": true
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceSybase:getResourceResourceSybase": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceSybaseIq:getResourceResourceSybaseIq": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceTeradata:getResourceResourceTeradata": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getResourceResourceTrino:getResourceResourceTrino": {
            "properties": {
                "bindInterface": {
                    "type": "string",
                    "description": "The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.\n"
                },
                "egressFilter": {
                    "type": "string",
                    "description": "A filter applied to the routing logic to pin datasource to nodes.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to authenticate with.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                },
                "portOverride": {
                    "type": "integer",
                    "description": "The local port used by clients to connect to this resource.\n"
                },
                "secretStoreId": {
                    "type": "string",
                    "description": "ID of the secret store containing credentials for this resource, if any.\n"
                },
                "subdomain": {
                    "type": "string",
                    "description": "Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to authenticate with.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getRoleRole:getRoleRole": {
            "properties": {
                "accessRules": {
                    "type": "string",
                    "description": "AccessRules is a list of access rules defining the resources this Role has access to.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the Role.\n"
                },
                "managedBy": {
                    "type": "string",
                    "description": "Managed By is a read only field for what service manages this role, e.g. StrongDM, Okta, Azure.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Role.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "managedBy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sdm:index/getSecretStoreSecretStore:getSecretStoreSecretStore": {
            "properties": {
                "aws": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getSecretStoreSecretStoreAw:getSecretStoreSecretStoreAw"
                    }
                },
                "azureStores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getSecretStoreSecretStoreAzureStore:getSecretStoreSecretStoreAzureStore"
                    }
                },
                "cyberarkConjurs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getSecretStoreSecretStoreCyberarkConjur:getSecretStoreSecretStoreCyberarkConjur"
                    }
                },
                "cyberarkPamExperimentals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getSecretStoreSecretStoreCyberarkPamExperimental:getSecretStoreSecretStoreCyberarkPamExperimental"
                    }
                },
                "cyberarkPams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getSecretStoreSecretStoreCyberarkPam:getSecretStoreSecretStoreCyberarkPam"
                    }
                },
                "delineaStores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getSecretStoreSecretStoreDelineaStore:getSecretStoreSecretStoreDelineaStore"
                    }
                },
                "gcpStores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getSecretStoreSecretStoreGcpStore:getSecretStoreSecretStoreGcpStore"
                    }
                },
                "vaultApproles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getSecretStoreSecretStoreVaultApprole:getSecretStoreSecretStoreVaultApprole"
                    }
                },
                "vaultTls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getSecretStoreSecretStoreVaultTl:getSecretStoreSecretStoreVaultTl"
                    }
                },
                "vaultTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sdm:index/getSecretStoreSecretStoreVaultToken:getSecretStoreSecretStoreVaultToken"
                    }
                }
            },
            "type": "object",
            "required": [
                "aws",
                "azureStores",
                "cyberarkConjurs",
                "cyberarkPams",
                "cyberarkPamExperimentals",
                "delineaStores",
                "gcpStores",
                "vaultApproles",
                "vaultTls",
                "vaultTokens"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sdm:index/getSecretStoreSecretStoreAw:getSecretStoreSecretStoreAw": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the SecretStore.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region to target e.g. us-east-1\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getSecretStoreSecretStoreAzureStore:getSecretStoreSecretStoreAzureStore": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the SecretStore.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "vaultUri": {
                    "type": "string",
                    "description": "The URI of the key vault to target e.g. https://myvault.vault.azure.net\n* cyberark_conjur:\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getSecretStoreSecretStoreCyberarkConjur:getSecretStoreSecretStoreCyberarkConjur": {
            "properties": {
                "appUrl": {
                    "type": "string",
                    "description": "The URL of the Cyberark instance\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the SecretStore.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getSecretStoreSecretStoreCyberarkPam:getSecretStoreSecretStoreCyberarkPam": {
            "properties": {
                "appUrl": {
                    "type": "string",
                    "description": "The URL of the Cyberark instance\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the SecretStore.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getSecretStoreSecretStoreCyberarkPamExperimental:getSecretStoreSecretStoreCyberarkPamExperimental": {
            "properties": {
                "appUrl": {
                    "type": "string",
                    "description": "The URL of the Cyberark instance\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the SecretStore.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getSecretStoreSecretStoreDelineaStore:getSecretStoreSecretStoreDelineaStore": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the SecretStore.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "serverUrl": {
                    "type": "string",
                    "description": "The URL of the Delinea instance\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                },
                "tenantName": {
                    "type": "string",
                    "description": "The tenant name to target\n* gcp_store:\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getSecretStoreSecretStoreGcpStore:getSecretStoreSecretStoreGcpStore": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the SecretStore.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The GCP project ID to target.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getSecretStoreSecretStoreVaultApprole:getSecretStoreSecretStoreVaultApprole": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the SecretStore.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to make requests within\n"
                },
                "serverAddress": {
                    "type": "string",
                    "description": "The URL of the Vault to target\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getSecretStoreSecretStoreVaultTl:getSecretStoreSecretStoreVaultTl": {
            "properties": {
                "caCertPath": {
                    "type": "string",
                    "description": "A path to a CA file accessible by a Node\n"
                },
                "clientCertPath": {
                    "type": "string",
                    "description": "A path to a client certificate file accessible by a Node\n"
                },
                "clientKeyPath": {
                    "type": "string",
                    "description": "A path to a client key file accessible by a Node\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the SecretStore.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to make requests within\n"
                },
                "serverAddress": {
                    "type": "string",
                    "description": "The URL of the Vault to target\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        },
        "sdm:index/getSecretStoreSecretStoreVaultToken:getSecretStoreSecretStoreVaultToken": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the SecretStore.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the SecretStore.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace to make requests within\n"
                },
                "serverAddress": {
                    "type": "string",
                    "description": "The URL of the Vault to target\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "type": "object"
        }
    },
    "provider": {
        "description": "The provider type for the sdm package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiAccessKey": {
                "type": "string",
                "description": "A GUID identifying the API key used to authenticate with the StrongDM API.\n"
            },
            "apiSecretKey": {
                "type": "string",
                "description": "A base64 encoded secret key used to authenticate with the StrongDM API.\n"
            },
            "host": {
                "type": "string",
                "description": "The host and port of the StrongDM API endpoint.\n"
            },
            "retryRateLimitErrors": {
                "type": "boolean",
                "description": "Whether experienced rate limits should cause the client to sleep instead of erroring out\n"
            }
        },
        "inputProperties": {
            "apiAccessKey": {
                "type": "string",
                "description": "A GUID identifying the API key used to authenticate with the StrongDM API.\n"
            },
            "apiSecretKey": {
                "type": "string",
                "description": "A base64 encoded secret key used to authenticate with the StrongDM API.\n"
            },
            "host": {
                "type": "string",
                "description": "The host and port of the StrongDM API endpoint.\n"
            },
            "retryRateLimitErrors": {
                "type": "boolean",
                "description": "Whether experienced rate limits should cause the client to sleep instead of erroring out\n"
            }
        }
    },
    "resources": {
        "sdm:index/account:Account": {
            "description": "Accounts are users that have access to strongDM. There are two types of accounts:\n 1. **Users:** humans who are authenticated through username and password or SSO.\n 2. **Service Accounts:** machines that are authenticated using a service token.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sdm from \"@pierskarsenbarg/sdm\";\n\nconst test_user = new sdm.Account(\"test-user\", {user: {\n    email: \"albob@strongdm.com\",\n    firstName: \"al\",\n    lastName: \"bob\",\n    tags: {\n        env: \"dev\",\n        region: \"us-west\",\n    },\n}});\nconst test_service = new sdm.Account(\"test-service\", {service: {\n    name: \"test-service\",\n    tags: {\n        env: \"dev\",\n        region: \"us-west\",\n    },\n}});\n```\n```python\nimport pulumi\nimport pierskarsenbarg_pulumi_sdm as sdm\n\ntest_user = sdm.Account(\"test-user\", user=sdm.AccountUserArgs(\n    email=\"albob@strongdm.com\",\n    first_name=\"al\",\n    last_name=\"bob\",\n    tags={\n        \"env\": \"dev\",\n        \"region\": \"us-west\",\n    },\n))\ntest_service = sdm.Account(\"test-service\", service=sdm.AccountServiceArgs(\n    name=\"test-service\",\n    tags={\n        \"env\": \"dev\",\n        \"region\": \"us-west\",\n    },\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sdm = PiersKarsenbarg.Sdm;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_user = new Sdm.Account(\"test-user\", new()\n    {\n        User = new Sdm.Inputs.AccountUserArgs\n        {\n            Email = \"albob@strongdm.com\",\n            FirstName = \"al\",\n            LastName = \"bob\",\n            Tags = \n            {\n                { \"env\", \"dev\" },\n                { \"region\", \"us-west\" },\n            },\n        },\n    });\n\n    var test_service = new Sdm.Account(\"test-service\", new()\n    {\n        Service = new Sdm.Inputs.AccountServiceArgs\n        {\n            Name = \"test-service\",\n            Tags = \n            {\n                { \"env\", \"dev\" },\n                { \"region\", \"us-west\" },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sdm.NewAccount(ctx, \"test-user\", \u0026sdm.AccountArgs{\n\t\t\tUser: \u0026sdm.AccountUserArgs{\n\t\t\t\tEmail:     pulumi.String(\"albob@strongdm.com\"),\n\t\t\t\tFirstName: pulumi.String(\"al\"),\n\t\t\t\tLastName:  pulumi.String(\"bob\"),\n\t\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\t\"env\":    pulumi.String(\"dev\"),\n\t\t\t\t\t\"region\": pulumi.String(\"us-west\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sdm.NewAccount(ctx, \"test-service\", \u0026sdm.AccountArgs{\n\t\t\tService: \u0026sdm.AccountServiceArgs{\n\t\t\t\tName: pulumi.String(\"test-service\"),\n\t\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\t\"env\":    pulumi.String(\"dev\"),\n\t\t\t\t\t\"region\": pulumi.String(\"us-west\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sdm.Account;\nimport com.pulumi.sdm.AccountArgs;\nimport com.pulumi.sdm.inputs.AccountUserArgs;\nimport com.pulumi.sdm.inputs.AccountServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_user = new Account(\"test-user\", AccountArgs.builder()        \n            .user(AccountUserArgs.builder()\n                .email(\"albob@strongdm.com\")\n                .firstName(\"al\")\n                .lastName(\"bob\")\n                .tags(Map.ofEntries(\n                    Map.entry(\"env\", \"dev\"),\n                    Map.entry(\"region\", \"us-west\")\n                ))\n                .build())\n            .build());\n\n        var test_service = new Account(\"test-service\", AccountArgs.builder()        \n            .service(AccountServiceArgs.builder()\n                .name(\"test-service\")\n                .tags(Map.ofEntries(\n                    Map.entry(\"env\", \"dev\"),\n                    Map.entry(\"region\", \"us-west\")\n                ))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-user:\n    type: sdm:Account\n    properties:\n      user:\n        email: albob@strongdm.com\n        firstName: al\n        lastName: bob\n        tags:\n          env: dev\n          region: us-west\n  test-service:\n    type: sdm:Account\n    properties:\n      service:\n        name: test-service\n        tags:\n          env: dev\n          region: us-west\n```\nThis resource can be imported using the import command.\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAccount can be imported using the id, e.g.,\n\n```sh\n $ pulumi import sdm:index/account:Account example a-12345678\n```\n\n ",
            "properties": {
                "service": {
                    "$ref": "#/types/sdm:index/AccountService:AccountService",
                    "description": "A Service is a service account that can connect to resources they are granted directly, or granted via roles. Services\nare typically automated jobs.\n"
                },
                "user": {
                    "$ref": "#/types/sdm:index/AccountUser:AccountUser",
                    "description": "A User can connect to resources they are granted directly, or granted via roles.\n"
                }
            },
            "inputProperties": {
                "service": {
                    "$ref": "#/types/sdm:index/AccountService:AccountService",
                    "description": "A Service is a service account that can connect to resources they are granted directly, or granted via roles. Services\nare typically automated jobs.\n"
                },
                "user": {
                    "$ref": "#/types/sdm:index/AccountUser:AccountUser",
                    "description": "A User can connect to resources they are granted directly, or granted via roles.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Account resources.\n",
                "properties": {
                    "service": {
                        "$ref": "#/types/sdm:index/AccountService:AccountService",
                        "description": "A Service is a service account that can connect to resources they are granted directly, or granted via roles. Services\nare typically automated jobs.\n"
                    },
                    "user": {
                        "$ref": "#/types/sdm:index/AccountUser:AccountUser",
                        "description": "A User can connect to resources they are granted directly, or granted via roles.\n"
                    }
                },
                "type": "object"
            }
        },
        "sdm:index/accountAttachment:AccountAttachment": {
            "description": "AccountAttachments assign an account to a role.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sdm from \"@pierskarsenbarg/sdm\";\n\nconst testAccountAttachment = new sdm.AccountAttachment(\"testAccountAttachment\", {\n    accountId: \"a-00000054\",\n    roleId: \"r-12355562\",\n});\n```\n```python\nimport pulumi\nimport pierskarsenbarg_pulumi_sdm as sdm\n\ntest_account_attachment = sdm.AccountAttachment(\"testAccountAttachment\",\n    account_id=\"a-00000054\",\n    role_id=\"r-12355562\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sdm = PiersKarsenbarg.Sdm;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testAccountAttachment = new Sdm.AccountAttachment(\"testAccountAttachment\", new()\n    {\n        AccountId = \"a-00000054\",\n        RoleId = \"r-12355562\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sdm.NewAccountAttachment(ctx, \"testAccountAttachment\", \u0026sdm.AccountAttachmentArgs{\n\t\t\tAccountId: pulumi.String(\"a-00000054\"),\n\t\t\tRoleId:    pulumi.String(\"r-12355562\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sdm.AccountAttachment;\nimport com.pulumi.sdm.AccountAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testAccountAttachment = new AccountAttachment(\"testAccountAttachment\", AccountAttachmentArgs.builder()        \n            .accountId(\"a-00000054\")\n            .roleId(\"r-12355562\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testAccountAttachment:\n    type: sdm:AccountAttachment\n    properties:\n      accountId: a-00000054\n      roleId: r-12355562\n```\nThis resource can be imported using the import command.\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAccountAttachment can be imported using the id, e.g.,\n\n```sh\n $ pulumi import sdm:index/accountAttachment:AccountAttachment example aa-12345678\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The id of the account of this AccountAttachment.\n"
                },
                "roleId": {
                    "type": "string",
                    "description": "The id of the attached role of this AccountAttachment.\n"
                }
            },
            "required": [
                "accountId",
                "roleId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "The id of the account of this AccountAttachment.\n",
                    "willReplaceOnChanges": true
                },
                "roleId": {
                    "type": "string",
                    "description": "The id of the attached role of this AccountAttachment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accountId",
                "roleId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountAttachment resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The id of the account of this AccountAttachment.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleId": {
                        "type": "string",
                        "description": "The id of the attached role of this AccountAttachment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sdm:index/node:Node": {
            "description": "Nodes make up the strongDM network, and allow your users to connect securely to your resources.\n There are two types of nodes:\n 1. **Relay:** creates connectivity to your datasources, while maintaining the egress-only nature of your firewall\n 1. **Gateways:** a relay that also listens for connections from strongDM clients\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sdm from \"@pierskarsenbarg/sdm\";\n\nconst gateway = new sdm.Node(\"gateway\", {gateway: {\n    bindAddress: \"0.0.0.0:21222\",\n    listenAddress: \"165.23.40.1:21222\",\n    name: \"test-gateway\",\n    tags: {\n        env: \"dev\",\n        region: \"us-west\",\n    },\n}});\nconst relay = new sdm.Node(\"relay\", {relay: {\n    name: \"test-relay\",\n    tags: {\n        env: \"dev\",\n        region: \"us-west\",\n    },\n}});\n```\n```python\nimport pulumi\nimport pierskarsenbarg_pulumi_sdm as sdm\n\ngateway = sdm.Node(\"gateway\", gateway=sdm.NodeGatewayArgs(\n    bind_address=\"0.0.0.0:21222\",\n    listen_address=\"165.23.40.1:21222\",\n    name=\"test-gateway\",\n    tags={\n        \"env\": \"dev\",\n        \"region\": \"us-west\",\n    },\n))\nrelay = sdm.Node(\"relay\", relay=sdm.NodeRelayArgs(\n    name=\"test-relay\",\n    tags={\n        \"env\": \"dev\",\n        \"region\": \"us-west\",\n    },\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sdm = PiersKarsenbarg.Sdm;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var gateway = new Sdm.Node(\"gateway\", new()\n    {\n        Gateway = new Sdm.Inputs.NodeGatewayArgs\n        {\n            BindAddress = \"0.0.0.0:21222\",\n            ListenAddress = \"165.23.40.1:21222\",\n            Name = \"test-gateway\",\n            Tags = \n            {\n                { \"env\", \"dev\" },\n                { \"region\", \"us-west\" },\n            },\n        },\n    });\n\n    var relay = new Sdm.Node(\"relay\", new()\n    {\n        Relay = new Sdm.Inputs.NodeRelayArgs\n        {\n            Name = \"test-relay\",\n            Tags = \n            {\n                { \"env\", \"dev\" },\n                { \"region\", \"us-west\" },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sdm.NewNode(ctx, \"gateway\", \u0026sdm.NodeArgs{\n\t\t\tGateway: \u0026sdm.NodeGatewayArgs{\n\t\t\t\tBindAddress:   pulumi.String(\"0.0.0.0:21222\"),\n\t\t\t\tListenAddress: pulumi.String(\"165.23.40.1:21222\"),\n\t\t\t\tName:          pulumi.String(\"test-gateway\"),\n\t\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\t\"env\":    pulumi.String(\"dev\"),\n\t\t\t\t\t\"region\": pulumi.String(\"us-west\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sdm.NewNode(ctx, \"relay\", \u0026sdm.NodeArgs{\n\t\t\tRelay: \u0026sdm.NodeRelayArgs{\n\t\t\t\tName: pulumi.String(\"test-relay\"),\n\t\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\t\"env\":    pulumi.String(\"dev\"),\n\t\t\t\t\t\"region\": pulumi.String(\"us-west\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sdm.Node;\nimport com.pulumi.sdm.NodeArgs;\nimport com.pulumi.sdm.inputs.NodeGatewayArgs;\nimport com.pulumi.sdm.inputs.NodeRelayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var gateway = new Node(\"gateway\", NodeArgs.builder()        \n            .gateway(NodeGatewayArgs.builder()\n                .bindAddress(\"0.0.0.0:21222\")\n                .listenAddress(\"165.23.40.1:21222\")\n                .name(\"test-gateway\")\n                .tags(Map.ofEntries(\n                    Map.entry(\"env\", \"dev\"),\n                    Map.entry(\"region\", \"us-west\")\n                ))\n                .build())\n            .build());\n\n        var relay = new Node(\"relay\", NodeArgs.builder()        \n            .relay(NodeRelayArgs.builder()\n                .name(\"test-relay\")\n                .tags(Map.ofEntries(\n                    Map.entry(\"env\", \"dev\"),\n                    Map.entry(\"region\", \"us-west\")\n                ))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  gateway:\n    type: sdm:Node\n    properties:\n      gateway:\n        bindAddress: 0.0.0.0:21222\n        listenAddress: 165.23.40.1:21222\n        name: test-gateway\n        tags:\n          env: dev\n          region: us-west\n  relay:\n    type: sdm:Node\n    properties:\n      relay:\n        name: test-relay\n        tags:\n          env: dev\n          region: us-west\n```\nThis resource can be imported using the import command.\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNode can be imported using the id, e.g.,\n\n```sh\n $ pulumi import sdm:index/node:Node example n-12345678\n```\n\n ",
            "properties": {
                "gateway": {
                    "$ref": "#/types/sdm:index/NodeGateway:NodeGateway",
                    "description": "Gateway represents a StrongDM CLI installation running in gateway mode.\n"
                },
                "relay": {
                    "$ref": "#/types/sdm:index/NodeRelay:NodeRelay",
                    "description": "Relay represents a StrongDM CLI installation running in relay mode.\n"
                }
            },
            "inputProperties": {
                "gateway": {
                    "$ref": "#/types/sdm:index/NodeGateway:NodeGateway",
                    "description": "Gateway represents a StrongDM CLI installation running in gateway mode.\n"
                },
                "relay": {
                    "$ref": "#/types/sdm:index/NodeRelay:NodeRelay",
                    "description": "Relay represents a StrongDM CLI installation running in relay mode.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Node resources.\n",
                "properties": {
                    "gateway": {
                        "$ref": "#/types/sdm:index/NodeGateway:NodeGateway",
                        "description": "Gateway represents a StrongDM CLI installation running in gateway mode.\n"
                    },
                    "relay": {
                        "$ref": "#/types/sdm:index/NodeRelay:NodeRelay",
                        "description": "Relay represents a StrongDM CLI installation running in relay mode.\n"
                    }
                },
                "type": "object"
            }
        },
        "sdm:index/peeringGroup:PeeringGroup": {
            "description": "PeeringGroups are the building blocks used for explicit network topology making.\n They may be linked to other peering groups. Sets of PeeringGroupResource and PeeringGroupNode can be attached to a peering group.\nThis resource can be imported using the import command.\n\n\n## Import\n\nPeeringGroup can be imported using the id, e.g.,\n\n```sh\n $ pulumi import sdm:index/peeringGroup:PeeringGroup example g-12345678\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the PeeringGroup.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the PeeringGroup.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PeeringGroup resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Unique human-readable name of the PeeringGroup.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sdm:index/peeringGroupNode:PeeringGroupNode": {
            "description": "PeeringGroupNode represents the attachment between a PeeringGroup and a Node.\nThis resource can be imported using the import command.\n\n\n## Import\n\nPeeringGroupNode can be imported using the id, e.g.,\n\n```sh\n $ pulumi import sdm:index/peeringGroupNode:PeeringGroupNode example gn-12345678\n```\n\n ",
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "Peering Group ID to which the node will be attached to.\n"
                },
                "nodeId": {
                    "type": "string",
                    "description": "Node ID to be attached.\n"
                }
            },
            "required": [
                "groupId",
                "nodeId"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "string",
                    "description": "Peering Group ID to which the node will be attached to.\n",
                    "willReplaceOnChanges": true
                },
                "nodeId": {
                    "type": "string",
                    "description": "Node ID to be attached.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PeeringGroupNode resources.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "Peering Group ID to which the node will be attached to.\n",
                        "willReplaceOnChanges": true
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "Node ID to be attached.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sdm:index/peeringGroupPeer:PeeringGroupPeer": {
            "description": "PeeringGroupPeer represents the link between two PeeringGroups\nThis resource can be imported using the import command.\n\n\n## Import\n\nPeeringGroupPeer can be imported using the id, e.g.,\n\n```sh\n $ pulumi import sdm:index/peeringGroupPeer:PeeringGroupPeer example gp-12345678\n```\n\n ",
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "Group ID from which the link will originate.\n"
                },
                "peersWithGroupId": {
                    "type": "string",
                    "description": "Peering Group ID to which Group ID will link.\n"
                }
            },
            "required": [
                "groupId",
                "peersWithGroupId"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "string",
                    "description": "Group ID from which the link will originate.\n",
                    "willReplaceOnChanges": true
                },
                "peersWithGroupId": {
                    "type": "string",
                    "description": "Peering Group ID to which Group ID will link.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PeeringGroupPeer resources.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "Group ID from which the link will originate.\n",
                        "willReplaceOnChanges": true
                    },
                    "peersWithGroupId": {
                        "type": "string",
                        "description": "Peering Group ID to which Group ID will link.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sdm:index/peeringGroupResource:PeeringGroupResource": {
            "description": "PeeringGroupResource represents the attachment between a PeeringGroup and a Resource.\nThis resource can be imported using the import command.\n\n\n## Import\n\nPeeringGroupResource can be imported using the id, e.g.,\n\n```sh\n $ pulumi import sdm:index/peeringGroupResource:PeeringGroupResource example gr-12345678\n```\n\n ",
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "Peering Group ID to which the resource will be attached to.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "Resource ID to be attached.\n"
                }
            },
            "required": [
                "groupId",
                "resourceId"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "string",
                    "description": "Peering Group ID to which the resource will be attached to.\n",
                    "willReplaceOnChanges": true
                },
                "resourceId": {
                    "type": "string",
                    "description": "Resource ID to be attached.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PeeringGroupResource resources.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "Peering Group ID to which the resource will be attached to.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "Resource ID to be attached.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sdm:index/remoteIdentity:RemoteIdentity": {
            "description": "RemoteIdentities define the username to be used for a specific account\n when connecting to a remote resource using that group.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sdm.RemoteIdentity;\nimport com.pulumi.sdm.RemoteIdentityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var user = new RemoteIdentity(\"user\", RemoteIdentityArgs.builder()        \n            .id(\"i-0900909\")\n            .username(\"user\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  user:\n    type: sdm:RemoteIdentity\n    properties:\n      id: i-0900909\n      username: user\n```\nThis resource can be imported using the import command.\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRemoteIdentity can be imported using the id, e.g.,\n\n```sh\n $ pulumi import sdm:index/remoteIdentity:RemoteIdentity example i-12345678\n```\n\n ",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The account for this remote identity.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The remote identity group.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to be used as the remote identity for this account.\n"
                }
            },
            "required": [
                "accountId",
                "remoteIdentityGroupId",
                "username"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "The account for this remote identity.\n"
                },
                "remoteIdentityGroupId": {
                    "type": "string",
                    "description": "The remote identity group.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to be used as the remote identity for this account.\n"
                }
            },
            "requiredInputs": [
                "accountId",
                "remoteIdentityGroupId",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RemoteIdentity resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account for this remote identity.\n"
                    },
                    "remoteIdentityGroupId": {
                        "type": "string",
                        "description": "The remote identity group.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username to be used as the remote identity for this account.\n"
                    }
                },
                "type": "object"
            }
        },
        "sdm:index/resource:Resource": {
            "description": "\n\n\n## Import\n\nResource can be imported using the id, e.g.,\n\n```sh\n $ pulumi import sdm:index/resource:Resource example rs-12345678\n```\n\n ",
            "properties": {
                "aks": {
                    "$ref": "#/types/sdm:index/ResourceAks:ResourceAks"
                },
                "aksBasicAuth": {
                    "$ref": "#/types/sdm:index/ResourceAksBasicAuth:ResourceAksBasicAuth"
                },
                "aksServiceAccount": {
                    "$ref": "#/types/sdm:index/ResourceAksServiceAccount:ResourceAksServiceAccount"
                },
                "aksServiceAccountUserImpersonation": {
                    "$ref": "#/types/sdm:index/ResourceAksServiceAccountUserImpersonation:ResourceAksServiceAccountUserImpersonation"
                },
                "aksUserImpersonation": {
                    "$ref": "#/types/sdm:index/ResourceAksUserImpersonation:ResourceAksUserImpersonation"
                },
                "amazonEks": {
                    "$ref": "#/types/sdm:index/ResourceAmazonEks:ResourceAmazonEks"
                },
                "amazonEksInstanceProfile": {
                    "$ref": "#/types/sdm:index/ResourceAmazonEksInstanceProfile:ResourceAmazonEksInstanceProfile"
                },
                "amazonEksInstanceProfileUserImpersonation": {
                    "$ref": "#/types/sdm:index/ResourceAmazonEksInstanceProfileUserImpersonation:ResourceAmazonEksInstanceProfileUserImpersonation"
                },
                "amazonEksUserImpersonation": {
                    "$ref": "#/types/sdm:index/ResourceAmazonEksUserImpersonation:ResourceAmazonEksUserImpersonation"
                },
                "amazonEs": {
                    "$ref": "#/types/sdm:index/ResourceAmazonEs:ResourceAmazonEs"
                },
                "amazonmqAmqp091": {
                    "$ref": "#/types/sdm:index/ResourceAmazonmqAmqp091:ResourceAmazonmqAmqp091"
                },
                "athena": {
                    "$ref": "#/types/sdm:index/ResourceAthena:ResourceAthena"
                },
                "auroraMysql": {
                    "$ref": "#/types/sdm:index/ResourceAuroraMysql:ResourceAuroraMysql"
                },
                "auroraPostgres": {
                    "$ref": "#/types/sdm:index/ResourceAuroraPostgres:ResourceAuroraPostgres"
                },
                "aws": {
                    "$ref": "#/types/sdm:index/ResourceAws:ResourceAws"
                },
                "awsConsole": {
                    "$ref": "#/types/sdm:index/ResourceAwsConsole:ResourceAwsConsole",
                    "description": "AWSConsole is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                },
                "awsConsoleStaticKeyPair": {
                    "$ref": "#/types/sdm:index/ResourceAwsConsoleStaticKeyPair:ResourceAwsConsoleStaticKeyPair",
                    "description": "AWSConsoleStaticKeyPair is currently unstable, and its API may change, or it may be removed, without a major version\nbump.\n"
                },
                "azure": {
                    "$ref": "#/types/sdm:index/ResourceAzure:ResourceAzure"
                },
                "azureCertificate": {
                    "$ref": "#/types/sdm:index/ResourceAzureCertificate:ResourceAzureCertificate"
                },
                "azureMysql": {
                    "$ref": "#/types/sdm:index/ResourceAzureMysql:ResourceAzureMysql"
                },
                "azurePostgres": {
                    "$ref": "#/types/sdm:index/ResourceAzurePostgres:ResourceAzurePostgres"
                },
                "azurePostgresManagedIdentity": {
                    "$ref": "#/types/sdm:index/ResourceAzurePostgresManagedIdentity:ResourceAzurePostgresManagedIdentity",
                    "description": "AzurePostgresManagedIdentity is currently unstable, and its API may change, or it may be removed, without a major\nversion bump.\n"
                },
                "bigQuery": {
                    "$ref": "#/types/sdm:index/ResourceBigQuery:ResourceBigQuery"
                },
                "cassandra": {
                    "$ref": "#/types/sdm:index/ResourceCassandra:ResourceCassandra"
                },
                "citus": {
                    "$ref": "#/types/sdm:index/ResourceCitus:ResourceCitus"
                },
                "clustrix": {
                    "$ref": "#/types/sdm:index/ResourceClustrix:ResourceClustrix"
                },
                "cockroach": {
                    "$ref": "#/types/sdm:index/ResourceCockroach:ResourceCockroach"
                },
                "db2I": {
                    "$ref": "#/types/sdm:index/ResourceDb2I:ResourceDb2I"
                },
                "db2Luw": {
                    "$ref": "#/types/sdm:index/ResourceDb2Luw:ResourceDb2Luw"
                },
                "documentDbHost": {
                    "$ref": "#/types/sdm:index/ResourceDocumentDbHost:ResourceDocumentDbHost"
                },
                "documentDbReplicaSet": {
                    "$ref": "#/types/sdm:index/ResourceDocumentDbReplicaSet:ResourceDocumentDbReplicaSet"
                },
                "druid": {
                    "$ref": "#/types/sdm:index/ResourceDruid:ResourceDruid"
                },
                "dynamoDb": {
                    "$ref": "#/types/sdm:index/ResourceDynamoDb:ResourceDynamoDb"
                },
                "elastic": {
                    "$ref": "#/types/sdm:index/ResourceElastic:ResourceElastic"
                },
                "elasticacheRedis": {
                    "$ref": "#/types/sdm:index/ResourceElasticacheRedis:ResourceElasticacheRedis"
                },
                "gcp": {
                    "$ref": "#/types/sdm:index/ResourceGcp:ResourceGcp"
                },
                "googleGke": {
                    "$ref": "#/types/sdm:index/ResourceGoogleGke:ResourceGoogleGke"
                },
                "googleGkeUserImpersonation": {
                    "$ref": "#/types/sdm:index/ResourceGoogleGkeUserImpersonation:ResourceGoogleGkeUserImpersonation"
                },
                "greenplum": {
                    "$ref": "#/types/sdm:index/ResourceGreenplum:ResourceGreenplum"
                },
                "httpAuth": {
                    "$ref": "#/types/sdm:index/ResourceHttpAuth:ResourceHttpAuth"
                },
                "httpBasicAuth": {
                    "$ref": "#/types/sdm:index/ResourceHttpBasicAuth:ResourceHttpBasicAuth"
                },
                "httpNoAuth": {
                    "$ref": "#/types/sdm:index/ResourceHttpNoAuth:ResourceHttpNoAuth"
                },
                "kubernetes": {
                    "$ref": "#/types/sdm:index/ResourceKubernetes:ResourceKubernetes"
                },
                "kubernetesBasicAuth": {
                    "$ref": "#/types/sdm:index/ResourceKubernetesBasicAuth:ResourceKubernetesBasicAuth"
                },
                "kubernetesServiceAccount": {
                    "$ref": "#/types/sdm:index/ResourceKubernetesServiceAccount:ResourceKubernetesServiceAccount"
                },
                "kubernetesServiceAccountUserImpersonation": {
                    "$ref": "#/types/sdm:index/ResourceKubernetesServiceAccountUserImpersonation:ResourceKubernetesServiceAccountUserImpersonation"
                },
                "kubernetesUserImpersonation": {
                    "$ref": "#/types/sdm:index/ResourceKubernetesUserImpersonation:ResourceKubernetesUserImpersonation"
                },
                "maria": {
                    "$ref": "#/types/sdm:index/ResourceMaria:ResourceMaria"
                },
                "memcached": {
                    "$ref": "#/types/sdm:index/ResourceMemcached:ResourceMemcached"
                },
                "memsql": {
                    "$ref": "#/types/sdm:index/ResourceMemsql:ResourceMemsql"
                },
                "mongoHost": {
                    "$ref": "#/types/sdm:index/ResourceMongoHost:ResourceMongoHost",
                    "description": "MongoHost is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                },
                "mongoLegacyHost": {
                    "$ref": "#/types/sdm:index/ResourceMongoLegacyHost:ResourceMongoLegacyHost"
                },
                "mongoLegacyReplicaset": {
                    "$ref": "#/types/sdm:index/ResourceMongoLegacyReplicaset:ResourceMongoLegacyReplicaset"
                },
                "mongoReplicaSet": {
                    "$ref": "#/types/sdm:index/ResourceMongoReplicaSet:ResourceMongoReplicaSet",
                    "description": "MongoReplicaSet is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                },
                "mongoShardedCluster": {
                    "$ref": "#/types/sdm:index/ResourceMongoShardedCluster:ResourceMongoShardedCluster",
                    "description": "MongoShardedCluster is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                },
                "mtlsMysql": {
                    "$ref": "#/types/sdm:index/ResourceMtlsMysql:ResourceMtlsMysql",
                    "description": "MTLSMysql is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                },
                "mtlsPostgres": {
                    "$ref": "#/types/sdm:index/ResourceMtlsPostgres:ResourceMtlsPostgres"
                },
                "mysql": {
                    "$ref": "#/types/sdm:index/ResourceMysql:ResourceMysql"
                },
                "neptune": {
                    "$ref": "#/types/sdm:index/ResourceNeptune:ResourceNeptune"
                },
                "neptuneIam": {
                    "$ref": "#/types/sdm:index/ResourceNeptuneIam:ResourceNeptuneIam"
                },
                "oracle": {
                    "$ref": "#/types/sdm:index/ResourceOracle:ResourceOracle"
                },
                "postgres": {
                    "$ref": "#/types/sdm:index/ResourcePostgres:ResourcePostgres"
                },
                "presto": {
                    "$ref": "#/types/sdm:index/ResourcePresto:ResourcePresto"
                },
                "rabbitmqAmqp091": {
                    "$ref": "#/types/sdm:index/ResourceRabbitmqAmqp091:ResourceRabbitmqAmqp091"
                },
                "rawTcp": {
                    "$ref": "#/types/sdm:index/ResourceRawTcp:ResourceRawTcp"
                },
                "rdp": {
                    "$ref": "#/types/sdm:index/ResourceRdp:ResourceRdp"
                },
                "redis": {
                    "$ref": "#/types/sdm:index/ResourceRedis:ResourceRedis"
                },
                "redshift": {
                    "$ref": "#/types/sdm:index/ResourceRedshift:ResourceRedshift"
                },
                "singleStore": {
                    "$ref": "#/types/sdm:index/ResourceSingleStore:ResourceSingleStore"
                },
                "snowflake": {
                    "$ref": "#/types/sdm:index/ResourceSnowflake:ResourceSnowflake"
                },
                "snowsight": {
                    "$ref": "#/types/sdm:index/ResourceSnowsight:ResourceSnowsight",
                    "description": "Snowsight is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                },
                "sqlServer": {
                    "$ref": "#/types/sdm:index/ResourceSqlServer:ResourceSqlServer"
                },
                "sqlServerAzureAd": {
                    "$ref": "#/types/sdm:index/ResourceSqlServerAzureAd:ResourceSqlServerAzureAd"
                },
                "sqlServerKerberosAd": {
                    "$ref": "#/types/sdm:index/ResourceSqlServerKerberosAd:ResourceSqlServerKerberosAd"
                },
                "ssh": {
                    "$ref": "#/types/sdm:index/ResourceSsh:ResourceSsh"
                },
                "sshCert": {
                    "$ref": "#/types/sdm:index/ResourceSshCert:ResourceSshCert"
                },
                "sshCustomerKey": {
                    "$ref": "#/types/sdm:index/ResourceSshCustomerKey:ResourceSshCustomerKey"
                },
                "sybase": {
                    "$ref": "#/types/sdm:index/ResourceSybase:ResourceSybase"
                },
                "sybaseIq": {
                    "$ref": "#/types/sdm:index/ResourceSybaseIq:ResourceSybaseIq"
                },
                "teradata": {
                    "$ref": "#/types/sdm:index/ResourceTeradata:ResourceTeradata"
                },
                "trino": {
                    "$ref": "#/types/sdm:index/ResourceTrino:ResourceTrino",
                    "description": "Trino is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                }
            },
            "inputProperties": {
                "aks": {
                    "$ref": "#/types/sdm:index/ResourceAks:ResourceAks"
                },
                "aksBasicAuth": {
                    "$ref": "#/types/sdm:index/ResourceAksBasicAuth:ResourceAksBasicAuth"
                },
                "aksServiceAccount": {
                    "$ref": "#/types/sdm:index/ResourceAksServiceAccount:ResourceAksServiceAccount"
                },
                "aksServiceAccountUserImpersonation": {
                    "$ref": "#/types/sdm:index/ResourceAksServiceAccountUserImpersonation:ResourceAksServiceAccountUserImpersonation"
                },
                "aksUserImpersonation": {
                    "$ref": "#/types/sdm:index/ResourceAksUserImpersonation:ResourceAksUserImpersonation"
                },
                "amazonEks": {
                    "$ref": "#/types/sdm:index/ResourceAmazonEks:ResourceAmazonEks"
                },
                "amazonEksInstanceProfile": {
                    "$ref": "#/types/sdm:index/ResourceAmazonEksInstanceProfile:ResourceAmazonEksInstanceProfile"
                },
                "amazonEksInstanceProfileUserImpersonation": {
                    "$ref": "#/types/sdm:index/ResourceAmazonEksInstanceProfileUserImpersonation:ResourceAmazonEksInstanceProfileUserImpersonation"
                },
                "amazonEksUserImpersonation": {
                    "$ref": "#/types/sdm:index/ResourceAmazonEksUserImpersonation:ResourceAmazonEksUserImpersonation"
                },
                "amazonEs": {
                    "$ref": "#/types/sdm:index/ResourceAmazonEs:ResourceAmazonEs"
                },
                "amazonmqAmqp091": {
                    "$ref": "#/types/sdm:index/ResourceAmazonmqAmqp091:ResourceAmazonmqAmqp091"
                },
                "athena": {
                    "$ref": "#/types/sdm:index/ResourceAthena:ResourceAthena"
                },
                "auroraMysql": {
                    "$ref": "#/types/sdm:index/ResourceAuroraMysql:ResourceAuroraMysql"
                },
                "auroraPostgres": {
                    "$ref": "#/types/sdm:index/ResourceAuroraPostgres:ResourceAuroraPostgres"
                },
                "aws": {
                    "$ref": "#/types/sdm:index/ResourceAws:ResourceAws"
                },
                "awsConsole": {
                    "$ref": "#/types/sdm:index/ResourceAwsConsole:ResourceAwsConsole",
                    "description": "AWSConsole is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                },
                "awsConsoleStaticKeyPair": {
                    "$ref": "#/types/sdm:index/ResourceAwsConsoleStaticKeyPair:ResourceAwsConsoleStaticKeyPair",
                    "description": "AWSConsoleStaticKeyPair is currently unstable, and its API may change, or it may be removed, without a major version\nbump.\n"
                },
                "azure": {
                    "$ref": "#/types/sdm:index/ResourceAzure:ResourceAzure"
                },
                "azureCertificate": {
                    "$ref": "#/types/sdm:index/ResourceAzureCertificate:ResourceAzureCertificate"
                },
                "azureMysql": {
                    "$ref": "#/types/sdm:index/ResourceAzureMysql:ResourceAzureMysql"
                },
                "azurePostgres": {
                    "$ref": "#/types/sdm:index/ResourceAzurePostgres:ResourceAzurePostgres"
                },
                "azurePostgresManagedIdentity": {
                    "$ref": "#/types/sdm:index/ResourceAzurePostgresManagedIdentity:ResourceAzurePostgresManagedIdentity",
                    "description": "AzurePostgresManagedIdentity is currently unstable, and its API may change, or it may be removed, without a major\nversion bump.\n"
                },
                "bigQuery": {
                    "$ref": "#/types/sdm:index/ResourceBigQuery:ResourceBigQuery"
                },
                "cassandra": {
                    "$ref": "#/types/sdm:index/ResourceCassandra:ResourceCassandra"
                },
                "citus": {
                    "$ref": "#/types/sdm:index/ResourceCitus:ResourceCitus"
                },
                "clustrix": {
                    "$ref": "#/types/sdm:index/ResourceClustrix:ResourceClustrix"
                },
                "cockroach": {
                    "$ref": "#/types/sdm:index/ResourceCockroach:ResourceCockroach"
                },
                "db2I": {
                    "$ref": "#/types/sdm:index/ResourceDb2I:ResourceDb2I"
                },
                "db2Luw": {
                    "$ref": "#/types/sdm:index/ResourceDb2Luw:ResourceDb2Luw"
                },
                "documentDbHost": {
                    "$ref": "#/types/sdm:index/ResourceDocumentDbHost:ResourceDocumentDbHost"
                },
                "documentDbReplicaSet": {
                    "$ref": "#/types/sdm:index/ResourceDocumentDbReplicaSet:ResourceDocumentDbReplicaSet"
                },
                "druid": {
                    "$ref": "#/types/sdm:index/ResourceDruid:ResourceDruid"
                },
                "dynamoDb": {
                    "$ref": "#/types/sdm:index/ResourceDynamoDb:ResourceDynamoDb"
                },
                "elastic": {
                    "$ref": "#/types/sdm:index/ResourceElastic:ResourceElastic"
                },
                "elasticacheRedis": {
                    "$ref": "#/types/sdm:index/ResourceElasticacheRedis:ResourceElasticacheRedis"
                },
                "gcp": {
                    "$ref": "#/types/sdm:index/ResourceGcp:ResourceGcp"
                },
                "googleGke": {
                    "$ref": "#/types/sdm:index/ResourceGoogleGke:ResourceGoogleGke"
                },
                "googleGkeUserImpersonation": {
                    "$ref": "#/types/sdm:index/ResourceGoogleGkeUserImpersonation:ResourceGoogleGkeUserImpersonation"
                },
                "greenplum": {
                    "$ref": "#/types/sdm:index/ResourceGreenplum:ResourceGreenplum"
                },
                "httpAuth": {
                    "$ref": "#/types/sdm:index/ResourceHttpAuth:ResourceHttpAuth"
                },
                "httpBasicAuth": {
                    "$ref": "#/types/sdm:index/ResourceHttpBasicAuth:ResourceHttpBasicAuth"
                },
                "httpNoAuth": {
                    "$ref": "#/types/sdm:index/ResourceHttpNoAuth:ResourceHttpNoAuth"
                },
                "kubernetes": {
                    "$ref": "#/types/sdm:index/ResourceKubernetes:ResourceKubernetes"
                },
                "kubernetesBasicAuth": {
                    "$ref": "#/types/sdm:index/ResourceKubernetesBasicAuth:ResourceKubernetesBasicAuth"
                },
                "kubernetesServiceAccount": {
                    "$ref": "#/types/sdm:index/ResourceKubernetesServiceAccount:ResourceKubernetesServiceAccount"
                },
                "kubernetesServiceAccountUserImpersonation": {
                    "$ref": "#/types/sdm:index/ResourceKubernetesServiceAccountUserImpersonation:ResourceKubernetesServiceAccountUserImpersonation"
                },
                "kubernetesUserImpersonation": {
                    "$ref": "#/types/sdm:index/ResourceKubernetesUserImpersonation:ResourceKubernetesUserImpersonation"
                },
                "maria": {
                    "$ref": "#/types/sdm:index/ResourceMaria:ResourceMaria"
                },
                "memcached": {
                    "$ref": "#/types/sdm:index/ResourceMemcached:ResourceMemcached"
                },
                "memsql": {
                    "$ref": "#/types/sdm:index/ResourceMemsql:ResourceMemsql"
                },
                "mongoHost": {
                    "$ref": "#/types/sdm:index/ResourceMongoHost:ResourceMongoHost",
                    "description": "MongoHost is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                },
                "mongoLegacyHost": {
                    "$ref": "#/types/sdm:index/ResourceMongoLegacyHost:ResourceMongoLegacyHost"
                },
                "mongoLegacyReplicaset": {
                    "$ref": "#/types/sdm:index/ResourceMongoLegacyReplicaset:ResourceMongoLegacyReplicaset"
                },
                "mongoReplicaSet": {
                    "$ref": "#/types/sdm:index/ResourceMongoReplicaSet:ResourceMongoReplicaSet",
                    "description": "MongoReplicaSet is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                },
                "mongoShardedCluster": {
                    "$ref": "#/types/sdm:index/ResourceMongoShardedCluster:ResourceMongoShardedCluster",
                    "description": "MongoShardedCluster is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                },
                "mtlsMysql": {
                    "$ref": "#/types/sdm:index/ResourceMtlsMysql:ResourceMtlsMysql",
                    "description": "MTLSMysql is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                },
                "mtlsPostgres": {
                    "$ref": "#/types/sdm:index/ResourceMtlsPostgres:ResourceMtlsPostgres"
                },
                "mysql": {
                    "$ref": "#/types/sdm:index/ResourceMysql:ResourceMysql"
                },
                "neptune": {
                    "$ref": "#/types/sdm:index/ResourceNeptune:ResourceNeptune"
                },
                "neptuneIam": {
                    "$ref": "#/types/sdm:index/ResourceNeptuneIam:ResourceNeptuneIam"
                },
                "oracle": {
                    "$ref": "#/types/sdm:index/ResourceOracle:ResourceOracle"
                },
                "postgres": {
                    "$ref": "#/types/sdm:index/ResourcePostgres:ResourcePostgres"
                },
                "presto": {
                    "$ref": "#/types/sdm:index/ResourcePresto:ResourcePresto"
                },
                "rabbitmqAmqp091": {
                    "$ref": "#/types/sdm:index/ResourceRabbitmqAmqp091:ResourceRabbitmqAmqp091"
                },
                "rawTcp": {
                    "$ref": "#/types/sdm:index/ResourceRawTcp:ResourceRawTcp"
                },
                "rdp": {
                    "$ref": "#/types/sdm:index/ResourceRdp:ResourceRdp"
                },
                "redis": {
                    "$ref": "#/types/sdm:index/ResourceRedis:ResourceRedis"
                },
                "redshift": {
                    "$ref": "#/types/sdm:index/ResourceRedshift:ResourceRedshift"
                },
                "singleStore": {
                    "$ref": "#/types/sdm:index/ResourceSingleStore:ResourceSingleStore"
                },
                "snowflake": {
                    "$ref": "#/types/sdm:index/ResourceSnowflake:ResourceSnowflake"
                },
                "snowsight": {
                    "$ref": "#/types/sdm:index/ResourceSnowsight:ResourceSnowsight",
                    "description": "Snowsight is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                },
                "sqlServer": {
                    "$ref": "#/types/sdm:index/ResourceSqlServer:ResourceSqlServer"
                },
                "sqlServerAzureAd": {
                    "$ref": "#/types/sdm:index/ResourceSqlServerAzureAd:ResourceSqlServerAzureAd"
                },
                "sqlServerKerberosAd": {
                    "$ref": "#/types/sdm:index/ResourceSqlServerKerberosAd:ResourceSqlServerKerberosAd"
                },
                "ssh": {
                    "$ref": "#/types/sdm:index/ResourceSsh:ResourceSsh"
                },
                "sshCert": {
                    "$ref": "#/types/sdm:index/ResourceSshCert:ResourceSshCert"
                },
                "sshCustomerKey": {
                    "$ref": "#/types/sdm:index/ResourceSshCustomerKey:ResourceSshCustomerKey"
                },
                "sybase": {
                    "$ref": "#/types/sdm:index/ResourceSybase:ResourceSybase"
                },
                "sybaseIq": {
                    "$ref": "#/types/sdm:index/ResourceSybaseIq:ResourceSybaseIq"
                },
                "teradata": {
                    "$ref": "#/types/sdm:index/ResourceTeradata:ResourceTeradata"
                },
                "trino": {
                    "$ref": "#/types/sdm:index/ResourceTrino:ResourceTrino",
                    "description": "Trino is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Resource resources.\n",
                "properties": {
                    "aks": {
                        "$ref": "#/types/sdm:index/ResourceAks:ResourceAks"
                    },
                    "aksBasicAuth": {
                        "$ref": "#/types/sdm:index/ResourceAksBasicAuth:ResourceAksBasicAuth"
                    },
                    "aksServiceAccount": {
                        "$ref": "#/types/sdm:index/ResourceAksServiceAccount:ResourceAksServiceAccount"
                    },
                    "aksServiceAccountUserImpersonation": {
                        "$ref": "#/types/sdm:index/ResourceAksServiceAccountUserImpersonation:ResourceAksServiceAccountUserImpersonation"
                    },
                    "aksUserImpersonation": {
                        "$ref": "#/types/sdm:index/ResourceAksUserImpersonation:ResourceAksUserImpersonation"
                    },
                    "amazonEks": {
                        "$ref": "#/types/sdm:index/ResourceAmazonEks:ResourceAmazonEks"
                    },
                    "amazonEksInstanceProfile": {
                        "$ref": "#/types/sdm:index/ResourceAmazonEksInstanceProfile:ResourceAmazonEksInstanceProfile"
                    },
                    "amazonEksInstanceProfileUserImpersonation": {
                        "$ref": "#/types/sdm:index/ResourceAmazonEksInstanceProfileUserImpersonation:ResourceAmazonEksInstanceProfileUserImpersonation"
                    },
                    "amazonEksUserImpersonation": {
                        "$ref": "#/types/sdm:index/ResourceAmazonEksUserImpersonation:ResourceAmazonEksUserImpersonation"
                    },
                    "amazonEs": {
                        "$ref": "#/types/sdm:index/ResourceAmazonEs:ResourceAmazonEs"
                    },
                    "amazonmqAmqp091": {
                        "$ref": "#/types/sdm:index/ResourceAmazonmqAmqp091:ResourceAmazonmqAmqp091"
                    },
                    "athena": {
                        "$ref": "#/types/sdm:index/ResourceAthena:ResourceAthena"
                    },
                    "auroraMysql": {
                        "$ref": "#/types/sdm:index/ResourceAuroraMysql:ResourceAuroraMysql"
                    },
                    "auroraPostgres": {
                        "$ref": "#/types/sdm:index/ResourceAuroraPostgres:ResourceAuroraPostgres"
                    },
                    "aws": {
                        "$ref": "#/types/sdm:index/ResourceAws:ResourceAws"
                    },
                    "awsConsole": {
                        "$ref": "#/types/sdm:index/ResourceAwsConsole:ResourceAwsConsole",
                        "description": "AWSConsole is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                    },
                    "awsConsoleStaticKeyPair": {
                        "$ref": "#/types/sdm:index/ResourceAwsConsoleStaticKeyPair:ResourceAwsConsoleStaticKeyPair",
                        "description": "AWSConsoleStaticKeyPair is currently unstable, and its API may change, or it may be removed, without a major version\nbump.\n"
                    },
                    "azure": {
                        "$ref": "#/types/sdm:index/ResourceAzure:ResourceAzure"
                    },
                    "azureCertificate": {
                        "$ref": "#/types/sdm:index/ResourceAzureCertificate:ResourceAzureCertificate"
                    },
                    "azureMysql": {
                        "$ref": "#/types/sdm:index/ResourceAzureMysql:ResourceAzureMysql"
                    },
                    "azurePostgres": {
                        "$ref": "#/types/sdm:index/ResourceAzurePostgres:ResourceAzurePostgres"
                    },
                    "azurePostgresManagedIdentity": {
                        "$ref": "#/types/sdm:index/ResourceAzurePostgresManagedIdentity:ResourceAzurePostgresManagedIdentity",
                        "description": "AzurePostgresManagedIdentity is currently unstable, and its API may change, or it may be removed, without a major\nversion bump.\n"
                    },
                    "bigQuery": {
                        "$ref": "#/types/sdm:index/ResourceBigQuery:ResourceBigQuery"
                    },
                    "cassandra": {
                        "$ref": "#/types/sdm:index/ResourceCassandra:ResourceCassandra"
                    },
                    "citus": {
                        "$ref": "#/types/sdm:index/ResourceCitus:ResourceCitus"
                    },
                    "clustrix": {
                        "$ref": "#/types/sdm:index/ResourceClustrix:ResourceClustrix"
                    },
                    "cockroach": {
                        "$ref": "#/types/sdm:index/ResourceCockroach:ResourceCockroach"
                    },
                    "db2I": {
                        "$ref": "#/types/sdm:index/ResourceDb2I:ResourceDb2I"
                    },
                    "db2Luw": {
                        "$ref": "#/types/sdm:index/ResourceDb2Luw:ResourceDb2Luw"
                    },
                    "documentDbHost": {
                        "$ref": "#/types/sdm:index/ResourceDocumentDbHost:ResourceDocumentDbHost"
                    },
                    "documentDbReplicaSet": {
                        "$ref": "#/types/sdm:index/ResourceDocumentDbReplicaSet:ResourceDocumentDbReplicaSet"
                    },
                    "druid": {
                        "$ref": "#/types/sdm:index/ResourceDruid:ResourceDruid"
                    },
                    "dynamoDb": {
                        "$ref": "#/types/sdm:index/ResourceDynamoDb:ResourceDynamoDb"
                    },
                    "elastic": {
                        "$ref": "#/types/sdm:index/ResourceElastic:ResourceElastic"
                    },
                    "elasticacheRedis": {
                        "$ref": "#/types/sdm:index/ResourceElasticacheRedis:ResourceElasticacheRedis"
                    },
                    "gcp": {
                        "$ref": "#/types/sdm:index/ResourceGcp:ResourceGcp"
                    },
                    "googleGke": {
                        "$ref": "#/types/sdm:index/ResourceGoogleGke:ResourceGoogleGke"
                    },
                    "googleGkeUserImpersonation": {
                        "$ref": "#/types/sdm:index/ResourceGoogleGkeUserImpersonation:ResourceGoogleGkeUserImpersonation"
                    },
                    "greenplum": {
                        "$ref": "#/types/sdm:index/ResourceGreenplum:ResourceGreenplum"
                    },
                    "httpAuth": {
                        "$ref": "#/types/sdm:index/ResourceHttpAuth:ResourceHttpAuth"
                    },
                    "httpBasicAuth": {
                        "$ref": "#/types/sdm:index/ResourceHttpBasicAuth:ResourceHttpBasicAuth"
                    },
                    "httpNoAuth": {
                        "$ref": "#/types/sdm:index/ResourceHttpNoAuth:ResourceHttpNoAuth"
                    },
                    "kubernetes": {
                        "$ref": "#/types/sdm:index/ResourceKubernetes:ResourceKubernetes"
                    },
                    "kubernetesBasicAuth": {
                        "$ref": "#/types/sdm:index/ResourceKubernetesBasicAuth:ResourceKubernetesBasicAuth"
                    },
                    "kubernetesServiceAccount": {
                        "$ref": "#/types/sdm:index/ResourceKubernetesServiceAccount:ResourceKubernetesServiceAccount"
                    },
                    "kubernetesServiceAccountUserImpersonation": {
                        "$ref": "#/types/sdm:index/ResourceKubernetesServiceAccountUserImpersonation:ResourceKubernetesServiceAccountUserImpersonation"
                    },
                    "kubernetesUserImpersonation": {
                        "$ref": "#/types/sdm:index/ResourceKubernetesUserImpersonation:ResourceKubernetesUserImpersonation"
                    },
                    "maria": {
                        "$ref": "#/types/sdm:index/ResourceMaria:ResourceMaria"
                    },
                    "memcached": {
                        "$ref": "#/types/sdm:index/ResourceMemcached:ResourceMemcached"
                    },
                    "memsql": {
                        "$ref": "#/types/sdm:index/ResourceMemsql:ResourceMemsql"
                    },
                    "mongoHost": {
                        "$ref": "#/types/sdm:index/ResourceMongoHost:ResourceMongoHost",
                        "description": "MongoHost is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                    },
                    "mongoLegacyHost": {
                        "$ref": "#/types/sdm:index/ResourceMongoLegacyHost:ResourceMongoLegacyHost"
                    },
                    "mongoLegacyReplicaset": {
                        "$ref": "#/types/sdm:index/ResourceMongoLegacyReplicaset:ResourceMongoLegacyReplicaset"
                    },
                    "mongoReplicaSet": {
                        "$ref": "#/types/sdm:index/ResourceMongoReplicaSet:ResourceMongoReplicaSet",
                        "description": "MongoReplicaSet is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                    },
                    "mongoShardedCluster": {
                        "$ref": "#/types/sdm:index/ResourceMongoShardedCluster:ResourceMongoShardedCluster",
                        "description": "MongoShardedCluster is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                    },
                    "mtlsMysql": {
                        "$ref": "#/types/sdm:index/ResourceMtlsMysql:ResourceMtlsMysql",
                        "description": "MTLSMysql is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                    },
                    "mtlsPostgres": {
                        "$ref": "#/types/sdm:index/ResourceMtlsPostgres:ResourceMtlsPostgres"
                    },
                    "mysql": {
                        "$ref": "#/types/sdm:index/ResourceMysql:ResourceMysql"
                    },
                    "neptune": {
                        "$ref": "#/types/sdm:index/ResourceNeptune:ResourceNeptune"
                    },
                    "neptuneIam": {
                        "$ref": "#/types/sdm:index/ResourceNeptuneIam:ResourceNeptuneIam"
                    },
                    "oracle": {
                        "$ref": "#/types/sdm:index/ResourceOracle:ResourceOracle"
                    },
                    "postgres": {
                        "$ref": "#/types/sdm:index/ResourcePostgres:ResourcePostgres"
                    },
                    "presto": {
                        "$ref": "#/types/sdm:index/ResourcePresto:ResourcePresto"
                    },
                    "rabbitmqAmqp091": {
                        "$ref": "#/types/sdm:index/ResourceRabbitmqAmqp091:ResourceRabbitmqAmqp091"
                    },
                    "rawTcp": {
                        "$ref": "#/types/sdm:index/ResourceRawTcp:ResourceRawTcp"
                    },
                    "rdp": {
                        "$ref": "#/types/sdm:index/ResourceRdp:ResourceRdp"
                    },
                    "redis": {
                        "$ref": "#/types/sdm:index/ResourceRedis:ResourceRedis"
                    },
                    "redshift": {
                        "$ref": "#/types/sdm:index/ResourceRedshift:ResourceRedshift"
                    },
                    "singleStore": {
                        "$ref": "#/types/sdm:index/ResourceSingleStore:ResourceSingleStore"
                    },
                    "snowflake": {
                        "$ref": "#/types/sdm:index/ResourceSnowflake:ResourceSnowflake"
                    },
                    "snowsight": {
                        "$ref": "#/types/sdm:index/ResourceSnowsight:ResourceSnowsight",
                        "description": "Snowsight is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                    },
                    "sqlServer": {
                        "$ref": "#/types/sdm:index/ResourceSqlServer:ResourceSqlServer"
                    },
                    "sqlServerAzureAd": {
                        "$ref": "#/types/sdm:index/ResourceSqlServerAzureAd:ResourceSqlServerAzureAd"
                    },
                    "sqlServerKerberosAd": {
                        "$ref": "#/types/sdm:index/ResourceSqlServerKerberosAd:ResourceSqlServerKerberosAd"
                    },
                    "ssh": {
                        "$ref": "#/types/sdm:index/ResourceSsh:ResourceSsh"
                    },
                    "sshCert": {
                        "$ref": "#/types/sdm:index/ResourceSshCert:ResourceSshCert"
                    },
                    "sshCustomerKey": {
                        "$ref": "#/types/sdm:index/ResourceSshCustomerKey:ResourceSshCustomerKey"
                    },
                    "sybase": {
                        "$ref": "#/types/sdm:index/ResourceSybase:ResourceSybase"
                    },
                    "sybaseIq": {
                        "$ref": "#/types/sdm:index/ResourceSybaseIq:ResourceSybaseIq"
                    },
                    "teradata": {
                        "$ref": "#/types/sdm:index/ResourceTeradata:ResourceTeradata"
                    },
                    "trino": {
                        "$ref": "#/types/sdm:index/ResourceTrino:ResourceTrino",
                        "description": "Trino is currently unstable, and its API may change, or it may be removed, without a major version bump.\n"
                    }
                },
                "type": "object"
            }
        },
        "sdm:index/role:Role": {
            "description": "A Role has a list of access rules which determine which Resources the members\n of the Role have access to. An Account can be a member of multiple Roles via\n AccountAttachments.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sdm from \"@pierskarsenbarg/sdm\";\n\nconst engineers = new sdm.Role(\"engineers\", {tags: {\n    foo: \"bar\",\n}});\nconst example_role = new sdm.Role(\"example-role\", {accessRules: JSON.stringify([\n    {\n        tags: {\n            env: \"staging\",\n        },\n    },\n    {\n        type: \"postgres\",\n        tags: {\n            region: \"us-west\",\n            env: \"dev\",\n        },\n    },\n    {\n        ids: [\"rs-093e6f3061eb4dad\"],\n    },\n])});\n```\n```python\nimport pulumi\nimport json\nimport pierskarsenbarg_pulumi_sdm as sdm\n\nengineers = sdm.Role(\"engineers\", tags={\n    \"foo\": \"bar\",\n})\nexample_role = sdm.Role(\"example-role\", access_rules=json.dumps([\n    {\n        \"tags\": {\n            \"env\": \"staging\",\n        },\n    },\n    {\n        \"type\": \"postgres\",\n        \"tags\": {\n            \"region\": \"us-west\",\n            \"env\": \"dev\",\n        },\n    },\n    {\n        \"ids\": [\"rs-093e6f3061eb4dad\"],\n    },\n]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Sdm = PiersKarsenbarg.Sdm;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var engineers = new Sdm.Role(\"engineers\", new()\n    {\n        Tags = \n        {\n            { \"foo\", \"bar\" },\n        },\n    });\n\n    var example_role = new Sdm.Role(\"example-role\", new()\n    {\n        AccessRules = JsonSerializer.Serialize(new[]\n        {\n            new Dictionary\u003cstring, object?\u003e\n            {\n                [\"tags\"] = new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"env\"] = \"staging\",\n                },\n            },\n            new Dictionary\u003cstring, object?\u003e\n            {\n                [\"type\"] = \"postgres\",\n                [\"tags\"] = new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"region\"] = \"us-west\",\n                    [\"env\"] = \"dev\",\n                },\n            },\n            new Dictionary\u003cstring, object?\u003e\n            {\n                [\"ids\"] = new[]\n                {\n                    \"rs-093e6f3061eb4dad\",\n                },\n            },\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sdm.NewRole(ctx, \"engineers\", \u0026sdm.RoleArgs{\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal([]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"tags\": map[string]interface{}{\n\t\t\t\t\t\"env\": \"staging\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"type\": \"postgres\",\n\t\t\t\t\"tags\": map[string]interface{}{\n\t\t\t\t\t\"region\": \"us-west\",\n\t\t\t\t\t\"env\":    \"dev\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"ids\": []string{\n\t\t\t\t\t\"rs-093e6f3061eb4dad\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = sdm.NewRole(ctx, \"example-role\", \u0026sdm.RoleArgs{\n\t\t\tAccessRules: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sdm.Role;\nimport com.pulumi.sdm.RoleArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var engineers = new Role(\"engineers\", RoleArgs.builder()        \n            .tags(Map.of(\"foo\", \"bar\"))\n            .build());\n\n        var example_role = new Role(\"example-role\", RoleArgs.builder()        \n            .accessRules(serializeJson(\n                jsonArray(\n                    jsonObject(\n                        jsonProperty(\"tags\", jsonObject(\n                            jsonProperty(\"env\", \"staging\")\n                        ))\n                    ), \n                    jsonObject(\n                        jsonProperty(\"type\", \"postgres\"),\n                        jsonProperty(\"tags\", jsonObject(\n                            jsonProperty(\"region\", \"us-west\"),\n                            jsonProperty(\"env\", \"dev\")\n                        ))\n                    ), \n                    jsonObject(\n                        jsonProperty(\"ids\", jsonArray(\"rs-093e6f3061eb4dad\"))\n                    )\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  engineers:\n    type: sdm:Role\n    properties:\n      tags:\n        foo: bar\n  example-role:\n    type: sdm:Role\n    properties:\n      accessRules:\n        fn::toJSON:\n          - tags:\n              env: staging\n          - type: postgres\n            tags:\n              region: us-west\n              env: dev\n          - ids:\n              - rs-093e6f3061eb4dad\n```\nThis resource can be imported using the import command.\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRole can be imported using the id, e.g.,\n\n```sh\n $ pulumi import sdm:index/role:Role example r-12345678\n```\n\n ",
            "properties": {
                "accessRules": {
                    "type": "string",
                    "description": "AccessRules is a list of access rules defining the resources this Role has access to.\n"
                },
                "managedBy": {
                    "type": "string",
                    "description": "Managed By is a read only field for what service manages this role, e.g. StrongDM, Okta, Azure.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Role.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "required": [
                "accessRules",
                "managedBy",
                "name"
            ],
            "inputProperties": {
                "accessRules": {
                    "type": "string",
                    "description": "AccessRules is a list of access rules defining the resources this Role has access to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique human-readable name of the Role.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags is a map of key, value pairs.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "accessRules": {
                        "type": "string",
                        "description": "AccessRules is a list of access rules defining the resources this Role has access to.\n"
                    },
                    "managedBy": {
                        "type": "string",
                        "description": "Managed By is a read only field for what service manages this role, e.g. StrongDM, Okta, Azure.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique human-readable name of the Role.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Tags is a map of key, value pairs.\n"
                    }
                },
                "type": "object"
            }
        },
        "sdm:index/secretStore:SecretStore": {
            "description": "A SecretStore is a server where resource secrets (passwords, keys) are stored.\n Coming soon support for HashiCorp Vault and AWS Secret Store.\nThis resource can be imported using the import command.\n\n\n## Import\n\nSecretStore can be imported using the id, e.g.,\n\n```sh\n $ pulumi import sdm:index/secretStore:SecretStore example se-12345678\n```\n\n ",
            "properties": {
                "aws": {
                    "$ref": "#/types/sdm:index/SecretStoreAws:SecretStoreAws"
                },
                "azureStore": {
                    "$ref": "#/types/sdm:index/SecretStoreAzureStore:SecretStoreAzureStore"
                },
                "cyberarkConjur": {
                    "$ref": "#/types/sdm:index/SecretStoreCyberarkConjur:SecretStoreCyberarkConjur"
                },
                "cyberarkPam": {
                    "$ref": "#/types/sdm:index/SecretStoreCyberarkPam:SecretStoreCyberarkPam"
                },
                "cyberarkPamExperimental": {
                    "$ref": "#/types/sdm:index/SecretStoreCyberarkPamExperimental:SecretStoreCyberarkPamExperimental",
                    "description": "CyberarkPAMExperimentalStore is currently unstable, and its API may change, or it may be removed, without a major\nversion bump.\n"
                },
                "delineaStore": {
                    "$ref": "#/types/sdm:index/SecretStoreDelineaStore:SecretStoreDelineaStore"
                },
                "gcpStore": {
                    "$ref": "#/types/sdm:index/SecretStoreGcpStore:SecretStoreGcpStore"
                },
                "vaultApprole": {
                    "$ref": "#/types/sdm:index/SecretStoreVaultApprole:SecretStoreVaultApprole"
                },
                "vaultTls": {
                    "$ref": "#/types/sdm:index/SecretStoreVaultTls:SecretStoreVaultTls"
                },
                "vaultToken": {
                    "$ref": "#/types/sdm:index/SecretStoreVaultToken:SecretStoreVaultToken"
                }
            },
            "inputProperties": {
                "aws": {
                    "$ref": "#/types/sdm:index/SecretStoreAws:SecretStoreAws"
                },
                "azureStore": {
                    "$ref": "#/types/sdm:index/SecretStoreAzureStore:SecretStoreAzureStore"
                },
                "cyberarkConjur": {
                    "$ref": "#/types/sdm:index/SecretStoreCyberarkConjur:SecretStoreCyberarkConjur"
                },
                "cyberarkPam": {
                    "$ref": "#/types/sdm:index/SecretStoreCyberarkPam:SecretStoreCyberarkPam"
                },
                "cyberarkPamExperimental": {
                    "$ref": "#/types/sdm:index/SecretStoreCyberarkPamExperimental:SecretStoreCyberarkPamExperimental",
                    "description": "CyberarkPAMExperimentalStore is currently unstable, and its API may change, or it may be removed, without a major\nversion bump.\n"
                },
                "delineaStore": {
                    "$ref": "#/types/sdm:index/SecretStoreDelineaStore:SecretStoreDelineaStore"
                },
                "gcpStore": {
                    "$ref": "#/types/sdm:index/SecretStoreGcpStore:SecretStoreGcpStore"
                },
                "vaultApprole": {
                    "$ref": "#/types/sdm:index/SecretStoreVaultApprole:SecretStoreVaultApprole"
                },
                "vaultTls": {
                    "$ref": "#/types/sdm:index/SecretStoreVaultTls:SecretStoreVaultTls"
                },
                "vaultToken": {
                    "$ref": "#/types/sdm:index/SecretStoreVaultToken:SecretStoreVaultToken"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretStore resources.\n",
                "properties": {
                    "aws": {
                        "$ref": "#/types/sdm:index/SecretStoreAws:SecretStoreAws"
                    },
                    "azureStore": {
                        "$ref": "#/types/sdm:index/SecretStoreAzureStore:SecretStoreAzureStore"
                    },
                    "cyberarkConjur": {
                        "$ref": "#/types/sdm:index/SecretStoreCyberarkConjur:SecretStoreCyberarkConjur"
                    },
                    "cyberarkPam": {
                        "$ref": "#/types/sdm:index/SecretStoreCyberarkPam:SecretStoreCyberarkPam"
                    },
                    "cyberarkPamExperimental": {
                        "$ref": "#/types/sdm:index/SecretStoreCyberarkPamExperimental:SecretStoreCyberarkPamExperimental",
                        "description": "CyberarkPAMExperimentalStore is currently unstable, and its API may change, or it may be removed, without a major\nversion bump.\n"
                    },
                    "delineaStore": {
                        "$ref": "#/types/sdm:index/SecretStoreDelineaStore:SecretStoreDelineaStore"
                    },
                    "gcpStore": {
                        "$ref": "#/types/sdm:index/SecretStoreGcpStore:SecretStoreGcpStore"
                    },
                    "vaultApprole": {
                        "$ref": "#/types/sdm:index/SecretStoreVaultApprole:SecretStoreVaultApprole"
                    },
                    "vaultTls": {
                        "$ref": "#/types/sdm:index/SecretStoreVaultTls:SecretStoreVaultTls"
                    },
                    "vaultToken": {
                        "$ref": "#/types/sdm:index/SecretStoreVaultToken:SecretStoreVaultToken"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "sdm:index/getAccount:getAccount": {
            "description": "Accounts are users that have access to strongDM. There are two types of accounts:\n 1. **Users:** humans who are authenticated through username and password or SSO.\n 2. **Service Accounts:** machines that are authenticated using a service token.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sdm from \"@pulumi/sdm\";\n\nconst user-queries = sdm.getAccount({\n    email: \"*@strongdm.com\",\n    tags: {\n        env: \"dev\",\n        region: \"us-west\",\n    },\n    type: \"user\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sdm as sdm\n\nuser_queries = sdm.get_account(email=\"*@strongdm.com\",\n    tags={\n        \"env\": \"dev\",\n        \"region\": \"us-west\",\n    },\n    type=\"user\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sdm = Pulumi.Sdm;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var user_queries = Sdm.GetAccount.Invoke(new()\n    {\n        Email = \"*@strongdm.com\",\n        Tags = \n        {\n            { \"env\", \"dev\" },\n            { \"region\", \"us-west\" },\n        },\n        Type = \"user\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sdm.LookupAccount(ctx, \u0026sdm.LookupAccountArgs{\n\t\t\tEmail: pulumi.StringRef(\"*@strongdm.com\"),\n\t\t\tTags: map[string]interface{}{\n\t\t\t\t\"env\":    \"dev\",\n\t\t\t\t\"region\": \"us-west\",\n\t\t\t},\n\t\t\tType: pulumi.StringRef(\"user\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sdm.SdmFunctions;\nimport com.pulumi.sdm.inputs.GetAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var user-queries = SdmFunctions.getAccount(GetAccountArgs.builder()\n            .email(\"*@strongdm.com\")\n            .tags(Map.ofEntries(\n                Map.entry(\"env\", \"dev\"),\n                Map.entry(\"region\", \"us-west\")\n            ))\n            .type(\"user\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  user-queries:\n    fn::invoke:\n      Function: sdm:getAccount\n      Arguments:\n        email: '*@strongdm.com'\n        tags:\n          env: dev\n          region: us-west\n        type: user\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAccount.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The User's email address. Must be unique.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External ID is an alternative unique ID this user is represented by within an external service.\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "The User's first name.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the User.\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "The User's last name.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique human-readable name of the Service.\n"
                    },
                    "suspended": {
                        "type": "boolean",
                        "description": "The User's suspended state.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Tags is a map of key, value pairs.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "a filter to select all items of a certain subtype. See the [filter documentation](https://www.strongdm.com/docs/automation/getting-started/filters for more information.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccount.\n",
                "properties": {
                    "accounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sdm:index/getAccountAccount:getAccountAccount"
                        },
                        "description": "A single element list containing a map, where each key lists one of the following objects:\n* service:\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The User's email address. Must be unique.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External ID is an alternative unique ID this user is represented by within an external service.\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "The User's first name.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the User.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of strings of ids of data sources that match the given arguments.\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "The User's last name.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique human-readable name of the Service.\n"
                    },
                    "suspended": {
                        "type": "boolean",
                        "description": "The User's suspended state.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Tags is a map of key, value pairs.\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accounts",
                    "ids"
                ]
            }
        },
        "sdm:index/getAccountAttachment:getAccountAttachment": {
            "description": "AccountAttachments assign an account to a role.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sdm from \"@pulumi/sdm\";\n\nconst accountAttachmentQuery = sdm.getAccountAttachment({\n    accountId: \"a-00000054\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sdm as sdm\n\naccount_attachment_query = sdm.get_account_attachment(account_id=\"a-00000054\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sdm = Pulumi.Sdm;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var accountAttachmentQuery = Sdm.GetAccountAttachment.Invoke(new()\n    {\n        AccountId = \"a-00000054\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sdm.LookupAccountAttachment(ctx, \u0026sdm.LookupAccountAttachmentArgs{\n\t\t\tAccountId: pulumi.StringRef(\"a-00000054\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sdm.SdmFunctions;\nimport com.pulumi.sdm.inputs.GetAccountAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var accountAttachmentQuery = SdmFunctions.getAccountAttachment(GetAccountAttachmentArgs.builder()\n            .accountId(\"a-00000054\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  accountAttachmentQuery:\n    fn::invoke:\n      Function: sdm:getAccountAttachment\n      Arguments:\n        accountId: a-00000054\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAccountAttachment.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The id of the account of this AccountAttachment.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the AccountAttachment.\n"
                    },
                    "roleId": {
                        "type": "string",
                        "description": "The id of the attached role of this AccountAttachment.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAccountAttachment.\n",
                "properties": {
                    "accountAttachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sdm:index/getAccountAttachmentAccountAttachment:getAccountAttachmentAccountAttachment"
                        },
                        "description": "A list where each element has the following attributes:\n"
                    },
                    "accountId": {
                        "type": "string",
                        "description": "The id of the account of this AccountAttachment.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the AccountAttachment.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of strings of ids of data sources that match the given arguments.\n"
                    },
                    "roleId": {
                        "type": "string",
                        "description": "The id of the attached role of this AccountAttachment.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountAttachments",
                    "ids"
                ]
            }
        },
        "sdm:index/getNode:getNode": {
            "description": "Nodes make up the strongDM network, and allow your users to connect securely to your resources.\n There are two types of nodes:\n 1. **Relay:** creates connectivity to your datasources, while maintaining the egress-only nature of your firewall\n 1. **Gateways:** a relay that also listens for connections from strongDM clients\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sdm from \"@pulumi/sdm\";\n\nconst gatewayQuery = sdm.getNode({\n    tags: {\n        env: \"dev\",\n        region: \"us-west\",\n    },\n    type: \"gateway\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sdm as sdm\n\ngateway_query = sdm.get_node(tags={\n        \"env\": \"dev\",\n        \"region\": \"us-west\",\n    },\n    type=\"gateway\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sdm = Pulumi.Sdm;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var gatewayQuery = Sdm.GetNode.Invoke(new()\n    {\n        Tags = \n        {\n            { \"env\", \"dev\" },\n            { \"region\", \"us-west\" },\n        },\n        Type = \"gateway\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sdm.LookupNode(ctx, \u0026sdm.LookupNodeArgs{\n\t\t\tTags: map[string]interface{}{\n\t\t\t\t\"env\":    \"dev\",\n\t\t\t\t\"region\": \"us-west\",\n\t\t\t},\n\t\t\tType: pulumi.StringRef(\"gateway\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sdm.SdmFunctions;\nimport com.pulumi.sdm.inputs.GetNodeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var gatewayQuery = SdmFunctions.getNode(GetNodeArgs.builder()\n            .tags(Map.ofEntries(\n                Map.entry(\"env\", \"dev\"),\n                Map.entry(\"region\", \"us-west\")\n            ))\n            .type(\"gateway\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  gatewayQuery:\n    fn::invoke:\n      Function: sdm:getNode\n      Arguments:\n        tags:\n          env: dev\n          region: us-west\n        type: gateway\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNode.\n",
                "properties": {
                    "bindAddress": {
                        "type": "string",
                        "description": "The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to \"0.0.0.0:listen_address_port\".\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the Relay.\n"
                    },
                    "listenAddress": {
                        "type": "string",
                        "description": "The public hostname/port tuple at which the gateway will be accessible to clients.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Tags is a map of key, value pairs.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "a filter to select all items of a certain subtype. See the [filter documentation](https://www.strongdm.com/docs/automation/getting-started/filters for more information.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNode.\n",
                "properties": {
                    "bindAddress": {
                        "type": "string",
                        "description": "The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to \"0.0.0.0:listen_address_port\".\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the Relay.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of strings of ids of data sources that match the given arguments.\n"
                    },
                    "listenAddress": {
                        "type": "string",
                        "description": "The public hostname/port tuple at which the gateway will be accessible to clients.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.\n"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sdm:index/getNodeNode:getNodeNode"
                        },
                        "description": "A single element list containing a map, where each key lists one of the following objects:\n* gateway:\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Tags is a map of key, value pairs.\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "nodes"
                ]
            }
        },
        "sdm:index/getPeeringGroup:getPeeringGroup": {
            "description": "PeeringGroups are the building blocks used for explicit network topology making.\n They may be linked to other peering groups. Sets of PeeringGroupResource and PeeringGroupNode can be attached to a peering group.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPeeringGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the PeeringGroup.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique human-readable name of the PeeringGroup.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPeeringGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the PeeringGroup.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of strings of ids of data sources that match the given arguments.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique human-readable name of the PeeringGroup.\n"
                    },
                    "peeringGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sdm:index/getPeeringGroupPeeringGroup:getPeeringGroupPeeringGroup"
                        },
                        "description": "A list where each element has the following attributes:\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "peeringGroups"
                ]
            }
        },
        "sdm:index/getPeeringGroupNode:getPeeringGroupNode": {
            "description": "PeeringGroupNode represents the attachment between a PeeringGroup and a Node.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPeeringGroupNode.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "Peering Group ID to which the node will be attached to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the Attachment.\n"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "Node ID to be attached.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPeeringGroupNode.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "Peering Group ID to which the node will be attached to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the Attachment.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of strings of ids of data sources that match the given arguments.\n"
                    },
                    "nodeId": {
                        "type": "string",
                        "description": "Node ID to be attached.\n"
                    },
                    "peeringGroupNodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sdm:index/getPeeringGroupNodePeeringGroupNode:getPeeringGroupNodePeeringGroupNode"
                        },
                        "description": "A list where each element has the following attributes:\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "peeringGroupNodes"
                ]
            }
        },
        "sdm:index/getPeeringGroupPeer:getPeeringGroupPeer": {
            "description": "PeeringGroupPeer represents the link between two PeeringGroups\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPeeringGroupPeer.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "Group ID from which the link will originate.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the Attachment.\n"
                    },
                    "peersWithGroupId": {
                        "type": "string",
                        "description": "Peering Group ID to which Group ID will link.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPeeringGroupPeer.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "Group ID from which the link will originate.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the Attachment.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of strings of ids of data sources that match the given arguments.\n"
                    },
                    "peeringGroupPeers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sdm:index/getPeeringGroupPeerPeeringGroupPeer:getPeeringGroupPeerPeeringGroupPeer"
                        },
                        "description": "A list where each element has the following attributes:\n"
                    },
                    "peersWithGroupId": {
                        "type": "string",
                        "description": "Peering Group ID to which Group ID will link.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "peeringGroupPeers"
                ]
            }
        },
        "sdm:index/getPeeringGroupResource:getPeeringGroupResource": {
            "description": "PeeringGroupResource represents the attachment between a PeeringGroup and a Resource.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPeeringGroupResource.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "Peering Group ID to which the resource will be attached to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the Attachment.\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "Resource ID to be attached.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPeeringGroupResource.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "Peering Group ID to which the resource will be attached to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the Attachment.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of strings of ids of data sources that match the given arguments.\n"
                    },
                    "peeringGroupResources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sdm:index/getPeeringGroupResourcePeeringGroupResource:getPeeringGroupResourcePeeringGroupResource"
                        },
                        "description": "A list where each element has the following attributes:\n"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "Resource ID to be attached.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "peeringGroupResources"
                ]
            }
        },
        "sdm:index/getRemoteIdentity:getRemoteIdentity": {
            "description": "RemoteIdentities define the username to be used for a specific account\n when connecting to a remote resource using that group.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sdm from \"@pulumi/sdm\";\n\nconst user = sdm.getRemoteIdentity({\n    id: \"i-0900909\",\n    username: \"user\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sdm as sdm\n\nuser = sdm.get_remote_identity(id=\"i-0900909\",\n    username=\"user\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sdm = Pulumi.Sdm;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var user = Sdm.GetRemoteIdentity.Invoke(new()\n    {\n        Id = \"i-0900909\",\n        Username = \"user\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sdm.LookupRemoteIdentity(ctx, \u0026sdm.LookupRemoteIdentityArgs{\n\t\t\tId:       pulumi.StringRef(\"i-0900909\"),\n\t\t\tUsername: pulumi.StringRef(\"user\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sdm.SdmFunctions;\nimport com.pulumi.sdm.inputs.GetRemoteIdentityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var user = SdmFunctions.getRemoteIdentity(GetRemoteIdentityArgs.builder()\n            .id(\"i-0900909\")\n            .username(\"user\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  user:\n    fn::invoke:\n      Function: sdm:getRemoteIdentity\n      Arguments:\n        id: i-0900909\n        username: user\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRemoteIdentity.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account for this remote identity.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the RemoteIdentity.\n"
                    },
                    "remoteIdentityGroupId": {
                        "type": "string",
                        "description": "The remote identity group.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username to be used as the remote identity for this account.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRemoteIdentity.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The account for this remote identity.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the RemoteIdentity.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of strings of ids of data sources that match the given arguments.\n"
                    },
                    "remoteIdentities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sdm:index/getRemoteIdentityRemoteIdentity:getRemoteIdentityRemoteIdentity"
                        },
                        "description": "A list where each element has the following attributes:\n"
                    },
                    "remoteIdentityGroupId": {
                        "type": "string",
                        "description": "The remote identity group.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username to be used as the remote identity for this account.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "remoteIdentities"
                ]
            }
        },
        "sdm:index/getRemoteIdentityGroup:getRemoteIdentityGroup": {
            "description": "A RemoteIdentityGroup defines a group of remote identities.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sdm from \"@pulumi/sdm\";\n\nconst default = sdm.getRemoteIdentityGroup({\n    name: \"default\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sdm as sdm\n\ndefault = sdm.get_remote_identity_group(name=\"default\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sdm = Pulumi.Sdm;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Sdm.GetRemoteIdentityGroup.Invoke(new()\n    {\n        Name = \"default\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sdm.GetRemoteIdentityGroup(ctx, \u0026sdm.GetRemoteIdentityGroupArgs{\n\t\t\tName: pulumi.StringRef(\"default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sdm.SdmFunctions;\nimport com.pulumi.sdm.inputs.GetRemoteIdentityGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = SdmFunctions.getRemoteIdentityGroup(GetRemoteIdentityGroupArgs.builder()\n            .name(\"default\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: sdm:getRemoteIdentityGroup\n      Arguments:\n        name: default\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRemoteIdentityGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the RemoteIdentityGroup.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique human-readable name of the RemoteIdentityGroup.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRemoteIdentityGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the RemoteIdentityGroup.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of strings of ids of data sources that match the given arguments.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique human-readable name of the RemoteIdentityGroup.\n"
                    },
                    "remoteIdentityGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sdm:index/getRemoteIdentityGroupRemoteIdentityGroup:getRemoteIdentityGroupRemoteIdentityGroup"
                        },
                        "description": "A list where each element has the following attributes:\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "remoteIdentityGroups"
                ]
            }
        },
        "sdm:index/getResource:getResource": {
            "description": "A Resource is a database, server, cluster, website, or cloud that strongDM\n delegates access to.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sdm from \"@pulumi/sdm\";\n\nconst mysqlDatasources = sdm.getResource({\n    name: \"us-west*\",\n    tags: {\n        env: \"dev\",\n        region: \"us-west\",\n    },\n    type: \"mysql\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sdm as sdm\n\nmysql_datasources = sdm.get_resource(name=\"us-west*\",\n    tags={\n        \"env\": \"dev\",\n        \"region\": \"us-west\",\n    },\n    type=\"mysql\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sdm = Pulumi.Sdm;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mysqlDatasources = Sdm.GetResource.Invoke(new()\n    {\n        Name = \"us-west*\",\n        Tags = \n        {\n            { \"env\", \"dev\" },\n            { \"region\", \"us-west\" },\n        },\n        Type = \"mysql\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sdm.LookupResource(ctx, \u0026sdm.LookupResourceArgs{\n\t\t\tName: pulumi.StringRef(\"us-west*\"),\n\t\t\tTags: map[string]interface{}{\n\t\t\t\t\"env\":    \"dev\",\n\t\t\t\t\"region\": \"us-west\",\n\t\t\t},\n\t\t\tType: pulumi.StringRef(\"mysql\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sdm.SdmFunctions;\nimport com.pulumi.sdm.inputs.GetResourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mysqlDatasources = SdmFunctions.getResource(GetResourceArgs.builder()\n            .name(\"us-west*\")\n            .tags(Map.ofEntries(\n                Map.entry(\"env\", \"dev\"),\n                Map.entry(\"region\", \"us-west\")\n            ))\n            .type(\"mysql\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mysqlDatasources:\n    fn::invoke:\n      Function: sdm:getResource\n      Arguments:\n        name: us-west*\n        tags:\n          env: dev\n          region: us-west\n        type: mysql\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getResource.\n",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the Resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique human-readable name of the Resource.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Tags is a map of key, value pairs.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "a filter to select all items of a certain subtype. See the [filter documentation](https://www.strongdm.com/docs/automation/getting-started/filters for more information.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username to authenticate with.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getResource.\n",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "The host to dial to initiate a connection from the egress node to this resource.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the Resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of strings of ids of data sources that match the given arguments.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique human-readable name of the Resource.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port to dial to initiate a connection from the egress node to this resource.\n"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sdm:index/getResourceResource:getResourceResource"
                        },
                        "description": "A single element list containing a map, where each key lists one of the following objects:\n* aks:\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Tags is a map of key, value pairs.\n"
                    },
                    "type": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username to authenticate with.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "resources"
                ]
            }
        },
        "sdm:index/getRole:getRole": {
            "description": "A Role has a list of access rules which determine which Resources the members\n of the Role have access to. An Account can be a member of multiple Roles via\n AccountAttachments.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sdm.SdmFunctions;\nimport com.pulumi.sdm.inputs.GetRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var compositeRoleQuery = SdmFunctions.getRole(GetRoleArgs.builder()\n            .composite(true)\n            .tags(Map.ofEntries(\n                Map.entry(\"env\", \"dev\"),\n                Map.entry(\"region\", \"us-west\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  compositeRoleQuery:\n    fn::invoke:\n      Function: sdm:getRole\n      Arguments:\n        composite: true\n        tags:\n          env: dev\n          region: us-west\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRole.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the Role.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique human-readable name of the Role.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Tags is a map of key, value pairs.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRole.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the Role.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of strings of ids of data sources that match the given arguments.\n"
                    },
                    "managedBy": {
                        "type": "string",
                        "description": "Managed By is a read only field for what service manages this role, e.g. StrongDM, Okta, Azure.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique human-readable name of the Role.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sdm:index/getRoleRole:getRoleRole"
                        },
                        "description": "A list where each element has the following attributes:\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Tags is a map of key, value pairs.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "managedBy",
                    "roles"
                ]
            }
        },
        "sdm:index/getSecretStore:getSecretStore": {
            "description": "A SecretStore is a server where resource secrets (passwords, keys) are stored.\n Coming soon support for HashiCorp Vault and AWS Secret Store.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecretStore.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the SecretStore.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique human-readable name of the SecretStore.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Tags is a map of key, value pairs.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "a filter to select all items of a certain subtype. See the [filter documentation](https://www.strongdm.com/docs/automation/getting-started/filters for more information.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSecretStore.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of the SecretStore.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of strings of ids of data sources that match the given arguments.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique human-readable name of the SecretStore.\n"
                    },
                    "secretStores": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sdm:index/getSecretStoreSecretStore:getSecretStoreSecretStore"
                        },
                        "description": "A single element list containing a map, where each key lists one of the following objects:\n* aws:\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Tags is a map of key, value pairs.\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "secretStores"
                ]
            }
        },
        "sdm:index/getSshCaPubkey:getSshCaPubkey": {
            "description": "The SSH CA Pubkey is a public key used for setting up SSH resources.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sdm from \"@pulumi/sdm\";\n\nconst sshPubkeyQuery = sdm.getSshCaPubkey({});\n```\n```python\nimport pulumi\nimport pulumi_sdm as sdm\n\nssh_pubkey_query = sdm.get_ssh_ca_pubkey()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sdm = Pulumi.Sdm;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sshPubkeyQuery = Sdm.GetSshCaPubkey.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sdm.GetSshCaPubkey(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sdm.SdmFunctions;\nimport com.pulumi.sdm.inputs.GetSshCaPubkeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sshPubkeyQuery = SdmFunctions.getSshCaPubkey();\n\n    }\n}\n```\n```yaml\nvariables:\n  sshPubkeyQuery:\n    fn::invoke:\n      Function: sdm:getSshCaPubkey\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSshCaPubkey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "a generated id representing this request.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "the SSH Certificate Authority public key.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSshCaPubkey.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "a generated id representing this request.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "the SSH Certificate Authority public key.\n"
                    }
                },
                "type": "object"
            }
        }
    }
}
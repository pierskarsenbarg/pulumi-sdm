// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A Role has a list of access rules which determine which Resources the members
 *  of the Role have access to. An Account can be a member of multiple Roles via
 *  AccountAttachments.
 */
export function getRole(args?: GetRoleArgs, opts?: pulumi.InvokeOptions): Promise<GetRoleResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdm:index/getRole:getRole", {
        "id": args.id,
        "name": args.name,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getRole.
 */
export interface GetRoleArgs {
    /**
     * Unique identifier of the Role.
     */
    id?: string;
    /**
     * Unique human-readable name of the Role.
     */
    name?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getRole.
 */
export interface GetRoleResult {
    /**
     * Unique identifier of the Role.
     */
    readonly id?: string;
    /**
     * a list of strings of ids of data sources that match the given arguments.
     */
    readonly ids: string[];
    /**
     * Managed By is a read only field for what service manages this role, e.g. StrongDM, Okta, Azure.
     */
    readonly managedBy: string;
    /**
     * Unique human-readable name of the Role.
     */
    readonly name?: string;
    /**
     * A list where each element has the following attributes:
     */
    readonly roles: outputs.GetRoleRole[];
    /**
     * Tags is a map of key, value pairs.
     */
    readonly tags?: {[key: string]: string};
}
/**
 * A Role has a list of access rules which determine which Resources the members
 *  of the Role have access to. An Account can be a member of multiple Roles via
 *  AccountAttachments.
 */
export function getRoleOutput(args?: GetRoleOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRoleResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sdm:index/getRole:getRole", {
        "id": args.id,
        "name": args.name,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getRole.
 */
export interface GetRoleOutputArgs {
    /**
     * Unique identifier of the Role.
     */
    id?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Role.
     */
    name?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

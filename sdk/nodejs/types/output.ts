// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface AccountService {
    /**
     * Unique human-readable name of the Service.
     */
    name: string;
    /**
     * The User's suspended state.
     */
    suspended?: boolean;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    token: string;
}

export interface AccountUser {
    /**
     * The User's email address. Must be unique.
     */
    email: string;
    /**
     * The User's first name.
     */
    firstName: string;
    /**
     * The User's last name.
     */
    lastName: string;
    /**
     * The User's suspended state.
     */
    suspended?: boolean;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetAccountAccount {
    services: outputs.GetAccountAccountService[];
    users: outputs.GetAccountAccountUser[];
}

export interface GetAccountAccountService {
    /**
     * Unique identifier of the User.
     */
    id?: string;
    /**
     * Unique human-readable name of the Service.
     */
    name?: string;
    /**
     * The User's suspended state.
     */
    suspended?: boolean;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetAccountAccountUser {
    /**
     * The User's email address. Must be unique.
     */
    email?: string;
    /**
     * The User's first name.
     */
    firstName?: string;
    /**
     * Unique identifier of the User.
     */
    id?: string;
    /**
     * The User's last name.
     */
    lastName?: string;
    /**
     * The User's suspended state.
     */
    suspended?: boolean;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetAccountAttachmentAccountAttachment {
    /**
     * The id of the account of this AccountAttachment.
     */
    accountId?: string;
    /**
     * Unique identifier of the AccountAttachment.
     */
    id?: string;
    /**
     * The id of the attached role of this AccountAttachment.
     */
    roleId?: string;
}

export interface GetNodeNode {
    gateways: outputs.GetNodeNodeGateway[];
    relays: outputs.GetNodeNodeRelay[];
}

export interface GetNodeNodeGateway {
    /**
     * The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to "0.0.0.0:listen_address_port".
     */
    bindAddress?: string;
    /**
     * GatewayFilter can be used to restrict the peering between relays and gateways.
     */
    gatewayFilter?: string;
    /**
     * Unique identifier of the Relay.
     */
    id?: string;
    /**
     * The public hostname/port tuple at which the gateway will be accessible to clients.
     */
    listenAddress?: string;
    /**
     * Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
     */
    name?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetNodeNodeRelay {
    /**
     * GatewayFilter can be used to restrict the peering between relays and gateways.
     */
    gatewayFilter?: string;
    /**
     * Unique identifier of the Relay.
     */
    id?: string;
    /**
     * Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
     */
    name?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetRemoteIdentityGroupRemoteIdentityGroup {
    /**
     * Unique identifier of the RemoteIdentityGroup.
     */
    id?: string;
    /**
     * Unique human-readable name of the RemoteIdentityGroup.
     */
    name?: string;
}

export interface GetRemoteIdentityRemoteIdentity {
    /**
     * The account for this remote identity.
     */
    accountId?: string;
    /**
     * Unique identifier of the RemoteIdentity.
     */
    id?: string;
    /**
     * The remote identity group.
     */
    remoteIdentityGroupId?: string;
    /**
     * The username to be used as the remote identity for this account.
     */
    username?: string;
}

export interface GetResourceResource {
    aks: outputs.GetResourceResourceAk[];
    aksBasicAuths: outputs.GetResourceResourceAksBasicAuth[];
    aksServiceAccountUserImpersonations: outputs.GetResourceResourceAksServiceAccountUserImpersonation[];
    aksServiceAccounts: outputs.GetResourceResourceAksServiceAccount[];
    aksUserImpersonations: outputs.GetResourceResourceAksUserImpersonation[];
    amazonEks: outputs.GetResourceResourceAmazonEk[];
    amazonEksUserImpersonations: outputs.GetResourceResourceAmazonEksUserImpersonation[];
    amazonEs: outputs.GetResourceResourceAmazonE[];
    amazonmqAmqp091s: outputs.GetResourceResourceAmazonmqAmqp091[];
    athenas: outputs.GetResourceResourceAthena[];
    auroraMysqls: outputs.GetResourceResourceAuroraMysql[];
    auroraPostgres: outputs.GetResourceResourceAuroraPostgre[];
    aws: outputs.GetResourceResourceAw[];
    azureCertificates: outputs.GetResourceResourceAzureCertificate[];
    azurePostgres: outputs.GetResourceResourceAzurePostgre[];
    azures: outputs.GetResourceResourceAzure[];
    bigQueries: outputs.GetResourceResourceBigQuery[];
    cassandras: outputs.GetResourceResourceCassandra[];
    cituses: outputs.GetResourceResourceCitus[];
    clustrixes: outputs.GetResourceResourceClustrix[];
    cockroaches: outputs.GetResourceResourceCockroach[];
    db2Is: outputs.GetResourceResourceDb2I[];
    db2Luws: outputs.GetResourceResourceDb2Luw[];
    documentDbHosts: outputs.GetResourceResourceDocumentDbHost[];
    documentDbReplicaSets: outputs.GetResourceResourceDocumentDbReplicaSet[];
    druids: outputs.GetResourceResourceDruid[];
    dynamoDbs: outputs.GetResourceResourceDynamoDb[];
    elasticacheRedis: outputs.GetResourceResourceElasticacheRedi[];
    elastics: outputs.GetResourceResourceElastic[];
    gcps: outputs.GetResourceResourceGcp[];
    googleGkeUserImpersonations: outputs.GetResourceResourceGoogleGkeUserImpersonation[];
    googleGkes: outputs.GetResourceResourceGoogleGke[];
    greenplums: outputs.GetResourceResourceGreenplum[];
    httpAuths: outputs.GetResourceResourceHttpAuth[];
    httpBasicAuths: outputs.GetResourceResourceHttpBasicAuth[];
    httpNoAuths: outputs.GetResourceResourceHttpNoAuth[];
    kubernetes: outputs.GetResourceResourceKubernete[];
    kubernetesBasicAuths: outputs.GetResourceResourceKubernetesBasicAuth[];
    kubernetesServiceAccountUserImpersonations: outputs.GetResourceResourceKubernetesServiceAccountUserImpersonation[];
    kubernetesServiceAccounts: outputs.GetResourceResourceKubernetesServiceAccount[];
    kubernetesUserImpersonations: outputs.GetResourceResourceKubernetesUserImpersonation[];
    marias: outputs.GetResourceResourceMaria[];
    memcacheds: outputs.GetResourceResourceMemcached[];
    memsqls: outputs.GetResourceResourceMemsql[];
    mongoHosts: outputs.GetResourceResourceMongoHost[];
    mongoLegacyHosts: outputs.GetResourceResourceMongoLegacyHost[];
    mongoLegacyReplicasets: outputs.GetResourceResourceMongoLegacyReplicaset[];
    mongoReplicaSets: outputs.GetResourceResourceMongoReplicaSet[];
    mongoShardedClusters: outputs.GetResourceResourceMongoShardedCluster[];
    mtlsMysqls: outputs.GetResourceResourceMtlsMysql[];
    mtlsPostgres: outputs.GetResourceResourceMtlsPostgre[];
    mysqls: outputs.GetResourceResourceMysql[];
    neptuneIams: outputs.GetResourceResourceNeptuneIam[];
    neptunes: outputs.GetResourceResourceNeptune[];
    oracles: outputs.GetResourceResourceOracle[];
    postgres: outputs.GetResourceResourcePostgre[];
    prestos: outputs.GetResourceResourcePresto[];
    rabbitmqAmqp091s: outputs.GetResourceResourceRabbitmqAmqp091[];
    rawTcps: outputs.GetResourceResourceRawTcp[];
    rdps: outputs.GetResourceResourceRdp[];
    redis: outputs.GetResourceResourceRedi[];
    redshifts: outputs.GetResourceResourceRedshift[];
    singleStores: outputs.GetResourceResourceSingleStore[];
    snowflakes: outputs.GetResourceResourceSnowflake[];
    sqlServers: outputs.GetResourceResourceSqlServer[];
    sshCerts: outputs.GetResourceResourceSshCert[];
    sshCustomerKeys: outputs.GetResourceResourceSshCustomerKey[];
    sshes: outputs.GetResourceResourceSsh[];
    sybaseIqs: outputs.GetResourceResourceSybaseIq[];
    sybases: outputs.GetResourceResourceSybase[];
    teradatas: outputs.GetResourceResourceTeradata[];
}

export interface GetResourceResourceAk {
    /**
     * Bind interface
     */
    bindInterface?: string;
    certificateAuthority?: string;
    clientCertificate?: string;
    clientKey?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    port?: number;
    portOverride?: number;
    remoteIdentityGroupId?: string;
    remoteIdentityHealthcheckUsername?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceAksBasicAuth {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceAksServiceAccount {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    port?: number;
    portOverride?: number;
    remoteIdentityGroupId?: string;
    remoteIdentityHealthcheckUsername?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    /**
     * * kubernetes_user_impersonation:
     */
    token?: string;
}

export interface GetResourceResourceAksServiceAccountUserImpersonation {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    /**
     * * kubernetes_user_impersonation:
     */
    token?: string;
}

export interface GetResourceResourceAksUserImpersonation {
    /**
     * Bind interface
     */
    bindInterface?: string;
    certificateAuthority?: string;
    clientCertificate?: string;
    clientKey?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceAmazonE {
    accessKey?: string;
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    portOverride?: number;
    region?: string;
    roleArn?: string;
    roleExternalId?: string;
    secretAccessKey?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceAmazonEk {
    accessKey?: string;
    /**
     * Bind interface
     */
    bindInterface?: string;
    certificateAuthority?: string;
    clusterName?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    region?: string;
    remoteIdentityGroupId?: string;
    remoteIdentityHealthcheckUsername?: string;
    roleArn?: string;
    roleExternalId?: string;
    secretAccessKey?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceAmazonEksUserImpersonation {
    accessKey?: string;
    /**
     * Bind interface
     */
    bindInterface?: string;
    certificateAuthority?: string;
    clusterName?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    region?: string;
    roleArn?: string;
    roleExternalId?: string;
    secretAccessKey?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceAmazonmqAmqp091 {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface GetResourceResourceAthena {
    accessKey?: string;
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    output?: string;
    portOverride?: number;
    region?: string;
    roleArn?: string;
    roleExternalId?: string;
    secretAccessKey?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceAuroraMysql {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceAuroraPostgre {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceAw {
    accessKey?: string;
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    healthcheckRegion?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    roleArn?: string;
    roleExternalId?: string;
    secretAccessKey?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceAzure {
    appId?: string;
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    /**
     * * azure_postgres:
     */
    tenantId?: string;
}

export interface GetResourceResourceAzureCertificate {
    appId?: string;
    /**
     * Bind interface
     */
    bindInterface?: string;
    clientCertificate?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    /**
     * * azure_postgres:
     */
    tenantId?: string;
}

export interface GetResourceResourceAzurePostgre {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceBigQuery {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    portOverride?: number;
    privateKey?: string;
    project?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceCassandra {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface GetResourceResourceCitus {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceClustrix {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceCockroach {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceDb2I {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface GetResourceResourceDb2Luw {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceDocumentDbHost {
    authDatabase?: string;
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceDocumentDbReplicaSet {
    authDatabase?: string;
    /**
     * Bind interface
     */
    bindInterface?: string;
    connectToReplica?: boolean;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    portOverride?: number;
    replicaSet?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceDruid {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceDynamoDb {
    accessKey?: string;
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    portOverride?: number;
    region?: string;
    roleArn?: string;
    roleExternalId?: string;
    secretAccessKey?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceElastic {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface GetResourceResourceElasticacheRedi {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
}

export interface GetResourceResourceGcp {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    keyfile?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    scopes?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceGoogleGke {
    /**
     * Bind interface
     */
    bindInterface?: string;
    certificateAuthority?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    remoteIdentityGroupId?: string;
    remoteIdentityHealthcheckUsername?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    serviceAccountKey?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceGoogleGkeUserImpersonation {
    /**
     * Bind interface
     */
    bindInterface?: string;
    certificateAuthority?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    serviceAccountKey?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceGreenplum {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceHttpAuth {
    authHeader?: string;
    /**
     * Bind interface
     */
    bindInterface?: string;
    defaultPath?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    headersBlacklist?: string;
    healthcheckPath?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    subdomain?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    /**
     * * kubernetes:
     */
    url?: string;
}

export interface GetResourceResourceHttpBasicAuth {
    /**
     * Bind interface
     */
    bindInterface?: string;
    defaultPath?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    headersBlacklist?: string;
    healthcheckPath?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    subdomain?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    /**
     * * kubernetes:
     */
    url?: string;
    username?: string;
}

export interface GetResourceResourceHttpNoAuth {
    /**
     * Bind interface
     */
    bindInterface?: string;
    defaultPath?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    headersBlacklist?: string;
    healthcheckPath?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    subdomain?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    /**
     * * kubernetes:
     */
    url?: string;
}

export interface GetResourceResourceKubernete {
    /**
     * Bind interface
     */
    bindInterface?: string;
    certificateAuthority?: string;
    clientCertificate?: string;
    clientKey?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    port?: number;
    portOverride?: number;
    remoteIdentityGroupId?: string;
    remoteIdentityHealthcheckUsername?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceKubernetesBasicAuth {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceKubernetesServiceAccount {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    port?: number;
    portOverride?: number;
    remoteIdentityGroupId?: string;
    remoteIdentityHealthcheckUsername?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    /**
     * * kubernetes_user_impersonation:
     */
    token?: string;
}

export interface GetResourceResourceKubernetesServiceAccountUserImpersonation {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    /**
     * * kubernetes_user_impersonation:
     */
    token?: string;
}

export interface GetResourceResourceKubernetesUserImpersonation {
    /**
     * Bind interface
     */
    bindInterface?: string;
    certificateAuthority?: string;
    clientCertificate?: string;
    clientKey?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceMaria {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceMemcached {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceMemsql {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceMongoHost {
    authDatabase?: string;
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface GetResourceResourceMongoLegacyHost {
    authDatabase?: string;
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    replicaSet?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface GetResourceResourceMongoLegacyReplicaset {
    authDatabase?: string;
    /**
     * Bind interface
     */
    bindInterface?: string;
    connectToReplica?: boolean;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    replicaSet?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface GetResourceResourceMongoReplicaSet {
    authDatabase?: string;
    /**
     * Bind interface
     */
    bindInterface?: string;
    connectToReplica?: boolean;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    replicaSet?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface GetResourceResourceMongoShardedCluster {
    authDatabase?: string;
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface GetResourceResourceMtlsMysql {
    /**
     * Bind interface
     */
    bindInterface?: string;
    certificateAuthority?: string;
    clientCertificate?: string;
    clientKey?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    serverName?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceMtlsPostgre {
    /**
     * Bind interface
     */
    bindInterface?: string;
    certificateAuthority?: string;
    clientCertificate?: string;
    clientKey?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    serverName?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceMysql {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceNeptune {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceNeptuneIam {
    accessKey?: string;
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    port?: number;
    portOverride?: number;
    region?: string;
    roleArn?: string;
    roleExternalId?: string;
    secretAccessKey?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceOracle {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface GetResourceResourcePostgre {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourcePresto {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface GetResourceResourceRabbitmqAmqp091 {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface GetResourceResourceRawTcp {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceRdp {
    /**
     * Bind interface
     */
    bindInterface?: string;
    downgradeNlaConnections?: boolean;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceRedi {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetResourceResourceRedshift {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceSingleStore {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceSnowflake {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    portOverride?: number;
    schema?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceSqlServer {
    /**
     * Bind interface
     */
    bindInterface?: string;
    database?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride?: number;
    schema?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceSsh {
    allowDeprecatedKeyExchanges?: boolean;
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    keyType?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    port?: number;
    portForwarding?: boolean;
    portOverride?: number;
    publicKey: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceSshCert {
    allowDeprecatedKeyExchanges?: boolean;
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    keyType?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    port?: number;
    portForwarding?: boolean;
    portOverride?: number;
    remoteIdentityGroupId?: string;
    remoteIdentityHealthcheckUsername?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceSshCustomerKey {
    allowDeprecatedKeyExchanges?: boolean;
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    port?: number;
    portForwarding?: boolean;
    portOverride?: number;
    privateKey?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceSybase {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceSybaseIq {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetResourceResourceTeradata {
    /**
     * Bind interface
     */
    bindInterface?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    password?: string;
    port?: number;
    portOverride?: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface GetRoleRole {
    /**
     * AccessRules is a list of access rules defining the resources this Role has access to.
     */
    accessRules?: string;
    /**
     * Unique identifier of the Role.
     */
    id?: string;
    /**
     * Unique human-readable name of the Role.
     */
    name?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetSecretStoreSecretStore {
    aws: outputs.GetSecretStoreSecretStoreAw[];
    azureStores: outputs.GetSecretStoreSecretStoreAzureStore[];
    gcpStores: outputs.GetSecretStoreSecretStoreGcpStore[];
    vaultApproles: outputs.GetSecretStoreSecretStoreVaultApprole[];
    vaultTls: outputs.GetSecretStoreSecretStoreVaultTl[];
    vaultTokens: outputs.GetSecretStoreSecretStoreVaultToken[];
}

export interface GetSecretStoreSecretStoreAw {
    /**
     * Unique identifier of the SecretStore.
     */
    id?: string;
    /**
     * Unique human-readable name of the SecretStore.
     */
    name?: string;
    region?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetSecretStoreSecretStoreAzureStore {
    /**
     * Unique identifier of the SecretStore.
     */
    id?: string;
    /**
     * Unique human-readable name of the SecretStore.
     */
    name?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    /**
     * * gcp_store:
     */
    vaultUri?: string;
}

export interface GetSecretStoreSecretStoreGcpStore {
    /**
     * Unique identifier of the SecretStore.
     */
    id?: string;
    /**
     * Unique human-readable name of the SecretStore.
     */
    name?: string;
    projectId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetSecretStoreSecretStoreVaultApprole {
    /**
     * Unique identifier of the SecretStore.
     */
    id?: string;
    /**
     * Unique human-readable name of the SecretStore.
     */
    name?: string;
    namespace?: string;
    serverAddress?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetSecretStoreSecretStoreVaultTl {
    caCertPath?: string;
    clientCertPath?: string;
    clientKeyPath?: string;
    /**
     * Unique identifier of the SecretStore.
     */
    id?: string;
    /**
     * Unique human-readable name of the SecretStore.
     */
    name?: string;
    namespace?: string;
    serverAddress?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface GetSecretStoreSecretStoreVaultToken {
    /**
     * Unique identifier of the SecretStore.
     */
    id?: string;
    /**
     * Unique human-readable name of the SecretStore.
     */
    name?: string;
    namespace?: string;
    serverAddress?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface NodeGateway {
    /**
     * The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to "0.0.0.0:listen_address_port".
     */
    bindAddress: string;
    /**
     * GatewayFilter can be used to restrict the peering between relays and gateways.
     */
    gatewayFilter?: string;
    /**
     * The public hostname/port tuple at which the gateway will be accessible to clients.
     */
    listenAddress: string;
    /**
     * Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
     */
    name: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    token: string;
}

export interface NodeRelay {
    /**
     * GatewayFilter can be used to restrict the peering between relays and gateways.
     */
    gatewayFilter?: string;
    /**
     * Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
     */
    name: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    token: string;
}

export interface ResourceAks {
    /**
     * Bind interface
     */
    bindInterface: string;
    certificateAuthority?: string;
    clientCertificate?: string;
    clientKey?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    port: number;
    portOverride: number;
    remoteIdentityGroupId?: string;
    remoteIdentityHealthcheckUsername?: string;
    secretStoreCertificateAuthorityKey?: string;
    secretStoreCertificateAuthorityPath?: string;
    secretStoreClientCertificateKey?: string;
    secretStoreClientCertificatePath?: string;
    secretStoreClientKeyKey?: string;
    secretStoreClientKeyPath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceAksBasicAuth {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceAksServiceAccount {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    port: number;
    portOverride: number;
    remoteIdentityGroupId?: string;
    remoteIdentityHealthcheckUsername?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * * kubernetes_user_impersonation:
     */
    secretStoreTokenKey?: string;
    secretStoreTokenPath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    token?: string;
}

export interface ResourceAksServiceAccountUserImpersonation {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    port: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * * kubernetes_user_impersonation:
     */
    secretStoreTokenKey?: string;
    secretStoreTokenPath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    token?: string;
}

export interface ResourceAksUserImpersonation {
    /**
     * Bind interface
     */
    bindInterface: string;
    certificateAuthority?: string;
    clientCertificate?: string;
    clientKey?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    port: number;
    portOverride: number;
    secretStoreCertificateAuthorityKey?: string;
    secretStoreCertificateAuthorityPath?: string;
    secretStoreClientCertificateKey?: string;
    secretStoreClientCertificatePath?: string;
    secretStoreClientKeyKey?: string;
    secretStoreClientKeyPath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceAmazonEks {
    accessKey?: string;
    /**
     * Bind interface
     */
    bindInterface: string;
    certificateAuthority?: string;
    clusterName: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    region: string;
    remoteIdentityGroupId?: string;
    remoteIdentityHealthcheckUsername?: string;
    roleArn?: string;
    roleExternalId?: string;
    secretAccessKey?: string;
    secretStoreAccessKeyKey?: string;
    secretStoreAccessKeyPath?: string;
    secretStoreCertificateAuthorityKey?: string;
    secretStoreCertificateAuthorityPath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStoreRoleArnKey?: string;
    secretStoreRoleArnPath?: string;
    secretStoreRoleExternalIdKey?: string;
    secretStoreRoleExternalIdPath?: string;
    secretStoreSecretAccessKeyKey?: string;
    secretStoreSecretAccessKeyPath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceAmazonEksUserImpersonation {
    accessKey?: string;
    /**
     * Bind interface
     */
    bindInterface: string;
    certificateAuthority?: string;
    clusterName: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    region: string;
    roleArn?: string;
    roleExternalId?: string;
    secretAccessKey?: string;
    secretStoreAccessKeyKey?: string;
    secretStoreAccessKeyPath?: string;
    secretStoreCertificateAuthorityKey?: string;
    secretStoreCertificateAuthorityPath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStoreRoleArnKey?: string;
    secretStoreRoleArnPath?: string;
    secretStoreRoleExternalIdKey?: string;
    secretStoreRoleExternalIdPath?: string;
    secretStoreSecretAccessKeyKey?: string;
    secretStoreSecretAccessKeyPath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceAmazonEs {
    accessKey?: string;
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    portOverride: number;
    region: string;
    roleArn?: string;
    roleExternalId?: string;
    secretAccessKey?: string;
    secretStoreAccessKeyKey?: string;
    secretStoreAccessKeyPath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStoreRoleArnKey?: string;
    secretStoreRoleArnPath?: string;
    secretStoreRoleExternalIdKey?: string;
    secretStoreRoleExternalIdPath?: string;
    secretStoreSecretAccessKeyKey?: string;
    secretStoreSecretAccessKeyPath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceAmazonmqAmqp091 {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface ResourceAthena {
    accessKey?: string;
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    output: string;
    portOverride: number;
    region?: string;
    roleArn?: string;
    roleExternalId?: string;
    secretAccessKey?: string;
    secretStoreAccessKeyKey?: string;
    secretStoreAccessKeyPath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStoreRoleArnKey?: string;
    secretStoreRoleArnPath?: string;
    secretStoreRoleExternalIdKey?: string;
    secretStoreRoleExternalIdPath?: string;
    secretStoreSecretAccessKeyKey?: string;
    secretStoreSecretAccessKeyPath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceAuroraMysql {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceAuroraPostgres {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceAws {
    accessKey?: string;
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    healthcheckRegion: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    roleArn?: string;
    roleExternalId?: string;
    secretAccessKey?: string;
    secretStoreAccessKeyKey?: string;
    secretStoreAccessKeyPath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStoreRoleArnKey?: string;
    secretStoreRoleArnPath?: string;
    secretStoreRoleExternalIdKey?: string;
    secretStoreRoleExternalIdPath?: string;
    secretStoreSecretAccessKeyKey?: string;
    secretStoreSecretAccessKeyPath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceAzure {
    appId?: string;
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    secretStoreAppIdKey?: string;
    secretStoreAppIdPath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    /**
     * * azure_postgres:
     */
    secretStoreTenantIdKey?: string;
    secretStoreTenantIdPath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tenantId?: string;
}

export interface ResourceAzureCertificate {
    appId?: string;
    /**
     * Bind interface
     */
    bindInterface: string;
    clientCertificate?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    secretStoreAppIdKey?: string;
    secretStoreAppIdPath?: string;
    secretStoreClientCertificateKey?: string;
    secretStoreClientCertificatePath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * * azure_postgres:
     */
    secretStoreTenantIdKey?: string;
    secretStoreTenantIdPath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tenantId?: string;
}

export interface ResourceAzurePostgres {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceBigQuery {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    portOverride: number;
    privateKey?: string;
    project: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePrivateKeyKey?: string;
    secretStorePrivateKeyPath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceCassandra {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface ResourceCitus {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceClustrix {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceCockroach {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceDb2I {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface ResourceDb2Luw {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceDocumentDbHost {
    authDatabase: string;
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceDocumentDbReplicaSet {
    authDatabase: string;
    /**
     * Bind interface
     */
    bindInterface: string;
    connectToReplica?: boolean;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    portOverride: number;
    replicaSet: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceDruid {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceDynamoDb {
    accessKey?: string;
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    portOverride: number;
    region: string;
    roleArn?: string;
    roleExternalId?: string;
    secretAccessKey?: string;
    secretStoreAccessKeyKey?: string;
    secretStoreAccessKeyPath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStoreRoleArnKey?: string;
    secretStoreRoleArnPath?: string;
    secretStoreRoleExternalIdKey?: string;
    secretStoreRoleExternalIdPath?: string;
    secretStoreSecretAccessKeyKey?: string;
    secretStoreSecretAccessKeyPath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceElastic {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface ResourceElasticacheRedis {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
}

export interface ResourceGcp {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    keyfile?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    scopes: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStoreKeyfileKey?: string;
    secretStoreKeyfilePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceGoogleGke {
    /**
     * Bind interface
     */
    bindInterface: string;
    certificateAuthority?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    remoteIdentityGroupId?: string;
    remoteIdentityHealthcheckUsername?: string;
    secretStoreCertificateAuthorityKey?: string;
    secretStoreCertificateAuthorityPath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStoreServiceAccountKeyKey?: string;
    secretStoreServiceAccountKeyPath?: string;
    serviceAccountKey?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceGoogleGkeUserImpersonation {
    /**
     * Bind interface
     */
    bindInterface: string;
    certificateAuthority?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    secretStoreCertificateAuthorityKey?: string;
    secretStoreCertificateAuthorityPath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStoreServiceAccountKeyKey?: string;
    secretStoreServiceAccountKeyPath?: string;
    serviceAccountKey?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceGreenplum {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceHttpAuth {
    authHeader?: string;
    /**
     * Bind interface
     */
    bindInterface: string;
    defaultPath?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    headersBlacklist?: string;
    healthcheckPath: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    secretStoreAuthHeaderKey?: string;
    secretStoreAuthHeaderPath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    subdomain: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    /**
     * * kubernetes:
     */
    url: string;
}

export interface ResourceHttpBasicAuth {
    /**
     * Bind interface
     */
    bindInterface: string;
    defaultPath?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    headersBlacklist?: string;
    healthcheckPath: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    subdomain: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    /**
     * * kubernetes:
     */
    url: string;
    username?: string;
}

export interface ResourceHttpNoAuth {
    /**
     * Bind interface
     */
    bindInterface: string;
    defaultPath?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    headersBlacklist?: string;
    healthcheckPath: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    subdomain: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    /**
     * * kubernetes:
     */
    url: string;
}

export interface ResourceKubernetes {
    /**
     * Bind interface
     */
    bindInterface: string;
    certificateAuthority?: string;
    clientCertificate?: string;
    clientKey?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    port: number;
    portOverride: number;
    remoteIdentityGroupId?: string;
    remoteIdentityHealthcheckUsername?: string;
    secretStoreCertificateAuthorityKey?: string;
    secretStoreCertificateAuthorityPath?: string;
    secretStoreClientCertificateKey?: string;
    secretStoreClientCertificatePath?: string;
    secretStoreClientKeyKey?: string;
    secretStoreClientKeyPath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceKubernetesBasicAuth {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceKubernetesServiceAccount {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    port: number;
    portOverride: number;
    remoteIdentityGroupId?: string;
    remoteIdentityHealthcheckUsername?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * * kubernetes_user_impersonation:
     */
    secretStoreTokenKey?: string;
    secretStoreTokenPath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    token?: string;
}

export interface ResourceKubernetesServiceAccountUserImpersonation {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    port: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * * kubernetes_user_impersonation:
     */
    secretStoreTokenKey?: string;
    secretStoreTokenPath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    token?: string;
}

export interface ResourceKubernetesUserImpersonation {
    /**
     * Bind interface
     */
    bindInterface: string;
    certificateAuthority?: string;
    clientCertificate?: string;
    clientKey?: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    port: number;
    portOverride: number;
    secretStoreCertificateAuthorityKey?: string;
    secretStoreCertificateAuthorityPath?: string;
    secretStoreClientCertificateKey?: string;
    secretStoreClientCertificatePath?: string;
    secretStoreClientKeyKey?: string;
    secretStoreClientKeyPath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceMaria {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceMemcached {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceMemsql {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceMongoHost {
    authDatabase: string;
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface ResourceMongoLegacyHost {
    authDatabase: string;
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    replicaSet?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface ResourceMongoLegacyReplicaset {
    authDatabase: string;
    /**
     * Bind interface
     */
    bindInterface: string;
    connectToReplica?: boolean;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    replicaSet: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface ResourceMongoReplicaSet {
    authDatabase: string;
    /**
     * Bind interface
     */
    bindInterface: string;
    connectToReplica?: boolean;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    replicaSet: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface ResourceMongoShardedCluster {
    authDatabase: string;
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface ResourceMtlsMysql {
    /**
     * Bind interface
     */
    bindInterface: string;
    certificateAuthority?: string;
    clientCertificate?: string;
    clientKey?: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    secretStoreCertificateAuthorityKey?: string;
    secretStoreCertificateAuthorityPath?: string;
    secretStoreClientCertificateKey?: string;
    secretStoreClientCertificatePath?: string;
    secretStoreClientKeyKey?: string;
    secretStoreClientKeyPath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    serverName?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceMtlsPostgres {
    /**
     * Bind interface
     */
    bindInterface: string;
    certificateAuthority?: string;
    clientCertificate?: string;
    clientKey?: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride: number;
    secretStoreCertificateAuthorityKey?: string;
    secretStoreCertificateAuthorityPath?: string;
    secretStoreClientCertificateKey?: string;
    secretStoreClientCertificatePath?: string;
    secretStoreClientKeyKey?: string;
    secretStoreClientKeyPath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    serverName?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceMysql {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceNeptune {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceNeptuneIam {
    accessKey?: string;
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    endpoint: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    port?: number;
    portOverride: number;
    region: string;
    roleArn?: string;
    roleExternalId?: string;
    secretAccessKey?: string;
    secretStoreAccessKeyKey?: string;
    secretStoreAccessKeyPath?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStoreRoleArnKey?: string;
    secretStoreRoleArnPath?: string;
    secretStoreRoleExternalIdKey?: string;
    secretStoreRoleExternalIdPath?: string;
    secretStoreSecretAccessKeyKey?: string;
    secretStoreSecretAccessKeyPath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceOracle {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface ResourcePostgres {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourcePresto {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface ResourceRabbitmqAmqp091 {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    tlsRequired?: boolean;
    username?: string;
}

export interface ResourceRawTcp {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceRdp {
    /**
     * Bind interface
     */
    bindInterface: string;
    downgradeNlaConnections?: boolean;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceRedis {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface ResourceRedshift {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceSingleStore {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceSnowflake {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    portOverride: number;
    schema?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceSqlServer {
    /**
     * Bind interface
     */
    bindInterface: string;
    database: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    overrideDatabase?: boolean;
    password?: string;
    port?: number;
    portOverride: number;
    schema?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceSsh {
    allowDeprecatedKeyExchanges?: boolean;
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    keyType?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    port: number;
    portForwarding?: boolean;
    portOverride: number;
    publicKey: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceSshCert {
    allowDeprecatedKeyExchanges?: boolean;
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    keyType?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    port: number;
    portForwarding?: boolean;
    portOverride: number;
    remoteIdentityGroupId?: string;
    remoteIdentityHealthcheckUsername?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceSshCustomerKey {
    allowDeprecatedKeyExchanges?: boolean;
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    port: number;
    portForwarding?: boolean;
    portOverride: number;
    privateKey?: string;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePrivateKeyKey?: string;
    secretStorePrivateKeyPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceSybase {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceSybaseIq {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface ResourceTeradata {
    /**
     * Bind interface
     */
    bindInterface: string;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: string;
    hostname: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name: string;
    password?: string;
    port?: number;
    portOverride: number;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: string;
    secretStorePasswordKey?: string;
    secretStorePasswordPath?: string;
    secretStoreUsernameKey?: string;
    secretStoreUsernamePath?: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    username?: string;
}

export interface SecretStoreAws {
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: string;
    region: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface SecretStoreAzureStore {
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
    /**
     * * gcp_store:
     */
    vaultUri: string;
}

export interface SecretStoreGcpStore {
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: string;
    projectId: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface SecretStoreVaultApprole {
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: string;
    namespace?: string;
    serverAddress: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface SecretStoreVaultTls {
    caCertPath?: string;
    clientCertPath: string;
    clientKeyPath: string;
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: string;
    namespace?: string;
    serverAddress: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}

export interface SecretStoreVaultToken {
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: string;
    namespace?: string;
    serverAddress: string;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: string};
}
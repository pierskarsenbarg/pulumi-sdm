// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccountService {
    /**
     * Unique human-readable name of the Service.
     */
    name: pulumi.Input<string>;
    /**
     * The User's suspended state.
     */
    suspended?: pulumi.Input<boolean>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    token?: pulumi.Input<string>;
}

export interface AccountUser {
    /**
     * The User's email address. Must be unique.
     */
    email: pulumi.Input<string>;
    /**
     * External ID is an alternative unique ID this user is represented by within an external service.
     */
    externalId?: pulumi.Input<string>;
    /**
     * The User's first name.
     */
    firstName: pulumi.Input<string>;
    /**
     * The User's last name.
     */
    lastName: pulumi.Input<string>;
    /**
     * Managed By is a read only field for what service manages this user, e.g. StrongDM, Okta, Azure.
     */
    managedBy?: pulumi.Input<string>;
    /**
     * PermissionLevel is a read only field for the user's permission level e.g. admin, DBA, user.
     */
    permissionLevel?: pulumi.Input<string>;
    /**
     * The User's suspended state.
     */
    suspended?: pulumi.Input<boolean>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NodeGateway {
    /**
     * The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to "0.0.0.0:listen_address_port".
     */
    bindAddress?: pulumi.Input<string>;
    /**
     * Device is a read only device name uploaded by the gateway process when  it comes online.
     */
    device?: pulumi.Input<string>;
    /**
     * GatewayFilter can be used to restrict the peering between relays and gateways.
     */
    gatewayFilter?: pulumi.Input<string>;
    /**
     * The public hostname/port tuple at which the gateway will be accessible to clients.
     */
    listenAddress: pulumi.Input<string>;
    /**
     * Location is a read only network location uploaded by the gateway process when it comes online.
     */
    location?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
     */
    name?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    token?: pulumi.Input<string>;
    /**
     * Version is a read only sdm binary version uploaded by the gateway process when it comes online.
     */
    version?: pulumi.Input<string>;
}

export interface NodeRelay {
    /**
     * Device is a read only device name uploaded by the gateway process when  it comes online.
     */
    device?: pulumi.Input<string>;
    /**
     * GatewayFilter can be used to restrict the peering between relays and gateways.
     */
    gatewayFilter?: pulumi.Input<string>;
    /**
     * Location is a read only network location uploaded by the gateway process when it comes online.
     */
    location?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
     */
    name?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    token?: pulumi.Input<string>;
    /**
     * Version is a read only sdm binary version uploaded by the gateway process when it comes online.
     */
    version?: pulumi.Input<string>;
}

export interface ResourceAks {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    certificateAuthority?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clientKey?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    port: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    remoteIdentityGroupId?: pulumi.Input<string>;
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAksBasicAuth {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceAksServiceAccount {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    port: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    remoteIdentityGroupId?: pulumi.Input<string>;
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * * kubernetes_user_impersonation:
     */
    token?: pulumi.Input<string>;
}

export interface ResourceAksServiceAccountUserImpersonation {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    port: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * * kubernetes_user_impersonation:
     */
    token?: pulumi.Input<string>;
}

export interface ResourceAksUserImpersonation {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    certificateAuthority?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clientKey?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    port: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAmazonEks {
    accessKey?: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    certificateAuthority?: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    endpoint: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    region: pulumi.Input<string>;
    remoteIdentityGroupId?: pulumi.Input<string>;
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    roleExternalId?: pulumi.Input<string>;
    secretAccessKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAmazonEksInstanceProfile {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    certificateAuthority?: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    endpoint: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    region: pulumi.Input<string>;
    remoteIdentityGroupId?: pulumi.Input<string>;
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    roleExternalId?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAmazonEksInstanceProfileUserImpersonation {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    certificateAuthority?: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    endpoint: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    region: pulumi.Input<string>;
    remoteIdentityGroupId?: pulumi.Input<string>;
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    roleExternalId?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAmazonEksUserImpersonation {
    accessKey?: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    certificateAuthority?: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    endpoint: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    region: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    roleExternalId?: pulumi.Input<string>;
    secretAccessKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAmazonEs {
    accessKey?: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    region: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    roleExternalId?: pulumi.Input<string>;
    secretAccessKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAmazonmqAmqp091 {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsRequired?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceAthena {
    accessKey?: pulumi.Input<string>;
    athenaOutput: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    roleExternalId?: pulumi.Input<string>;
    secretAccessKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAuroraMysql {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    requireNativeAuth?: pulumi.Input<boolean>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    useAzureSingleServerUsernames?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceAuroraPostgres {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    overrideDatabase?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceAws {
    accessKey?: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    healthcheckRegion: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    roleArn?: pulumi.Input<string>;
    roleExternalId?: pulumi.Input<string>;
    secretAccessKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAwsConsole {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    enableEnvVariables?: pulumi.Input<boolean>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    region: pulumi.Input<string>;
    remoteIdentityGroupId?: pulumi.Input<string>;
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    roleExternalId?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    sessionExpiry?: pulumi.Input<number>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAwsConsoleStaticKeyPair {
    accessKey?: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    region: pulumi.Input<string>;
    remoteIdentityGroupId?: pulumi.Input<string>;
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    roleExternalId?: pulumi.Input<string>;
    secretAccessKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    sessionExpiry?: pulumi.Input<number>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAzure {
    appId?: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * * sql_server_kerberos_ad:
     */
    tenantId?: pulumi.Input<string>;
}

export interface ResourceAzureCertificate {
    appId?: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * * sql_server_kerberos_ad:
     */
    tenantId?: pulumi.Input<string>;
}

export interface ResourceAzureMysql {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    requireNativeAuth?: pulumi.Input<boolean>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    useAzureSingleServerUsernames?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceAzurePostgres {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    overrideDatabase?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceBigQuery {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    endpoint: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    privateKey?: pulumi.Input<string>;
    project: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceCassandra {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsRequired?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceCitus {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    overrideDatabase?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceClustrix {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    requireNativeAuth?: pulumi.Input<boolean>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    useAzureSingleServerUsernames?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceCockroach {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    overrideDatabase?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceDb2I {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsRequired?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceDb2Luw {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceDocumentDbHost {
    authDatabase: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceDocumentDbReplicaSet {
    authDatabase: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    connectToReplica?: pulumi.Input<boolean>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    replicaSet: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceDruid {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceDynamoDb {
    accessKey?: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    endpoint: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    region: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    roleExternalId?: pulumi.Input<string>;
    secretAccessKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceElastic {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsRequired?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceElasticacheRedis {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsRequired?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceGcp {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    keyfile?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    scopes: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceGoogleGke {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    certificateAuthority?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    endpoint: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    remoteIdentityGroupId?: pulumi.Input<string>;
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    serviceAccountKey?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceGoogleGkeUserImpersonation {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    certificateAuthority?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    endpoint: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    serviceAccountKey?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceGreenplum {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    overrideDatabase?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceHttpAuth {
    authHeader?: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    defaultPath?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    headersBlacklist?: pulumi.Input<string>;
    healthcheckPath: pulumi.Input<string>;
    hostOverride?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * * kubernetes:
     */
    url: pulumi.Input<string>;
}

export interface ResourceHttpBasicAuth {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    defaultPath?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    headersBlacklist?: pulumi.Input<string>;
    healthcheckPath: pulumi.Input<string>;
    hostOverride?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * * kubernetes:
     */
    url: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface ResourceHttpNoAuth {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    defaultPath?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    headersBlacklist?: pulumi.Input<string>;
    healthcheckPath: pulumi.Input<string>;
    hostOverride?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * * kubernetes:
     */
    url: pulumi.Input<string>;
}

export interface ResourceKubernetes {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    certificateAuthority?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clientKey?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    port: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    remoteIdentityGroupId?: pulumi.Input<string>;
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceKubernetesBasicAuth {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceKubernetesServiceAccount {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    port: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    remoteIdentityGroupId?: pulumi.Input<string>;
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * * kubernetes_user_impersonation:
     */
    token?: pulumi.Input<string>;
}

export interface ResourceKubernetesServiceAccountUserImpersonation {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    port: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * * kubernetes_user_impersonation:
     */
    token?: pulumi.Input<string>;
}

export interface ResourceKubernetesUserImpersonation {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    certificateAuthority?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clientKey?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    port: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceMaria {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    requireNativeAuth?: pulumi.Input<boolean>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    useAzureSingleServerUsernames?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceMemcached {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceMemsql {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    requireNativeAuth?: pulumi.Input<boolean>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    useAzureSingleServerUsernames?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceMongoHost {
    authDatabase: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsRequired?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceMongoLegacyHost {
    authDatabase: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    replicaSet?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsRequired?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceMongoLegacyReplicaset {
    authDatabase: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    connectToReplica?: pulumi.Input<boolean>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    replicaSet: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsRequired?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceMongoReplicaSet {
    authDatabase: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    connectToReplica?: pulumi.Input<boolean>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    replicaSet: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsRequired?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceMongoShardedCluster {
    authDatabase: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsRequired?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceMtlsMysql {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    certificateAuthority?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clientKey?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    requireNativeAuth?: pulumi.Input<boolean>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    useAzureSingleServerUsernames?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceMtlsPostgres {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    certificateAuthority?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    clientKey?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    overrideDatabase?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceMysql {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    requireNativeAuth?: pulumi.Input<boolean>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    useAzureSingleServerUsernames?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceNeptune {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    endpoint: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceNeptuneIam {
    accessKey?: pulumi.Input<string>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    endpoint: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    region: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    roleExternalId?: pulumi.Input<string>;
    secretAccessKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceOracle {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsRequired?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourcePostgres {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    overrideDatabase?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourcePresto {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsRequired?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceRabbitmqAmqp091 {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsRequired?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceRawTcp {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceRdp {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    downgradeNlaConnections?: pulumi.Input<boolean>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceRedis {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsRequired?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceRedshift {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    overrideDatabase?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceSingleStore {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    requireNativeAuth?: pulumi.Input<boolean>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    useAzureSingleServerUsernames?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
}

export interface ResourceSnowflake {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    schema?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceSnowsight {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    healthcheckUsername: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    portOverride?: pulumi.Input<number>;
    samlMetadata?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceSqlServer {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    overrideDatabase?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    schema?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceSqlServerAzureAd {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    overrideDatabase?: pulumi.Input<boolean>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    schema?: pulumi.Input<string>;
    secret?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * * sql_server_kerberos_ad:
     */
    tenantId?: pulumi.Input<string>;
}

export interface ResourceSqlServerKerberosAd {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    keytab?: pulumi.Input<string>;
    krbConfig?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    overrideDatabase?: pulumi.Input<boolean>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    realm?: pulumi.Input<string>;
    schema?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    serverSpn?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceSsh {
    allowDeprecatedKeyExchanges?: pulumi.Input<boolean>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    keyType?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    port: pulumi.Input<number>;
    portForwarding?: pulumi.Input<boolean>;
    portOverride?: pulumi.Input<number>;
    publicKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceSshCert {
    allowDeprecatedKeyExchanges?: pulumi.Input<boolean>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    keyType?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    port: pulumi.Input<number>;
    portForwarding?: pulumi.Input<boolean>;
    portOverride?: pulumi.Input<number>;
    remoteIdentityGroupId?: pulumi.Input<string>;
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceSshCustomerKey {
    allowDeprecatedKeyExchanges?: pulumi.Input<boolean>;
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    port: pulumi.Input<number>;
    portForwarding?: pulumi.Input<boolean>;
    portOverride?: pulumi.Input<number>;
    privateKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceSybase {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceSybaseIq {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceTeradata {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface ResourceTrino {
    /**
     * Bind interface
     */
    bindInterface?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    username?: pulumi.Input<string>;
}

export interface SecretStoreAws {
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    region: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface SecretStoreAzureStore {
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * * cyberark_conjur:
     */
    vaultUri: pulumi.Input<string>;
}

export interface SecretStoreCyberarkConjur {
    appUrl: pulumi.Input<string>;
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface SecretStoreCyberarkPam {
    appUrl: pulumi.Input<string>;
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface SecretStoreCyberarkPamExperimental {
    appUrl: pulumi.Input<string>;
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface SecretStoreDelineaStore {
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    serverUrl?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * * gcp_store:
     */
    tenantName?: pulumi.Input<string>;
}

export interface SecretStoreGcpStore {
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface SecretStoreVaultApprole {
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    serverAddress: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface SecretStoreVaultTls {
    caCertPath?: pulumi.Input<string>;
    clientCertPath: pulumi.Input<string>;
    clientKeyPath: pulumi.Input<string>;
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    serverAddress: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface SecretStoreVaultToken {
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    serverAddress: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

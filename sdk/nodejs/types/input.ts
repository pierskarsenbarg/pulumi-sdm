// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccountService {
    /**
     * Unique human-readable name of the Service.
     */
    name: pulumi.Input<string>;
    /**
     * The User's suspended state.
     */
    suspended?: pulumi.Input<boolean>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    token?: pulumi.Input<string>;
}

export interface AccountUser {
    /**
     * The User's email address. Must be unique.
     */
    email: pulumi.Input<string>;
    /**
     * External ID is an alternative unique ID this user is represented by within an external service.
     */
    externalId?: pulumi.Input<string>;
    /**
     * The User's first name.
     */
    firstName: pulumi.Input<string>;
    /**
     * The User's last name.
     */
    lastName: pulumi.Input<string>;
    /**
     * Managed By is a read only field for what service manages this user, e.g. StrongDM, Okta, Azure.
     */
    managedBy?: pulumi.Input<string>;
    /**
     * PermissionLevel is a read only field for the user's permission level e.g. admin, DBA, user.
     */
    permissionLevel?: pulumi.Input<string>;
    /**
     * The User's suspended state.
     */
    suspended?: pulumi.Input<boolean>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NodeGateway {
    /**
     * The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to "0.0.0.0:listen_address_port".
     */
    bindAddress?: pulumi.Input<string>;
    /**
     * Device is a read only device name uploaded by the gateway process when it comes online.
     */
    device?: pulumi.Input<string>;
    /**
     * GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.
     */
    gatewayFilter?: pulumi.Input<string>;
    /**
     * The public hostname/port tuple at which the gateway will be accessible to clients.
     */
    listenAddress: pulumi.Input<string>;
    /**
     * Location is a read only network location uploaded by the gateway process when it comes online.
     */
    location?: pulumi.Input<string>;
    /**
     * Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
     */
    maintenanceWindows?: pulumi.Input<pulumi.Input<inputs.NodeGatewayMaintenanceWindow>[]>;
    /**
     * Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
     */
    name?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    token?: pulumi.Input<string>;
    /**
     * Version is a read only sdm binary version uploaded by the gateway process when it comes online.
     */
    version?: pulumi.Input<string>;
}

export interface NodeGatewayMaintenanceWindow {
    cronSchedule: pulumi.Input<string>;
    requireIdleness: pulumi.Input<boolean>;
}

export interface NodeRelay {
    /**
     * Device is a read only device name uploaded by the gateway process when it comes online.
     */
    device?: pulumi.Input<string>;
    /**
     * GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.
     */
    gatewayFilter?: pulumi.Input<string>;
    /**
     * Location is a read only network location uploaded by the gateway process when it comes online.
     */
    location?: pulumi.Input<string>;
    /**
     * Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
     */
    maintenanceWindows?: pulumi.Input<pulumi.Input<inputs.NodeRelayMaintenanceWindow>[]>;
    /**
     * Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
     */
    name?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    token?: pulumi.Input<string>;
    /**
     * Version is a read only sdm binary version uploaded by the gateway process when it comes online.
     */
    version?: pulumi.Input<string>;
}

export interface NodeRelayMaintenanceWindow {
    cronSchedule: pulumi.Input<string>;
    requireIdleness: pulumi.Input<boolean>;
}

export interface ResourceAks {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The CA to authenticate TLS connections with.
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * The certificate to authenticate TLS connections with.
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * The key to authenticate TLS connections with.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The ID of the remote identity group to use for remote identity connections.
     */
    remoteIdentityGroupId?: pulumi.Input<string>;
    /**
     * The username to use for healthchecks, when clients otherwise connect with their own remote identity username.
     */
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAksBasicAuth {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceAksServiceAccount {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The ID of the remote identity group to use for remote identity connections.
     */
    remoteIdentityGroupId?: pulumi.Input<string>;
    /**
     * The username to use for healthchecks, when clients otherwise connect with their own remote identity username.
     */
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The API token to authenticate with.
     * * kubernetes_user_impersonation:
     */
    token?: pulumi.Input<string>;
}

export interface ResourceAksServiceAccountUserImpersonation {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The API token to authenticate with.
     * * kubernetes_user_impersonation:
     */
    token?: pulumi.Input<string>;
}

export interface ResourceAksUserImpersonation {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The CA to authenticate TLS connections with.
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * The certificate to authenticate TLS connections with.
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * The key to authenticate TLS connections with.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAmazonEks {
    /**
     * The Access Key ID to use to authenticate.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The CA to authenticate TLS connections with.
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * The name of the cluster to connect to.
     */
    clusterName: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
     */
    endpoint: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The AWS region to connect to.
     */
    region: pulumi.Input<string>;
    /**
     * The ID of the remote identity group to use for remote identity connections.
     */
    remoteIdentityGroupId?: pulumi.Input<string>;
    /**
     * The username to use for healthchecks, when clients otherwise connect with their own remote identity username.
     */
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    /**
     * The role to assume after logging in.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
     */
    roleExternalId?: pulumi.Input<string>;
    /**
     * The Secret Access Key to use to authenticate.
     */
    secretAccessKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAmazonEksInstanceProfile {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The CA to authenticate TLS connections with.
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * The name of the cluster to connect to.
     */
    clusterName: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
     */
    endpoint: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The AWS region to connect to.
     */
    region: pulumi.Input<string>;
    /**
     * The ID of the remote identity group to use for remote identity connections.
     */
    remoteIdentityGroupId?: pulumi.Input<string>;
    /**
     * The username to use for healthchecks, when clients otherwise connect with their own remote identity username.
     */
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    /**
     * The role to assume after logging in.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
     */
    roleExternalId?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAmazonEksInstanceProfileUserImpersonation {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The CA to authenticate TLS connections with.
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * The name of the cluster to connect to.
     */
    clusterName: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
     */
    endpoint: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The AWS region to connect to.
     */
    region: pulumi.Input<string>;
    /**
     * The ID of the remote identity group to use for remote identity connections.
     */
    remoteIdentityGroupId?: pulumi.Input<string>;
    /**
     * The username to use for healthchecks, when clients otherwise connect with their own remote identity username.
     */
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    /**
     * The role to assume after logging in.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
     */
    roleExternalId?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAmazonEksUserImpersonation {
    /**
     * The Access Key ID to use to authenticate.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The CA to authenticate TLS connections with.
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * The name of the cluster to connect to.
     */
    clusterName: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
     */
    endpoint: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The AWS region to connect to.
     */
    region: pulumi.Input<string>;
    /**
     * The role to assume after logging in.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
     */
    roleExternalId?: pulumi.Input<string>;
    /**
     * The Secret Access Key to use to authenticate.
     */
    secretAccessKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAmazonEs {
    /**
     * The Access Key ID to use to authenticate.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
     */
    endpoint?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The AWS region to connect to.
     */
    region: pulumi.Input<string>;
    /**
     * The role to assume after logging in.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
     */
    roleExternalId?: pulumi.Input<string>;
    /**
     * The Secret Access Key to use to authenticate.
     */
    secretAccessKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAmazonmqAmqp091 {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set, TLS must be used to connect to this resource.
     */
    tlsRequired?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceAthena {
    /**
     * The Access Key ID to use to authenticate.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The AWS S3 output location.
     */
    athenaOutput: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The AWS region to connect to.
     */
    region?: pulumi.Input<string>;
    /**
     * The role to assume after logging in.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
     */
    roleExternalId?: pulumi.Input<string>;
    /**
     * The Secret Access Key to use to authenticate.
     */
    secretAccessKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAuroraMysql {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
     */
    requireNativeAuth?: pulumi.Input<boolean>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If true, appends the hostname to the username when hitting a database.azure.com address
     */
    useAzureSingleServerUsernames?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceAuroraPostgres {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
     */
    overrideDatabase?: pulumi.Input<boolean>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceAws {
    /**
     * The Access Key ID to use to authenticate.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The AWS region healthcheck requests should attempt to connect to.
     */
    healthcheckRegion: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The role to assume after logging in.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
     */
    roleExternalId?: pulumi.Input<string>;
    /**
     * The Secret Access Key to use to authenticate.
     */
    secretAccessKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAwsConsole {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * If true, prefer environment variables to authenticate connection even if EC2 roles are configured.
     */
    enableEnvVariables?: pulumi.Input<boolean>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The AWS region to connect to.
     */
    region: pulumi.Input<string>;
    /**
     * The ID of the remote identity group to use for remote identity connections.
     */
    remoteIdentityGroupId?: pulumi.Input<string>;
    /**
     * The username to use for healthchecks, when clients otherwise connect with their own remote identity username.
     */
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    /**
     * The role to assume after logging in.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
     */
    roleExternalId?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * The length of time in seconds AWS console sessions will live before needing to reauthenticate.
     */
    sessionExpiry?: pulumi.Input<number>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAwsConsoleStaticKeyPair {
    /**
     * The Access Key ID to use to authenticate.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The AWS region to connect to.
     */
    region: pulumi.Input<string>;
    /**
     * The ID of the remote identity group to use for remote identity connections.
     */
    remoteIdentityGroupId?: pulumi.Input<string>;
    /**
     * The username to use for healthchecks, when clients otherwise connect with their own remote identity username.
     */
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    /**
     * The role to assume after logging in.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
     */
    roleExternalId?: pulumi.Input<string>;
    /**
     * The Secret Access Key to use to authenticate.
     */
    secretAccessKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * The length of time in seconds AWS console sessions will live before needing to reauthenticate.
     */
    sessionExpiry?: pulumi.Input<number>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceAzure {
    /**
     * The application ID to authenticate with.
     */
    appId?: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Azure AD directory (tenant) ID with which to authenticate.
     * * sql_server_kerberos_ad:
     */
    tenantId?: pulumi.Input<string>;
}

export interface ResourceAzureCertificate {
    /**
     * The application ID to authenticate with.
     */
    appId?: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The certificate to authenticate TLS connections with.
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Azure AD directory (tenant) ID with which to authenticate.
     * * sql_server_kerberos_ad:
     */
    tenantId?: pulumi.Input<string>;
}

export interface ResourceAzureMysql {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
     */
    requireNativeAuth?: pulumi.Input<boolean>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If true, appends the hostname to the username when hitting a database.azure.com address
     */
    useAzureSingleServerUsernames?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceAzurePostgres {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
     */
    overrideDatabase?: pulumi.Input<boolean>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceAzurePostgresManagedIdentity {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
     */
    overrideDatabase?: pulumi.Input<boolean>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If true, appends the hostname to the username when hitting a database.azure.com address
     */
    useAzureSingleServerUsernames?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceBigQuery {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
     */
    endpoint: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The private key used to authenticate with the server.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The project to connect to.
     */
    project: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceCassandra {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set, TLS must be used to connect to this resource.
     */
    tlsRequired?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceCitus {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
     */
    overrideDatabase?: pulumi.Input<boolean>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceClustrix {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
     */
    requireNativeAuth?: pulumi.Input<boolean>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If true, appends the hostname to the username when hitting a database.azure.com address
     */
    useAzureSingleServerUsernames?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceCockroach {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
     */
    overrideDatabase?: pulumi.Input<boolean>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceDb2I {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set, TLS must be used to connect to this resource.
     */
    tlsRequired?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceDb2Luw {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceDocumentDbHost {
    /**
     * The authentication database to use.
     */
    authDatabase: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceDocumentDbReplicaSet {
    /**
     * The authentication database to use.
     */
    authDatabase: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * Set to connect to a replica instead of the primary node.
     */
    connectToReplica?: pulumi.Input<boolean>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The name of the mongo replicaset.
     */
    replicaSet: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceDruid {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceDynamoDb {
    /**
     * The Access Key ID to use to authenticate.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
     */
    endpoint: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The AWS region to connect to.
     */
    region: pulumi.Input<string>;
    /**
     * The role to assume after logging in.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
     */
    roleExternalId?: pulumi.Input<string>;
    /**
     * The Secret Access Key to use to authenticate.
     */
    secretAccessKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceElastic {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set, TLS must be used to connect to this resource.
     */
    tlsRequired?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceElasticacheRedis {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set, TLS must be used to connect to this resource.
     */
    tlsRequired?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceGcp {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The service account keyfile to authenticate with.
     */
    keyfile?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * Space separated scopes that this login should assume into when authenticating.
     */
    scopes: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceGoogleGke {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The CA to authenticate TLS connections with.
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
     */
    endpoint: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The ID of the remote identity group to use for remote identity connections.
     */
    remoteIdentityGroupId?: pulumi.Input<string>;
    /**
     * The username to use for healthchecks, when clients otherwise connect with their own remote identity username.
     */
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * The service account key to authenticate with.
     */
    serviceAccountKey?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceGoogleGkeUserImpersonation {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The CA to authenticate TLS connections with.
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
     */
    endpoint: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * The service account key to authenticate with.
     */
    serviceAccountKey?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceGreenplum {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
     */
    overrideDatabase?: pulumi.Input<boolean>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceHttpAuth {
    /**
     * The content to set as the authorization header.
     */
    authHeader?: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * Automatically redirect to this path upon connecting.
     */
    defaultPath?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * Header names (e.g. Authorization), to omit from logs.
     */
    headersBlacklist?: pulumi.Input<string>;
    /**
     * This path will be used to check the health of your site.
     */
    healthcheckPath: pulumi.Input<string>;
    /**
     * The host header will be overwritten with this field if provided.
     */
    hostOverride?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The base address of your website without the path.
     * * kubernetes:
     */
    url: pulumi.Input<string>;
}

export interface ResourceHttpBasicAuth {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * Automatically redirect to this path upon connecting.
     */
    defaultPath?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * Header names (e.g. Authorization), to omit from logs.
     */
    headersBlacklist?: pulumi.Input<string>;
    /**
     * This path will be used to check the health of your site.
     */
    healthcheckPath: pulumi.Input<string>;
    /**
     * The host header will be overwritten with this field if provided.
     */
    hostOverride?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The base address of your website without the path.
     * * kubernetes:
     */
    url: pulumi.Input<string>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceHttpNoAuth {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * Automatically redirect to this path upon connecting.
     */
    defaultPath?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * Header names (e.g. Authorization), to omit from logs.
     */
    headersBlacklist?: pulumi.Input<string>;
    /**
     * This path will be used to check the health of your site.
     */
    healthcheckPath: pulumi.Input<string>;
    /**
     * The host header will be overwritten with this field if provided.
     */
    hostOverride?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The base address of your website without the path.
     * * kubernetes:
     */
    url: pulumi.Input<string>;
}

export interface ResourceKubernetes {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The CA to authenticate TLS connections with.
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * The certificate to authenticate TLS connections with.
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * The key to authenticate TLS connections with.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The ID of the remote identity group to use for remote identity connections.
     */
    remoteIdentityGroupId?: pulumi.Input<string>;
    /**
     * The username to use for healthchecks, when clients otherwise connect with their own remote identity username.
     */
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceKubernetesBasicAuth {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceKubernetesServiceAccount {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The ID of the remote identity group to use for remote identity connections.
     */
    remoteIdentityGroupId?: pulumi.Input<string>;
    /**
     * The username to use for healthchecks, when clients otherwise connect with their own remote identity username.
     */
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The API token to authenticate with.
     * * kubernetes_user_impersonation:
     */
    token?: pulumi.Input<string>;
}

export interface ResourceKubernetesServiceAccountUserImpersonation {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The API token to authenticate with.
     * * kubernetes_user_impersonation:
     */
    token?: pulumi.Input<string>;
}

export interface ResourceKubernetesUserImpersonation {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The CA to authenticate TLS connections with.
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * The certificate to authenticate TLS connections with.
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * The key to authenticate TLS connections with.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
     */
    healthcheckNamespace?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceMaria {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
     */
    requireNativeAuth?: pulumi.Input<boolean>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If true, appends the hostname to the username when hitting a database.azure.com address
     */
    useAzureSingleServerUsernames?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceMemcached {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceMemsql {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
     */
    requireNativeAuth?: pulumi.Input<boolean>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If true, appends the hostname to the username when hitting a database.azure.com address
     */
    useAzureSingleServerUsernames?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceMongoHost {
    /**
     * The authentication database to use.
     */
    authDatabase: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set, TLS must be used to connect to this resource.
     */
    tlsRequired?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceMongoLegacyHost {
    /**
     * The authentication database to use.
     */
    authDatabase: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The name of the mongo replicaset.
     */
    replicaSet?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set, TLS must be used to connect to this resource.
     */
    tlsRequired?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceMongoLegacyReplicaset {
    /**
     * The authentication database to use.
     */
    authDatabase: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * Set to connect to a replica instead of the primary node.
     */
    connectToReplica?: pulumi.Input<boolean>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The name of the mongo replicaset.
     */
    replicaSet: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set, TLS must be used to connect to this resource.
     */
    tlsRequired?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceMongoReplicaSet {
    /**
     * The authentication database to use.
     */
    authDatabase: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * Set to connect to a replica instead of the primary node.
     */
    connectToReplica?: pulumi.Input<boolean>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The name of the mongo replicaset.
     */
    replicaSet: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set, TLS must be used to connect to this resource.
     */
    tlsRequired?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceMongoShardedCluster {
    /**
     * The authentication database to use.
     */
    authDatabase: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set, TLS must be used to connect to this resource.
     */
    tlsRequired?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceMtlsMysql {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The CA to authenticate TLS connections with.
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * The certificate to authenticate TLS connections with.
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * The key to authenticate TLS connections with.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
     */
    requireNativeAuth?: pulumi.Input<boolean>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Server name for TLS verification (unverified by StrongDM if empty)
     */
    serverName?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If true, appends the hostname to the username when hitting a database.azure.com address
     */
    useAzureSingleServerUsernames?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceMtlsPostgres {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The CA to authenticate TLS connections with.
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * The certificate to authenticate TLS connections with.
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * The key to authenticate TLS connections with.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
     */
    overrideDatabase?: pulumi.Input<boolean>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Server name for TLS verification (unverified by StrongDM if empty)
     */
    serverName?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceMysql {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
     */
    requireNativeAuth?: pulumi.Input<boolean>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If true, appends the hostname to the username when hitting a database.azure.com address
     */
    useAzureSingleServerUsernames?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceNeptune {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
     */
    endpoint: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceNeptuneIam {
    /**
     * The Access Key ID to use to authenticate.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
     */
    endpoint: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The AWS region to connect to.
     */
    region: pulumi.Input<string>;
    /**
     * The role to assume after logging in.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
     */
    roleExternalId?: pulumi.Input<string>;
    /**
     * The Secret Access Key to use to authenticate.
     */
    secretAccessKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceOracle {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set, TLS must be used to connect to this resource.
     */
    tlsRequired?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourcePostgres {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
     */
    overrideDatabase?: pulumi.Input<boolean>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourcePresto {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set, TLS must be used to connect to this resource.
     */
    tlsRequired?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceRabbitmqAmqp091 {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set, TLS must be used to connect to this resource.
     */
    tlsRequired?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceRawTcp {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceRdp {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * When set, network level authentication will not be used. May resolve unexpected authentication errors to older servers. When set, healthchecks cannot detect if a provided username / password pair is correct.
     */
    downgradeNlaConnections?: pulumi.Input<boolean>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceRedis {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set, TLS must be used to connect to this resource.
     */
    tlsRequired?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceRedshift {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
     */
    overrideDatabase?: pulumi.Input<boolean>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceSingleStore {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
     */
    requireNativeAuth?: pulumi.Input<boolean>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If true, appends the hostname to the username when hitting a database.azure.com address
     */
    useAzureSingleServerUsernames?: pulumi.Input<boolean>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceSnowflake {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The Schema to use to direct initial requests.
     */
    schema?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceSnowsight {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The StrongDM user email to use for healthchecks.
     */
    healthcheckUsername: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The Metadata for your snowflake IDP integration
     */
    samlMetadata?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ResourceSqlServer {
    /**
     * Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
     */
    allowDeprecatedEncryption?: pulumi.Input<boolean>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
     */
    overrideDatabase?: pulumi.Input<boolean>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The Schema to use to direct initial requests.
     */
    schema?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceSqlServerAzureAd {
    /**
     * Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
     */
    allowDeprecatedEncryption?: pulumi.Input<boolean>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The Azure AD application (client) ID with which to authenticate.
     */
    clientId?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
     */
    overrideDatabase?: pulumi.Input<boolean>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The Schema to use to direct initial requests.
     */
    schema?: pulumi.Input<string>;
    /**
     * The Azure AD client secret (application password) with which to authenticate.
     */
    secret?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Azure AD directory (tenant) ID with which to authenticate.
     * * sql_server_kerberos_ad:
     */
    tenantId?: pulumi.Input<string>;
}

export interface ResourceSqlServerKerberosAd {
    /**
     * Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
     */
    allowDeprecatedEncryption?: pulumi.Input<boolean>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * The keytab file in base64 format containing an entry with the principal name (username@realm) and key version number with which to authenticate.
     */
    keytab?: pulumi.Input<string>;
    /**
     * The Kerberos 5 configuration file (krb5.conf) specifying the Active Directory server (KDC) for the configured realm.
     */
    krbConfig?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
     */
    overrideDatabase?: pulumi.Input<boolean>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The Active Directory domain (realm) to which the configured username belongs.
     */
    realm?: pulumi.Input<string>;
    /**
     * The Schema to use to direct initial requests.
     */
    schema?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * The Service Principal Name of the Microsoft SQL Server instance in Active Directory.
     */
    serverSpn?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceSsh {
    /**
     * Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
     */
    allowDeprecatedKeyExchanges?: pulumi.Input<boolean>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * The key type to use e.g. rsa-2048 or ed25519
     */
    keyType?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port: pulumi.Input<number>;
    /**
     * Whether port forwarding is allowed through this server.
     */
    portForwarding?: pulumi.Input<boolean>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The public key to append to a server's authorized keys. This will be generated after resource creation.
     */
    publicKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceSshCert {
    /**
     * Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
     */
    allowDeprecatedKeyExchanges?: pulumi.Input<boolean>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * The key type to use e.g. rsa-2048 or ed25519
     */
    keyType?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port: pulumi.Input<number>;
    /**
     * Whether port forwarding is allowed through this server.
     */
    portForwarding?: pulumi.Input<boolean>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The ID of the remote identity group to use for remote identity connections.
     */
    remoteIdentityGroupId?: pulumi.Input<string>;
    /**
     * The username to use for healthchecks, when clients otherwise connect with their own remote identity username.
     */
    remoteIdentityHealthcheckUsername?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceSshCustomerKey {
    /**
     * Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
     */
    allowDeprecatedKeyExchanges?: pulumi.Input<boolean>;
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port: pulumi.Input<number>;
    /**
     * Whether port forwarding is allowed through this server.
     */
    portForwarding?: pulumi.Input<boolean>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * The private key used to authenticate with the server.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceSybase {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceSybaseIq {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceTeradata {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface ResourceTrino {
    /**
     * The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
     */
    bindInterface?: pulumi.Input<string>;
    /**
     * The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
     */
    database: pulumi.Input<string>;
    /**
     * A filter applied to the routing logic to pin datasource to nodes.
     */
    egressFilter?: pulumi.Input<string>;
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name: pulumi.Input<string>;
    /**
     * The password to authenticate with.
     */
    password?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * The local port used by clients to connect to this resource.
     */
    portOverride?: pulumi.Input<number>;
    /**
     * ID of the secret store containing credentials for this resource, if any.
     */
    secretStoreId?: pulumi.Input<string>;
    /**
     * Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

export interface SecretStoreAws {
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    /**
     * The AWS region to target e.g. us-east-1
     */
    region: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface SecretStoreAzureStore {
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The URI of the key vault to target e.g. https://myvault.vault.azure.net
     * * cyberark_conjur:
     */
    vaultUri: pulumi.Input<string>;
}

export interface SecretStoreCyberarkConjur {
    /**
     * The URL of the Cyberark instance
     */
    appUrl: pulumi.Input<string>;
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface SecretStoreCyberarkPam {
    /**
     * The URL of the Cyberark instance
     */
    appUrl: pulumi.Input<string>;
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface SecretStoreCyberarkPamExperimental {
    /**
     * The URL of the Cyberark instance
     */
    appUrl: pulumi.Input<string>;
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface SecretStoreDelineaStore {
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    /**
     * The URL of the Delinea instance
     */
    serverUrl?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The tenant name to target
     * * gcp_store:
     */
    tenantName?: pulumi.Input<string>;
}

export interface SecretStoreGcpStore {
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    /**
     * The GCP project ID to target.
     */
    projectId: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface SecretStoreVaultApprole {
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    /**
     * The namespace to make requests within
     */
    namespace?: pulumi.Input<string>;
    /**
     * The URL of the Vault to target
     */
    serverAddress: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface SecretStoreVaultTls {
    /**
     * A path to a CA file accessible by a Node
     */
    caCertPath?: pulumi.Input<string>;
    /**
     * A path to a client certificate file accessible by a Node
     */
    clientCertPath: pulumi.Input<string>;
    /**
     * A path to a client key file accessible by a Node
     */
    clientKeyPath: pulumi.Input<string>;
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    /**
     * The namespace to make requests within
     */
    namespace?: pulumi.Input<string>;
    /**
     * The URL of the Vault to target
     */
    serverAddress: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface SecretStoreVaultToken {
    /**
     * Unique human-readable name of the SecretStore.
     */
    name: pulumi.Input<string>;
    /**
     * The namespace to make requests within
     */
    namespace?: pulumi.Input<string>;
    /**
     * The URL of the Vault to target
     */
    serverAddress: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A Resource is a database, server, cluster, website, or cloud that strongDM
 *  delegates access to.
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdm from "@pulumi/sdm";
 *
 * const mysqlDatasources = sdm.getResource({
 *     name: "us-west*",
 *     tags: {
 *         env: "dev",
 *         region: "us-west",
 *     },
 *     type: "mysql",
 * });
 * ```
 */
export function getResource(args?: GetResourceArgs, opts?: pulumi.InvokeOptions): Promise<GetResourceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdm:index/getResource:getResource", {
        "hostname": args.hostname,
        "id": args.id,
        "name": args.name,
        "port": args.port,
        "tags": args.tags,
        "type": args.type,
        "username": args.username,
    }, opts);
}

/**
 * A collection of arguments for invoking getResource.
 */
export interface GetResourceArgs {
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    id?: string;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: string;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: number;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: {[key: string]: any};
    /**
     * a filter to select all items of a certain subtype. See the [filter documentation](https://www.strongdm.com/docs/automation/getting-started/filters) for more information.
     */
    type?: string;
    /**
     * The username to authenticate with.
     */
    username?: string;
}

/**
 * A collection of values returned by getResource.
 */
export interface GetResourceResult {
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    readonly hostname?: string;
    /**
     * Unique identifier of the Resource.
     */
    readonly id?: string;
    /**
     * a list of strings of ids of data sources that match the given arguments.
     */
    readonly ids: string[];
    /**
     * Unique human-readable name of the Resource.
     */
    readonly name?: string;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    readonly port?: number;
    /**
     * A single element list containing a map, where each key lists one of the following objects:
     * * aks:
     */
    readonly resources: outputs.GetResourceResource[];
    /**
     * Tags is a map of key, value pairs.
     */
    readonly tags?: {[key: string]: any};
    readonly type?: string;
    /**
     * The username to authenticate with.
     */
    readonly username?: string;
}
/**
 * A Resource is a database, server, cluster, website, or cloud that strongDM
 *  delegates access to.
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdm from "@pulumi/sdm";
 *
 * const mysqlDatasources = sdm.getResource({
 *     name: "us-west*",
 *     tags: {
 *         env: "dev",
 *         region: "us-west",
 *     },
 *     type: "mysql",
 * });
 * ```
 */
export function getResourceOutput(args?: GetResourceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetResourceResult> {
    return pulumi.output(args).apply((a: any) => getResource(a, opts))
}

/**
 * A collection of arguments for invoking getResource.
 */
export interface GetResourceOutputArgs {
    /**
     * The host to dial to initiate a connection from the egress node to this resource.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Unique identifier of the Resource.
     */
    id?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The port to dial to initiate a connection from the egress node to this resource.
     */
    port?: pulumi.Input<number>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * a filter to select all items of a certain subtype. See the [filter documentation](https://www.strongdm.com/docs/automation/getting-started/filters) for more information.
     */
    type?: pulumi.Input<string>;
    /**
     * The username to authenticate with.
     */
    username?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { AccountAttachmentArgs, AccountAttachmentState } from "./accountAttachment";
export type AccountAttachment = import("./accountAttachment").AccountAttachment;
export const AccountAttachment: typeof import("./accountAttachment").AccountAttachment = null as any;
utilities.lazyLoad(exports, ["AccountAttachment"], () => require("./accountAttachment"));

export { ApprovalWorkflowArgs, ApprovalWorkflowState } from "./approvalWorkflow";
export type ApprovalWorkflow = import("./approvalWorkflow").ApprovalWorkflow;
export const ApprovalWorkflow: typeof import("./approvalWorkflow").ApprovalWorkflow = null as any;
utilities.lazyLoad(exports, ["ApprovalWorkflow"], () => require("./approvalWorkflow"));

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetAccountAttachmentArgs, GetAccountAttachmentResult, GetAccountAttachmentOutputArgs } from "./getAccountAttachment";
export const getAccountAttachment: typeof import("./getAccountAttachment").getAccountAttachment = null as any;
export const getAccountAttachmentOutput: typeof import("./getAccountAttachment").getAccountAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getAccountAttachment","getAccountAttachmentOutput"], () => require("./getAccountAttachment"));

export { GetApprovalWorkflowArgs, GetApprovalWorkflowResult, GetApprovalWorkflowOutputArgs } from "./getApprovalWorkflow";
export const getApprovalWorkflow: typeof import("./getApprovalWorkflow").getApprovalWorkflow = null as any;
export const getApprovalWorkflowOutput: typeof import("./getApprovalWorkflow").getApprovalWorkflowOutput = null as any;
utilities.lazyLoad(exports, ["getApprovalWorkflow","getApprovalWorkflowOutput"], () => require("./getApprovalWorkflow"));

export { GetIdentityAliasArgs, GetIdentityAliasResult, GetIdentityAliasOutputArgs } from "./getIdentityAlias";
export const getIdentityAlias: typeof import("./getIdentityAlias").getIdentityAlias = null as any;
export const getIdentityAliasOutput: typeof import("./getIdentityAlias").getIdentityAliasOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityAlias","getIdentityAliasOutput"], () => require("./getIdentityAlias"));

export { GetIdentitySetArgs, GetIdentitySetResult, GetIdentitySetOutputArgs } from "./getIdentitySet";
export const getIdentitySet: typeof import("./getIdentitySet").getIdentitySet = null as any;
export const getIdentitySetOutput: typeof import("./getIdentitySet").getIdentitySetOutput = null as any;
utilities.lazyLoad(exports, ["getIdentitySet","getIdentitySetOutput"], () => require("./getIdentitySet"));

export { GetManagedSecretArgs, GetManagedSecretResult, GetManagedSecretOutputArgs } from "./getManagedSecret";
export const getManagedSecret: typeof import("./getManagedSecret").getManagedSecret = null as any;
export const getManagedSecretOutput: typeof import("./getManagedSecret").getManagedSecretOutput = null as any;
utilities.lazyLoad(exports, ["getManagedSecret","getManagedSecretOutput"], () => require("./getManagedSecret"));

export { GetNodeArgs, GetNodeResult, GetNodeOutputArgs } from "./getNode";
export const getNode: typeof import("./getNode").getNode = null as any;
export const getNodeOutput: typeof import("./getNode").getNodeOutput = null as any;
utilities.lazyLoad(exports, ["getNode","getNodeOutput"], () => require("./getNode"));

export { GetPeeringGroupArgs, GetPeeringGroupResult, GetPeeringGroupOutputArgs } from "./getPeeringGroup";
export const getPeeringGroup: typeof import("./getPeeringGroup").getPeeringGroup = null as any;
export const getPeeringGroupOutput: typeof import("./getPeeringGroup").getPeeringGroupOutput = null as any;
utilities.lazyLoad(exports, ["getPeeringGroup","getPeeringGroupOutput"], () => require("./getPeeringGroup"));

export { GetPeeringGroupNodeArgs, GetPeeringGroupNodeResult, GetPeeringGroupNodeOutputArgs } from "./getPeeringGroupNode";
export const getPeeringGroupNode: typeof import("./getPeeringGroupNode").getPeeringGroupNode = null as any;
export const getPeeringGroupNodeOutput: typeof import("./getPeeringGroupNode").getPeeringGroupNodeOutput = null as any;
utilities.lazyLoad(exports, ["getPeeringGroupNode","getPeeringGroupNodeOutput"], () => require("./getPeeringGroupNode"));

export { GetPeeringGroupPeerArgs, GetPeeringGroupPeerResult, GetPeeringGroupPeerOutputArgs } from "./getPeeringGroupPeer";
export const getPeeringGroupPeer: typeof import("./getPeeringGroupPeer").getPeeringGroupPeer = null as any;
export const getPeeringGroupPeerOutput: typeof import("./getPeeringGroupPeer").getPeeringGroupPeerOutput = null as any;
utilities.lazyLoad(exports, ["getPeeringGroupPeer","getPeeringGroupPeerOutput"], () => require("./getPeeringGroupPeer"));

export { GetPeeringGroupResourceArgs, GetPeeringGroupResourceResult, GetPeeringGroupResourceOutputArgs } from "./getPeeringGroupResource";
export const getPeeringGroupResource: typeof import("./getPeeringGroupResource").getPeeringGroupResource = null as any;
export const getPeeringGroupResourceOutput: typeof import("./getPeeringGroupResource").getPeeringGroupResourceOutput = null as any;
utilities.lazyLoad(exports, ["getPeeringGroupResource","getPeeringGroupResourceOutput"], () => require("./getPeeringGroupResource"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { GetProxyClusterKeyArgs, GetProxyClusterKeyResult, GetProxyClusterKeyOutputArgs } from "./getProxyClusterKey";
export const getProxyClusterKey: typeof import("./getProxyClusterKey").getProxyClusterKey = null as any;
export const getProxyClusterKeyOutput: typeof import("./getProxyClusterKey").getProxyClusterKeyOutput = null as any;
utilities.lazyLoad(exports, ["getProxyClusterKey","getProxyClusterKeyOutput"], () => require("./getProxyClusterKey"));

export { GetRemoteIdentityArgs, GetRemoteIdentityResult, GetRemoteIdentityOutputArgs } from "./getRemoteIdentity";
export const getRemoteIdentity: typeof import("./getRemoteIdentity").getRemoteIdentity = null as any;
export const getRemoteIdentityOutput: typeof import("./getRemoteIdentity").getRemoteIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteIdentity","getRemoteIdentityOutput"], () => require("./getRemoteIdentity"));

export { GetRemoteIdentityGroupArgs, GetRemoteIdentityGroupResult, GetRemoteIdentityGroupOutputArgs } from "./getRemoteIdentityGroup";
export const getRemoteIdentityGroup: typeof import("./getRemoteIdentityGroup").getRemoteIdentityGroup = null as any;
export const getRemoteIdentityGroupOutput: typeof import("./getRemoteIdentityGroup").getRemoteIdentityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteIdentityGroup","getRemoteIdentityGroupOutput"], () => require("./getRemoteIdentityGroup"));

export { GetResourceArgs, GetResourceResult, GetResourceOutputArgs } from "./getResource";
export const getResource: typeof import("./getResource").getResource = null as any;
export const getResourceOutput: typeof import("./getResource").getResourceOutput = null as any;
utilities.lazyLoad(exports, ["getResource","getResourceOutput"], () => require("./getResource"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetSecretEngineArgs, GetSecretEngineResult, GetSecretEngineOutputArgs } from "./getSecretEngine";
export const getSecretEngine: typeof import("./getSecretEngine").getSecretEngine = null as any;
export const getSecretEngineOutput: typeof import("./getSecretEngine").getSecretEngineOutput = null as any;
utilities.lazyLoad(exports, ["getSecretEngine","getSecretEngineOutput"], () => require("./getSecretEngine"));

export { GetSecretStoreArgs, GetSecretStoreResult, GetSecretStoreOutputArgs } from "./getSecretStore";
export const getSecretStore: typeof import("./getSecretStore").getSecretStore = null as any;
export const getSecretStoreOutput: typeof import("./getSecretStore").getSecretStoreOutput = null as any;
utilities.lazyLoad(exports, ["getSecretStore","getSecretStoreOutput"], () => require("./getSecretStore"));

export { GetSshCaPubkeyArgs, GetSshCaPubkeyResult, GetSshCaPubkeyOutputArgs } from "./getSshCaPubkey";
export const getSshCaPubkey: typeof import("./getSshCaPubkey").getSshCaPubkey = null as any;
export const getSshCaPubkeyOutput: typeof import("./getSshCaPubkey").getSshCaPubkeyOutput = null as any;
utilities.lazyLoad(exports, ["getSshCaPubkey","getSshCaPubkeyOutput"], () => require("./getSshCaPubkey"));

export { GetWorkflowArgs, GetWorkflowResult, GetWorkflowOutputArgs } from "./getWorkflow";
export const getWorkflow: typeof import("./getWorkflow").getWorkflow = null as any;
export const getWorkflowOutput: typeof import("./getWorkflow").getWorkflowOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflow","getWorkflowOutput"], () => require("./getWorkflow"));

export { GetWorkflowApproverArgs, GetWorkflowApproverResult, GetWorkflowApproverOutputArgs } from "./getWorkflowApprover";
export const getWorkflowApprover: typeof import("./getWorkflowApprover").getWorkflowApprover = null as any;
export const getWorkflowApproverOutput: typeof import("./getWorkflowApprover").getWorkflowApproverOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowApprover","getWorkflowApproverOutput"], () => require("./getWorkflowApprover"));

export { GetWorkflowRoleArgs, GetWorkflowRoleResult, GetWorkflowRoleOutputArgs } from "./getWorkflowRole";
export const getWorkflowRole: typeof import("./getWorkflowRole").getWorkflowRole = null as any;
export const getWorkflowRoleOutput: typeof import("./getWorkflowRole").getWorkflowRoleOutput = null as any;
utilities.lazyLoad(exports, ["getWorkflowRole","getWorkflowRoleOutput"], () => require("./getWorkflowRole"));

export { IdentityAliasArgs, IdentityAliasState } from "./identityAlias";
export type IdentityAlias = import("./identityAlias").IdentityAlias;
export const IdentityAlias: typeof import("./identityAlias").IdentityAlias = null as any;
utilities.lazyLoad(exports, ["IdentityAlias"], () => require("./identityAlias"));

export { IdentitySetArgs, IdentitySetState } from "./identitySet";
export type IdentitySet = import("./identitySet").IdentitySet;
export const IdentitySet: typeof import("./identitySet").IdentitySet = null as any;
utilities.lazyLoad(exports, ["IdentitySet"], () => require("./identitySet"));

export { ManagedSecretArgs, ManagedSecretState } from "./managedSecret";
export type ManagedSecret = import("./managedSecret").ManagedSecret;
export const ManagedSecret: typeof import("./managedSecret").ManagedSecret = null as any;
utilities.lazyLoad(exports, ["ManagedSecret"], () => require("./managedSecret"));

export { NodeArgs, NodeState } from "./node";
export type Node = import("./node").Node;
export const Node: typeof import("./node").Node = null as any;
utilities.lazyLoad(exports, ["Node"], () => require("./node"));

export { PeeringGroupArgs, PeeringGroupState } from "./peeringGroup";
export type PeeringGroup = import("./peeringGroup").PeeringGroup;
export const PeeringGroup: typeof import("./peeringGroup").PeeringGroup = null as any;
utilities.lazyLoad(exports, ["PeeringGroup"], () => require("./peeringGroup"));

export { PeeringGroupNodeArgs, PeeringGroupNodeState } from "./peeringGroupNode";
export type PeeringGroupNode = import("./peeringGroupNode").PeeringGroupNode;
export const PeeringGroupNode: typeof import("./peeringGroupNode").PeeringGroupNode = null as any;
utilities.lazyLoad(exports, ["PeeringGroupNode"], () => require("./peeringGroupNode"));

export { PeeringGroupPeerArgs, PeeringGroupPeerState } from "./peeringGroupPeer";
export type PeeringGroupPeer = import("./peeringGroupPeer").PeeringGroupPeer;
export const PeeringGroupPeer: typeof import("./peeringGroupPeer").PeeringGroupPeer = null as any;
utilities.lazyLoad(exports, ["PeeringGroupPeer"], () => require("./peeringGroupPeer"));

export { PeeringGroupResourceArgs, PeeringGroupResourceState } from "./peeringGroupResource";
export type PeeringGroupResource = import("./peeringGroupResource").PeeringGroupResource;
export const PeeringGroupResource: typeof import("./peeringGroupResource").PeeringGroupResource = null as any;
utilities.lazyLoad(exports, ["PeeringGroupResource"], () => require("./peeringGroupResource"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export * from "./provider";
import { Provider } from "./provider";

export { ProxyClusterKeyArgs, ProxyClusterKeyState } from "./proxyClusterKey";
export type ProxyClusterKey = import("./proxyClusterKey").ProxyClusterKey;
export const ProxyClusterKey: typeof import("./proxyClusterKey").ProxyClusterKey = null as any;
utilities.lazyLoad(exports, ["ProxyClusterKey"], () => require("./proxyClusterKey"));

export { RemoteIdentityArgs, RemoteIdentityState } from "./remoteIdentity";
export type RemoteIdentity = import("./remoteIdentity").RemoteIdentity;
export const RemoteIdentity: typeof import("./remoteIdentity").RemoteIdentity = null as any;
utilities.lazyLoad(exports, ["RemoteIdentity"], () => require("./remoteIdentity"));

export { ResourceArgs, ResourceState } from "./resource";
export type Resource = import("./resource").Resource;
export const Resource: typeof import("./resource").Resource = null as any;
utilities.lazyLoad(exports, ["Resource"], () => require("./resource"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { SecretEngineArgs, SecretEngineState } from "./secretEngine";
export type SecretEngine = import("./secretEngine").SecretEngine;
export const SecretEngine: typeof import("./secretEngine").SecretEngine = null as any;
utilities.lazyLoad(exports, ["SecretEngine"], () => require("./secretEngine"));

export { SecretStoreArgs, SecretStoreState } from "./secretStore";
export type SecretStore = import("./secretStore").SecretStore;
export const SecretStore: typeof import("./secretStore").SecretStore = null as any;
utilities.lazyLoad(exports, ["SecretStore"], () => require("./secretStore"));

export { WorkflowArgs, WorkflowState } from "./workflow";
export type Workflow = import("./workflow").Workflow;
export const Workflow: typeof import("./workflow").Workflow = null as any;
utilities.lazyLoad(exports, ["Workflow"], () => require("./workflow"));

export { WorkflowApproverArgs, WorkflowApproverState } from "./workflowApprover";
export type WorkflowApprover = import("./workflowApprover").WorkflowApprover;
export const WorkflowApprover: typeof import("./workflowApprover").WorkflowApprover = null as any;
utilities.lazyLoad(exports, ["WorkflowApprover"], () => require("./workflowApprover"));

export { WorkflowRoleArgs, WorkflowRoleState } from "./workflowRole";
export type WorkflowRole = import("./workflowRole").WorkflowRole;
export const WorkflowRole: typeof import("./workflowRole").WorkflowRole = null as any;
utilities.lazyLoad(exports, ["WorkflowRole"], () => require("./workflowRole"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sdm:index/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "sdm:index/accountAttachment:AccountAttachment":
                return new AccountAttachment(name, <any>undefined, { urn })
            case "sdm:index/approvalWorkflow:ApprovalWorkflow":
                return new ApprovalWorkflow(name, <any>undefined, { urn })
            case "sdm:index/identityAlias:IdentityAlias":
                return new IdentityAlias(name, <any>undefined, { urn })
            case "sdm:index/identitySet:IdentitySet":
                return new IdentitySet(name, <any>undefined, { urn })
            case "sdm:index/managedSecret:ManagedSecret":
                return new ManagedSecret(name, <any>undefined, { urn })
            case "sdm:index/node:Node":
                return new Node(name, <any>undefined, { urn })
            case "sdm:index/peeringGroup:PeeringGroup":
                return new PeeringGroup(name, <any>undefined, { urn })
            case "sdm:index/peeringGroupNode:PeeringGroupNode":
                return new PeeringGroupNode(name, <any>undefined, { urn })
            case "sdm:index/peeringGroupPeer:PeeringGroupPeer":
                return new PeeringGroupPeer(name, <any>undefined, { urn })
            case "sdm:index/peeringGroupResource:PeeringGroupResource":
                return new PeeringGroupResource(name, <any>undefined, { urn })
            case "sdm:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "sdm:index/proxyClusterKey:ProxyClusterKey":
                return new ProxyClusterKey(name, <any>undefined, { urn })
            case "sdm:index/remoteIdentity:RemoteIdentity":
                return new RemoteIdentity(name, <any>undefined, { urn })
            case "sdm:index/resource:Resource":
                return new Resource(name, <any>undefined, { urn })
            case "sdm:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "sdm:index/secretEngine:SecretEngine":
                return new SecretEngine(name, <any>undefined, { urn })
            case "sdm:index/secretStore:SecretStore":
                return new SecretStore(name, <any>undefined, { urn })
            case "sdm:index/workflow:Workflow":
                return new Workflow(name, <any>undefined, { urn })
            case "sdm:index/workflowApprover:WorkflowApprover":
                return new WorkflowApprover(name, <any>undefined, { urn })
            case "sdm:index/workflowRole:WorkflowRole":
                return new WorkflowRole(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sdm", "index/account", _module)
pulumi.runtime.registerResourceModule("sdm", "index/accountAttachment", _module)
pulumi.runtime.registerResourceModule("sdm", "index/approvalWorkflow", _module)
pulumi.runtime.registerResourceModule("sdm", "index/identityAlias", _module)
pulumi.runtime.registerResourceModule("sdm", "index/identitySet", _module)
pulumi.runtime.registerResourceModule("sdm", "index/managedSecret", _module)
pulumi.runtime.registerResourceModule("sdm", "index/node", _module)
pulumi.runtime.registerResourceModule("sdm", "index/peeringGroup", _module)
pulumi.runtime.registerResourceModule("sdm", "index/peeringGroupNode", _module)
pulumi.runtime.registerResourceModule("sdm", "index/peeringGroupPeer", _module)
pulumi.runtime.registerResourceModule("sdm", "index/peeringGroupResource", _module)
pulumi.runtime.registerResourceModule("sdm", "index/policy", _module)
pulumi.runtime.registerResourceModule("sdm", "index/proxyClusterKey", _module)
pulumi.runtime.registerResourceModule("sdm", "index/remoteIdentity", _module)
pulumi.runtime.registerResourceModule("sdm", "index/resource", _module)
pulumi.runtime.registerResourceModule("sdm", "index/role", _module)
pulumi.runtime.registerResourceModule("sdm", "index/secretEngine", _module)
pulumi.runtime.registerResourceModule("sdm", "index/secretStore", _module)
pulumi.runtime.registerResourceModule("sdm", "index/workflow", _module)
pulumi.runtime.registerResourceModule("sdm", "index/workflowApprover", _module)
pulumi.runtime.registerResourceModule("sdm", "index/workflowRole", _module)
pulumi.runtime.registerResourcePackage("sdm", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:sdm") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});

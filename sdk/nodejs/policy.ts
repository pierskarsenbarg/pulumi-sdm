// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Policy is a collection of one or more statements that enforce fine-grained access control
 *  for the users of an organization.
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdm from "@pierskarsenbarg/sdm";
 *
 * const permitEverything = new sdm.Policy("permitEverything", {
 *     description: "this policy permits everything",
 *     policyContent: `permit(principal, action, resource);
 *
 * `,
 * });
 * ```
 * This resource can be imported using the import command.
 *
 * ## Import
 *
 * A Policy can be imported using the id, e.g.,
 *
 * ```sh
 * $ pulumi import sdm:index/policy:Policy example po-12345678
 * ```
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdm:index/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * Optional description of the Policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Unique human-readable name of the Policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The content of the Policy, in Cedar policy language.
     */
    public readonly policyContent!: pulumi.Output<string | undefined>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyContent"] = state ? state.policyContent : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyContent"] = args ? args.policyContent : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * Optional description of the Policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The content of the Policy, in Cedar policy language.
     */
    policyContent?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * Optional description of the Policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The content of the Policy, in Cedar policy language.
     */
    policyContent?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * RemoteIdentities define the username to be used for a specific account
 *  when connecting to a remote resource using that group.
 * ## Import
 *
 * A RemoteIdentity can be imported using the id, e.g.,
 *
 * ```sh
 * $ pulumi import sdm:index/remoteIdentity:RemoteIdentity example i-12345678
 * ```
 */
export class RemoteIdentity extends pulumi.CustomResource {
    /**
     * Get an existing RemoteIdentity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RemoteIdentityState, opts?: pulumi.CustomResourceOptions): RemoteIdentity {
        return new RemoteIdentity(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdm:index/remoteIdentity:RemoteIdentity';

    /**
     * Returns true if the given object is an instance of RemoteIdentity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RemoteIdentity {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RemoteIdentity.__pulumiType;
    }

    /**
     * The account for this remote identity.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * The remote identity group.
     */
    declare public readonly remoteIdentityGroupId: pulumi.Output<string>;
    /**
     * The username to be used as the remote identity for this account.
     */
    declare public readonly username: pulumi.Output<string>;

    /**
     * Create a RemoteIdentity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RemoteIdentityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RemoteIdentityArgs | RemoteIdentityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RemoteIdentityState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["remoteIdentityGroupId"] = state?.remoteIdentityGroupId;
            resourceInputs["username"] = state?.username;
        } else {
            const args = argsOrState as RemoteIdentityArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.remoteIdentityGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'remoteIdentityGroupId'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["remoteIdentityGroupId"] = args?.remoteIdentityGroupId;
            resourceInputs["username"] = args?.username;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RemoteIdentity.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RemoteIdentity resources.
 */
export interface RemoteIdentityState {
    /**
     * The account for this remote identity.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The remote identity group.
     */
    remoteIdentityGroupId?: pulumi.Input<string>;
    /**
     * The username to be used as the remote identity for this account.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RemoteIdentity resource.
 */
export interface RemoteIdentityArgs {
    /**
     * The account for this remote identity.
     */
    accountId: pulumi.Input<string>;
    /**
     * The remote identity group.
     */
    remoteIdentityGroupId: pulumi.Input<string>;
    /**
     * The username to be used as the remote identity for this account.
     */
    username: pulumi.Input<string>;
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * A RoleGrant connects a resource to a role, granting members of the role access to that resource.
 *
 *  Deprecated: use Role access rules instead.
 * This data source is deprecated.
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdm from "@pulumi/sdm";
 *
 * const roleGrantQuery = pulumi.output(sdm.getRoleGrant({
 *     roleId: "r-0009994",
 * }));
 * ```
 */
export function getRoleGrant(args?: GetRoleGrantArgs, opts?: pulumi.InvokeOptions): Promise<GetRoleGrantResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("sdm:index/getRoleGrant:getRoleGrant", {
        "id": args.id,
        "resourceId": args.resourceId,
        "roleId": args.roleId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRoleGrant.
 */
export interface GetRoleGrantArgs {
    /**
     * Unique identifier of the RoleGrant.
     */
    id?: string;
    /**
     * The id of the resource of this RoleGrant.
     */
    resourceId?: string;
    /**
     * The id of the attached role of this RoleGrant.
     */
    roleId?: string;
}

/**
 * A collection of values returned by getRoleGrant.
 */
export interface GetRoleGrantResult {
    /**
     * Unique identifier of the RoleGrant.
     */
    readonly id?: string;
    /**
     * a list of strings of ids of data sources that match the given arguments.
     */
    readonly ids: string[];
    /**
     * The id of the resource of this RoleGrant.
     */
    readonly resourceId?: string;
    /**
     * A list where each element has the following attributes:
     */
    readonly roleGrants: outputs.GetRoleGrantRoleGrant[];
    /**
     * The id of the attached role of this RoleGrant.
     */
    readonly roleId?: string;
}

export function getRoleGrantOutput(args?: GetRoleGrantOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRoleGrantResult> {
    return pulumi.output(args).apply(a => getRoleGrant(a, opts))
}

/**
 * A collection of arguments for invoking getRoleGrant.
 */
export interface GetRoleGrantOutputArgs {
    /**
     * Unique identifier of the RoleGrant.
     */
    id?: pulumi.Input<string>;
    /**
     * The id of the resource of this RoleGrant.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The id of the attached role of this RoleGrant.
     */
    roleId?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * PeeringGroups are the building blocks used for explicit network topology making.
 *  They may be linked to other peering groups. Sets of PeeringGroupResource and PeeringGroupNode can be attached to a peering group.
 * This resource can be imported using the import command.
 *
 * ## Import
 *
 * A PeeringGroup can be imported using the id, e.g.,
 *
 * ```sh
 * $ pulumi import sdm:index/peeringGroup:PeeringGroup example g-12345678
 * ```
 */
export class PeeringGroup extends pulumi.CustomResource {
    /**
     * Get an existing PeeringGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PeeringGroupState, opts?: pulumi.CustomResourceOptions): PeeringGroup {
        return new PeeringGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdm:index/peeringGroup:PeeringGroup';

    /**
     * Returns true if the given object is an instance of PeeringGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PeeringGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PeeringGroup.__pulumiType;
    }

    /**
     * Unique human-readable name of the PeeringGroup.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a PeeringGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PeeringGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PeeringGroupArgs | PeeringGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PeeringGroupState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as PeeringGroupArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PeeringGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PeeringGroup resources.
 */
export interface PeeringGroupState {
    /**
     * Unique human-readable name of the PeeringGroup.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PeeringGroup resource.
 */
export interface PeeringGroupArgs {
    /**
     * Unique human-readable name of the PeeringGroup.
     */
    name?: pulumi.Input<string>;
}

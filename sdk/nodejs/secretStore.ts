// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A SecretStore is a server where resource secrets (passwords, keys) are stored.
 *  Coming soon support for HashiCorp Vault and AWS Secret Store.
 * This resource can be imported using the import command.
 *
 * ## Import
 *
 * A SecretStore can be imported using the id, e.g.,
 *
 * ```sh
 * $ pulumi import sdm:index/secretStore:SecretStore example se-12345678
 * ```
 */
export class SecretStore extends pulumi.CustomResource {
    /**
     * Get an existing SecretStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretStoreState, opts?: pulumi.CustomResourceOptions): SecretStore {
        return new SecretStore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdm:index/secretStore:SecretStore';

    /**
     * Returns true if the given object is an instance of SecretStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretStore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretStore.__pulumiType;
    }

    declare public readonly activeDirectoryStore: pulumi.Output<outputs.SecretStoreActiveDirectoryStore | undefined>;
    declare public readonly aws: pulumi.Output<outputs.SecretStoreAws | undefined>;
    declare public readonly awsCertX509: pulumi.Output<outputs.SecretStoreAwsCertX509 | undefined>;
    declare public readonly azureStore: pulumi.Output<outputs.SecretStoreAzureStore | undefined>;
    declare public readonly cyberarkConjur: pulumi.Output<outputs.SecretStoreCyberarkConjur | undefined>;
    declare public readonly cyberarkPam: pulumi.Output<outputs.SecretStoreCyberarkPam | undefined>;
    /**
     * CyberarkPAMExperimentalStore is currently unstable, and its API may change, or it may be removed, without a major version bump.
     */
    declare public readonly cyberarkPamExperimental: pulumi.Output<outputs.SecretStoreCyberarkPamExperimental | undefined>;
    declare public readonly delineaStore: pulumi.Output<outputs.SecretStoreDelineaStore | undefined>;
    declare public readonly gcpCertX509Store: pulumi.Output<outputs.SecretStoreGcpCertX509Store | undefined>;
    declare public readonly gcpStore: pulumi.Output<outputs.SecretStoreGcpStore | undefined>;
    declare public readonly keyfactorSshStore: pulumi.Output<outputs.SecretStoreKeyfactorSshStore | undefined>;
    declare public readonly keyfactorX509Store: pulumi.Output<outputs.SecretStoreKeyfactorX509Store | undefined>;
    declare public readonly vaultApprole: pulumi.Output<outputs.SecretStoreVaultApprole | undefined>;
    declare public readonly vaultApproleCertSsh: pulumi.Output<outputs.SecretStoreVaultApproleCertSsh | undefined>;
    declare public readonly vaultApproleCertX509: pulumi.Output<outputs.SecretStoreVaultApproleCertX509 | undefined>;
    declare public readonly vaultAwsEc2: pulumi.Output<outputs.SecretStoreVaultAwsEc2 | undefined>;
    declare public readonly vaultAwsIam: pulumi.Output<outputs.SecretStoreVaultAwsIam | undefined>;
    declare public readonly vaultTls: pulumi.Output<outputs.SecretStoreVaultTls | undefined>;
    declare public readonly vaultTlsCertSsh: pulumi.Output<outputs.SecretStoreVaultTlsCertSsh | undefined>;
    declare public readonly vaultTlsCertX509: pulumi.Output<outputs.SecretStoreVaultTlsCertX509 | undefined>;
    declare public readonly vaultToken: pulumi.Output<outputs.SecretStoreVaultToken | undefined>;
    declare public readonly vaultTokenCertSsh: pulumi.Output<outputs.SecretStoreVaultTokenCertSsh | undefined>;
    declare public readonly vaultTokenCertX509: pulumi.Output<outputs.SecretStoreVaultTokenCertX509 | undefined>;

    /**
     * Create a SecretStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SecretStoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretStoreArgs | SecretStoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretStoreState | undefined;
            resourceInputs["activeDirectoryStore"] = state?.activeDirectoryStore;
            resourceInputs["aws"] = state?.aws;
            resourceInputs["awsCertX509"] = state?.awsCertX509;
            resourceInputs["azureStore"] = state?.azureStore;
            resourceInputs["cyberarkConjur"] = state?.cyberarkConjur;
            resourceInputs["cyberarkPam"] = state?.cyberarkPam;
            resourceInputs["cyberarkPamExperimental"] = state?.cyberarkPamExperimental;
            resourceInputs["delineaStore"] = state?.delineaStore;
            resourceInputs["gcpCertX509Store"] = state?.gcpCertX509Store;
            resourceInputs["gcpStore"] = state?.gcpStore;
            resourceInputs["keyfactorSshStore"] = state?.keyfactorSshStore;
            resourceInputs["keyfactorX509Store"] = state?.keyfactorX509Store;
            resourceInputs["vaultApprole"] = state?.vaultApprole;
            resourceInputs["vaultApproleCertSsh"] = state?.vaultApproleCertSsh;
            resourceInputs["vaultApproleCertX509"] = state?.vaultApproleCertX509;
            resourceInputs["vaultAwsEc2"] = state?.vaultAwsEc2;
            resourceInputs["vaultAwsIam"] = state?.vaultAwsIam;
            resourceInputs["vaultTls"] = state?.vaultTls;
            resourceInputs["vaultTlsCertSsh"] = state?.vaultTlsCertSsh;
            resourceInputs["vaultTlsCertX509"] = state?.vaultTlsCertX509;
            resourceInputs["vaultToken"] = state?.vaultToken;
            resourceInputs["vaultTokenCertSsh"] = state?.vaultTokenCertSsh;
            resourceInputs["vaultTokenCertX509"] = state?.vaultTokenCertX509;
        } else {
            const args = argsOrState as SecretStoreArgs | undefined;
            resourceInputs["activeDirectoryStore"] = args?.activeDirectoryStore;
            resourceInputs["aws"] = args?.aws;
            resourceInputs["awsCertX509"] = args?.awsCertX509;
            resourceInputs["azureStore"] = args?.azureStore;
            resourceInputs["cyberarkConjur"] = args?.cyberarkConjur;
            resourceInputs["cyberarkPam"] = args?.cyberarkPam;
            resourceInputs["cyberarkPamExperimental"] = args?.cyberarkPamExperimental;
            resourceInputs["delineaStore"] = args?.delineaStore;
            resourceInputs["gcpCertX509Store"] = args?.gcpCertX509Store;
            resourceInputs["gcpStore"] = args?.gcpStore;
            resourceInputs["keyfactorSshStore"] = args?.keyfactorSshStore;
            resourceInputs["keyfactorX509Store"] = args?.keyfactorX509Store;
            resourceInputs["vaultApprole"] = args?.vaultApprole;
            resourceInputs["vaultApproleCertSsh"] = args?.vaultApproleCertSsh;
            resourceInputs["vaultApproleCertX509"] = args?.vaultApproleCertX509;
            resourceInputs["vaultAwsEc2"] = args?.vaultAwsEc2;
            resourceInputs["vaultAwsIam"] = args?.vaultAwsIam;
            resourceInputs["vaultTls"] = args?.vaultTls;
            resourceInputs["vaultTlsCertSsh"] = args?.vaultTlsCertSsh;
            resourceInputs["vaultTlsCertX509"] = args?.vaultTlsCertX509;
            resourceInputs["vaultToken"] = args?.vaultToken;
            resourceInputs["vaultTokenCertSsh"] = args?.vaultTokenCertSsh;
            resourceInputs["vaultTokenCertX509"] = args?.vaultTokenCertX509;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretStore.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecretStore resources.
 */
export interface SecretStoreState {
    activeDirectoryStore?: pulumi.Input<inputs.SecretStoreActiveDirectoryStore>;
    aws?: pulumi.Input<inputs.SecretStoreAws>;
    awsCertX509?: pulumi.Input<inputs.SecretStoreAwsCertX509>;
    azureStore?: pulumi.Input<inputs.SecretStoreAzureStore>;
    cyberarkConjur?: pulumi.Input<inputs.SecretStoreCyberarkConjur>;
    cyberarkPam?: pulumi.Input<inputs.SecretStoreCyberarkPam>;
    /**
     * CyberarkPAMExperimentalStore is currently unstable, and its API may change, or it may be removed, without a major version bump.
     */
    cyberarkPamExperimental?: pulumi.Input<inputs.SecretStoreCyberarkPamExperimental>;
    delineaStore?: pulumi.Input<inputs.SecretStoreDelineaStore>;
    gcpCertX509Store?: pulumi.Input<inputs.SecretStoreGcpCertX509Store>;
    gcpStore?: pulumi.Input<inputs.SecretStoreGcpStore>;
    keyfactorSshStore?: pulumi.Input<inputs.SecretStoreKeyfactorSshStore>;
    keyfactorX509Store?: pulumi.Input<inputs.SecretStoreKeyfactorX509Store>;
    vaultApprole?: pulumi.Input<inputs.SecretStoreVaultApprole>;
    vaultApproleCertSsh?: pulumi.Input<inputs.SecretStoreVaultApproleCertSsh>;
    vaultApproleCertX509?: pulumi.Input<inputs.SecretStoreVaultApproleCertX509>;
    vaultAwsEc2?: pulumi.Input<inputs.SecretStoreVaultAwsEc2>;
    vaultAwsIam?: pulumi.Input<inputs.SecretStoreVaultAwsIam>;
    vaultTls?: pulumi.Input<inputs.SecretStoreVaultTls>;
    vaultTlsCertSsh?: pulumi.Input<inputs.SecretStoreVaultTlsCertSsh>;
    vaultTlsCertX509?: pulumi.Input<inputs.SecretStoreVaultTlsCertX509>;
    vaultToken?: pulumi.Input<inputs.SecretStoreVaultToken>;
    vaultTokenCertSsh?: pulumi.Input<inputs.SecretStoreVaultTokenCertSsh>;
    vaultTokenCertX509?: pulumi.Input<inputs.SecretStoreVaultTokenCertX509>;
}

/**
 * The set of arguments for constructing a SecretStore resource.
 */
export interface SecretStoreArgs {
    activeDirectoryStore?: pulumi.Input<inputs.SecretStoreActiveDirectoryStore>;
    aws?: pulumi.Input<inputs.SecretStoreAws>;
    awsCertX509?: pulumi.Input<inputs.SecretStoreAwsCertX509>;
    azureStore?: pulumi.Input<inputs.SecretStoreAzureStore>;
    cyberarkConjur?: pulumi.Input<inputs.SecretStoreCyberarkConjur>;
    cyberarkPam?: pulumi.Input<inputs.SecretStoreCyberarkPam>;
    /**
     * CyberarkPAMExperimentalStore is currently unstable, and its API may change, or it may be removed, without a major version bump.
     */
    cyberarkPamExperimental?: pulumi.Input<inputs.SecretStoreCyberarkPamExperimental>;
    delineaStore?: pulumi.Input<inputs.SecretStoreDelineaStore>;
    gcpCertX509Store?: pulumi.Input<inputs.SecretStoreGcpCertX509Store>;
    gcpStore?: pulumi.Input<inputs.SecretStoreGcpStore>;
    keyfactorSshStore?: pulumi.Input<inputs.SecretStoreKeyfactorSshStore>;
    keyfactorX509Store?: pulumi.Input<inputs.SecretStoreKeyfactorX509Store>;
    vaultApprole?: pulumi.Input<inputs.SecretStoreVaultApprole>;
    vaultApproleCertSsh?: pulumi.Input<inputs.SecretStoreVaultApproleCertSsh>;
    vaultApproleCertX509?: pulumi.Input<inputs.SecretStoreVaultApproleCertX509>;
    vaultAwsEc2?: pulumi.Input<inputs.SecretStoreVaultAwsEc2>;
    vaultAwsIam?: pulumi.Input<inputs.SecretStoreVaultAwsIam>;
    vaultTls?: pulumi.Input<inputs.SecretStoreVaultTls>;
    vaultTlsCertSsh?: pulumi.Input<inputs.SecretStoreVaultTlsCertSsh>;
    vaultTlsCertX509?: pulumi.Input<inputs.SecretStoreVaultTlsCertX509>;
    vaultToken?: pulumi.Input<inputs.SecretStoreVaultToken>;
    vaultTokenCertSsh?: pulumi.Input<inputs.SecretStoreVaultTokenCertSsh>;
    vaultTokenCertX509?: pulumi.Input<inputs.SecretStoreVaultTokenCertX509>;
}

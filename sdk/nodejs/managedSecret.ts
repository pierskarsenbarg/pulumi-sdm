// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ManagedSecret contains details about managed secret
 * This resource can be imported using the import command.
 *
 * ## Import
 *
 * A ManagedSecret can be imported using the id, e.g.,
 *
 * ```sh
 * $ pulumi import sdm:index/managedSecret:ManagedSecret example ms-12345678
 * ```
 */
export class ManagedSecret extends pulumi.CustomResource {
    /**
     * Get an existing ManagedSecret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedSecretState, opts?: pulumi.CustomResourceOptions): ManagedSecret {
        return new ManagedSecret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdm:index/managedSecret:ManagedSecret';

    /**
     * Returns true if the given object is an instance of ManagedSecret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedSecret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedSecret.__pulumiType;
    }

    /**
     * public part of the secret value
     */
    public /*out*/ readonly config!: pulumi.Output<string>;
    /**
     * Timestamp of when secret is going to be rotated
     */
    public /*out*/ readonly expiresAt!: pulumi.Output<string>;
    /**
     * Timestamp of when secret was last rotated
     */
    public /*out*/ readonly lastRotatedAt!: pulumi.Output<string>;
    /**
     * Unique human-readable name of the Managed Secret.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * An ID of a Secret Engine linked with the Managed Secret.
     */
    public readonly secretEngineId!: pulumi.Output<string>;
    /**
     * Path in a secret store.
     */
    public /*out*/ readonly secretStorePath!: pulumi.Output<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Sensitive value of the secret.
     */
    public readonly value!: pulumi.Output<string | undefined>;

    /**
     * Create a ManagedSecret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedSecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedSecretArgs | ManagedSecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedSecretState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["lastRotatedAt"] = state ? state.lastRotatedAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secretEngineId"] = state ? state.secretEngineId : undefined;
            resourceInputs["secretStorePath"] = state ? state.secretStorePath : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as ManagedSecretArgs | undefined;
            if ((!args || args.secretEngineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretEngineId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["secretEngineId"] = args ? args.secretEngineId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["value"] = args?.value ? pulumi.secret(args.value) : undefined;
            resourceInputs["config"] = undefined /*out*/;
            resourceInputs["expiresAt"] = undefined /*out*/;
            resourceInputs["lastRotatedAt"] = undefined /*out*/;
            resourceInputs["secretStorePath"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["value"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ManagedSecret.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedSecret resources.
 */
export interface ManagedSecretState {
    /**
     * public part of the secret value
     */
    config?: pulumi.Input<string>;
    /**
     * Timestamp of when secret is going to be rotated
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * Timestamp of when secret was last rotated
     */
    lastRotatedAt?: pulumi.Input<string>;
    /**
     * Unique human-readable name of the Managed Secret.
     */
    name?: pulumi.Input<string>;
    /**
     * An ID of a Secret Engine linked with the Managed Secret.
     */
    secretEngineId?: pulumi.Input<string>;
    /**
     * Path in a secret store.
     */
    secretStorePath?: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Sensitive value of the secret.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedSecret resource.
 */
export interface ManagedSecretArgs {
    /**
     * Unique human-readable name of the Managed Secret.
     */
    name?: pulumi.Input<string>;
    /**
     * An ID of a Secret Engine linked with the Managed Secret.
     */
    secretEngineId: pulumi.Input<string>;
    /**
     * Tags is a map of key, value pairs.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Sensitive value of the secret.
     */
    value?: pulumi.Input<string>;
}

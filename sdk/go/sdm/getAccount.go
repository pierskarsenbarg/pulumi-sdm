// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdm

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Accounts are users that have access to strongDM. The types of accounts are:
//  1. **Users:** humans who are authenticated through username and password or SSO.
//  2. **Service Accounts:** machines that are authenticated using a service token.
//  3. **Tokens** are access keys with permissions that can be used for authentication.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdm.LookupAccount(ctx, &sdm.LookupAccountArgs{
//				Email: pulumi.StringRef("*@strongdm.com"),
//				Tags: map[string]interface{}{
//					"env":    "dev",
//					"region": "us-west",
//				},
//				Type: pulumi.StringRef("user"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = sdm.LookupAccount(ctx, &sdm.LookupAccountArgs{
//				Name: pulumi.StringRef("*-dev"),
//				Type: pulumi.StringRef("api"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = sdm.LookupAccount(ctx, &sdm.LookupAccountArgs{
//				Name: pulumi.StringRef("*-prod"),
//				Type: pulumi.StringRef("admin-token"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAccount(ctx *pulumi.Context, args *LookupAccountArgs, opts ...pulumi.InvokeOption) (*LookupAccountResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAccountResult
	err := ctx.Invoke("sdm:index/getAccount:getAccount", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccount.
type LookupAccountArgs struct {
	// Corresponds to the type of token, e.g. api or admin-token.
	AccountType *string `pulumi:"accountType"`
	// The User's email address. Must be unique.
	Email *string `pulumi:"email"`
	// External ID is an alternative unique ID this user is represented by within an external service.
	ExternalId *string `pulumi:"externalId"`
	// The User's first name.
	FirstName *string `pulumi:"firstName"`
	// Unique identifier of the User.
	Id *string `pulumi:"id"`
	// The User's last name.
	LastName *string `pulumi:"lastName"`
	// Manager ID is the ID of the user's manager. This field is empty when the user has no manager.
	ManagerId *string `pulumi:"managerId"`
	// Unique human-readable name of the Token.
	Name *string `pulumi:"name"`
	// PermissionLevel is the user's permission level e.g. admin, DBA, user.
	PermissionLevel *string `pulumi:"permissionLevel"`
	// Permissions assigned to the token, e.g. role:create.
	Permissions *string `pulumi:"permissions"`
	// Reserved for future use.  Always false for tokens.
	Suspended *bool `pulumi:"suspended"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// a filter to select all items of a certain subtype. See the [filter documentation](https://www.strongdm.com/docs/cli/filters/) for more information.
	Type *string `pulumi:"type"`
}

// A collection of values returned by getAccount.
type LookupAccountResult struct {
	// Corresponds to the type of token, e.g. api or admin-token.
	AccountType *string `pulumi:"accountType"`
	// A single element list containing a map, where each key lists one of the following objects:
	// * service:
	Accounts []GetAccountAccount `pulumi:"accounts"`
	// The User's email address. Must be unique.
	Email *string `pulumi:"email"`
	// External ID is an alternative unique ID this user is represented by within an external service.
	ExternalId *string `pulumi:"externalId"`
	// The User's first name.
	FirstName *string `pulumi:"firstName"`
	// Unique identifier of the User.
	Id *string `pulumi:"id"`
	// a list of strings of ids of data sources that match the given arguments.
	Ids []string `pulumi:"ids"`
	// The User's last name.
	LastName *string `pulumi:"lastName"`
	// Manager ID is the ID of the user's manager. This field is empty when the user has no manager.
	ManagerId *string `pulumi:"managerId"`
	// Unique human-readable name of the Token.
	Name *string `pulumi:"name"`
	// PermissionLevel is the user's permission level e.g. admin, DBA, user.
	PermissionLevel *string `pulumi:"permissionLevel"`
	// Permissions assigned to the token, e.g. role:create.
	Permissions *string `pulumi:"permissions"`
	// Suspended is a read only field for the User's suspended state.
	Suspended *bool `pulumi:"suspended"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	Type *string           `pulumi:"type"`
}

func LookupAccountOutput(ctx *pulumi.Context, args LookupAccountOutputArgs, opts ...pulumi.InvokeOption) LookupAccountResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAccountResultOutput, error) {
			args := v.(LookupAccountArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sdm:index/getAccount:getAccount", args, LookupAccountResultOutput{}, options).(LookupAccountResultOutput), nil
		}).(LookupAccountResultOutput)
}

// A collection of arguments for invoking getAccount.
type LookupAccountOutputArgs struct {
	// Corresponds to the type of token, e.g. api or admin-token.
	AccountType pulumi.StringPtrInput `pulumi:"accountType"`
	// The User's email address. Must be unique.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// External ID is an alternative unique ID this user is represented by within an external service.
	ExternalId pulumi.StringPtrInput `pulumi:"externalId"`
	// The User's first name.
	FirstName pulumi.StringPtrInput `pulumi:"firstName"`
	// Unique identifier of the User.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The User's last name.
	LastName pulumi.StringPtrInput `pulumi:"lastName"`
	// Manager ID is the ID of the user's manager. This field is empty when the user has no manager.
	ManagerId pulumi.StringPtrInput `pulumi:"managerId"`
	// Unique human-readable name of the Token.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// PermissionLevel is the user's permission level e.g. admin, DBA, user.
	PermissionLevel pulumi.StringPtrInput `pulumi:"permissionLevel"`
	// Permissions assigned to the token, e.g. role:create.
	Permissions pulumi.StringPtrInput `pulumi:"permissions"`
	// Reserved for future use.  Always false for tokens.
	Suspended pulumi.BoolPtrInput `pulumi:"suspended"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// a filter to select all items of a certain subtype. See the [filter documentation](https://www.strongdm.com/docs/cli/filters/) for more information.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LookupAccountOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccountArgs)(nil)).Elem()
}

// A collection of values returned by getAccount.
type LookupAccountResultOutput struct{ *pulumi.OutputState }

func (LookupAccountResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccountResult)(nil)).Elem()
}

func (o LookupAccountResultOutput) ToLookupAccountResultOutput() LookupAccountResultOutput {
	return o
}

func (o LookupAccountResultOutput) ToLookupAccountResultOutputWithContext(ctx context.Context) LookupAccountResultOutput {
	return o
}

// Corresponds to the type of token, e.g. api or admin-token.
func (o LookupAccountResultOutput) AccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccountResult) *string { return v.AccountType }).(pulumi.StringPtrOutput)
}

// A single element list containing a map, where each key lists one of the following objects:
// * service:
func (o LookupAccountResultOutput) Accounts() GetAccountAccountArrayOutput {
	return o.ApplyT(func(v LookupAccountResult) []GetAccountAccount { return v.Accounts }).(GetAccountAccountArrayOutput)
}

// The User's email address. Must be unique.
func (o LookupAccountResultOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccountResult) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// External ID is an alternative unique ID this user is represented by within an external service.
func (o LookupAccountResultOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccountResult) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

// The User's first name.
func (o LookupAccountResultOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccountResult) *string { return v.FirstName }).(pulumi.StringPtrOutput)
}

// Unique identifier of the User.
func (o LookupAccountResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccountResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// a list of strings of ids of data sources that match the given arguments.
func (o LookupAccountResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAccountResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The User's last name.
func (o LookupAccountResultOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccountResult) *string { return v.LastName }).(pulumi.StringPtrOutput)
}

// Manager ID is the ID of the user's manager. This field is empty when the user has no manager.
func (o LookupAccountResultOutput) ManagerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccountResult) *string { return v.ManagerId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Token.
func (o LookupAccountResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccountResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// PermissionLevel is the user's permission level e.g. admin, DBA, user.
func (o LookupAccountResultOutput) PermissionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccountResult) *string { return v.PermissionLevel }).(pulumi.StringPtrOutput)
}

// Permissions assigned to the token, e.g. role:create.
func (o LookupAccountResultOutput) Permissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccountResult) *string { return v.Permissions }).(pulumi.StringPtrOutput)
}

// Suspended is a read only field for the User's suspended state.
func (o LookupAccountResultOutput) Suspended() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupAccountResult) *bool { return v.Suspended }).(pulumi.BoolPtrOutput)
}

// Tags is a map of key, value pairs.
func (o LookupAccountResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupAccountResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LookupAccountResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccountResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccountResultOutput{})
}

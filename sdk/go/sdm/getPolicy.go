// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdm

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Policy is a collection of one or more statements that enforce fine-grained access control
//
//	for the users of an organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdm.LookupPolicy(ctx, &sdm.LookupPolicyArgs{
//				Name: pulumi.StringRef("policy-query"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPolicy(ctx *pulumi.Context, args *LookupPolicyArgs, opts ...pulumi.InvokeOption) (*LookupPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPolicyResult
	err := ctx.Invoke("sdm:index/getPolicy:getPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPolicy.
type LookupPolicyArgs struct {
	// Optional description of the Policy.
	Description *string `pulumi:"description"`
	// Unique identifier of the Policy.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Policy.
	Name *string `pulumi:"name"`
	// The content of the Policy, in Cedar policy language.
	Policy *string `pulumi:"policy"`
}

// A collection of values returned by getPolicy.
type LookupPolicyResult struct {
	// Optional description of the Policy.
	Description *string `pulumi:"description"`
	// Unique identifier of the Policy.
	Id *string `pulumi:"id"`
	// a list of strings of ids of data sources that match the given arguments.
	Ids []string `pulumi:"ids"`
	// Unique human-readable name of the Policy.
	Name *string `pulumi:"name"`
	// A list where each element has the following attributes:
	Policies []GetPolicyPolicy `pulumi:"policies"`
	// The content of the Policy, in Cedar policy language.
	Policy *string `pulumi:"policy"`
}

func LookupPolicyOutput(ctx *pulumi.Context, args LookupPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPolicyResult, error) {
			args := v.(LookupPolicyArgs)
			r, err := LookupPolicy(ctx, &args, opts...)
			var s LookupPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPolicyResultOutput)
}

// A collection of arguments for invoking getPolicy.
type LookupPolicyOutputArgs struct {
	// Optional description of the Policy.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Unique identifier of the Policy.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Policy.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The content of the Policy, in Cedar policy language.
	Policy pulumi.StringPtrInput `pulumi:"policy"`
}

func (LookupPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getPolicy.
type LookupPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyResult)(nil)).Elem()
}

func (o LookupPolicyResultOutput) ToLookupPolicyResultOutput() LookupPolicyResultOutput {
	return o
}

func (o LookupPolicyResultOutput) ToLookupPolicyResultOutputWithContext(ctx context.Context) LookupPolicyResultOutput {
	return o
}

// Optional description of the Policy.
func (o LookupPolicyResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Policy.
func (o LookupPolicyResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// a list of strings of ids of data sources that match the given arguments.
func (o LookupPolicyResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// Unique human-readable name of the Policy.
func (o LookupPolicyResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A list where each element has the following attributes:
func (o LookupPolicyResultOutput) Policies() GetPolicyPolicyArrayOutput {
	return o.ApplyT(func(v LookupPolicyResult) []GetPolicyPolicy { return v.Policies }).(GetPolicyPolicyArrayOutput)
}

// The content of the Policy, in Cedar policy language.
func (o LookupPolicyResultOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyResult) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPolicyResultOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdm

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A SecretEngine is managing secrets in SecretStores.
func LookupSecretEngine(ctx *pulumi.Context, args *LookupSecretEngineArgs, opts ...pulumi.InvokeOption) (*LookupSecretEngineResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSecretEngineResult
	err := ctx.Invoke("sdm:index/getSecretEngine:getSecretEngine", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSecretEngine.
type LookupSecretEngineArgs struct {
	// Distinguished name of object to bind when performing user and group search. Example: cn=vault,ou=Users,dc=example,dc=com
	Binddn *string `pulumi:"binddn"`
	// Password to use along with binddn when performing user search.
	Bindpass *string `pulumi:"bindpass"`
	// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
	Certificate *string `pulumi:"certificate"`
	// Timeout, in seconds, when attempting to connect to the LDAP server before trying the next URL in the configuration.
	ConnectionTimeout *int `pulumi:"connectionTimeout"`
	// If set to true this will prevent password change timestamp validation in Active Directory when validating credentials
	DoNotValidateTimestamps *bool `pulumi:"doNotValidateTimestamps"`
	// Unique identifier of the Secret Engine.
	Id *string `pulumi:"id"`
	// If true, skips LDAP server SSL certificate verification - insecure, use with caution!
	InsecureTls *bool `pulumi:"insecureTls"`
	// An interval of public/private key rotation for secret engine in days
	KeyRotationIntervalDays *int `pulumi:"keyRotationIntervalDays"`
	// Unique human-readable name of the Secret Engine.
	Name *string `pulumi:"name"`
	// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
	RequestTimeout *int `pulumi:"requestTimeout"`
	// Backing secret store identifier
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Backing Secret Store root path where managed secrets are going to be stored
	SecretStoreRootPath *string `pulumi:"secretStoreRootPath"`
	// If true, issues a StartTLS command after establishing an unencrypted connection.
	StartTls *bool `pulumi:"startTls"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// a filter to select all items of a certain subtype. See the [filter documentation](https://www.strongdm.com/docs/cli/filters/) for more information.
	Type *string `pulumi:"type"`
	// The domain (userPrincipalDomain) used to construct a UPN string for authentication.
	Upndomain *string `pulumi:"upndomain"`
	// The LDAP server to connect to.
	Url *string `pulumi:"url"`
	// Base DN under which to perform user search. Example: ou=Users,dc=example,dc=com
	Userdn *string `pulumi:"userdn"`
}

// A collection of values returned by getSecretEngine.
type LookupSecretEngineResult struct {
	// Distinguished name of object to bind when performing user and group search. Example: cn=vault,ou=Users,dc=example,dc=com
	Binddn *string `pulumi:"binddn"`
	// Password to use along with binddn when performing user search.
	Bindpass *string `pulumi:"bindpass"`
	// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
	Certificate *string `pulumi:"certificate"`
	// Timeout, in seconds, when attempting to connect to the LDAP server before trying the next URL in the configuration.
	ConnectionTimeout *int `pulumi:"connectionTimeout"`
	// If set to true this will prevent password change timestamp validation in Active Directory when validating credentials
	DoNotValidateTimestamps *bool `pulumi:"doNotValidateTimestamps"`
	// Unique identifier of the Secret Engine.
	Id *string `pulumi:"id"`
	// a list of strings of ids of data sources that match the given arguments.
	Ids []string `pulumi:"ids"`
	// If true, skips LDAP server SSL certificate verification - insecure, use with caution!
	InsecureTls *bool `pulumi:"insecureTls"`
	// An interval of public/private key rotation for secret engine in days
	KeyRotationIntervalDays *int `pulumi:"keyRotationIntervalDays"`
	// Unique human-readable name of the Secret Engine.
	Name *string `pulumi:"name"`
	// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
	RequestTimeout *int `pulumi:"requestTimeout"`
	// A single element list containing a map, where each key lists one of the following objects:
	// * active_directory:
	SecretEngines []GetSecretEngineSecretEngine `pulumi:"secretEngines"`
	// Backing secret store identifier
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Backing Secret Store root path where managed secrets are going to be stored
	SecretStoreRootPath *string `pulumi:"secretStoreRootPath"`
	// If true, issues a StartTLS command after establishing an unencrypted connection.
	StartTls *bool `pulumi:"startTls"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	Type *string           `pulumi:"type"`
	// The domain (userPrincipalDomain) used to construct a UPN string for authentication.
	Upndomain *string `pulumi:"upndomain"`
	// The LDAP server to connect to.
	Url *string `pulumi:"url"`
	// Base DN under which to perform user search. Example: ou=Users,dc=example,dc=com
	// * key_value:
	Userdn *string `pulumi:"userdn"`
}

func LookupSecretEngineOutput(ctx *pulumi.Context, args LookupSecretEngineOutputArgs, opts ...pulumi.InvokeOption) LookupSecretEngineResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSecretEngineResultOutput, error) {
			args := v.(LookupSecretEngineArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sdm:index/getSecretEngine:getSecretEngine", args, LookupSecretEngineResultOutput{}, options).(LookupSecretEngineResultOutput), nil
		}).(LookupSecretEngineResultOutput)
}

// A collection of arguments for invoking getSecretEngine.
type LookupSecretEngineOutputArgs struct {
	// Distinguished name of object to bind when performing user and group search. Example: cn=vault,ou=Users,dc=example,dc=com
	Binddn pulumi.StringPtrInput `pulumi:"binddn"`
	// Password to use along with binddn when performing user search.
	Bindpass pulumi.StringPtrInput `pulumi:"bindpass"`
	// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// Timeout, in seconds, when attempting to connect to the LDAP server before trying the next URL in the configuration.
	ConnectionTimeout pulumi.IntPtrInput `pulumi:"connectionTimeout"`
	// If set to true this will prevent password change timestamp validation in Active Directory when validating credentials
	DoNotValidateTimestamps pulumi.BoolPtrInput `pulumi:"doNotValidateTimestamps"`
	// Unique identifier of the Secret Engine.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// If true, skips LDAP server SSL certificate verification - insecure, use with caution!
	InsecureTls pulumi.BoolPtrInput `pulumi:"insecureTls"`
	// An interval of public/private key rotation for secret engine in days
	KeyRotationIntervalDays pulumi.IntPtrInput `pulumi:"keyRotationIntervalDays"`
	// Unique human-readable name of the Secret Engine.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
	RequestTimeout pulumi.IntPtrInput `pulumi:"requestTimeout"`
	// Backing secret store identifier
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Backing Secret Store root path where managed secrets are going to be stored
	SecretStoreRootPath pulumi.StringPtrInput `pulumi:"secretStoreRootPath"`
	// If true, issues a StartTLS command after establishing an unencrypted connection.
	StartTls pulumi.BoolPtrInput `pulumi:"startTls"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// a filter to select all items of a certain subtype. See the [filter documentation](https://www.strongdm.com/docs/cli/filters/) for more information.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The domain (userPrincipalDomain) used to construct a UPN string for authentication.
	Upndomain pulumi.StringPtrInput `pulumi:"upndomain"`
	// The LDAP server to connect to.
	Url pulumi.StringPtrInput `pulumi:"url"`
	// Base DN under which to perform user search. Example: ou=Users,dc=example,dc=com
	Userdn pulumi.StringPtrInput `pulumi:"userdn"`
}

func (LookupSecretEngineOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecretEngineArgs)(nil)).Elem()
}

// A collection of values returned by getSecretEngine.
type LookupSecretEngineResultOutput struct{ *pulumi.OutputState }

func (LookupSecretEngineResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecretEngineResult)(nil)).Elem()
}

func (o LookupSecretEngineResultOutput) ToLookupSecretEngineResultOutput() LookupSecretEngineResultOutput {
	return o
}

func (o LookupSecretEngineResultOutput) ToLookupSecretEngineResultOutputWithContext(ctx context.Context) LookupSecretEngineResultOutput {
	return o
}

// Distinguished name of object to bind when performing user and group search. Example: cn=vault,ou=Users,dc=example,dc=com
func (o LookupSecretEngineResultOutput) Binddn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) *string { return v.Binddn }).(pulumi.StringPtrOutput)
}

// Password to use along with binddn when performing user search.
func (o LookupSecretEngineResultOutput) Bindpass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) *string { return v.Bindpass }).(pulumi.StringPtrOutput)
}

// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
func (o LookupSecretEngineResultOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// Timeout, in seconds, when attempting to connect to the LDAP server before trying the next URL in the configuration.
func (o LookupSecretEngineResultOutput) ConnectionTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) *int { return v.ConnectionTimeout }).(pulumi.IntPtrOutput)
}

// If set to true this will prevent password change timestamp validation in Active Directory when validating credentials
func (o LookupSecretEngineResultOutput) DoNotValidateTimestamps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) *bool { return v.DoNotValidateTimestamps }).(pulumi.BoolPtrOutput)
}

// Unique identifier of the Secret Engine.
func (o LookupSecretEngineResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// a list of strings of ids of data sources that match the given arguments.
func (o LookupSecretEngineResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// If true, skips LDAP server SSL certificate verification - insecure, use with caution!
func (o LookupSecretEngineResultOutput) InsecureTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) *bool { return v.InsecureTls }).(pulumi.BoolPtrOutput)
}

// An interval of public/private key rotation for secret engine in days
func (o LookupSecretEngineResultOutput) KeyRotationIntervalDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) *int { return v.KeyRotationIntervalDays }).(pulumi.IntPtrOutput)
}

// Unique human-readable name of the Secret Engine.
func (o LookupSecretEngineResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
func (o LookupSecretEngineResultOutput) RequestTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) *int { return v.RequestTimeout }).(pulumi.IntPtrOutput)
}

// A single element list containing a map, where each key lists one of the following objects:
// * active_directory:
func (o LookupSecretEngineResultOutput) SecretEngines() GetSecretEngineSecretEngineArrayOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) []GetSecretEngineSecretEngine { return v.SecretEngines }).(GetSecretEngineSecretEngineArrayOutput)
}

// Backing secret store identifier
func (o LookupSecretEngineResultOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Backing Secret Store root path where managed secrets are going to be stored
func (o LookupSecretEngineResultOutput) SecretStoreRootPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) *string { return v.SecretStoreRootPath }).(pulumi.StringPtrOutput)
}

// If true, issues a StartTLS command after establishing an unencrypted connection.
func (o LookupSecretEngineResultOutput) StartTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) *bool { return v.StartTls }).(pulumi.BoolPtrOutput)
}

// Tags is a map of key, value pairs.
func (o LookupSecretEngineResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LookupSecretEngineResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The domain (userPrincipalDomain) used to construct a UPN string for authentication.
func (o LookupSecretEngineResultOutput) Upndomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) *string { return v.Upndomain }).(pulumi.StringPtrOutput)
}

// The LDAP server to connect to.
func (o LookupSecretEngineResultOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) *string { return v.Url }).(pulumi.StringPtrOutput)
}

// Base DN under which to perform user search. Example: ou=Users,dc=example,dc=com
// * key_value:
func (o LookupSecretEngineResultOutput) Userdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSecretEngineResult) *string { return v.Userdn }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSecretEngineResultOutput{})
}

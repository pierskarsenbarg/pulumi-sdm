// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdm

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AccountService struct {
	// Unique human-readable name of the Service.
	Name string `pulumi:"name"`
	// The Service's suspended state.
	Suspended *bool `pulumi:"suspended"`
	// Tags is a map of key, value pairs.
	Tags  map[string]string `pulumi:"tags"`
	Token *string           `pulumi:"token"`
}

// AccountServiceInput is an input type that accepts AccountServiceArgs and AccountServiceOutput values.
// You can construct a concrete instance of `AccountServiceInput` via:
//
//	AccountServiceArgs{...}
type AccountServiceInput interface {
	pulumi.Input

	ToAccountServiceOutput() AccountServiceOutput
	ToAccountServiceOutputWithContext(context.Context) AccountServiceOutput
}

type AccountServiceArgs struct {
	// Unique human-readable name of the Service.
	Name pulumi.StringInput `pulumi:"name"`
	// The Service's suspended state.
	Suspended pulumi.BoolPtrInput `pulumi:"suspended"`
	// Tags is a map of key, value pairs.
	Tags  pulumi.StringMapInput `pulumi:"tags"`
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (AccountServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountService)(nil)).Elem()
}

func (i AccountServiceArgs) ToAccountServiceOutput() AccountServiceOutput {
	return i.ToAccountServiceOutputWithContext(context.Background())
}

func (i AccountServiceArgs) ToAccountServiceOutputWithContext(ctx context.Context) AccountServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountServiceOutput)
}

func (i AccountServiceArgs) ToAccountServicePtrOutput() AccountServicePtrOutput {
	return i.ToAccountServicePtrOutputWithContext(context.Background())
}

func (i AccountServiceArgs) ToAccountServicePtrOutputWithContext(ctx context.Context) AccountServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountServiceOutput).ToAccountServicePtrOutputWithContext(ctx)
}

// AccountServicePtrInput is an input type that accepts AccountServiceArgs, AccountServicePtr and AccountServicePtrOutput values.
// You can construct a concrete instance of `AccountServicePtrInput` via:
//
//	        AccountServiceArgs{...}
//
//	or:
//
//	        nil
type AccountServicePtrInput interface {
	pulumi.Input

	ToAccountServicePtrOutput() AccountServicePtrOutput
	ToAccountServicePtrOutputWithContext(context.Context) AccountServicePtrOutput
}

type accountServicePtrType AccountServiceArgs

func AccountServicePtr(v *AccountServiceArgs) AccountServicePtrInput {
	return (*accountServicePtrType)(v)
}

func (*accountServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountService)(nil)).Elem()
}

func (i *accountServicePtrType) ToAccountServicePtrOutput() AccountServicePtrOutput {
	return i.ToAccountServicePtrOutputWithContext(context.Background())
}

func (i *accountServicePtrType) ToAccountServicePtrOutputWithContext(ctx context.Context) AccountServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountServicePtrOutput)
}

type AccountServiceOutput struct{ *pulumi.OutputState }

func (AccountServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountService)(nil)).Elem()
}

func (o AccountServiceOutput) ToAccountServiceOutput() AccountServiceOutput {
	return o
}

func (o AccountServiceOutput) ToAccountServiceOutputWithContext(ctx context.Context) AccountServiceOutput {
	return o
}

func (o AccountServiceOutput) ToAccountServicePtrOutput() AccountServicePtrOutput {
	return o.ToAccountServicePtrOutputWithContext(context.Background())
}

func (o AccountServiceOutput) ToAccountServicePtrOutputWithContext(ctx context.Context) AccountServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccountService) *AccountService {
		return &v
	}).(AccountServicePtrOutput)
}

// Unique human-readable name of the Service.
func (o AccountServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AccountService) string { return v.Name }).(pulumi.StringOutput)
}

// The Service's suspended state.
func (o AccountServiceOutput) Suspended() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccountService) *bool { return v.Suspended }).(pulumi.BoolPtrOutput)
}

// Tags is a map of key, value pairs.
func (o AccountServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AccountService) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o AccountServiceOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountService) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type AccountServicePtrOutput struct{ *pulumi.OutputState }

func (AccountServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountService)(nil)).Elem()
}

func (o AccountServicePtrOutput) ToAccountServicePtrOutput() AccountServicePtrOutput {
	return o
}

func (o AccountServicePtrOutput) ToAccountServicePtrOutputWithContext(ctx context.Context) AccountServicePtrOutput {
	return o
}

func (o AccountServicePtrOutput) Elem() AccountServiceOutput {
	return o.ApplyT(func(v *AccountService) AccountService {
		if v != nil {
			return *v
		}
		var ret AccountService
		return ret
	}).(AccountServiceOutput)
}

// Unique human-readable name of the Service.
func (o AccountServicePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountService) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The Service's suspended state.
func (o AccountServicePtrOutput) Suspended() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AccountService) *bool {
		if v == nil {
			return nil
		}
		return v.Suspended
	}).(pulumi.BoolPtrOutput)
}

// Tags is a map of key, value pairs.
func (o AccountServicePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AccountService) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

func (o AccountServicePtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountService) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

type AccountUser struct {
	// The User's email address. Must be unique.
	Email string `pulumi:"email"`
	// External ID is an alternative unique ID this user is represented by within an external service.
	ExternalId *string `pulumi:"externalId"`
	// The User's first name.
	FirstName string `pulumi:"firstName"`
	// The User's last name.
	LastName string `pulumi:"lastName"`
	// Managed By is a read only field for what service manages this user, e.g. StrongDM, Okta, Azure.
	ManagedBy *string `pulumi:"managedBy"`
	// PermissionLevel is the user's permission level e.g. admin, DBA, user.
	PermissionLevel *string `pulumi:"permissionLevel"`
	// The Service's suspended state.
	Suspended *bool `pulumi:"suspended"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// AccountUserInput is an input type that accepts AccountUserArgs and AccountUserOutput values.
// You can construct a concrete instance of `AccountUserInput` via:
//
//	AccountUserArgs{...}
type AccountUserInput interface {
	pulumi.Input

	ToAccountUserOutput() AccountUserOutput
	ToAccountUserOutputWithContext(context.Context) AccountUserOutput
}

type AccountUserArgs struct {
	// The User's email address. Must be unique.
	Email pulumi.StringInput `pulumi:"email"`
	// External ID is an alternative unique ID this user is represented by within an external service.
	ExternalId pulumi.StringPtrInput `pulumi:"externalId"`
	// The User's first name.
	FirstName pulumi.StringInput `pulumi:"firstName"`
	// The User's last name.
	LastName pulumi.StringInput `pulumi:"lastName"`
	// Managed By is a read only field for what service manages this user, e.g. StrongDM, Okta, Azure.
	ManagedBy pulumi.StringPtrInput `pulumi:"managedBy"`
	// PermissionLevel is the user's permission level e.g. admin, DBA, user.
	PermissionLevel pulumi.StringPtrInput `pulumi:"permissionLevel"`
	// The Service's suspended state.
	Suspended pulumi.BoolPtrInput `pulumi:"suspended"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (AccountUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountUser)(nil)).Elem()
}

func (i AccountUserArgs) ToAccountUserOutput() AccountUserOutput {
	return i.ToAccountUserOutputWithContext(context.Background())
}

func (i AccountUserArgs) ToAccountUserOutputWithContext(ctx context.Context) AccountUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountUserOutput)
}

func (i AccountUserArgs) ToAccountUserPtrOutput() AccountUserPtrOutput {
	return i.ToAccountUserPtrOutputWithContext(context.Background())
}

func (i AccountUserArgs) ToAccountUserPtrOutputWithContext(ctx context.Context) AccountUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountUserOutput).ToAccountUserPtrOutputWithContext(ctx)
}

// AccountUserPtrInput is an input type that accepts AccountUserArgs, AccountUserPtr and AccountUserPtrOutput values.
// You can construct a concrete instance of `AccountUserPtrInput` via:
//
//	        AccountUserArgs{...}
//
//	or:
//
//	        nil
type AccountUserPtrInput interface {
	pulumi.Input

	ToAccountUserPtrOutput() AccountUserPtrOutput
	ToAccountUserPtrOutputWithContext(context.Context) AccountUserPtrOutput
}

type accountUserPtrType AccountUserArgs

func AccountUserPtr(v *AccountUserArgs) AccountUserPtrInput {
	return (*accountUserPtrType)(v)
}

func (*accountUserPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountUser)(nil)).Elem()
}

func (i *accountUserPtrType) ToAccountUserPtrOutput() AccountUserPtrOutput {
	return i.ToAccountUserPtrOutputWithContext(context.Background())
}

func (i *accountUserPtrType) ToAccountUserPtrOutputWithContext(ctx context.Context) AccountUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountUserPtrOutput)
}

type AccountUserOutput struct{ *pulumi.OutputState }

func (AccountUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountUser)(nil)).Elem()
}

func (o AccountUserOutput) ToAccountUserOutput() AccountUserOutput {
	return o
}

func (o AccountUserOutput) ToAccountUserOutputWithContext(ctx context.Context) AccountUserOutput {
	return o
}

func (o AccountUserOutput) ToAccountUserPtrOutput() AccountUserPtrOutput {
	return o.ToAccountUserPtrOutputWithContext(context.Background())
}

func (o AccountUserOutput) ToAccountUserPtrOutputWithContext(ctx context.Context) AccountUserPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccountUser) *AccountUser {
		return &v
	}).(AccountUserPtrOutput)
}

// The User's email address. Must be unique.
func (o AccountUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v AccountUser) string { return v.Email }).(pulumi.StringOutput)
}

// External ID is an alternative unique ID this user is represented by within an external service.
func (o AccountUserOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountUser) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

// The User's first name.
func (o AccountUserOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v AccountUser) string { return v.FirstName }).(pulumi.StringOutput)
}

// The User's last name.
func (o AccountUserOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v AccountUser) string { return v.LastName }).(pulumi.StringOutput)
}

// Managed By is a read only field for what service manages this user, e.g. StrongDM, Okta, Azure.
func (o AccountUserOutput) ManagedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountUser) *string { return v.ManagedBy }).(pulumi.StringPtrOutput)
}

// PermissionLevel is the user's permission level e.g. admin, DBA, user.
func (o AccountUserOutput) PermissionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountUser) *string { return v.PermissionLevel }).(pulumi.StringPtrOutput)
}

// The Service's suspended state.
func (o AccountUserOutput) Suspended() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccountUser) *bool { return v.Suspended }).(pulumi.BoolPtrOutput)
}

// Tags is a map of key, value pairs.
func (o AccountUserOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AccountUser) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type AccountUserPtrOutput struct{ *pulumi.OutputState }

func (AccountUserPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountUser)(nil)).Elem()
}

func (o AccountUserPtrOutput) ToAccountUserPtrOutput() AccountUserPtrOutput {
	return o
}

func (o AccountUserPtrOutput) ToAccountUserPtrOutputWithContext(ctx context.Context) AccountUserPtrOutput {
	return o
}

func (o AccountUserPtrOutput) Elem() AccountUserOutput {
	return o.ApplyT(func(v *AccountUser) AccountUser {
		if v != nil {
			return *v
		}
		var ret AccountUser
		return ret
	}).(AccountUserOutput)
}

// The User's email address. Must be unique.
func (o AccountUserPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountUser) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// External ID is an alternative unique ID this user is represented by within an external service.
func (o AccountUserPtrOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountUser) *string {
		if v == nil {
			return nil
		}
		return v.ExternalId
	}).(pulumi.StringPtrOutput)
}

// The User's first name.
func (o AccountUserPtrOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountUser) *string {
		if v == nil {
			return nil
		}
		return &v.FirstName
	}).(pulumi.StringPtrOutput)
}

// The User's last name.
func (o AccountUserPtrOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountUser) *string {
		if v == nil {
			return nil
		}
		return &v.LastName
	}).(pulumi.StringPtrOutput)
}

// Managed By is a read only field for what service manages this user, e.g. StrongDM, Okta, Azure.
func (o AccountUserPtrOutput) ManagedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountUser) *string {
		if v == nil {
			return nil
		}
		return v.ManagedBy
	}).(pulumi.StringPtrOutput)
}

// PermissionLevel is the user's permission level e.g. admin, DBA, user.
func (o AccountUserPtrOutput) PermissionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountUser) *string {
		if v == nil {
			return nil
		}
		return v.PermissionLevel
	}).(pulumi.StringPtrOutput)
}

// The Service's suspended state.
func (o AccountUserPtrOutput) Suspended() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AccountUser) *bool {
		if v == nil {
			return nil
		}
		return v.Suspended
	}).(pulumi.BoolPtrOutput)
}

// Tags is a map of key, value pairs.
func (o AccountUserPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AccountUser) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type NodeGateway struct {
	// The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to "0.0.0.0:listen_address_port".
	BindAddress *string `pulumi:"bindAddress"`
	// Device is a read only device name uploaded by the gateway process when it comes online.
	Device *string `pulumi:"device"`
	// GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.
	GatewayFilter *string `pulumi:"gatewayFilter"`
	// The public hostname/port tuple at which the gateway will be accessible to clients.
	ListenAddress string `pulumi:"listenAddress"`
	// Location is a read only network location uploaded by the gateway process when it comes online.
	Location *string `pulumi:"location"`
	// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
	MaintenanceWindows []NodeGatewayMaintenanceWindow `pulumi:"maintenanceWindows"`
	// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
	Name *string `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags  map[string]string `pulumi:"tags"`
	Token *string           `pulumi:"token"`
	// Version is a read only sdm binary version uploaded by the gateway process when it comes online.
	Version *string `pulumi:"version"`
}

// NodeGatewayInput is an input type that accepts NodeGatewayArgs and NodeGatewayOutput values.
// You can construct a concrete instance of `NodeGatewayInput` via:
//
//	NodeGatewayArgs{...}
type NodeGatewayInput interface {
	pulumi.Input

	ToNodeGatewayOutput() NodeGatewayOutput
	ToNodeGatewayOutputWithContext(context.Context) NodeGatewayOutput
}

type NodeGatewayArgs struct {
	// The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to "0.0.0.0:listen_address_port".
	BindAddress pulumi.StringPtrInput `pulumi:"bindAddress"`
	// Device is a read only device name uploaded by the gateway process when it comes online.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.
	GatewayFilter pulumi.StringPtrInput `pulumi:"gatewayFilter"`
	// The public hostname/port tuple at which the gateway will be accessible to clients.
	ListenAddress pulumi.StringInput `pulumi:"listenAddress"`
	// Location is a read only network location uploaded by the gateway process when it comes online.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
	MaintenanceWindows NodeGatewayMaintenanceWindowArrayInput `pulumi:"maintenanceWindows"`
	// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags  pulumi.StringMapInput `pulumi:"tags"`
	Token pulumi.StringPtrInput `pulumi:"token"`
	// Version is a read only sdm binary version uploaded by the gateway process when it comes online.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (NodeGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGateway)(nil)).Elem()
}

func (i NodeGatewayArgs) ToNodeGatewayOutput() NodeGatewayOutput {
	return i.ToNodeGatewayOutputWithContext(context.Background())
}

func (i NodeGatewayArgs) ToNodeGatewayOutputWithContext(ctx context.Context) NodeGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGatewayOutput)
}

func (i NodeGatewayArgs) ToNodeGatewayPtrOutput() NodeGatewayPtrOutput {
	return i.ToNodeGatewayPtrOutputWithContext(context.Background())
}

func (i NodeGatewayArgs) ToNodeGatewayPtrOutputWithContext(ctx context.Context) NodeGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGatewayOutput).ToNodeGatewayPtrOutputWithContext(ctx)
}

// NodeGatewayPtrInput is an input type that accepts NodeGatewayArgs, NodeGatewayPtr and NodeGatewayPtrOutput values.
// You can construct a concrete instance of `NodeGatewayPtrInput` via:
//
//	        NodeGatewayArgs{...}
//
//	or:
//
//	        nil
type NodeGatewayPtrInput interface {
	pulumi.Input

	ToNodeGatewayPtrOutput() NodeGatewayPtrOutput
	ToNodeGatewayPtrOutputWithContext(context.Context) NodeGatewayPtrOutput
}

type nodeGatewayPtrType NodeGatewayArgs

func NodeGatewayPtr(v *NodeGatewayArgs) NodeGatewayPtrInput {
	return (*nodeGatewayPtrType)(v)
}

func (*nodeGatewayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGateway)(nil)).Elem()
}

func (i *nodeGatewayPtrType) ToNodeGatewayPtrOutput() NodeGatewayPtrOutput {
	return i.ToNodeGatewayPtrOutputWithContext(context.Background())
}

func (i *nodeGatewayPtrType) ToNodeGatewayPtrOutputWithContext(ctx context.Context) NodeGatewayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGatewayPtrOutput)
}

type NodeGatewayOutput struct{ *pulumi.OutputState }

func (NodeGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGateway)(nil)).Elem()
}

func (o NodeGatewayOutput) ToNodeGatewayOutput() NodeGatewayOutput {
	return o
}

func (o NodeGatewayOutput) ToNodeGatewayOutputWithContext(ctx context.Context) NodeGatewayOutput {
	return o
}

func (o NodeGatewayOutput) ToNodeGatewayPtrOutput() NodeGatewayPtrOutput {
	return o.ToNodeGatewayPtrOutputWithContext(context.Background())
}

func (o NodeGatewayOutput) ToNodeGatewayPtrOutputWithContext(ctx context.Context) NodeGatewayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeGateway) *NodeGateway {
		return &v
	}).(NodeGatewayPtrOutput)
}

// The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to "0.0.0.0:listen_address_port".
func (o NodeGatewayOutput) BindAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeGateway) *string { return v.BindAddress }).(pulumi.StringPtrOutput)
}

// Device is a read only device name uploaded by the gateway process when it comes online.
func (o NodeGatewayOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeGateway) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.
func (o NodeGatewayOutput) GatewayFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeGateway) *string { return v.GatewayFilter }).(pulumi.StringPtrOutput)
}

// The public hostname/port tuple at which the gateway will be accessible to clients.
func (o NodeGatewayOutput) ListenAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NodeGateway) string { return v.ListenAddress }).(pulumi.StringOutput)
}

// Location is a read only network location uploaded by the gateway process when it comes online.
func (o NodeGatewayOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeGateway) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
func (o NodeGatewayOutput) MaintenanceWindows() NodeGatewayMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v NodeGateway) []NodeGatewayMaintenanceWindow { return v.MaintenanceWindows }).(NodeGatewayMaintenanceWindowArrayOutput)
}

// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
func (o NodeGatewayOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeGateway) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o NodeGatewayOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeGateway) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o NodeGatewayOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeGateway) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// Version is a read only sdm binary version uploaded by the gateway process when it comes online.
func (o NodeGatewayOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeGateway) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type NodeGatewayPtrOutput struct{ *pulumi.OutputState }

func (NodeGatewayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeGateway)(nil)).Elem()
}

func (o NodeGatewayPtrOutput) ToNodeGatewayPtrOutput() NodeGatewayPtrOutput {
	return o
}

func (o NodeGatewayPtrOutput) ToNodeGatewayPtrOutputWithContext(ctx context.Context) NodeGatewayPtrOutput {
	return o
}

func (o NodeGatewayPtrOutput) Elem() NodeGatewayOutput {
	return o.ApplyT(func(v *NodeGateway) NodeGateway {
		if v != nil {
			return *v
		}
		var ret NodeGateway
		return ret
	}).(NodeGatewayOutput)
}

// The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to "0.0.0.0:listen_address_port".
func (o NodeGatewayPtrOutput) BindAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGateway) *string {
		if v == nil {
			return nil
		}
		return v.BindAddress
	}).(pulumi.StringPtrOutput)
}

// Device is a read only device name uploaded by the gateway process when it comes online.
func (o NodeGatewayPtrOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGateway) *string {
		if v == nil {
			return nil
		}
		return v.Device
	}).(pulumi.StringPtrOutput)
}

// GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.
func (o NodeGatewayPtrOutput) GatewayFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGateway) *string {
		if v == nil {
			return nil
		}
		return v.GatewayFilter
	}).(pulumi.StringPtrOutput)
}

// The public hostname/port tuple at which the gateway will be accessible to clients.
func (o NodeGatewayPtrOutput) ListenAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGateway) *string {
		if v == nil {
			return nil
		}
		return &v.ListenAddress
	}).(pulumi.StringPtrOutput)
}

// Location is a read only network location uploaded by the gateway process when it comes online.
func (o NodeGatewayPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGateway) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
func (o NodeGatewayPtrOutput) MaintenanceWindows() NodeGatewayMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v *NodeGateway) []NodeGatewayMaintenanceWindow {
		if v == nil {
			return nil
		}
		return v.MaintenanceWindows
	}).(NodeGatewayMaintenanceWindowArrayOutput)
}

// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
func (o NodeGatewayPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGateway) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o NodeGatewayPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeGateway) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

func (o NodeGatewayPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGateway) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// Version is a read only sdm binary version uploaded by the gateway process when it comes online.
func (o NodeGatewayPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeGateway) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type NodeGatewayMaintenanceWindow struct {
	CronSchedule    string `pulumi:"cronSchedule"`
	RequireIdleness bool   `pulumi:"requireIdleness"`
}

// NodeGatewayMaintenanceWindowInput is an input type that accepts NodeGatewayMaintenanceWindowArgs and NodeGatewayMaintenanceWindowOutput values.
// You can construct a concrete instance of `NodeGatewayMaintenanceWindowInput` via:
//
//	NodeGatewayMaintenanceWindowArgs{...}
type NodeGatewayMaintenanceWindowInput interface {
	pulumi.Input

	ToNodeGatewayMaintenanceWindowOutput() NodeGatewayMaintenanceWindowOutput
	ToNodeGatewayMaintenanceWindowOutputWithContext(context.Context) NodeGatewayMaintenanceWindowOutput
}

type NodeGatewayMaintenanceWindowArgs struct {
	CronSchedule    pulumi.StringInput `pulumi:"cronSchedule"`
	RequireIdleness pulumi.BoolInput   `pulumi:"requireIdleness"`
}

func (NodeGatewayMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGatewayMaintenanceWindow)(nil)).Elem()
}

func (i NodeGatewayMaintenanceWindowArgs) ToNodeGatewayMaintenanceWindowOutput() NodeGatewayMaintenanceWindowOutput {
	return i.ToNodeGatewayMaintenanceWindowOutputWithContext(context.Background())
}

func (i NodeGatewayMaintenanceWindowArgs) ToNodeGatewayMaintenanceWindowOutputWithContext(ctx context.Context) NodeGatewayMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGatewayMaintenanceWindowOutput)
}

// NodeGatewayMaintenanceWindowArrayInput is an input type that accepts NodeGatewayMaintenanceWindowArray and NodeGatewayMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `NodeGatewayMaintenanceWindowArrayInput` via:
//
//	NodeGatewayMaintenanceWindowArray{ NodeGatewayMaintenanceWindowArgs{...} }
type NodeGatewayMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToNodeGatewayMaintenanceWindowArrayOutput() NodeGatewayMaintenanceWindowArrayOutput
	ToNodeGatewayMaintenanceWindowArrayOutputWithContext(context.Context) NodeGatewayMaintenanceWindowArrayOutput
}

type NodeGatewayMaintenanceWindowArray []NodeGatewayMaintenanceWindowInput

func (NodeGatewayMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeGatewayMaintenanceWindow)(nil)).Elem()
}

func (i NodeGatewayMaintenanceWindowArray) ToNodeGatewayMaintenanceWindowArrayOutput() NodeGatewayMaintenanceWindowArrayOutput {
	return i.ToNodeGatewayMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i NodeGatewayMaintenanceWindowArray) ToNodeGatewayMaintenanceWindowArrayOutputWithContext(ctx context.Context) NodeGatewayMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeGatewayMaintenanceWindowArrayOutput)
}

type NodeGatewayMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (NodeGatewayMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeGatewayMaintenanceWindow)(nil)).Elem()
}

func (o NodeGatewayMaintenanceWindowOutput) ToNodeGatewayMaintenanceWindowOutput() NodeGatewayMaintenanceWindowOutput {
	return o
}

func (o NodeGatewayMaintenanceWindowOutput) ToNodeGatewayMaintenanceWindowOutputWithContext(ctx context.Context) NodeGatewayMaintenanceWindowOutput {
	return o
}

func (o NodeGatewayMaintenanceWindowOutput) CronSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v NodeGatewayMaintenanceWindow) string { return v.CronSchedule }).(pulumi.StringOutput)
}

func (o NodeGatewayMaintenanceWindowOutput) RequireIdleness() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeGatewayMaintenanceWindow) bool { return v.RequireIdleness }).(pulumi.BoolOutput)
}

type NodeGatewayMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (NodeGatewayMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeGatewayMaintenanceWindow)(nil)).Elem()
}

func (o NodeGatewayMaintenanceWindowArrayOutput) ToNodeGatewayMaintenanceWindowArrayOutput() NodeGatewayMaintenanceWindowArrayOutput {
	return o
}

func (o NodeGatewayMaintenanceWindowArrayOutput) ToNodeGatewayMaintenanceWindowArrayOutputWithContext(ctx context.Context) NodeGatewayMaintenanceWindowArrayOutput {
	return o
}

func (o NodeGatewayMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) NodeGatewayMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeGatewayMaintenanceWindow {
		return vs[0].([]NodeGatewayMaintenanceWindow)[vs[1].(int)]
	}).(NodeGatewayMaintenanceWindowOutput)
}

type NodeProxyCluster struct {
	// The public hostname/port tuple at which the proxy cluster will be accessible to clients.
	Address string `pulumi:"address"`
	// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
	MaintenanceWindows []NodeProxyClusterMaintenanceWindow `pulumi:"maintenanceWindows"`
	// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
	Name *string `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// NodeProxyClusterInput is an input type that accepts NodeProxyClusterArgs and NodeProxyClusterOutput values.
// You can construct a concrete instance of `NodeProxyClusterInput` via:
//
//	NodeProxyClusterArgs{...}
type NodeProxyClusterInput interface {
	pulumi.Input

	ToNodeProxyClusterOutput() NodeProxyClusterOutput
	ToNodeProxyClusterOutputWithContext(context.Context) NodeProxyClusterOutput
}

type NodeProxyClusterArgs struct {
	// The public hostname/port tuple at which the proxy cluster will be accessible to clients.
	Address pulumi.StringInput `pulumi:"address"`
	// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
	MaintenanceWindows NodeProxyClusterMaintenanceWindowArrayInput `pulumi:"maintenanceWindows"`
	// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (NodeProxyClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeProxyCluster)(nil)).Elem()
}

func (i NodeProxyClusterArgs) ToNodeProxyClusterOutput() NodeProxyClusterOutput {
	return i.ToNodeProxyClusterOutputWithContext(context.Background())
}

func (i NodeProxyClusterArgs) ToNodeProxyClusterOutputWithContext(ctx context.Context) NodeProxyClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeProxyClusterOutput)
}

func (i NodeProxyClusterArgs) ToNodeProxyClusterPtrOutput() NodeProxyClusterPtrOutput {
	return i.ToNodeProxyClusterPtrOutputWithContext(context.Background())
}

func (i NodeProxyClusterArgs) ToNodeProxyClusterPtrOutputWithContext(ctx context.Context) NodeProxyClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeProxyClusterOutput).ToNodeProxyClusterPtrOutputWithContext(ctx)
}

// NodeProxyClusterPtrInput is an input type that accepts NodeProxyClusterArgs, NodeProxyClusterPtr and NodeProxyClusterPtrOutput values.
// You can construct a concrete instance of `NodeProxyClusterPtrInput` via:
//
//	        NodeProxyClusterArgs{...}
//
//	or:
//
//	        nil
type NodeProxyClusterPtrInput interface {
	pulumi.Input

	ToNodeProxyClusterPtrOutput() NodeProxyClusterPtrOutput
	ToNodeProxyClusterPtrOutputWithContext(context.Context) NodeProxyClusterPtrOutput
}

type nodeProxyClusterPtrType NodeProxyClusterArgs

func NodeProxyClusterPtr(v *NodeProxyClusterArgs) NodeProxyClusterPtrInput {
	return (*nodeProxyClusterPtrType)(v)
}

func (*nodeProxyClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeProxyCluster)(nil)).Elem()
}

func (i *nodeProxyClusterPtrType) ToNodeProxyClusterPtrOutput() NodeProxyClusterPtrOutput {
	return i.ToNodeProxyClusterPtrOutputWithContext(context.Background())
}

func (i *nodeProxyClusterPtrType) ToNodeProxyClusterPtrOutputWithContext(ctx context.Context) NodeProxyClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeProxyClusterPtrOutput)
}

type NodeProxyClusterOutput struct{ *pulumi.OutputState }

func (NodeProxyClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeProxyCluster)(nil)).Elem()
}

func (o NodeProxyClusterOutput) ToNodeProxyClusterOutput() NodeProxyClusterOutput {
	return o
}

func (o NodeProxyClusterOutput) ToNodeProxyClusterOutputWithContext(ctx context.Context) NodeProxyClusterOutput {
	return o
}

func (o NodeProxyClusterOutput) ToNodeProxyClusterPtrOutput() NodeProxyClusterPtrOutput {
	return o.ToNodeProxyClusterPtrOutputWithContext(context.Background())
}

func (o NodeProxyClusterOutput) ToNodeProxyClusterPtrOutputWithContext(ctx context.Context) NodeProxyClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeProxyCluster) *NodeProxyCluster {
		return &v
	}).(NodeProxyClusterPtrOutput)
}

// The public hostname/port tuple at which the proxy cluster will be accessible to clients.
func (o NodeProxyClusterOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v NodeProxyCluster) string { return v.Address }).(pulumi.StringOutput)
}

// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
func (o NodeProxyClusterOutput) MaintenanceWindows() NodeProxyClusterMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v NodeProxyCluster) []NodeProxyClusterMaintenanceWindow { return v.MaintenanceWindows }).(NodeProxyClusterMaintenanceWindowArrayOutput)
}

// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
func (o NodeProxyClusterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeProxyCluster) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o NodeProxyClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeProxyCluster) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type NodeProxyClusterPtrOutput struct{ *pulumi.OutputState }

func (NodeProxyClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeProxyCluster)(nil)).Elem()
}

func (o NodeProxyClusterPtrOutput) ToNodeProxyClusterPtrOutput() NodeProxyClusterPtrOutput {
	return o
}

func (o NodeProxyClusterPtrOutput) ToNodeProxyClusterPtrOutputWithContext(ctx context.Context) NodeProxyClusterPtrOutput {
	return o
}

func (o NodeProxyClusterPtrOutput) Elem() NodeProxyClusterOutput {
	return o.ApplyT(func(v *NodeProxyCluster) NodeProxyCluster {
		if v != nil {
			return *v
		}
		var ret NodeProxyCluster
		return ret
	}).(NodeProxyClusterOutput)
}

// The public hostname/port tuple at which the proxy cluster will be accessible to clients.
func (o NodeProxyClusterPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeProxyCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Address
	}).(pulumi.StringPtrOutput)
}

// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
func (o NodeProxyClusterPtrOutput) MaintenanceWindows() NodeProxyClusterMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v *NodeProxyCluster) []NodeProxyClusterMaintenanceWindow {
		if v == nil {
			return nil
		}
		return v.MaintenanceWindows
	}).(NodeProxyClusterMaintenanceWindowArrayOutput)
}

// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
func (o NodeProxyClusterPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeProxyCluster) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o NodeProxyClusterPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeProxyCluster) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type NodeProxyClusterMaintenanceWindow struct {
	CronSchedule    string `pulumi:"cronSchedule"`
	RequireIdleness bool   `pulumi:"requireIdleness"`
}

// NodeProxyClusterMaintenanceWindowInput is an input type that accepts NodeProxyClusterMaintenanceWindowArgs and NodeProxyClusterMaintenanceWindowOutput values.
// You can construct a concrete instance of `NodeProxyClusterMaintenanceWindowInput` via:
//
//	NodeProxyClusterMaintenanceWindowArgs{...}
type NodeProxyClusterMaintenanceWindowInput interface {
	pulumi.Input

	ToNodeProxyClusterMaintenanceWindowOutput() NodeProxyClusterMaintenanceWindowOutput
	ToNodeProxyClusterMaintenanceWindowOutputWithContext(context.Context) NodeProxyClusterMaintenanceWindowOutput
}

type NodeProxyClusterMaintenanceWindowArgs struct {
	CronSchedule    pulumi.StringInput `pulumi:"cronSchedule"`
	RequireIdleness pulumi.BoolInput   `pulumi:"requireIdleness"`
}

func (NodeProxyClusterMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeProxyClusterMaintenanceWindow)(nil)).Elem()
}

func (i NodeProxyClusterMaintenanceWindowArgs) ToNodeProxyClusterMaintenanceWindowOutput() NodeProxyClusterMaintenanceWindowOutput {
	return i.ToNodeProxyClusterMaintenanceWindowOutputWithContext(context.Background())
}

func (i NodeProxyClusterMaintenanceWindowArgs) ToNodeProxyClusterMaintenanceWindowOutputWithContext(ctx context.Context) NodeProxyClusterMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeProxyClusterMaintenanceWindowOutput)
}

// NodeProxyClusterMaintenanceWindowArrayInput is an input type that accepts NodeProxyClusterMaintenanceWindowArray and NodeProxyClusterMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `NodeProxyClusterMaintenanceWindowArrayInput` via:
//
//	NodeProxyClusterMaintenanceWindowArray{ NodeProxyClusterMaintenanceWindowArgs{...} }
type NodeProxyClusterMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToNodeProxyClusterMaintenanceWindowArrayOutput() NodeProxyClusterMaintenanceWindowArrayOutput
	ToNodeProxyClusterMaintenanceWindowArrayOutputWithContext(context.Context) NodeProxyClusterMaintenanceWindowArrayOutput
}

type NodeProxyClusterMaintenanceWindowArray []NodeProxyClusterMaintenanceWindowInput

func (NodeProxyClusterMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeProxyClusterMaintenanceWindow)(nil)).Elem()
}

func (i NodeProxyClusterMaintenanceWindowArray) ToNodeProxyClusterMaintenanceWindowArrayOutput() NodeProxyClusterMaintenanceWindowArrayOutput {
	return i.ToNodeProxyClusterMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i NodeProxyClusterMaintenanceWindowArray) ToNodeProxyClusterMaintenanceWindowArrayOutputWithContext(ctx context.Context) NodeProxyClusterMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeProxyClusterMaintenanceWindowArrayOutput)
}

type NodeProxyClusterMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (NodeProxyClusterMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeProxyClusterMaintenanceWindow)(nil)).Elem()
}

func (o NodeProxyClusterMaintenanceWindowOutput) ToNodeProxyClusterMaintenanceWindowOutput() NodeProxyClusterMaintenanceWindowOutput {
	return o
}

func (o NodeProxyClusterMaintenanceWindowOutput) ToNodeProxyClusterMaintenanceWindowOutputWithContext(ctx context.Context) NodeProxyClusterMaintenanceWindowOutput {
	return o
}

func (o NodeProxyClusterMaintenanceWindowOutput) CronSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v NodeProxyClusterMaintenanceWindow) string { return v.CronSchedule }).(pulumi.StringOutput)
}

func (o NodeProxyClusterMaintenanceWindowOutput) RequireIdleness() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeProxyClusterMaintenanceWindow) bool { return v.RequireIdleness }).(pulumi.BoolOutput)
}

type NodeProxyClusterMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (NodeProxyClusterMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeProxyClusterMaintenanceWindow)(nil)).Elem()
}

func (o NodeProxyClusterMaintenanceWindowArrayOutput) ToNodeProxyClusterMaintenanceWindowArrayOutput() NodeProxyClusterMaintenanceWindowArrayOutput {
	return o
}

func (o NodeProxyClusterMaintenanceWindowArrayOutput) ToNodeProxyClusterMaintenanceWindowArrayOutputWithContext(ctx context.Context) NodeProxyClusterMaintenanceWindowArrayOutput {
	return o
}

func (o NodeProxyClusterMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) NodeProxyClusterMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeProxyClusterMaintenanceWindow {
		return vs[0].([]NodeProxyClusterMaintenanceWindow)[vs[1].(int)]
	}).(NodeProxyClusterMaintenanceWindowOutput)
}

type NodeRelay struct {
	// Device is a read only device name uploaded by the gateway process when it comes online.
	Device *string `pulumi:"device"`
	// GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.
	GatewayFilter *string `pulumi:"gatewayFilter"`
	// Location is a read only network location uploaded by the gateway process when it comes online.
	Location *string `pulumi:"location"`
	// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
	MaintenanceWindows []NodeRelayMaintenanceWindow `pulumi:"maintenanceWindows"`
	// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
	Name *string `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags  map[string]string `pulumi:"tags"`
	Token *string           `pulumi:"token"`
	// Version is a read only sdm binary version uploaded by the gateway process when it comes online.
	Version *string `pulumi:"version"`
}

// NodeRelayInput is an input type that accepts NodeRelayArgs and NodeRelayOutput values.
// You can construct a concrete instance of `NodeRelayInput` via:
//
//	NodeRelayArgs{...}
type NodeRelayInput interface {
	pulumi.Input

	ToNodeRelayOutput() NodeRelayOutput
	ToNodeRelayOutputWithContext(context.Context) NodeRelayOutput
}

type NodeRelayArgs struct {
	// Device is a read only device name uploaded by the gateway process when it comes online.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.
	GatewayFilter pulumi.StringPtrInput `pulumi:"gatewayFilter"`
	// Location is a read only network location uploaded by the gateway process when it comes online.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
	MaintenanceWindows NodeRelayMaintenanceWindowArrayInput `pulumi:"maintenanceWindows"`
	// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags  pulumi.StringMapInput `pulumi:"tags"`
	Token pulumi.StringPtrInput `pulumi:"token"`
	// Version is a read only sdm binary version uploaded by the gateway process when it comes online.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (NodeRelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeRelay)(nil)).Elem()
}

func (i NodeRelayArgs) ToNodeRelayOutput() NodeRelayOutput {
	return i.ToNodeRelayOutputWithContext(context.Background())
}

func (i NodeRelayArgs) ToNodeRelayOutputWithContext(ctx context.Context) NodeRelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeRelayOutput)
}

func (i NodeRelayArgs) ToNodeRelayPtrOutput() NodeRelayPtrOutput {
	return i.ToNodeRelayPtrOutputWithContext(context.Background())
}

func (i NodeRelayArgs) ToNodeRelayPtrOutputWithContext(ctx context.Context) NodeRelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeRelayOutput).ToNodeRelayPtrOutputWithContext(ctx)
}

// NodeRelayPtrInput is an input type that accepts NodeRelayArgs, NodeRelayPtr and NodeRelayPtrOutput values.
// You can construct a concrete instance of `NodeRelayPtrInput` via:
//
//	        NodeRelayArgs{...}
//
//	or:
//
//	        nil
type NodeRelayPtrInput interface {
	pulumi.Input

	ToNodeRelayPtrOutput() NodeRelayPtrOutput
	ToNodeRelayPtrOutputWithContext(context.Context) NodeRelayPtrOutput
}

type nodeRelayPtrType NodeRelayArgs

func NodeRelayPtr(v *NodeRelayArgs) NodeRelayPtrInput {
	return (*nodeRelayPtrType)(v)
}

func (*nodeRelayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeRelay)(nil)).Elem()
}

func (i *nodeRelayPtrType) ToNodeRelayPtrOutput() NodeRelayPtrOutput {
	return i.ToNodeRelayPtrOutputWithContext(context.Background())
}

func (i *nodeRelayPtrType) ToNodeRelayPtrOutputWithContext(ctx context.Context) NodeRelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeRelayPtrOutput)
}

type NodeRelayOutput struct{ *pulumi.OutputState }

func (NodeRelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeRelay)(nil)).Elem()
}

func (o NodeRelayOutput) ToNodeRelayOutput() NodeRelayOutput {
	return o
}

func (o NodeRelayOutput) ToNodeRelayOutputWithContext(ctx context.Context) NodeRelayOutput {
	return o
}

func (o NodeRelayOutput) ToNodeRelayPtrOutput() NodeRelayPtrOutput {
	return o.ToNodeRelayPtrOutputWithContext(context.Background())
}

func (o NodeRelayOutput) ToNodeRelayPtrOutputWithContext(ctx context.Context) NodeRelayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeRelay) *NodeRelay {
		return &v
	}).(NodeRelayPtrOutput)
}

// Device is a read only device name uploaded by the gateway process when it comes online.
func (o NodeRelayOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeRelay) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.
func (o NodeRelayOutput) GatewayFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeRelay) *string { return v.GatewayFilter }).(pulumi.StringPtrOutput)
}

// Location is a read only network location uploaded by the gateway process when it comes online.
func (o NodeRelayOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeRelay) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
func (o NodeRelayOutput) MaintenanceWindows() NodeRelayMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v NodeRelay) []NodeRelayMaintenanceWindow { return v.MaintenanceWindows }).(NodeRelayMaintenanceWindowArrayOutput)
}

// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
func (o NodeRelayOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeRelay) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o NodeRelayOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeRelay) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o NodeRelayOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeRelay) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// Version is a read only sdm binary version uploaded by the gateway process when it comes online.
func (o NodeRelayOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeRelay) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type NodeRelayPtrOutput struct{ *pulumi.OutputState }

func (NodeRelayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeRelay)(nil)).Elem()
}

func (o NodeRelayPtrOutput) ToNodeRelayPtrOutput() NodeRelayPtrOutput {
	return o
}

func (o NodeRelayPtrOutput) ToNodeRelayPtrOutputWithContext(ctx context.Context) NodeRelayPtrOutput {
	return o
}

func (o NodeRelayPtrOutput) Elem() NodeRelayOutput {
	return o.ApplyT(func(v *NodeRelay) NodeRelay {
		if v != nil {
			return *v
		}
		var ret NodeRelay
		return ret
	}).(NodeRelayOutput)
}

// Device is a read only device name uploaded by the gateway process when it comes online.
func (o NodeRelayPtrOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeRelay) *string {
		if v == nil {
			return nil
		}
		return v.Device
	}).(pulumi.StringPtrOutput)
}

// GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.
func (o NodeRelayPtrOutput) GatewayFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeRelay) *string {
		if v == nil {
			return nil
		}
		return v.GatewayFilter
	}).(pulumi.StringPtrOutput)
}

// Location is a read only network location uploaded by the gateway process when it comes online.
func (o NodeRelayPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeRelay) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
func (o NodeRelayPtrOutput) MaintenanceWindows() NodeRelayMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v *NodeRelay) []NodeRelayMaintenanceWindow {
		if v == nil {
			return nil
		}
		return v.MaintenanceWindows
	}).(NodeRelayMaintenanceWindowArrayOutput)
}

// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
func (o NodeRelayPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeRelay) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o NodeRelayPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeRelay) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

func (o NodeRelayPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeRelay) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// Version is a read only sdm binary version uploaded by the gateway process when it comes online.
func (o NodeRelayPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeRelay) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type NodeRelayMaintenanceWindow struct {
	CronSchedule    string `pulumi:"cronSchedule"`
	RequireIdleness bool   `pulumi:"requireIdleness"`
}

// NodeRelayMaintenanceWindowInput is an input type that accepts NodeRelayMaintenanceWindowArgs and NodeRelayMaintenanceWindowOutput values.
// You can construct a concrete instance of `NodeRelayMaintenanceWindowInput` via:
//
//	NodeRelayMaintenanceWindowArgs{...}
type NodeRelayMaintenanceWindowInput interface {
	pulumi.Input

	ToNodeRelayMaintenanceWindowOutput() NodeRelayMaintenanceWindowOutput
	ToNodeRelayMaintenanceWindowOutputWithContext(context.Context) NodeRelayMaintenanceWindowOutput
}

type NodeRelayMaintenanceWindowArgs struct {
	CronSchedule    pulumi.StringInput `pulumi:"cronSchedule"`
	RequireIdleness pulumi.BoolInput   `pulumi:"requireIdleness"`
}

func (NodeRelayMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeRelayMaintenanceWindow)(nil)).Elem()
}

func (i NodeRelayMaintenanceWindowArgs) ToNodeRelayMaintenanceWindowOutput() NodeRelayMaintenanceWindowOutput {
	return i.ToNodeRelayMaintenanceWindowOutputWithContext(context.Background())
}

func (i NodeRelayMaintenanceWindowArgs) ToNodeRelayMaintenanceWindowOutputWithContext(ctx context.Context) NodeRelayMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeRelayMaintenanceWindowOutput)
}

// NodeRelayMaintenanceWindowArrayInput is an input type that accepts NodeRelayMaintenanceWindowArray and NodeRelayMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `NodeRelayMaintenanceWindowArrayInput` via:
//
//	NodeRelayMaintenanceWindowArray{ NodeRelayMaintenanceWindowArgs{...} }
type NodeRelayMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToNodeRelayMaintenanceWindowArrayOutput() NodeRelayMaintenanceWindowArrayOutput
	ToNodeRelayMaintenanceWindowArrayOutputWithContext(context.Context) NodeRelayMaintenanceWindowArrayOutput
}

type NodeRelayMaintenanceWindowArray []NodeRelayMaintenanceWindowInput

func (NodeRelayMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeRelayMaintenanceWindow)(nil)).Elem()
}

func (i NodeRelayMaintenanceWindowArray) ToNodeRelayMaintenanceWindowArrayOutput() NodeRelayMaintenanceWindowArrayOutput {
	return i.ToNodeRelayMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i NodeRelayMaintenanceWindowArray) ToNodeRelayMaintenanceWindowArrayOutputWithContext(ctx context.Context) NodeRelayMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeRelayMaintenanceWindowArrayOutput)
}

type NodeRelayMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (NodeRelayMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeRelayMaintenanceWindow)(nil)).Elem()
}

func (o NodeRelayMaintenanceWindowOutput) ToNodeRelayMaintenanceWindowOutput() NodeRelayMaintenanceWindowOutput {
	return o
}

func (o NodeRelayMaintenanceWindowOutput) ToNodeRelayMaintenanceWindowOutputWithContext(ctx context.Context) NodeRelayMaintenanceWindowOutput {
	return o
}

func (o NodeRelayMaintenanceWindowOutput) CronSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v NodeRelayMaintenanceWindow) string { return v.CronSchedule }).(pulumi.StringOutput)
}

func (o NodeRelayMaintenanceWindowOutput) RequireIdleness() pulumi.BoolOutput {
	return o.ApplyT(func(v NodeRelayMaintenanceWindow) bool { return v.RequireIdleness }).(pulumi.BoolOutput)
}

type NodeRelayMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (NodeRelayMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeRelayMaintenanceWindow)(nil)).Elem()
}

func (o NodeRelayMaintenanceWindowArrayOutput) ToNodeRelayMaintenanceWindowArrayOutput() NodeRelayMaintenanceWindowArrayOutput {
	return o
}

func (o NodeRelayMaintenanceWindowArrayOutput) ToNodeRelayMaintenanceWindowArrayOutputWithContext(ctx context.Context) NodeRelayMaintenanceWindowArrayOutput {
	return o
}

func (o NodeRelayMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) NodeRelayMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeRelayMaintenanceWindow {
		return vs[0].([]NodeRelayMaintenanceWindow)[vs[1].(int)]
	}).(NodeRelayMaintenanceWindowOutput)
}

type ResourceAks struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass *bool `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey *string `pulumi:"clientKey"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled *bool `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername *string `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceAksInput is an input type that accepts ResourceAksArgs and ResourceAksOutput values.
// You can construct a concrete instance of `ResourceAksInput` via:
//
//	ResourceAksArgs{...}
type ResourceAksInput interface {
	pulumi.Input

	ToResourceAksOutput() ResourceAksOutput
	ToResourceAksOutputWithContext(context.Context) ResourceAksOutput
}

type ResourceAksArgs struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass pulumi.BoolPtrInput `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled pulumi.BoolPtrInput `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername pulumi.StringPtrInput `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceAksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAks)(nil)).Elem()
}

func (i ResourceAksArgs) ToResourceAksOutput() ResourceAksOutput {
	return i.ToResourceAksOutputWithContext(context.Background())
}

func (i ResourceAksArgs) ToResourceAksOutputWithContext(ctx context.Context) ResourceAksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAksOutput)
}

func (i ResourceAksArgs) ToResourceAksPtrOutput() ResourceAksPtrOutput {
	return i.ToResourceAksPtrOutputWithContext(context.Background())
}

func (i ResourceAksArgs) ToResourceAksPtrOutputWithContext(ctx context.Context) ResourceAksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAksOutput).ToResourceAksPtrOutputWithContext(ctx)
}

// ResourceAksPtrInput is an input type that accepts ResourceAksArgs, ResourceAksPtr and ResourceAksPtrOutput values.
// You can construct a concrete instance of `ResourceAksPtrInput` via:
//
//	        ResourceAksArgs{...}
//
//	or:
//
//	        nil
type ResourceAksPtrInput interface {
	pulumi.Input

	ToResourceAksPtrOutput() ResourceAksPtrOutput
	ToResourceAksPtrOutputWithContext(context.Context) ResourceAksPtrOutput
}

type resourceAksPtrType ResourceAksArgs

func ResourceAksPtr(v *ResourceAksArgs) ResourceAksPtrInput {
	return (*resourceAksPtrType)(v)
}

func (*resourceAksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAks)(nil)).Elem()
}

func (i *resourceAksPtrType) ToResourceAksPtrOutput() ResourceAksPtrOutput {
	return i.ToResourceAksPtrOutputWithContext(context.Background())
}

func (i *resourceAksPtrType) ToResourceAksPtrOutputWithContext(ctx context.Context) ResourceAksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAksPtrOutput)
}

type ResourceAksOutput struct{ *pulumi.OutputState }

func (ResourceAksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAks)(nil)).Elem()
}

func (o ResourceAksOutput) ToResourceAksOutput() ResourceAksOutput {
	return o
}

func (o ResourceAksOutput) ToResourceAksOutputWithContext(ctx context.Context) ResourceAksOutput {
	return o
}

func (o ResourceAksOutput) ToResourceAksPtrOutput() ResourceAksPtrOutput {
	return o.ToResourceAksPtrOutputWithContext(context.Background())
}

func (o ResourceAksOutput) ToResourceAksPtrOutputWithContext(ctx context.Context) ResourceAksPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAks) *ResourceAks {
		return &v
	}).(ResourceAksPtrOutput)
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o ResourceAksOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAks) *bool { return v.AllowResourceRoleBypass }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAksOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAks) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceAksOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAks) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o ResourceAksOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAks) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o ResourceAksOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAks) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o ResourceAksOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAks) *bool { return v.DiscoveryEnabled }).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o ResourceAksOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAks) *string { return v.DiscoveryUsername }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAksOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAks) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAksOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAks) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAks) string { return v.Hostname }).(pulumi.StringOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceAksOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAks) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceAksOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAks) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAksOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAks) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceAks) int { return v.Port }).(pulumi.IntOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAksOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAks) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAksOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAks) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAksOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAks) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAksOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAks) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAksOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAks) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceAksPtrOutput struct{ *pulumi.OutputState }

func (ResourceAksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAks)(nil)).Elem()
}

func (o ResourceAksPtrOutput) ToResourceAksPtrOutput() ResourceAksPtrOutput {
	return o
}

func (o ResourceAksPtrOutput) ToResourceAksPtrOutputWithContext(ctx context.Context) ResourceAksPtrOutput {
	return o
}

func (o ResourceAksPtrOutput) Elem() ResourceAksOutput {
	return o.ApplyT(func(v *ResourceAks) ResourceAks {
		if v != nil {
			return *v
		}
		var ret ResourceAks
		return ret
	}).(ResourceAksOutput)
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o ResourceAksPtrOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *bool {
		if v == nil {
			return nil
		}
		return v.AllowResourceRoleBypass
	}).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAksPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceAksPtrOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *string {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o ResourceAksPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o ResourceAksPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o ResourceAksPtrOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *bool {
		if v == nil {
			return nil
		}
		return v.DiscoveryEnabled
	}).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o ResourceAksPtrOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *string {
		if v == nil {
			return nil
		}
		return v.DiscoveryUsername
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAksPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAksPtrOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *string {
		if v == nil {
			return nil
		}
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceAksPtrOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *string {
		if v == nil {
			return nil
		}
		return v.IdentityAliasHealthcheckUsername
	}).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceAksPtrOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *string {
		if v == nil {
			return nil
		}
		return v.IdentitySetId
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAksPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAksPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAksPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAksPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAksPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAks) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAksPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAks) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceAksBasicAuth struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceAksBasicAuthInput is an input type that accepts ResourceAksBasicAuthArgs and ResourceAksBasicAuthOutput values.
// You can construct a concrete instance of `ResourceAksBasicAuthInput` via:
//
//	ResourceAksBasicAuthArgs{...}
type ResourceAksBasicAuthInput interface {
	pulumi.Input

	ToResourceAksBasicAuthOutput() ResourceAksBasicAuthOutput
	ToResourceAksBasicAuthOutputWithContext(context.Context) ResourceAksBasicAuthOutput
}

type ResourceAksBasicAuthArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceAksBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAksBasicAuth)(nil)).Elem()
}

func (i ResourceAksBasicAuthArgs) ToResourceAksBasicAuthOutput() ResourceAksBasicAuthOutput {
	return i.ToResourceAksBasicAuthOutputWithContext(context.Background())
}

func (i ResourceAksBasicAuthArgs) ToResourceAksBasicAuthOutputWithContext(ctx context.Context) ResourceAksBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAksBasicAuthOutput)
}

func (i ResourceAksBasicAuthArgs) ToResourceAksBasicAuthPtrOutput() ResourceAksBasicAuthPtrOutput {
	return i.ToResourceAksBasicAuthPtrOutputWithContext(context.Background())
}

func (i ResourceAksBasicAuthArgs) ToResourceAksBasicAuthPtrOutputWithContext(ctx context.Context) ResourceAksBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAksBasicAuthOutput).ToResourceAksBasicAuthPtrOutputWithContext(ctx)
}

// ResourceAksBasicAuthPtrInput is an input type that accepts ResourceAksBasicAuthArgs, ResourceAksBasicAuthPtr and ResourceAksBasicAuthPtrOutput values.
// You can construct a concrete instance of `ResourceAksBasicAuthPtrInput` via:
//
//	        ResourceAksBasicAuthArgs{...}
//
//	or:
//
//	        nil
type ResourceAksBasicAuthPtrInput interface {
	pulumi.Input

	ToResourceAksBasicAuthPtrOutput() ResourceAksBasicAuthPtrOutput
	ToResourceAksBasicAuthPtrOutputWithContext(context.Context) ResourceAksBasicAuthPtrOutput
}

type resourceAksBasicAuthPtrType ResourceAksBasicAuthArgs

func ResourceAksBasicAuthPtr(v *ResourceAksBasicAuthArgs) ResourceAksBasicAuthPtrInput {
	return (*resourceAksBasicAuthPtrType)(v)
}

func (*resourceAksBasicAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAksBasicAuth)(nil)).Elem()
}

func (i *resourceAksBasicAuthPtrType) ToResourceAksBasicAuthPtrOutput() ResourceAksBasicAuthPtrOutput {
	return i.ToResourceAksBasicAuthPtrOutputWithContext(context.Background())
}

func (i *resourceAksBasicAuthPtrType) ToResourceAksBasicAuthPtrOutputWithContext(ctx context.Context) ResourceAksBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAksBasicAuthPtrOutput)
}

type ResourceAksBasicAuthOutput struct{ *pulumi.OutputState }

func (ResourceAksBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAksBasicAuth)(nil)).Elem()
}

func (o ResourceAksBasicAuthOutput) ToResourceAksBasicAuthOutput() ResourceAksBasicAuthOutput {
	return o
}

func (o ResourceAksBasicAuthOutput) ToResourceAksBasicAuthOutputWithContext(ctx context.Context) ResourceAksBasicAuthOutput {
	return o
}

func (o ResourceAksBasicAuthOutput) ToResourceAksBasicAuthPtrOutput() ResourceAksBasicAuthPtrOutput {
	return o.ToResourceAksBasicAuthPtrOutputWithContext(context.Background())
}

func (o ResourceAksBasicAuthOutput) ToResourceAksBasicAuthPtrOutputWithContext(ctx context.Context) ResourceAksBasicAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAksBasicAuth) *ResourceAksBasicAuth {
		return &v
	}).(ResourceAksBasicAuthPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAksBasicAuthOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksBasicAuth) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAksBasicAuthOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksBasicAuth) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAksBasicAuthOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksBasicAuth) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksBasicAuthOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAksBasicAuth) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAksBasicAuthOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAksBasicAuth) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceAksBasicAuthOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksBasicAuth) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksBasicAuthOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceAksBasicAuth) int { return v.Port }).(pulumi.IntOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAksBasicAuthOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAksBasicAuth) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAksBasicAuthOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksBasicAuth) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAksBasicAuthOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksBasicAuth) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAksBasicAuthOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksBasicAuth) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAksBasicAuthOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAksBasicAuth) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceAksBasicAuthOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksBasicAuth) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceAksBasicAuthPtrOutput struct{ *pulumi.OutputState }

func (ResourceAksBasicAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAksBasicAuth)(nil)).Elem()
}

func (o ResourceAksBasicAuthPtrOutput) ToResourceAksBasicAuthPtrOutput() ResourceAksBasicAuthPtrOutput {
	return o
}

func (o ResourceAksBasicAuthPtrOutput) ToResourceAksBasicAuthPtrOutputWithContext(ctx context.Context) ResourceAksBasicAuthPtrOutput {
	return o
}

func (o ResourceAksBasicAuthPtrOutput) Elem() ResourceAksBasicAuthOutput {
	return o.ApplyT(func(v *ResourceAksBasicAuth) ResourceAksBasicAuth {
		if v != nil {
			return *v
		}
		var ret ResourceAksBasicAuth
		return ret
	}).(ResourceAksBasicAuthOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAksBasicAuthPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAksBasicAuthPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAksBasicAuthPtrOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksBasicAuthPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAksBasicAuthPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceAksBasicAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksBasicAuthPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAksBasicAuth) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAksBasicAuthPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAksBasicAuth) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAksBasicAuthPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAksBasicAuthPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAksBasicAuthPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAksBasicAuthPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAksBasicAuth) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceAksBasicAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceAksServiceAccount struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass *bool `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled *bool `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername *string `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The API token to authenticate with.
	// * kubernetes_user_impersonation:
	Token *string `pulumi:"token"`
}

// ResourceAksServiceAccountInput is an input type that accepts ResourceAksServiceAccountArgs and ResourceAksServiceAccountOutput values.
// You can construct a concrete instance of `ResourceAksServiceAccountInput` via:
//
//	ResourceAksServiceAccountArgs{...}
type ResourceAksServiceAccountInput interface {
	pulumi.Input

	ToResourceAksServiceAccountOutput() ResourceAksServiceAccountOutput
	ToResourceAksServiceAccountOutputWithContext(context.Context) ResourceAksServiceAccountOutput
}

type ResourceAksServiceAccountArgs struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass pulumi.BoolPtrInput `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled pulumi.BoolPtrInput `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername pulumi.StringPtrInput `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The API token to authenticate with.
	// * kubernetes_user_impersonation:
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (ResourceAksServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAksServiceAccount)(nil)).Elem()
}

func (i ResourceAksServiceAccountArgs) ToResourceAksServiceAccountOutput() ResourceAksServiceAccountOutput {
	return i.ToResourceAksServiceAccountOutputWithContext(context.Background())
}

func (i ResourceAksServiceAccountArgs) ToResourceAksServiceAccountOutputWithContext(ctx context.Context) ResourceAksServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAksServiceAccountOutput)
}

func (i ResourceAksServiceAccountArgs) ToResourceAksServiceAccountPtrOutput() ResourceAksServiceAccountPtrOutput {
	return i.ToResourceAksServiceAccountPtrOutputWithContext(context.Background())
}

func (i ResourceAksServiceAccountArgs) ToResourceAksServiceAccountPtrOutputWithContext(ctx context.Context) ResourceAksServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAksServiceAccountOutput).ToResourceAksServiceAccountPtrOutputWithContext(ctx)
}

// ResourceAksServiceAccountPtrInput is an input type that accepts ResourceAksServiceAccountArgs, ResourceAksServiceAccountPtr and ResourceAksServiceAccountPtrOutput values.
// You can construct a concrete instance of `ResourceAksServiceAccountPtrInput` via:
//
//	        ResourceAksServiceAccountArgs{...}
//
//	or:
//
//	        nil
type ResourceAksServiceAccountPtrInput interface {
	pulumi.Input

	ToResourceAksServiceAccountPtrOutput() ResourceAksServiceAccountPtrOutput
	ToResourceAksServiceAccountPtrOutputWithContext(context.Context) ResourceAksServiceAccountPtrOutput
}

type resourceAksServiceAccountPtrType ResourceAksServiceAccountArgs

func ResourceAksServiceAccountPtr(v *ResourceAksServiceAccountArgs) ResourceAksServiceAccountPtrInput {
	return (*resourceAksServiceAccountPtrType)(v)
}

func (*resourceAksServiceAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAksServiceAccount)(nil)).Elem()
}

func (i *resourceAksServiceAccountPtrType) ToResourceAksServiceAccountPtrOutput() ResourceAksServiceAccountPtrOutput {
	return i.ToResourceAksServiceAccountPtrOutputWithContext(context.Background())
}

func (i *resourceAksServiceAccountPtrType) ToResourceAksServiceAccountPtrOutputWithContext(ctx context.Context) ResourceAksServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAksServiceAccountPtrOutput)
}

type ResourceAksServiceAccountOutput struct{ *pulumi.OutputState }

func (ResourceAksServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAksServiceAccount)(nil)).Elem()
}

func (o ResourceAksServiceAccountOutput) ToResourceAksServiceAccountOutput() ResourceAksServiceAccountOutput {
	return o
}

func (o ResourceAksServiceAccountOutput) ToResourceAksServiceAccountOutputWithContext(ctx context.Context) ResourceAksServiceAccountOutput {
	return o
}

func (o ResourceAksServiceAccountOutput) ToResourceAksServiceAccountPtrOutput() ResourceAksServiceAccountPtrOutput {
	return o.ToResourceAksServiceAccountPtrOutputWithContext(context.Background())
}

func (o ResourceAksServiceAccountOutput) ToResourceAksServiceAccountPtrOutputWithContext(ctx context.Context) ResourceAksServiceAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAksServiceAccount) *ResourceAksServiceAccount {
		return &v
	}).(ResourceAksServiceAccountPtrOutput)
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o ResourceAksServiceAccountOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccount) *bool { return v.AllowResourceRoleBypass }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAksServiceAccountOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccount) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o ResourceAksServiceAccountOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccount) *bool { return v.DiscoveryEnabled }).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o ResourceAksServiceAccountOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccount) *string { return v.DiscoveryUsername }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAksServiceAccountOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccount) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAksServiceAccountOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccount) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksServiceAccountOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAksServiceAccount) string { return v.Hostname }).(pulumi.StringOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceAksServiceAccountOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccount) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceAksServiceAccountOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccount) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAksServiceAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAksServiceAccount) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksServiceAccountOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceAksServiceAccount) int { return v.Port }).(pulumi.IntOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAksServiceAccountOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccount) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAksServiceAccountOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccount) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAksServiceAccountOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccount) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAksServiceAccountOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccount) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAksServiceAccountOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAksServiceAccount) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The API token to authenticate with.
// * kubernetes_user_impersonation:
func (o ResourceAksServiceAccountOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccount) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type ResourceAksServiceAccountPtrOutput struct{ *pulumi.OutputState }

func (ResourceAksServiceAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAksServiceAccount)(nil)).Elem()
}

func (o ResourceAksServiceAccountPtrOutput) ToResourceAksServiceAccountPtrOutput() ResourceAksServiceAccountPtrOutput {
	return o
}

func (o ResourceAksServiceAccountPtrOutput) ToResourceAksServiceAccountPtrOutputWithContext(ctx context.Context) ResourceAksServiceAccountPtrOutput {
	return o
}

func (o ResourceAksServiceAccountPtrOutput) Elem() ResourceAksServiceAccountOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) ResourceAksServiceAccount {
		if v != nil {
			return *v
		}
		var ret ResourceAksServiceAccount
		return ret
	}).(ResourceAksServiceAccountOutput)
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o ResourceAksServiceAccountPtrOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) *bool {
		if v == nil {
			return nil
		}
		return v.AllowResourceRoleBypass
	}).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAksServiceAccountPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o ResourceAksServiceAccountPtrOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) *bool {
		if v == nil {
			return nil
		}
		return v.DiscoveryEnabled
	}).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o ResourceAksServiceAccountPtrOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.DiscoveryUsername
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAksServiceAccountPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAksServiceAccountPtrOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksServiceAccountPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceAksServiceAccountPtrOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.IdentityAliasHealthcheckUsername
	}).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceAksServiceAccountPtrOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.IdentitySetId
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAksServiceAccountPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksServiceAccountPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAksServiceAccountPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAksServiceAccountPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAksServiceAccountPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAksServiceAccountPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAksServiceAccountPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The API token to authenticate with.
// * kubernetes_user_impersonation:
func (o ResourceAksServiceAccountPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

type ResourceAksServiceAccountUserImpersonation struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The API token to authenticate with.
	// * kubernetes_user_impersonation:
	Token *string `pulumi:"token"`
}

// ResourceAksServiceAccountUserImpersonationInput is an input type that accepts ResourceAksServiceAccountUserImpersonationArgs and ResourceAksServiceAccountUserImpersonationOutput values.
// You can construct a concrete instance of `ResourceAksServiceAccountUserImpersonationInput` via:
//
//	ResourceAksServiceAccountUserImpersonationArgs{...}
type ResourceAksServiceAccountUserImpersonationInput interface {
	pulumi.Input

	ToResourceAksServiceAccountUserImpersonationOutput() ResourceAksServiceAccountUserImpersonationOutput
	ToResourceAksServiceAccountUserImpersonationOutputWithContext(context.Context) ResourceAksServiceAccountUserImpersonationOutput
}

type ResourceAksServiceAccountUserImpersonationArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The API token to authenticate with.
	// * kubernetes_user_impersonation:
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (ResourceAksServiceAccountUserImpersonationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAksServiceAccountUserImpersonation)(nil)).Elem()
}

func (i ResourceAksServiceAccountUserImpersonationArgs) ToResourceAksServiceAccountUserImpersonationOutput() ResourceAksServiceAccountUserImpersonationOutput {
	return i.ToResourceAksServiceAccountUserImpersonationOutputWithContext(context.Background())
}

func (i ResourceAksServiceAccountUserImpersonationArgs) ToResourceAksServiceAccountUserImpersonationOutputWithContext(ctx context.Context) ResourceAksServiceAccountUserImpersonationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAksServiceAccountUserImpersonationOutput)
}

func (i ResourceAksServiceAccountUserImpersonationArgs) ToResourceAksServiceAccountUserImpersonationPtrOutput() ResourceAksServiceAccountUserImpersonationPtrOutput {
	return i.ToResourceAksServiceAccountUserImpersonationPtrOutputWithContext(context.Background())
}

func (i ResourceAksServiceAccountUserImpersonationArgs) ToResourceAksServiceAccountUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceAksServiceAccountUserImpersonationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAksServiceAccountUserImpersonationOutput).ToResourceAksServiceAccountUserImpersonationPtrOutputWithContext(ctx)
}

// ResourceAksServiceAccountUserImpersonationPtrInput is an input type that accepts ResourceAksServiceAccountUserImpersonationArgs, ResourceAksServiceAccountUserImpersonationPtr and ResourceAksServiceAccountUserImpersonationPtrOutput values.
// You can construct a concrete instance of `ResourceAksServiceAccountUserImpersonationPtrInput` via:
//
//	        ResourceAksServiceAccountUserImpersonationArgs{...}
//
//	or:
//
//	        nil
type ResourceAksServiceAccountUserImpersonationPtrInput interface {
	pulumi.Input

	ToResourceAksServiceAccountUserImpersonationPtrOutput() ResourceAksServiceAccountUserImpersonationPtrOutput
	ToResourceAksServiceAccountUserImpersonationPtrOutputWithContext(context.Context) ResourceAksServiceAccountUserImpersonationPtrOutput
}

type resourceAksServiceAccountUserImpersonationPtrType ResourceAksServiceAccountUserImpersonationArgs

func ResourceAksServiceAccountUserImpersonationPtr(v *ResourceAksServiceAccountUserImpersonationArgs) ResourceAksServiceAccountUserImpersonationPtrInput {
	return (*resourceAksServiceAccountUserImpersonationPtrType)(v)
}

func (*resourceAksServiceAccountUserImpersonationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAksServiceAccountUserImpersonation)(nil)).Elem()
}

func (i *resourceAksServiceAccountUserImpersonationPtrType) ToResourceAksServiceAccountUserImpersonationPtrOutput() ResourceAksServiceAccountUserImpersonationPtrOutput {
	return i.ToResourceAksServiceAccountUserImpersonationPtrOutputWithContext(context.Background())
}

func (i *resourceAksServiceAccountUserImpersonationPtrType) ToResourceAksServiceAccountUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceAksServiceAccountUserImpersonationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAksServiceAccountUserImpersonationPtrOutput)
}

type ResourceAksServiceAccountUserImpersonationOutput struct{ *pulumi.OutputState }

func (ResourceAksServiceAccountUserImpersonationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAksServiceAccountUserImpersonation)(nil)).Elem()
}

func (o ResourceAksServiceAccountUserImpersonationOutput) ToResourceAksServiceAccountUserImpersonationOutput() ResourceAksServiceAccountUserImpersonationOutput {
	return o
}

func (o ResourceAksServiceAccountUserImpersonationOutput) ToResourceAksServiceAccountUserImpersonationOutputWithContext(ctx context.Context) ResourceAksServiceAccountUserImpersonationOutput {
	return o
}

func (o ResourceAksServiceAccountUserImpersonationOutput) ToResourceAksServiceAccountUserImpersonationPtrOutput() ResourceAksServiceAccountUserImpersonationPtrOutput {
	return o.ToResourceAksServiceAccountUserImpersonationPtrOutputWithContext(context.Background())
}

func (o ResourceAksServiceAccountUserImpersonationOutput) ToResourceAksServiceAccountUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceAksServiceAccountUserImpersonationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAksServiceAccountUserImpersonation) *ResourceAksServiceAccountUserImpersonation {
		return &v
	}).(ResourceAksServiceAccountUserImpersonationPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAksServiceAccountUserImpersonationOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccountUserImpersonation) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAksServiceAccountUserImpersonationOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccountUserImpersonation) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAksServiceAccountUserImpersonationOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccountUserImpersonation) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksServiceAccountUserImpersonationOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAksServiceAccountUserImpersonation) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAksServiceAccountUserImpersonationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAksServiceAccountUserImpersonation) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksServiceAccountUserImpersonationOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceAksServiceAccountUserImpersonation) int { return v.Port }).(pulumi.IntOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAksServiceAccountUserImpersonationOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccountUserImpersonation) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAksServiceAccountUserImpersonationOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccountUserImpersonation) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAksServiceAccountUserImpersonationOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccountUserImpersonation) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAksServiceAccountUserImpersonationOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccountUserImpersonation) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAksServiceAccountUserImpersonationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAksServiceAccountUserImpersonation) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The API token to authenticate with.
// * kubernetes_user_impersonation:
func (o ResourceAksServiceAccountUserImpersonationOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksServiceAccountUserImpersonation) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type ResourceAksServiceAccountUserImpersonationPtrOutput struct{ *pulumi.OutputState }

func (ResourceAksServiceAccountUserImpersonationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAksServiceAccountUserImpersonation)(nil)).Elem()
}

func (o ResourceAksServiceAccountUserImpersonationPtrOutput) ToResourceAksServiceAccountUserImpersonationPtrOutput() ResourceAksServiceAccountUserImpersonationPtrOutput {
	return o
}

func (o ResourceAksServiceAccountUserImpersonationPtrOutput) ToResourceAksServiceAccountUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceAksServiceAccountUserImpersonationPtrOutput {
	return o
}

func (o ResourceAksServiceAccountUserImpersonationPtrOutput) Elem() ResourceAksServiceAccountUserImpersonationOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccountUserImpersonation) ResourceAksServiceAccountUserImpersonation {
		if v != nil {
			return *v
		}
		var ret ResourceAksServiceAccountUserImpersonation
		return ret
	}).(ResourceAksServiceAccountUserImpersonationOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAksServiceAccountUserImpersonationPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAksServiceAccountUserImpersonationPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAksServiceAccountUserImpersonationPtrOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksServiceAccountUserImpersonationPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAksServiceAccountUserImpersonationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksServiceAccountUserImpersonationPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccountUserImpersonation) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAksServiceAccountUserImpersonationPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccountUserImpersonation) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAksServiceAccountUserImpersonationPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAksServiceAccountUserImpersonationPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAksServiceAccountUserImpersonationPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAksServiceAccountUserImpersonationPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccountUserImpersonation) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The API token to authenticate with.
// * kubernetes_user_impersonation:
func (o ResourceAksServiceAccountUserImpersonationPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

type ResourceAksUserImpersonation struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey *string `pulumi:"clientKey"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceAksUserImpersonationInput is an input type that accepts ResourceAksUserImpersonationArgs and ResourceAksUserImpersonationOutput values.
// You can construct a concrete instance of `ResourceAksUserImpersonationInput` via:
//
//	ResourceAksUserImpersonationArgs{...}
type ResourceAksUserImpersonationInput interface {
	pulumi.Input

	ToResourceAksUserImpersonationOutput() ResourceAksUserImpersonationOutput
	ToResourceAksUserImpersonationOutputWithContext(context.Context) ResourceAksUserImpersonationOutput
}

type ResourceAksUserImpersonationArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceAksUserImpersonationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAksUserImpersonation)(nil)).Elem()
}

func (i ResourceAksUserImpersonationArgs) ToResourceAksUserImpersonationOutput() ResourceAksUserImpersonationOutput {
	return i.ToResourceAksUserImpersonationOutputWithContext(context.Background())
}

func (i ResourceAksUserImpersonationArgs) ToResourceAksUserImpersonationOutputWithContext(ctx context.Context) ResourceAksUserImpersonationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAksUserImpersonationOutput)
}

func (i ResourceAksUserImpersonationArgs) ToResourceAksUserImpersonationPtrOutput() ResourceAksUserImpersonationPtrOutput {
	return i.ToResourceAksUserImpersonationPtrOutputWithContext(context.Background())
}

func (i ResourceAksUserImpersonationArgs) ToResourceAksUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceAksUserImpersonationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAksUserImpersonationOutput).ToResourceAksUserImpersonationPtrOutputWithContext(ctx)
}

// ResourceAksUserImpersonationPtrInput is an input type that accepts ResourceAksUserImpersonationArgs, ResourceAksUserImpersonationPtr and ResourceAksUserImpersonationPtrOutput values.
// You can construct a concrete instance of `ResourceAksUserImpersonationPtrInput` via:
//
//	        ResourceAksUserImpersonationArgs{...}
//
//	or:
//
//	        nil
type ResourceAksUserImpersonationPtrInput interface {
	pulumi.Input

	ToResourceAksUserImpersonationPtrOutput() ResourceAksUserImpersonationPtrOutput
	ToResourceAksUserImpersonationPtrOutputWithContext(context.Context) ResourceAksUserImpersonationPtrOutput
}

type resourceAksUserImpersonationPtrType ResourceAksUserImpersonationArgs

func ResourceAksUserImpersonationPtr(v *ResourceAksUserImpersonationArgs) ResourceAksUserImpersonationPtrInput {
	return (*resourceAksUserImpersonationPtrType)(v)
}

func (*resourceAksUserImpersonationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAksUserImpersonation)(nil)).Elem()
}

func (i *resourceAksUserImpersonationPtrType) ToResourceAksUserImpersonationPtrOutput() ResourceAksUserImpersonationPtrOutput {
	return i.ToResourceAksUserImpersonationPtrOutputWithContext(context.Background())
}

func (i *resourceAksUserImpersonationPtrType) ToResourceAksUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceAksUserImpersonationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAksUserImpersonationPtrOutput)
}

type ResourceAksUserImpersonationOutput struct{ *pulumi.OutputState }

func (ResourceAksUserImpersonationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAksUserImpersonation)(nil)).Elem()
}

func (o ResourceAksUserImpersonationOutput) ToResourceAksUserImpersonationOutput() ResourceAksUserImpersonationOutput {
	return o
}

func (o ResourceAksUserImpersonationOutput) ToResourceAksUserImpersonationOutputWithContext(ctx context.Context) ResourceAksUserImpersonationOutput {
	return o
}

func (o ResourceAksUserImpersonationOutput) ToResourceAksUserImpersonationPtrOutput() ResourceAksUserImpersonationPtrOutput {
	return o.ToResourceAksUserImpersonationPtrOutputWithContext(context.Background())
}

func (o ResourceAksUserImpersonationOutput) ToResourceAksUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceAksUserImpersonationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAksUserImpersonation) *ResourceAksUserImpersonation {
		return &v
	}).(ResourceAksUserImpersonationPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAksUserImpersonationOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksUserImpersonation) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceAksUserImpersonationOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksUserImpersonation) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o ResourceAksUserImpersonationOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksUserImpersonation) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o ResourceAksUserImpersonationOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksUserImpersonation) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAksUserImpersonationOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksUserImpersonation) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAksUserImpersonationOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksUserImpersonation) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksUserImpersonationOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAksUserImpersonation) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAksUserImpersonationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAksUserImpersonation) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksUserImpersonationOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceAksUserImpersonation) int { return v.Port }).(pulumi.IntOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAksUserImpersonationOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAksUserImpersonation) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAksUserImpersonationOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksUserImpersonation) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAksUserImpersonationOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksUserImpersonation) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAksUserImpersonationOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAksUserImpersonation) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAksUserImpersonationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAksUserImpersonation) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceAksUserImpersonationPtrOutput struct{ *pulumi.OutputState }

func (ResourceAksUserImpersonationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAksUserImpersonation)(nil)).Elem()
}

func (o ResourceAksUserImpersonationPtrOutput) ToResourceAksUserImpersonationPtrOutput() ResourceAksUserImpersonationPtrOutput {
	return o
}

func (o ResourceAksUserImpersonationPtrOutput) ToResourceAksUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceAksUserImpersonationPtrOutput {
	return o
}

func (o ResourceAksUserImpersonationPtrOutput) Elem() ResourceAksUserImpersonationOutput {
	return o.ApplyT(func(v *ResourceAksUserImpersonation) ResourceAksUserImpersonation {
		if v != nil {
			return *v
		}
		var ret ResourceAksUserImpersonation
		return ret
	}).(ResourceAksUserImpersonationOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAksUserImpersonationPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceAksUserImpersonationPtrOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o ResourceAksUserImpersonationPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o ResourceAksUserImpersonationPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAksUserImpersonationPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAksUserImpersonationPtrOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksUserImpersonationPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAksUserImpersonationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAksUserImpersonationPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAksUserImpersonation) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAksUserImpersonationPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAksUserImpersonation) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAksUserImpersonationPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAksUserImpersonationPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAksUserImpersonationPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAksUserImpersonationPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAksUserImpersonation) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceAmazonEks struct {
	// The Access Key ID to use to authenticate.
	AccessKey *string `pulumi:"accessKey"`
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass *bool `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The name of the cluster to connect to.
	ClusterName string `pulumi:"clusterName"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled *bool `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername *string `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint string `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceAmazonEksInput is an input type that accepts ResourceAmazonEksArgs and ResourceAmazonEksOutput values.
// You can construct a concrete instance of `ResourceAmazonEksInput` via:
//
//	ResourceAmazonEksArgs{...}
type ResourceAmazonEksInput interface {
	pulumi.Input

	ToResourceAmazonEksOutput() ResourceAmazonEksOutput
	ToResourceAmazonEksOutputWithContext(context.Context) ResourceAmazonEksOutput
}

type ResourceAmazonEksArgs struct {
	// The Access Key ID to use to authenticate.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass pulumi.BoolPtrInput `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The name of the cluster to connect to.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled pulumi.BoolPtrInput `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername pulumi.StringPtrInput `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceAmazonEksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAmazonEks)(nil)).Elem()
}

func (i ResourceAmazonEksArgs) ToResourceAmazonEksOutput() ResourceAmazonEksOutput {
	return i.ToResourceAmazonEksOutputWithContext(context.Background())
}

func (i ResourceAmazonEksArgs) ToResourceAmazonEksOutputWithContext(ctx context.Context) ResourceAmazonEksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonEksOutput)
}

func (i ResourceAmazonEksArgs) ToResourceAmazonEksPtrOutput() ResourceAmazonEksPtrOutput {
	return i.ToResourceAmazonEksPtrOutputWithContext(context.Background())
}

func (i ResourceAmazonEksArgs) ToResourceAmazonEksPtrOutputWithContext(ctx context.Context) ResourceAmazonEksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonEksOutput).ToResourceAmazonEksPtrOutputWithContext(ctx)
}

// ResourceAmazonEksPtrInput is an input type that accepts ResourceAmazonEksArgs, ResourceAmazonEksPtr and ResourceAmazonEksPtrOutput values.
// You can construct a concrete instance of `ResourceAmazonEksPtrInput` via:
//
//	        ResourceAmazonEksArgs{...}
//
//	or:
//
//	        nil
type ResourceAmazonEksPtrInput interface {
	pulumi.Input

	ToResourceAmazonEksPtrOutput() ResourceAmazonEksPtrOutput
	ToResourceAmazonEksPtrOutputWithContext(context.Context) ResourceAmazonEksPtrOutput
}

type resourceAmazonEksPtrType ResourceAmazonEksArgs

func ResourceAmazonEksPtr(v *ResourceAmazonEksArgs) ResourceAmazonEksPtrInput {
	return (*resourceAmazonEksPtrType)(v)
}

func (*resourceAmazonEksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAmazonEks)(nil)).Elem()
}

func (i *resourceAmazonEksPtrType) ToResourceAmazonEksPtrOutput() ResourceAmazonEksPtrOutput {
	return i.ToResourceAmazonEksPtrOutputWithContext(context.Background())
}

func (i *resourceAmazonEksPtrType) ToResourceAmazonEksPtrOutputWithContext(ctx context.Context) ResourceAmazonEksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonEksPtrOutput)
}

type ResourceAmazonEksOutput struct{ *pulumi.OutputState }

func (ResourceAmazonEksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAmazonEks)(nil)).Elem()
}

func (o ResourceAmazonEksOutput) ToResourceAmazonEksOutput() ResourceAmazonEksOutput {
	return o
}

func (o ResourceAmazonEksOutput) ToResourceAmazonEksOutputWithContext(ctx context.Context) ResourceAmazonEksOutput {
	return o
}

func (o ResourceAmazonEksOutput) ToResourceAmazonEksPtrOutput() ResourceAmazonEksPtrOutput {
	return o.ToResourceAmazonEksPtrOutputWithContext(context.Background())
}

func (o ResourceAmazonEksOutput) ToResourceAmazonEksPtrOutputWithContext(ctx context.Context) ResourceAmazonEksPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAmazonEks) *ResourceAmazonEks {
		return &v
	}).(ResourceAmazonEksPtrOutput)
}

// The Access Key ID to use to authenticate.
func (o ResourceAmazonEksOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEks) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o ResourceAmazonEksOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEks) *bool { return v.AllowResourceRoleBypass }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAmazonEksOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEks) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceAmazonEksOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEks) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The name of the cluster to connect to.
func (o ResourceAmazonEksOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEks) string { return v.ClusterName }).(pulumi.StringOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o ResourceAmazonEksOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEks) *bool { return v.DiscoveryEnabled }).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o ResourceAmazonEksOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEks) *string { return v.DiscoveryUsername }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAmazonEksOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEks) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceAmazonEksOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEks) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAmazonEksOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEks) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceAmazonEksOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEks) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceAmazonEksOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEks) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAmazonEksOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEks) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAmazonEksOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEks) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAmazonEksOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEks) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAmazonEksOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEks) string { return v.Region }).(pulumi.StringOutput)
}

// The role to assume after logging in.
func (o ResourceAmazonEksOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEks) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAmazonEksOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEks) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o ResourceAmazonEksOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEks) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAmazonEksOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEks) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAmazonEksOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEks) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAmazonEksOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAmazonEks) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceAmazonEksPtrOutput struct{ *pulumi.OutputState }

func (ResourceAmazonEksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAmazonEks)(nil)).Elem()
}

func (o ResourceAmazonEksPtrOutput) ToResourceAmazonEksPtrOutput() ResourceAmazonEksPtrOutput {
	return o
}

func (o ResourceAmazonEksPtrOutput) ToResourceAmazonEksPtrOutputWithContext(ctx context.Context) ResourceAmazonEksPtrOutput {
	return o
}

func (o ResourceAmazonEksPtrOutput) Elem() ResourceAmazonEksOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) ResourceAmazonEks {
		if v != nil {
			return *v
		}
		var ret ResourceAmazonEks
		return ret
	}).(ResourceAmazonEksOutput)
}

// The Access Key ID to use to authenticate.
func (o ResourceAmazonEksPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o ResourceAmazonEksPtrOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *bool {
		if v == nil {
			return nil
		}
		return v.AllowResourceRoleBypass
	}).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAmazonEksPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceAmazonEksPtrOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(pulumi.StringPtrOutput)
}

// The name of the cluster to connect to.
func (o ResourceAmazonEksPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o ResourceAmazonEksPtrOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *bool {
		if v == nil {
			return nil
		}
		return v.DiscoveryEnabled
	}).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o ResourceAmazonEksPtrOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return v.DiscoveryUsername
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAmazonEksPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceAmazonEksPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAmazonEksPtrOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceAmazonEksPtrOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return v.IdentityAliasHealthcheckUsername
	}).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceAmazonEksPtrOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return v.IdentitySetId
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAmazonEksPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAmazonEksPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAmazonEksPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAmazonEksPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o ResourceAmazonEksPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAmazonEksPtrOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return v.RoleExternalId
	}).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o ResourceAmazonEksPtrOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return v.SecretAccessKey
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAmazonEksPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAmazonEksPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAmazonEksPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAmazonEks) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceAmazonEksInstanceProfile struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass *bool `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The name of the cluster to connect to.
	ClusterName string `pulumi:"clusterName"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled *bool `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername *string `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint string `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceAmazonEksInstanceProfileInput is an input type that accepts ResourceAmazonEksInstanceProfileArgs and ResourceAmazonEksInstanceProfileOutput values.
// You can construct a concrete instance of `ResourceAmazonEksInstanceProfileInput` via:
//
//	ResourceAmazonEksInstanceProfileArgs{...}
type ResourceAmazonEksInstanceProfileInput interface {
	pulumi.Input

	ToResourceAmazonEksInstanceProfileOutput() ResourceAmazonEksInstanceProfileOutput
	ToResourceAmazonEksInstanceProfileOutputWithContext(context.Context) ResourceAmazonEksInstanceProfileOutput
}

type ResourceAmazonEksInstanceProfileArgs struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass pulumi.BoolPtrInput `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The name of the cluster to connect to.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled pulumi.BoolPtrInput `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername pulumi.StringPtrInput `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceAmazonEksInstanceProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAmazonEksInstanceProfile)(nil)).Elem()
}

func (i ResourceAmazonEksInstanceProfileArgs) ToResourceAmazonEksInstanceProfileOutput() ResourceAmazonEksInstanceProfileOutput {
	return i.ToResourceAmazonEksInstanceProfileOutputWithContext(context.Background())
}

func (i ResourceAmazonEksInstanceProfileArgs) ToResourceAmazonEksInstanceProfileOutputWithContext(ctx context.Context) ResourceAmazonEksInstanceProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonEksInstanceProfileOutput)
}

func (i ResourceAmazonEksInstanceProfileArgs) ToResourceAmazonEksInstanceProfilePtrOutput() ResourceAmazonEksInstanceProfilePtrOutput {
	return i.ToResourceAmazonEksInstanceProfilePtrOutputWithContext(context.Background())
}

func (i ResourceAmazonEksInstanceProfileArgs) ToResourceAmazonEksInstanceProfilePtrOutputWithContext(ctx context.Context) ResourceAmazonEksInstanceProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonEksInstanceProfileOutput).ToResourceAmazonEksInstanceProfilePtrOutputWithContext(ctx)
}

// ResourceAmazonEksInstanceProfilePtrInput is an input type that accepts ResourceAmazonEksInstanceProfileArgs, ResourceAmazonEksInstanceProfilePtr and ResourceAmazonEksInstanceProfilePtrOutput values.
// You can construct a concrete instance of `ResourceAmazonEksInstanceProfilePtrInput` via:
//
//	        ResourceAmazonEksInstanceProfileArgs{...}
//
//	or:
//
//	        nil
type ResourceAmazonEksInstanceProfilePtrInput interface {
	pulumi.Input

	ToResourceAmazonEksInstanceProfilePtrOutput() ResourceAmazonEksInstanceProfilePtrOutput
	ToResourceAmazonEksInstanceProfilePtrOutputWithContext(context.Context) ResourceAmazonEksInstanceProfilePtrOutput
}

type resourceAmazonEksInstanceProfilePtrType ResourceAmazonEksInstanceProfileArgs

func ResourceAmazonEksInstanceProfilePtr(v *ResourceAmazonEksInstanceProfileArgs) ResourceAmazonEksInstanceProfilePtrInput {
	return (*resourceAmazonEksInstanceProfilePtrType)(v)
}

func (*resourceAmazonEksInstanceProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAmazonEksInstanceProfile)(nil)).Elem()
}

func (i *resourceAmazonEksInstanceProfilePtrType) ToResourceAmazonEksInstanceProfilePtrOutput() ResourceAmazonEksInstanceProfilePtrOutput {
	return i.ToResourceAmazonEksInstanceProfilePtrOutputWithContext(context.Background())
}

func (i *resourceAmazonEksInstanceProfilePtrType) ToResourceAmazonEksInstanceProfilePtrOutputWithContext(ctx context.Context) ResourceAmazonEksInstanceProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonEksInstanceProfilePtrOutput)
}

type ResourceAmazonEksInstanceProfileOutput struct{ *pulumi.OutputState }

func (ResourceAmazonEksInstanceProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAmazonEksInstanceProfile)(nil)).Elem()
}

func (o ResourceAmazonEksInstanceProfileOutput) ToResourceAmazonEksInstanceProfileOutput() ResourceAmazonEksInstanceProfileOutput {
	return o
}

func (o ResourceAmazonEksInstanceProfileOutput) ToResourceAmazonEksInstanceProfileOutputWithContext(ctx context.Context) ResourceAmazonEksInstanceProfileOutput {
	return o
}

func (o ResourceAmazonEksInstanceProfileOutput) ToResourceAmazonEksInstanceProfilePtrOutput() ResourceAmazonEksInstanceProfilePtrOutput {
	return o.ToResourceAmazonEksInstanceProfilePtrOutputWithContext(context.Background())
}

func (o ResourceAmazonEksInstanceProfileOutput) ToResourceAmazonEksInstanceProfilePtrOutputWithContext(ctx context.Context) ResourceAmazonEksInstanceProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAmazonEksInstanceProfile) *ResourceAmazonEksInstanceProfile {
		return &v
	}).(ResourceAmazonEksInstanceProfilePtrOutput)
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o ResourceAmazonEksInstanceProfileOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) *bool { return v.AllowResourceRoleBypass }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAmazonEksInstanceProfileOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceAmazonEksInstanceProfileOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The name of the cluster to connect to.
func (o ResourceAmazonEksInstanceProfileOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) string { return v.ClusterName }).(pulumi.StringOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o ResourceAmazonEksInstanceProfileOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) *bool { return v.DiscoveryEnabled }).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o ResourceAmazonEksInstanceProfileOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) *string { return v.DiscoveryUsername }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAmazonEksInstanceProfileOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceAmazonEksInstanceProfileOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAmazonEksInstanceProfileOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceAmazonEksInstanceProfileOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceAmazonEksInstanceProfileOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAmazonEksInstanceProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAmazonEksInstanceProfileOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAmazonEksInstanceProfileOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAmazonEksInstanceProfileOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) string { return v.Region }).(pulumi.StringOutput)
}

// The role to assume after logging in.
func (o ResourceAmazonEksInstanceProfileOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAmazonEksInstanceProfileOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAmazonEksInstanceProfileOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAmazonEksInstanceProfileOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAmazonEksInstanceProfileOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfile) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceAmazonEksInstanceProfilePtrOutput struct{ *pulumi.OutputState }

func (ResourceAmazonEksInstanceProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAmazonEksInstanceProfile)(nil)).Elem()
}

func (o ResourceAmazonEksInstanceProfilePtrOutput) ToResourceAmazonEksInstanceProfilePtrOutput() ResourceAmazonEksInstanceProfilePtrOutput {
	return o
}

func (o ResourceAmazonEksInstanceProfilePtrOutput) ToResourceAmazonEksInstanceProfilePtrOutputWithContext(ctx context.Context) ResourceAmazonEksInstanceProfilePtrOutput {
	return o
}

func (o ResourceAmazonEksInstanceProfilePtrOutput) Elem() ResourceAmazonEksInstanceProfileOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) ResourceAmazonEksInstanceProfile {
		if v != nil {
			return *v
		}
		var ret ResourceAmazonEksInstanceProfile
		return ret
	}).(ResourceAmazonEksInstanceProfileOutput)
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o ResourceAmazonEksInstanceProfilePtrOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *bool {
		if v == nil {
			return nil
		}
		return v.AllowResourceRoleBypass
	}).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAmazonEksInstanceProfilePtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceAmazonEksInstanceProfilePtrOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(pulumi.StringPtrOutput)
}

// The name of the cluster to connect to.
func (o ResourceAmazonEksInstanceProfilePtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o ResourceAmazonEksInstanceProfilePtrOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *bool {
		if v == nil {
			return nil
		}
		return v.DiscoveryEnabled
	}).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o ResourceAmazonEksInstanceProfilePtrOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.DiscoveryUsername
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAmazonEksInstanceProfilePtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceAmazonEksInstanceProfilePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAmazonEksInstanceProfilePtrOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceAmazonEksInstanceProfilePtrOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.IdentityAliasHealthcheckUsername
	}).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceAmazonEksInstanceProfilePtrOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.IdentitySetId
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAmazonEksInstanceProfilePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAmazonEksInstanceProfilePtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAmazonEksInstanceProfilePtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAmazonEksInstanceProfilePtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o ResourceAmazonEksInstanceProfilePtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAmazonEksInstanceProfilePtrOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.RoleExternalId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAmazonEksInstanceProfilePtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAmazonEksInstanceProfilePtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAmazonEksInstanceProfilePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfile) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceAmazonEksInstanceProfileUserImpersonation struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The name of the cluster to connect to.
	ClusterName string `pulumi:"clusterName"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint string `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceAmazonEksInstanceProfileUserImpersonationInput is an input type that accepts ResourceAmazonEksInstanceProfileUserImpersonationArgs and ResourceAmazonEksInstanceProfileUserImpersonationOutput values.
// You can construct a concrete instance of `ResourceAmazonEksInstanceProfileUserImpersonationInput` via:
//
//	ResourceAmazonEksInstanceProfileUserImpersonationArgs{...}
type ResourceAmazonEksInstanceProfileUserImpersonationInput interface {
	pulumi.Input

	ToResourceAmazonEksInstanceProfileUserImpersonationOutput() ResourceAmazonEksInstanceProfileUserImpersonationOutput
	ToResourceAmazonEksInstanceProfileUserImpersonationOutputWithContext(context.Context) ResourceAmazonEksInstanceProfileUserImpersonationOutput
}

type ResourceAmazonEksInstanceProfileUserImpersonationArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The name of the cluster to connect to.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceAmazonEksInstanceProfileUserImpersonationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAmazonEksInstanceProfileUserImpersonation)(nil)).Elem()
}

func (i ResourceAmazonEksInstanceProfileUserImpersonationArgs) ToResourceAmazonEksInstanceProfileUserImpersonationOutput() ResourceAmazonEksInstanceProfileUserImpersonationOutput {
	return i.ToResourceAmazonEksInstanceProfileUserImpersonationOutputWithContext(context.Background())
}

func (i ResourceAmazonEksInstanceProfileUserImpersonationArgs) ToResourceAmazonEksInstanceProfileUserImpersonationOutputWithContext(ctx context.Context) ResourceAmazonEksInstanceProfileUserImpersonationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonEksInstanceProfileUserImpersonationOutput)
}

func (i ResourceAmazonEksInstanceProfileUserImpersonationArgs) ToResourceAmazonEksInstanceProfileUserImpersonationPtrOutput() ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput {
	return i.ToResourceAmazonEksInstanceProfileUserImpersonationPtrOutputWithContext(context.Background())
}

func (i ResourceAmazonEksInstanceProfileUserImpersonationArgs) ToResourceAmazonEksInstanceProfileUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonEksInstanceProfileUserImpersonationOutput).ToResourceAmazonEksInstanceProfileUserImpersonationPtrOutputWithContext(ctx)
}

// ResourceAmazonEksInstanceProfileUserImpersonationPtrInput is an input type that accepts ResourceAmazonEksInstanceProfileUserImpersonationArgs, ResourceAmazonEksInstanceProfileUserImpersonationPtr and ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput values.
// You can construct a concrete instance of `ResourceAmazonEksInstanceProfileUserImpersonationPtrInput` via:
//
//	        ResourceAmazonEksInstanceProfileUserImpersonationArgs{...}
//
//	or:
//
//	        nil
type ResourceAmazonEksInstanceProfileUserImpersonationPtrInput interface {
	pulumi.Input

	ToResourceAmazonEksInstanceProfileUserImpersonationPtrOutput() ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput
	ToResourceAmazonEksInstanceProfileUserImpersonationPtrOutputWithContext(context.Context) ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput
}

type resourceAmazonEksInstanceProfileUserImpersonationPtrType ResourceAmazonEksInstanceProfileUserImpersonationArgs

func ResourceAmazonEksInstanceProfileUserImpersonationPtr(v *ResourceAmazonEksInstanceProfileUserImpersonationArgs) ResourceAmazonEksInstanceProfileUserImpersonationPtrInput {
	return (*resourceAmazonEksInstanceProfileUserImpersonationPtrType)(v)
}

func (*resourceAmazonEksInstanceProfileUserImpersonationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAmazonEksInstanceProfileUserImpersonation)(nil)).Elem()
}

func (i *resourceAmazonEksInstanceProfileUserImpersonationPtrType) ToResourceAmazonEksInstanceProfileUserImpersonationPtrOutput() ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput {
	return i.ToResourceAmazonEksInstanceProfileUserImpersonationPtrOutputWithContext(context.Background())
}

func (i *resourceAmazonEksInstanceProfileUserImpersonationPtrType) ToResourceAmazonEksInstanceProfileUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput)
}

type ResourceAmazonEksInstanceProfileUserImpersonationOutput struct{ *pulumi.OutputState }

func (ResourceAmazonEksInstanceProfileUserImpersonationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAmazonEksInstanceProfileUserImpersonation)(nil)).Elem()
}

func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) ToResourceAmazonEksInstanceProfileUserImpersonationOutput() ResourceAmazonEksInstanceProfileUserImpersonationOutput {
	return o
}

func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) ToResourceAmazonEksInstanceProfileUserImpersonationOutputWithContext(ctx context.Context) ResourceAmazonEksInstanceProfileUserImpersonationOutput {
	return o
}

func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) ToResourceAmazonEksInstanceProfileUserImpersonationPtrOutput() ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput {
	return o.ToResourceAmazonEksInstanceProfileUserImpersonationPtrOutputWithContext(context.Background())
}

func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) ToResourceAmazonEksInstanceProfileUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAmazonEksInstanceProfileUserImpersonation) *ResourceAmazonEksInstanceProfileUserImpersonation {
		return &v
	}).(ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The name of the cluster to connect to.
func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfileUserImpersonation) string { return v.ClusterName }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfileUserImpersonation) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfileUserImpersonation) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfileUserImpersonation) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfileUserImpersonation) string { return v.Region }).(pulumi.StringOutput)
}

// The role to assume after logging in.
func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAmazonEksInstanceProfileUserImpersonationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAmazonEksInstanceProfileUserImpersonation) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput struct{ *pulumi.OutputState }

func (ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAmazonEksInstanceProfileUserImpersonation)(nil)).Elem()
}

func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) ToResourceAmazonEksInstanceProfileUserImpersonationPtrOutput() ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput {
	return o
}

func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) ToResourceAmazonEksInstanceProfileUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput {
	return o
}

func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) Elem() ResourceAmazonEksInstanceProfileUserImpersonationOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfileUserImpersonation) ResourceAmazonEksInstanceProfileUserImpersonation {
		if v != nil {
			return *v
		}
		var ret ResourceAmazonEksInstanceProfileUserImpersonation
		return ret
	}).(ResourceAmazonEksInstanceProfileUserImpersonationOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfileUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfileUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(pulumi.StringPtrOutput)
}

// The name of the cluster to connect to.
func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfileUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfileUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfileUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfileUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfileUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfileUserImpersonation) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfileUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfileUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfileUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfileUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.RoleExternalId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfileUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfileUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAmazonEksInstanceProfileUserImpersonation) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceAmazonEksUserImpersonation struct {
	// The Access Key ID to use to authenticate.
	AccessKey *string `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The name of the cluster to connect to.
	ClusterName string `pulumi:"clusterName"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint string `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceAmazonEksUserImpersonationInput is an input type that accepts ResourceAmazonEksUserImpersonationArgs and ResourceAmazonEksUserImpersonationOutput values.
// You can construct a concrete instance of `ResourceAmazonEksUserImpersonationInput` via:
//
//	ResourceAmazonEksUserImpersonationArgs{...}
type ResourceAmazonEksUserImpersonationInput interface {
	pulumi.Input

	ToResourceAmazonEksUserImpersonationOutput() ResourceAmazonEksUserImpersonationOutput
	ToResourceAmazonEksUserImpersonationOutputWithContext(context.Context) ResourceAmazonEksUserImpersonationOutput
}

type ResourceAmazonEksUserImpersonationArgs struct {
	// The Access Key ID to use to authenticate.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The name of the cluster to connect to.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceAmazonEksUserImpersonationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAmazonEksUserImpersonation)(nil)).Elem()
}

func (i ResourceAmazonEksUserImpersonationArgs) ToResourceAmazonEksUserImpersonationOutput() ResourceAmazonEksUserImpersonationOutput {
	return i.ToResourceAmazonEksUserImpersonationOutputWithContext(context.Background())
}

func (i ResourceAmazonEksUserImpersonationArgs) ToResourceAmazonEksUserImpersonationOutputWithContext(ctx context.Context) ResourceAmazonEksUserImpersonationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonEksUserImpersonationOutput)
}

func (i ResourceAmazonEksUserImpersonationArgs) ToResourceAmazonEksUserImpersonationPtrOutput() ResourceAmazonEksUserImpersonationPtrOutput {
	return i.ToResourceAmazonEksUserImpersonationPtrOutputWithContext(context.Background())
}

func (i ResourceAmazonEksUserImpersonationArgs) ToResourceAmazonEksUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceAmazonEksUserImpersonationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonEksUserImpersonationOutput).ToResourceAmazonEksUserImpersonationPtrOutputWithContext(ctx)
}

// ResourceAmazonEksUserImpersonationPtrInput is an input type that accepts ResourceAmazonEksUserImpersonationArgs, ResourceAmazonEksUserImpersonationPtr and ResourceAmazonEksUserImpersonationPtrOutput values.
// You can construct a concrete instance of `ResourceAmazonEksUserImpersonationPtrInput` via:
//
//	        ResourceAmazonEksUserImpersonationArgs{...}
//
//	or:
//
//	        nil
type ResourceAmazonEksUserImpersonationPtrInput interface {
	pulumi.Input

	ToResourceAmazonEksUserImpersonationPtrOutput() ResourceAmazonEksUserImpersonationPtrOutput
	ToResourceAmazonEksUserImpersonationPtrOutputWithContext(context.Context) ResourceAmazonEksUserImpersonationPtrOutput
}

type resourceAmazonEksUserImpersonationPtrType ResourceAmazonEksUserImpersonationArgs

func ResourceAmazonEksUserImpersonationPtr(v *ResourceAmazonEksUserImpersonationArgs) ResourceAmazonEksUserImpersonationPtrInput {
	return (*resourceAmazonEksUserImpersonationPtrType)(v)
}

func (*resourceAmazonEksUserImpersonationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAmazonEksUserImpersonation)(nil)).Elem()
}

func (i *resourceAmazonEksUserImpersonationPtrType) ToResourceAmazonEksUserImpersonationPtrOutput() ResourceAmazonEksUserImpersonationPtrOutput {
	return i.ToResourceAmazonEksUserImpersonationPtrOutputWithContext(context.Background())
}

func (i *resourceAmazonEksUserImpersonationPtrType) ToResourceAmazonEksUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceAmazonEksUserImpersonationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonEksUserImpersonationPtrOutput)
}

type ResourceAmazonEksUserImpersonationOutput struct{ *pulumi.OutputState }

func (ResourceAmazonEksUserImpersonationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAmazonEksUserImpersonation)(nil)).Elem()
}

func (o ResourceAmazonEksUserImpersonationOutput) ToResourceAmazonEksUserImpersonationOutput() ResourceAmazonEksUserImpersonationOutput {
	return o
}

func (o ResourceAmazonEksUserImpersonationOutput) ToResourceAmazonEksUserImpersonationOutputWithContext(ctx context.Context) ResourceAmazonEksUserImpersonationOutput {
	return o
}

func (o ResourceAmazonEksUserImpersonationOutput) ToResourceAmazonEksUserImpersonationPtrOutput() ResourceAmazonEksUserImpersonationPtrOutput {
	return o.ToResourceAmazonEksUserImpersonationPtrOutputWithContext(context.Background())
}

func (o ResourceAmazonEksUserImpersonationOutput) ToResourceAmazonEksUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceAmazonEksUserImpersonationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAmazonEksUserImpersonation) *ResourceAmazonEksUserImpersonation {
		return &v
	}).(ResourceAmazonEksUserImpersonationPtrOutput)
}

// The Access Key ID to use to authenticate.
func (o ResourceAmazonEksUserImpersonationOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksUserImpersonation) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAmazonEksUserImpersonationOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksUserImpersonation) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceAmazonEksUserImpersonationOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksUserImpersonation) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The name of the cluster to connect to.
func (o ResourceAmazonEksUserImpersonationOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEksUserImpersonation) string { return v.ClusterName }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAmazonEksUserImpersonationOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksUserImpersonation) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceAmazonEksUserImpersonationOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEksUserImpersonation) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAmazonEksUserImpersonationOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksUserImpersonation) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAmazonEksUserImpersonationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEksUserImpersonation) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAmazonEksUserImpersonationOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksUserImpersonation) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAmazonEksUserImpersonationOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksUserImpersonation) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAmazonEksUserImpersonationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEksUserImpersonation) string { return v.Region }).(pulumi.StringOutput)
}

// The role to assume after logging in.
func (o ResourceAmazonEksUserImpersonationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksUserImpersonation) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAmazonEksUserImpersonationOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksUserImpersonation) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o ResourceAmazonEksUserImpersonationOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksUserImpersonation) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAmazonEksUserImpersonationOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksUserImpersonation) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAmazonEksUserImpersonationOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEksUserImpersonation) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAmazonEksUserImpersonationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAmazonEksUserImpersonation) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceAmazonEksUserImpersonationPtrOutput struct{ *pulumi.OutputState }

func (ResourceAmazonEksUserImpersonationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAmazonEksUserImpersonation)(nil)).Elem()
}

func (o ResourceAmazonEksUserImpersonationPtrOutput) ToResourceAmazonEksUserImpersonationPtrOutput() ResourceAmazonEksUserImpersonationPtrOutput {
	return o
}

func (o ResourceAmazonEksUserImpersonationPtrOutput) ToResourceAmazonEksUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceAmazonEksUserImpersonationPtrOutput {
	return o
}

func (o ResourceAmazonEksUserImpersonationPtrOutput) Elem() ResourceAmazonEksUserImpersonationOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) ResourceAmazonEksUserImpersonation {
		if v != nil {
			return *v
		}
		var ret ResourceAmazonEksUserImpersonation
		return ret
	}).(ResourceAmazonEksUserImpersonationOutput)
}

// The Access Key ID to use to authenticate.
func (o ResourceAmazonEksUserImpersonationPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAmazonEksUserImpersonationPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceAmazonEksUserImpersonationPtrOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(pulumi.StringPtrOutput)
}

// The name of the cluster to connect to.
func (o ResourceAmazonEksUserImpersonationPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAmazonEksUserImpersonationPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceAmazonEksUserImpersonationPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceAmazonEksUserImpersonationPtrOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAmazonEksUserImpersonationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAmazonEksUserImpersonationPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAmazonEksUserImpersonationPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAmazonEksUserImpersonationPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o ResourceAmazonEksUserImpersonationPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAmazonEksUserImpersonationPtrOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.RoleExternalId
	}).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o ResourceAmazonEksUserImpersonationPtrOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.SecretAccessKey
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAmazonEksUserImpersonationPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAmazonEksUserImpersonationPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAmazonEksUserImpersonationPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAmazonEksUserImpersonation) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceAmazonEs struct {
	// The Access Key ID to use to authenticate.
	AccessKey *string `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint *string `pulumi:"endpoint"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceAmazonEsInput is an input type that accepts ResourceAmazonEsArgs and ResourceAmazonEsOutput values.
// You can construct a concrete instance of `ResourceAmazonEsInput` via:
//
//	ResourceAmazonEsArgs{...}
type ResourceAmazonEsInput interface {
	pulumi.Input

	ToResourceAmazonEsOutput() ResourceAmazonEsOutput
	ToResourceAmazonEsOutputWithContext(context.Context) ResourceAmazonEsOutput
}

type ResourceAmazonEsArgs struct {
	// The Access Key ID to use to authenticate.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceAmazonEsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAmazonEs)(nil)).Elem()
}

func (i ResourceAmazonEsArgs) ToResourceAmazonEsOutput() ResourceAmazonEsOutput {
	return i.ToResourceAmazonEsOutputWithContext(context.Background())
}

func (i ResourceAmazonEsArgs) ToResourceAmazonEsOutputWithContext(ctx context.Context) ResourceAmazonEsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonEsOutput)
}

func (i ResourceAmazonEsArgs) ToResourceAmazonEsPtrOutput() ResourceAmazonEsPtrOutput {
	return i.ToResourceAmazonEsPtrOutputWithContext(context.Background())
}

func (i ResourceAmazonEsArgs) ToResourceAmazonEsPtrOutputWithContext(ctx context.Context) ResourceAmazonEsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonEsOutput).ToResourceAmazonEsPtrOutputWithContext(ctx)
}

// ResourceAmazonEsPtrInput is an input type that accepts ResourceAmazonEsArgs, ResourceAmazonEsPtr and ResourceAmazonEsPtrOutput values.
// You can construct a concrete instance of `ResourceAmazonEsPtrInput` via:
//
//	        ResourceAmazonEsArgs{...}
//
//	or:
//
//	        nil
type ResourceAmazonEsPtrInput interface {
	pulumi.Input

	ToResourceAmazonEsPtrOutput() ResourceAmazonEsPtrOutput
	ToResourceAmazonEsPtrOutputWithContext(context.Context) ResourceAmazonEsPtrOutput
}

type resourceAmazonEsPtrType ResourceAmazonEsArgs

func ResourceAmazonEsPtr(v *ResourceAmazonEsArgs) ResourceAmazonEsPtrInput {
	return (*resourceAmazonEsPtrType)(v)
}

func (*resourceAmazonEsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAmazonEs)(nil)).Elem()
}

func (i *resourceAmazonEsPtrType) ToResourceAmazonEsPtrOutput() ResourceAmazonEsPtrOutput {
	return i.ToResourceAmazonEsPtrOutputWithContext(context.Background())
}

func (i *resourceAmazonEsPtrType) ToResourceAmazonEsPtrOutputWithContext(ctx context.Context) ResourceAmazonEsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonEsPtrOutput)
}

type ResourceAmazonEsOutput struct{ *pulumi.OutputState }

func (ResourceAmazonEsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAmazonEs)(nil)).Elem()
}

func (o ResourceAmazonEsOutput) ToResourceAmazonEsOutput() ResourceAmazonEsOutput {
	return o
}

func (o ResourceAmazonEsOutput) ToResourceAmazonEsOutputWithContext(ctx context.Context) ResourceAmazonEsOutput {
	return o
}

func (o ResourceAmazonEsOutput) ToResourceAmazonEsPtrOutput() ResourceAmazonEsPtrOutput {
	return o.ToResourceAmazonEsPtrOutputWithContext(context.Background())
}

func (o ResourceAmazonEsOutput) ToResourceAmazonEsPtrOutputWithContext(ctx context.Context) ResourceAmazonEsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAmazonEs) *ResourceAmazonEs {
		return &v
	}).(ResourceAmazonEsPtrOutput)
}

// The Access Key ID to use to authenticate.
func (o ResourceAmazonEsOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEs) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAmazonEsOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEs) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAmazonEsOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEs) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceAmazonEsOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEs) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAmazonEsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEs) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAmazonEsOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEs) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAmazonEsOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEs) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAmazonEsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonEs) string { return v.Region }).(pulumi.StringOutput)
}

// The role to assume after logging in.
func (o ResourceAmazonEsOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEs) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAmazonEsOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEs) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o ResourceAmazonEsOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEs) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAmazonEsOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEs) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAmazonEsOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonEs) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAmazonEsOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAmazonEs) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceAmazonEsPtrOutput struct{ *pulumi.OutputState }

func (ResourceAmazonEsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAmazonEs)(nil)).Elem()
}

func (o ResourceAmazonEsPtrOutput) ToResourceAmazonEsPtrOutput() ResourceAmazonEsPtrOutput {
	return o
}

func (o ResourceAmazonEsPtrOutput) ToResourceAmazonEsPtrOutputWithContext(ctx context.Context) ResourceAmazonEsPtrOutput {
	return o
}

func (o ResourceAmazonEsPtrOutput) Elem() ResourceAmazonEsOutput {
	return o.ApplyT(func(v *ResourceAmazonEs) ResourceAmazonEs {
		if v != nil {
			return *v
		}
		var ret ResourceAmazonEs
		return ret
	}).(ResourceAmazonEsOutput)
}

// The Access Key ID to use to authenticate.
func (o ResourceAmazonEsPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEs) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAmazonEsPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEs) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAmazonEsPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEs) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceAmazonEsPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEs) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAmazonEsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEs) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAmazonEsPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEs) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAmazonEsPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEs) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAmazonEsPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEs) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o ResourceAmazonEsPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEs) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAmazonEsPtrOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEs) *string {
		if v == nil {
			return nil
		}
		return v.RoleExternalId
	}).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o ResourceAmazonEsPtrOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEs) *string {
		if v == nil {
			return nil
		}
		return v.SecretAccessKey
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAmazonEsPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEs) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAmazonEsPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonEs) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAmazonEsPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAmazonEs) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceAmazonmqAmqp091 struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceAmazonmqAmqp091Input is an input type that accepts ResourceAmazonmqAmqp091Args and ResourceAmazonmqAmqp091Output values.
// You can construct a concrete instance of `ResourceAmazonmqAmqp091Input` via:
//
//	ResourceAmazonmqAmqp091Args{...}
type ResourceAmazonmqAmqp091Input interface {
	pulumi.Input

	ToResourceAmazonmqAmqp091Output() ResourceAmazonmqAmqp091Output
	ToResourceAmazonmqAmqp091OutputWithContext(context.Context) ResourceAmazonmqAmqp091Output
}

type ResourceAmazonmqAmqp091Args struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceAmazonmqAmqp091Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAmazonmqAmqp091)(nil)).Elem()
}

func (i ResourceAmazonmqAmqp091Args) ToResourceAmazonmqAmqp091Output() ResourceAmazonmqAmqp091Output {
	return i.ToResourceAmazonmqAmqp091OutputWithContext(context.Background())
}

func (i ResourceAmazonmqAmqp091Args) ToResourceAmazonmqAmqp091OutputWithContext(ctx context.Context) ResourceAmazonmqAmqp091Output {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonmqAmqp091Output)
}

func (i ResourceAmazonmqAmqp091Args) ToResourceAmazonmqAmqp091PtrOutput() ResourceAmazonmqAmqp091PtrOutput {
	return i.ToResourceAmazonmqAmqp091PtrOutputWithContext(context.Background())
}

func (i ResourceAmazonmqAmqp091Args) ToResourceAmazonmqAmqp091PtrOutputWithContext(ctx context.Context) ResourceAmazonmqAmqp091PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonmqAmqp091Output).ToResourceAmazonmqAmqp091PtrOutputWithContext(ctx)
}

// ResourceAmazonmqAmqp091PtrInput is an input type that accepts ResourceAmazonmqAmqp091Args, ResourceAmazonmqAmqp091Ptr and ResourceAmazonmqAmqp091PtrOutput values.
// You can construct a concrete instance of `ResourceAmazonmqAmqp091PtrInput` via:
//
//	        ResourceAmazonmqAmqp091Args{...}
//
//	or:
//
//	        nil
type ResourceAmazonmqAmqp091PtrInput interface {
	pulumi.Input

	ToResourceAmazonmqAmqp091PtrOutput() ResourceAmazonmqAmqp091PtrOutput
	ToResourceAmazonmqAmqp091PtrOutputWithContext(context.Context) ResourceAmazonmqAmqp091PtrOutput
}

type resourceAmazonmqAmqp091PtrType ResourceAmazonmqAmqp091Args

func ResourceAmazonmqAmqp091Ptr(v *ResourceAmazonmqAmqp091Args) ResourceAmazonmqAmqp091PtrInput {
	return (*resourceAmazonmqAmqp091PtrType)(v)
}

func (*resourceAmazonmqAmqp091PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAmazonmqAmqp091)(nil)).Elem()
}

func (i *resourceAmazonmqAmqp091PtrType) ToResourceAmazonmqAmqp091PtrOutput() ResourceAmazonmqAmqp091PtrOutput {
	return i.ToResourceAmazonmqAmqp091PtrOutputWithContext(context.Background())
}

func (i *resourceAmazonmqAmqp091PtrType) ToResourceAmazonmqAmqp091PtrOutputWithContext(ctx context.Context) ResourceAmazonmqAmqp091PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAmazonmqAmqp091PtrOutput)
}

type ResourceAmazonmqAmqp091Output struct{ *pulumi.OutputState }

func (ResourceAmazonmqAmqp091Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAmazonmqAmqp091)(nil)).Elem()
}

func (o ResourceAmazonmqAmqp091Output) ToResourceAmazonmqAmqp091Output() ResourceAmazonmqAmqp091Output {
	return o
}

func (o ResourceAmazonmqAmqp091Output) ToResourceAmazonmqAmqp091OutputWithContext(ctx context.Context) ResourceAmazonmqAmqp091Output {
	return o
}

func (o ResourceAmazonmqAmqp091Output) ToResourceAmazonmqAmqp091PtrOutput() ResourceAmazonmqAmqp091PtrOutput {
	return o.ToResourceAmazonmqAmqp091PtrOutputWithContext(context.Background())
}

func (o ResourceAmazonmqAmqp091Output) ToResourceAmazonmqAmqp091PtrOutputWithContext(ctx context.Context) ResourceAmazonmqAmqp091PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAmazonmqAmqp091) *ResourceAmazonmqAmqp091 {
		return &v
	}).(ResourceAmazonmqAmqp091PtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAmazonmqAmqp091Output) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonmqAmqp091) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAmazonmqAmqp091Output) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonmqAmqp091) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAmazonmqAmqp091Output) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonmqAmqp091) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAmazonmqAmqp091Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAmazonmqAmqp091) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceAmazonmqAmqp091Output) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonmqAmqp091) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAmazonmqAmqp091Output) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAmazonmqAmqp091) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAmazonmqAmqp091Output) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAmazonmqAmqp091) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAmazonmqAmqp091Output) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonmqAmqp091) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAmazonmqAmqp091Output) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonmqAmqp091) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAmazonmqAmqp091Output) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonmqAmqp091) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAmazonmqAmqp091Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAmazonmqAmqp091) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceAmazonmqAmqp091Output) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAmazonmqAmqp091) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceAmazonmqAmqp091Output) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAmazonmqAmqp091) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceAmazonmqAmqp091PtrOutput struct{ *pulumi.OutputState }

func (ResourceAmazonmqAmqp091PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAmazonmqAmqp091)(nil)).Elem()
}

func (o ResourceAmazonmqAmqp091PtrOutput) ToResourceAmazonmqAmqp091PtrOutput() ResourceAmazonmqAmqp091PtrOutput {
	return o
}

func (o ResourceAmazonmqAmqp091PtrOutput) ToResourceAmazonmqAmqp091PtrOutputWithContext(ctx context.Context) ResourceAmazonmqAmqp091PtrOutput {
	return o
}

func (o ResourceAmazonmqAmqp091PtrOutput) Elem() ResourceAmazonmqAmqp091Output {
	return o.ApplyT(func(v *ResourceAmazonmqAmqp091) ResourceAmazonmqAmqp091 {
		if v != nil {
			return *v
		}
		var ret ResourceAmazonmqAmqp091
		return ret
	}).(ResourceAmazonmqAmqp091Output)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAmazonmqAmqp091PtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAmazonmqAmqp091PtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAmazonmqAmqp091PtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAmazonmqAmqp091PtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceAmazonmqAmqp091PtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAmazonmqAmqp091PtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonmqAmqp091) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAmazonmqAmqp091PtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonmqAmqp091) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAmazonmqAmqp091PtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAmazonmqAmqp091PtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAmazonmqAmqp091PtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAmazonmqAmqp091PtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAmazonmqAmqp091) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceAmazonmqAmqp091PtrOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonmqAmqp091) *bool {
		if v == nil {
			return nil
		}
		return v.TlsRequired
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceAmazonmqAmqp091PtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAmazonmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceAthena struct {
	// The Access Key ID to use to authenticate.
	AccessKey *string `pulumi:"accessKey"`
	// The AWS S3 output location.
	AthenaOutput string `pulumi:"athenaOutput"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceAthenaInput is an input type that accepts ResourceAthenaArgs and ResourceAthenaOutput values.
// You can construct a concrete instance of `ResourceAthenaInput` via:
//
//	ResourceAthenaArgs{...}
type ResourceAthenaInput interface {
	pulumi.Input

	ToResourceAthenaOutput() ResourceAthenaOutput
	ToResourceAthenaOutputWithContext(context.Context) ResourceAthenaOutput
}

type ResourceAthenaArgs struct {
	// The Access Key ID to use to authenticate.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The AWS S3 output location.
	AthenaOutput pulumi.StringInput `pulumi:"athenaOutput"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceAthenaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAthena)(nil)).Elem()
}

func (i ResourceAthenaArgs) ToResourceAthenaOutput() ResourceAthenaOutput {
	return i.ToResourceAthenaOutputWithContext(context.Background())
}

func (i ResourceAthenaArgs) ToResourceAthenaOutputWithContext(ctx context.Context) ResourceAthenaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAthenaOutput)
}

func (i ResourceAthenaArgs) ToResourceAthenaPtrOutput() ResourceAthenaPtrOutput {
	return i.ToResourceAthenaPtrOutputWithContext(context.Background())
}

func (i ResourceAthenaArgs) ToResourceAthenaPtrOutputWithContext(ctx context.Context) ResourceAthenaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAthenaOutput).ToResourceAthenaPtrOutputWithContext(ctx)
}

// ResourceAthenaPtrInput is an input type that accepts ResourceAthenaArgs, ResourceAthenaPtr and ResourceAthenaPtrOutput values.
// You can construct a concrete instance of `ResourceAthenaPtrInput` via:
//
//	        ResourceAthenaArgs{...}
//
//	or:
//
//	        nil
type ResourceAthenaPtrInput interface {
	pulumi.Input

	ToResourceAthenaPtrOutput() ResourceAthenaPtrOutput
	ToResourceAthenaPtrOutputWithContext(context.Context) ResourceAthenaPtrOutput
}

type resourceAthenaPtrType ResourceAthenaArgs

func ResourceAthenaPtr(v *ResourceAthenaArgs) ResourceAthenaPtrInput {
	return (*resourceAthenaPtrType)(v)
}

func (*resourceAthenaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAthena)(nil)).Elem()
}

func (i *resourceAthenaPtrType) ToResourceAthenaPtrOutput() ResourceAthenaPtrOutput {
	return i.ToResourceAthenaPtrOutputWithContext(context.Background())
}

func (i *resourceAthenaPtrType) ToResourceAthenaPtrOutputWithContext(ctx context.Context) ResourceAthenaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAthenaPtrOutput)
}

type ResourceAthenaOutput struct{ *pulumi.OutputState }

func (ResourceAthenaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAthena)(nil)).Elem()
}

func (o ResourceAthenaOutput) ToResourceAthenaOutput() ResourceAthenaOutput {
	return o
}

func (o ResourceAthenaOutput) ToResourceAthenaOutputWithContext(ctx context.Context) ResourceAthenaOutput {
	return o
}

func (o ResourceAthenaOutput) ToResourceAthenaPtrOutput() ResourceAthenaPtrOutput {
	return o.ToResourceAthenaPtrOutputWithContext(context.Background())
}

func (o ResourceAthenaOutput) ToResourceAthenaPtrOutputWithContext(ctx context.Context) ResourceAthenaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAthena) *ResourceAthena {
		return &v
	}).(ResourceAthenaPtrOutput)
}

// The Access Key ID to use to authenticate.
func (o ResourceAthenaOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthena) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The AWS S3 output location.
func (o ResourceAthenaOutput) AthenaOutput() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAthena) string { return v.AthenaOutput }).(pulumi.StringOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAthenaOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthena) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAthenaOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthena) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAthenaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAthena) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAthenaOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAthena) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAthenaOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthena) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAthenaOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthena) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o ResourceAthenaOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthena) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAthenaOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthena) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o ResourceAthenaOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthena) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAthenaOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthena) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAthenaOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthena) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAthenaOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAthena) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceAthenaPtrOutput struct{ *pulumi.OutputState }

func (ResourceAthenaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAthena)(nil)).Elem()
}

func (o ResourceAthenaPtrOutput) ToResourceAthenaPtrOutput() ResourceAthenaPtrOutput {
	return o
}

func (o ResourceAthenaPtrOutput) ToResourceAthenaPtrOutputWithContext(ctx context.Context) ResourceAthenaPtrOutput {
	return o
}

func (o ResourceAthenaPtrOutput) Elem() ResourceAthenaOutput {
	return o.ApplyT(func(v *ResourceAthena) ResourceAthena {
		if v != nil {
			return *v
		}
		var ret ResourceAthena
		return ret
	}).(ResourceAthenaOutput)
}

// The Access Key ID to use to authenticate.
func (o ResourceAthenaPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthena) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// The AWS S3 output location.
func (o ResourceAthenaPtrOutput) AthenaOutput() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthena) *string {
		if v == nil {
			return nil
		}
		return &v.AthenaOutput
	}).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAthenaPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthena) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAthenaPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthena) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAthenaPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthena) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAthenaPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAthena) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAthenaPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthena) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAthenaPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthena) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o ResourceAthenaPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthena) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAthenaPtrOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthena) *string {
		if v == nil {
			return nil
		}
		return v.RoleExternalId
	}).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o ResourceAthenaPtrOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthena) *string {
		if v == nil {
			return nil
		}
		return v.SecretAccessKey
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAthenaPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthena) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAthenaPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthena) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAthenaPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAthena) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceAthenaIam struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The AWS S3 output location.
	Output string `pulumi:"output"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceAthenaIamInput is an input type that accepts ResourceAthenaIamArgs and ResourceAthenaIamOutput values.
// You can construct a concrete instance of `ResourceAthenaIamInput` via:
//
//	ResourceAthenaIamArgs{...}
type ResourceAthenaIamInput interface {
	pulumi.Input

	ToResourceAthenaIamOutput() ResourceAthenaIamOutput
	ToResourceAthenaIamOutputWithContext(context.Context) ResourceAthenaIamOutput
}

type ResourceAthenaIamArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The AWS S3 output location.
	Output pulumi.StringInput `pulumi:"output"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceAthenaIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAthenaIam)(nil)).Elem()
}

func (i ResourceAthenaIamArgs) ToResourceAthenaIamOutput() ResourceAthenaIamOutput {
	return i.ToResourceAthenaIamOutputWithContext(context.Background())
}

func (i ResourceAthenaIamArgs) ToResourceAthenaIamOutputWithContext(ctx context.Context) ResourceAthenaIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAthenaIamOutput)
}

func (i ResourceAthenaIamArgs) ToResourceAthenaIamPtrOutput() ResourceAthenaIamPtrOutput {
	return i.ToResourceAthenaIamPtrOutputWithContext(context.Background())
}

func (i ResourceAthenaIamArgs) ToResourceAthenaIamPtrOutputWithContext(ctx context.Context) ResourceAthenaIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAthenaIamOutput).ToResourceAthenaIamPtrOutputWithContext(ctx)
}

// ResourceAthenaIamPtrInput is an input type that accepts ResourceAthenaIamArgs, ResourceAthenaIamPtr and ResourceAthenaIamPtrOutput values.
// You can construct a concrete instance of `ResourceAthenaIamPtrInput` via:
//
//	        ResourceAthenaIamArgs{...}
//
//	or:
//
//	        nil
type ResourceAthenaIamPtrInput interface {
	pulumi.Input

	ToResourceAthenaIamPtrOutput() ResourceAthenaIamPtrOutput
	ToResourceAthenaIamPtrOutputWithContext(context.Context) ResourceAthenaIamPtrOutput
}

type resourceAthenaIamPtrType ResourceAthenaIamArgs

func ResourceAthenaIamPtr(v *ResourceAthenaIamArgs) ResourceAthenaIamPtrInput {
	return (*resourceAthenaIamPtrType)(v)
}

func (*resourceAthenaIamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAthenaIam)(nil)).Elem()
}

func (i *resourceAthenaIamPtrType) ToResourceAthenaIamPtrOutput() ResourceAthenaIamPtrOutput {
	return i.ToResourceAthenaIamPtrOutputWithContext(context.Background())
}

func (i *resourceAthenaIamPtrType) ToResourceAthenaIamPtrOutputWithContext(ctx context.Context) ResourceAthenaIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAthenaIamPtrOutput)
}

type ResourceAthenaIamOutput struct{ *pulumi.OutputState }

func (ResourceAthenaIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAthenaIam)(nil)).Elem()
}

func (o ResourceAthenaIamOutput) ToResourceAthenaIamOutput() ResourceAthenaIamOutput {
	return o
}

func (o ResourceAthenaIamOutput) ToResourceAthenaIamOutputWithContext(ctx context.Context) ResourceAthenaIamOutput {
	return o
}

func (o ResourceAthenaIamOutput) ToResourceAthenaIamPtrOutput() ResourceAthenaIamPtrOutput {
	return o.ToResourceAthenaIamPtrOutputWithContext(context.Background())
}

func (o ResourceAthenaIamOutput) ToResourceAthenaIamPtrOutputWithContext(ctx context.Context) ResourceAthenaIamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAthenaIam) *ResourceAthenaIam {
		return &v
	}).(ResourceAthenaIamPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAthenaIamOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthenaIam) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAthenaIamOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthenaIam) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAthenaIamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAthenaIam) string { return v.Name }).(pulumi.StringOutput)
}

// The AWS S3 output location.
func (o ResourceAthenaIamOutput) Output() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAthenaIam) string { return v.Output }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAthenaIamOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAthenaIam) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAthenaIamOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthenaIam) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAthenaIamOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthenaIam) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o ResourceAthenaIamOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthenaIam) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAthenaIamOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthenaIam) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAthenaIamOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthenaIam) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAthenaIamOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAthenaIam) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAthenaIamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAthenaIam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceAthenaIamPtrOutput struct{ *pulumi.OutputState }

func (ResourceAthenaIamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAthenaIam)(nil)).Elem()
}

func (o ResourceAthenaIamPtrOutput) ToResourceAthenaIamPtrOutput() ResourceAthenaIamPtrOutput {
	return o
}

func (o ResourceAthenaIamPtrOutput) ToResourceAthenaIamPtrOutputWithContext(ctx context.Context) ResourceAthenaIamPtrOutput {
	return o
}

func (o ResourceAthenaIamPtrOutput) Elem() ResourceAthenaIamOutput {
	return o.ApplyT(func(v *ResourceAthenaIam) ResourceAthenaIam {
		if v != nil {
			return *v
		}
		var ret ResourceAthenaIam
		return ret
	}).(ResourceAthenaIamOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAthenaIamPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthenaIam) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAthenaIamPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthenaIam) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAthenaIamPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthenaIam) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The AWS S3 output location.
func (o ResourceAthenaIamPtrOutput) Output() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthenaIam) *string {
		if v == nil {
			return nil
		}
		return &v.Output
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAthenaIamPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAthenaIam) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAthenaIamPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthenaIam) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAthenaIamPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthenaIam) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o ResourceAthenaIamPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthenaIam) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAthenaIamPtrOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthenaIam) *string {
		if v == nil {
			return nil
		}
		return v.RoleExternalId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAthenaIamPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthenaIam) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAthenaIamPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAthenaIam) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAthenaIamPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAthenaIam) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceAuroraMysql struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceAuroraMysqlInput is an input type that accepts ResourceAuroraMysqlArgs and ResourceAuroraMysqlOutput values.
// You can construct a concrete instance of `ResourceAuroraMysqlInput` via:
//
//	ResourceAuroraMysqlArgs{...}
type ResourceAuroraMysqlInput interface {
	pulumi.Input

	ToResourceAuroraMysqlOutput() ResourceAuroraMysqlOutput
	ToResourceAuroraMysqlOutputWithContext(context.Context) ResourceAuroraMysqlOutput
}

type ResourceAuroraMysqlArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceAuroraMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAuroraMysql)(nil)).Elem()
}

func (i ResourceAuroraMysqlArgs) ToResourceAuroraMysqlOutput() ResourceAuroraMysqlOutput {
	return i.ToResourceAuroraMysqlOutputWithContext(context.Background())
}

func (i ResourceAuroraMysqlArgs) ToResourceAuroraMysqlOutputWithContext(ctx context.Context) ResourceAuroraMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAuroraMysqlOutput)
}

func (i ResourceAuroraMysqlArgs) ToResourceAuroraMysqlPtrOutput() ResourceAuroraMysqlPtrOutput {
	return i.ToResourceAuroraMysqlPtrOutputWithContext(context.Background())
}

func (i ResourceAuroraMysqlArgs) ToResourceAuroraMysqlPtrOutputWithContext(ctx context.Context) ResourceAuroraMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAuroraMysqlOutput).ToResourceAuroraMysqlPtrOutputWithContext(ctx)
}

// ResourceAuroraMysqlPtrInput is an input type that accepts ResourceAuroraMysqlArgs, ResourceAuroraMysqlPtr and ResourceAuroraMysqlPtrOutput values.
// You can construct a concrete instance of `ResourceAuroraMysqlPtrInput` via:
//
//	        ResourceAuroraMysqlArgs{...}
//
//	or:
//
//	        nil
type ResourceAuroraMysqlPtrInput interface {
	pulumi.Input

	ToResourceAuroraMysqlPtrOutput() ResourceAuroraMysqlPtrOutput
	ToResourceAuroraMysqlPtrOutputWithContext(context.Context) ResourceAuroraMysqlPtrOutput
}

type resourceAuroraMysqlPtrType ResourceAuroraMysqlArgs

func ResourceAuroraMysqlPtr(v *ResourceAuroraMysqlArgs) ResourceAuroraMysqlPtrInput {
	return (*resourceAuroraMysqlPtrType)(v)
}

func (*resourceAuroraMysqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAuroraMysql)(nil)).Elem()
}

func (i *resourceAuroraMysqlPtrType) ToResourceAuroraMysqlPtrOutput() ResourceAuroraMysqlPtrOutput {
	return i.ToResourceAuroraMysqlPtrOutputWithContext(context.Background())
}

func (i *resourceAuroraMysqlPtrType) ToResourceAuroraMysqlPtrOutputWithContext(ctx context.Context) ResourceAuroraMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAuroraMysqlPtrOutput)
}

type ResourceAuroraMysqlOutput struct{ *pulumi.OutputState }

func (ResourceAuroraMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAuroraMysql)(nil)).Elem()
}

func (o ResourceAuroraMysqlOutput) ToResourceAuroraMysqlOutput() ResourceAuroraMysqlOutput {
	return o
}

func (o ResourceAuroraMysqlOutput) ToResourceAuroraMysqlOutputWithContext(ctx context.Context) ResourceAuroraMysqlOutput {
	return o
}

func (o ResourceAuroraMysqlOutput) ToResourceAuroraMysqlPtrOutput() ResourceAuroraMysqlPtrOutput {
	return o.ToResourceAuroraMysqlPtrOutputWithContext(context.Background())
}

func (o ResourceAuroraMysqlOutput) ToResourceAuroraMysqlPtrOutputWithContext(ctx context.Context) ResourceAuroraMysqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAuroraMysql) *ResourceAuroraMysql {
		return &v
	}).(ResourceAuroraMysqlPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAuroraMysqlOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysql) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceAuroraMysqlOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysql) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAuroraMysqlOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysql) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAuroraMysqlOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAuroraMysql) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAuroraMysqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAuroraMysql) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceAuroraMysqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAuroraMysqlOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysql) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAuroraMysqlOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysql) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAuroraMysqlOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysql) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceAuroraMysqlOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysql) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAuroraMysqlOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysql) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAuroraMysqlOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysql) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAuroraMysqlOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAuroraMysql) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceAuroraMysqlOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysql) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceAuroraMysqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceAuroraMysqlPtrOutput struct{ *pulumi.OutputState }

func (ResourceAuroraMysqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAuroraMysql)(nil)).Elem()
}

func (o ResourceAuroraMysqlPtrOutput) ToResourceAuroraMysqlPtrOutput() ResourceAuroraMysqlPtrOutput {
	return o
}

func (o ResourceAuroraMysqlPtrOutput) ToResourceAuroraMysqlPtrOutputWithContext(ctx context.Context) ResourceAuroraMysqlPtrOutput {
	return o
}

func (o ResourceAuroraMysqlPtrOutput) Elem() ResourceAuroraMysqlOutput {
	return o.ApplyT(func(v *ResourceAuroraMysql) ResourceAuroraMysql {
		if v != nil {
			return *v
		}
		var ret ResourceAuroraMysql
		return ret
	}).(ResourceAuroraMysqlOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAuroraMysqlPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysql) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceAuroraMysqlPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysql) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAuroraMysqlPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysql) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAuroraMysqlPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysql) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAuroraMysqlPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysql) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceAuroraMysqlPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysql) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAuroraMysqlPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysql) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAuroraMysqlPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysql) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAuroraMysqlPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysql) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceAuroraMysqlPtrOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysql) *bool {
		if v == nil {
			return nil
		}
		return v.RequireNativeAuth
	}).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAuroraMysqlPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysql) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAuroraMysqlPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysql) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAuroraMysqlPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAuroraMysql) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceAuroraMysqlPtrOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysql) *bool {
		if v == nil {
			return nil
		}
		return v.UseAzureSingleServerUsernames
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceAuroraMysqlPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysql) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceAuroraMysqlIam struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region string `pulumi:"region"`
	// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
	RoleAssumptionArn *string `pulumi:"roleAssumptionArn"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceAuroraMysqlIamInput is an input type that accepts ResourceAuroraMysqlIamArgs and ResourceAuroraMysqlIamOutput values.
// You can construct a concrete instance of `ResourceAuroraMysqlIamInput` via:
//
//	ResourceAuroraMysqlIamArgs{...}
type ResourceAuroraMysqlIamInput interface {
	pulumi.Input

	ToResourceAuroraMysqlIamOutput() ResourceAuroraMysqlIamOutput
	ToResourceAuroraMysqlIamOutputWithContext(context.Context) ResourceAuroraMysqlIamOutput
}

type ResourceAuroraMysqlIamArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringInput `pulumi:"region"`
	// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
	RoleAssumptionArn pulumi.StringPtrInput `pulumi:"roleAssumptionArn"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceAuroraMysqlIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAuroraMysqlIam)(nil)).Elem()
}

func (i ResourceAuroraMysqlIamArgs) ToResourceAuroraMysqlIamOutput() ResourceAuroraMysqlIamOutput {
	return i.ToResourceAuroraMysqlIamOutputWithContext(context.Background())
}

func (i ResourceAuroraMysqlIamArgs) ToResourceAuroraMysqlIamOutputWithContext(ctx context.Context) ResourceAuroraMysqlIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAuroraMysqlIamOutput)
}

func (i ResourceAuroraMysqlIamArgs) ToResourceAuroraMysqlIamPtrOutput() ResourceAuroraMysqlIamPtrOutput {
	return i.ToResourceAuroraMysqlIamPtrOutputWithContext(context.Background())
}

func (i ResourceAuroraMysqlIamArgs) ToResourceAuroraMysqlIamPtrOutputWithContext(ctx context.Context) ResourceAuroraMysqlIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAuroraMysqlIamOutput).ToResourceAuroraMysqlIamPtrOutputWithContext(ctx)
}

// ResourceAuroraMysqlIamPtrInput is an input type that accepts ResourceAuroraMysqlIamArgs, ResourceAuroraMysqlIamPtr and ResourceAuroraMysqlIamPtrOutput values.
// You can construct a concrete instance of `ResourceAuroraMysqlIamPtrInput` via:
//
//	        ResourceAuroraMysqlIamArgs{...}
//
//	or:
//
//	        nil
type ResourceAuroraMysqlIamPtrInput interface {
	pulumi.Input

	ToResourceAuroraMysqlIamPtrOutput() ResourceAuroraMysqlIamPtrOutput
	ToResourceAuroraMysqlIamPtrOutputWithContext(context.Context) ResourceAuroraMysqlIamPtrOutput
}

type resourceAuroraMysqlIamPtrType ResourceAuroraMysqlIamArgs

func ResourceAuroraMysqlIamPtr(v *ResourceAuroraMysqlIamArgs) ResourceAuroraMysqlIamPtrInput {
	return (*resourceAuroraMysqlIamPtrType)(v)
}

func (*resourceAuroraMysqlIamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAuroraMysqlIam)(nil)).Elem()
}

func (i *resourceAuroraMysqlIamPtrType) ToResourceAuroraMysqlIamPtrOutput() ResourceAuroraMysqlIamPtrOutput {
	return i.ToResourceAuroraMysqlIamPtrOutputWithContext(context.Background())
}

func (i *resourceAuroraMysqlIamPtrType) ToResourceAuroraMysqlIamPtrOutputWithContext(ctx context.Context) ResourceAuroraMysqlIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAuroraMysqlIamPtrOutput)
}

type ResourceAuroraMysqlIamOutput struct{ *pulumi.OutputState }

func (ResourceAuroraMysqlIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAuroraMysqlIam)(nil)).Elem()
}

func (o ResourceAuroraMysqlIamOutput) ToResourceAuroraMysqlIamOutput() ResourceAuroraMysqlIamOutput {
	return o
}

func (o ResourceAuroraMysqlIamOutput) ToResourceAuroraMysqlIamOutputWithContext(ctx context.Context) ResourceAuroraMysqlIamOutput {
	return o
}

func (o ResourceAuroraMysqlIamOutput) ToResourceAuroraMysqlIamPtrOutput() ResourceAuroraMysqlIamPtrOutput {
	return o.ToResourceAuroraMysqlIamPtrOutputWithContext(context.Background())
}

func (o ResourceAuroraMysqlIamOutput) ToResourceAuroraMysqlIamPtrOutputWithContext(ctx context.Context) ResourceAuroraMysqlIamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAuroraMysqlIam) *ResourceAuroraMysqlIam {
		return &v
	}).(ResourceAuroraMysqlIamPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAuroraMysqlIamOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysqlIam) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceAuroraMysqlIamOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysqlIam) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAuroraMysqlIamOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysqlIam) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAuroraMysqlIamOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAuroraMysqlIam) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAuroraMysqlIamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAuroraMysqlIam) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAuroraMysqlIamOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysqlIam) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAuroraMysqlIamOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysqlIam) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAuroraMysqlIamOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysqlIam) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAuroraMysqlIamOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAuroraMysqlIam) string { return v.Region }).(pulumi.StringOutput)
}

// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
func (o ResourceAuroraMysqlIamOutput) RoleAssumptionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysqlIam) *string { return v.RoleAssumptionArn }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAuroraMysqlIamOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysqlIam) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAuroraMysqlIamOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysqlIam) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAuroraMysqlIamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAuroraMysqlIam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceAuroraMysqlIamOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraMysqlIam) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceAuroraMysqlIamPtrOutput struct{ *pulumi.OutputState }

func (ResourceAuroraMysqlIamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAuroraMysqlIam)(nil)).Elem()
}

func (o ResourceAuroraMysqlIamPtrOutput) ToResourceAuroraMysqlIamPtrOutput() ResourceAuroraMysqlIamPtrOutput {
	return o
}

func (o ResourceAuroraMysqlIamPtrOutput) ToResourceAuroraMysqlIamPtrOutputWithContext(ctx context.Context) ResourceAuroraMysqlIamPtrOutput {
	return o
}

func (o ResourceAuroraMysqlIamPtrOutput) Elem() ResourceAuroraMysqlIamOutput {
	return o.ApplyT(func(v *ResourceAuroraMysqlIam) ResourceAuroraMysqlIam {
		if v != nil {
			return *v
		}
		var ret ResourceAuroraMysqlIam
		return ret
	}).(ResourceAuroraMysqlIamOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAuroraMysqlIamPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysqlIam) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceAuroraMysqlIamPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysqlIam) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAuroraMysqlIamPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysqlIam) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAuroraMysqlIamPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysqlIam) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAuroraMysqlIamPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysqlIam) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAuroraMysqlIamPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysqlIam) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAuroraMysqlIamPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysqlIam) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAuroraMysqlIamPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysqlIam) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAuroraMysqlIamPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysqlIam) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
func (o ResourceAuroraMysqlIamPtrOutput) RoleAssumptionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysqlIam) *string {
		if v == nil {
			return nil
		}
		return v.RoleAssumptionArn
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAuroraMysqlIamPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysqlIam) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAuroraMysqlIamPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysqlIam) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAuroraMysqlIamPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAuroraMysqlIam) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceAuroraMysqlIamPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraMysqlIam) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceAuroraPostgres struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceAuroraPostgresInput is an input type that accepts ResourceAuroraPostgresArgs and ResourceAuroraPostgresOutput values.
// You can construct a concrete instance of `ResourceAuroraPostgresInput` via:
//
//	ResourceAuroraPostgresArgs{...}
type ResourceAuroraPostgresInput interface {
	pulumi.Input

	ToResourceAuroraPostgresOutput() ResourceAuroraPostgresOutput
	ToResourceAuroraPostgresOutputWithContext(context.Context) ResourceAuroraPostgresOutput
}

type ResourceAuroraPostgresArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceAuroraPostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAuroraPostgres)(nil)).Elem()
}

func (i ResourceAuroraPostgresArgs) ToResourceAuroraPostgresOutput() ResourceAuroraPostgresOutput {
	return i.ToResourceAuroraPostgresOutputWithContext(context.Background())
}

func (i ResourceAuroraPostgresArgs) ToResourceAuroraPostgresOutputWithContext(ctx context.Context) ResourceAuroraPostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAuroraPostgresOutput)
}

func (i ResourceAuroraPostgresArgs) ToResourceAuroraPostgresPtrOutput() ResourceAuroraPostgresPtrOutput {
	return i.ToResourceAuroraPostgresPtrOutputWithContext(context.Background())
}

func (i ResourceAuroraPostgresArgs) ToResourceAuroraPostgresPtrOutputWithContext(ctx context.Context) ResourceAuroraPostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAuroraPostgresOutput).ToResourceAuroraPostgresPtrOutputWithContext(ctx)
}

// ResourceAuroraPostgresPtrInput is an input type that accepts ResourceAuroraPostgresArgs, ResourceAuroraPostgresPtr and ResourceAuroraPostgresPtrOutput values.
// You can construct a concrete instance of `ResourceAuroraPostgresPtrInput` via:
//
//	        ResourceAuroraPostgresArgs{...}
//
//	or:
//
//	        nil
type ResourceAuroraPostgresPtrInput interface {
	pulumi.Input

	ToResourceAuroraPostgresPtrOutput() ResourceAuroraPostgresPtrOutput
	ToResourceAuroraPostgresPtrOutputWithContext(context.Context) ResourceAuroraPostgresPtrOutput
}

type resourceAuroraPostgresPtrType ResourceAuroraPostgresArgs

func ResourceAuroraPostgresPtr(v *ResourceAuroraPostgresArgs) ResourceAuroraPostgresPtrInput {
	return (*resourceAuroraPostgresPtrType)(v)
}

func (*resourceAuroraPostgresPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAuroraPostgres)(nil)).Elem()
}

func (i *resourceAuroraPostgresPtrType) ToResourceAuroraPostgresPtrOutput() ResourceAuroraPostgresPtrOutput {
	return i.ToResourceAuroraPostgresPtrOutputWithContext(context.Background())
}

func (i *resourceAuroraPostgresPtrType) ToResourceAuroraPostgresPtrOutputWithContext(ctx context.Context) ResourceAuroraPostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAuroraPostgresPtrOutput)
}

type ResourceAuroraPostgresOutput struct{ *pulumi.OutputState }

func (ResourceAuroraPostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAuroraPostgres)(nil)).Elem()
}

func (o ResourceAuroraPostgresOutput) ToResourceAuroraPostgresOutput() ResourceAuroraPostgresOutput {
	return o
}

func (o ResourceAuroraPostgresOutput) ToResourceAuroraPostgresOutputWithContext(ctx context.Context) ResourceAuroraPostgresOutput {
	return o
}

func (o ResourceAuroraPostgresOutput) ToResourceAuroraPostgresPtrOutput() ResourceAuroraPostgresPtrOutput {
	return o.ToResourceAuroraPostgresPtrOutputWithContext(context.Background())
}

func (o ResourceAuroraPostgresOutput) ToResourceAuroraPostgresPtrOutputWithContext(ctx context.Context) ResourceAuroraPostgresPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAuroraPostgres) *ResourceAuroraPostgres {
		return &v
	}).(ResourceAuroraPostgresPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAuroraPostgresOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgres) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceAuroraPostgresOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAuroraPostgres) string { return v.Database }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAuroraPostgresOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgres) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAuroraPostgresOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAuroraPostgres) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAuroraPostgresOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAuroraPostgres) string { return v.Name }).(pulumi.StringOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceAuroraPostgresOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgres) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceAuroraPostgresOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgres) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAuroraPostgresOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgres) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAuroraPostgresOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgres) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAuroraPostgresOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgres) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAuroraPostgresOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgres) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAuroraPostgresOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgres) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAuroraPostgresOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAuroraPostgres) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceAuroraPostgresOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgres) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceAuroraPostgresPtrOutput struct{ *pulumi.OutputState }

func (ResourceAuroraPostgresPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAuroraPostgres)(nil)).Elem()
}

func (o ResourceAuroraPostgresPtrOutput) ToResourceAuroraPostgresPtrOutput() ResourceAuroraPostgresPtrOutput {
	return o
}

func (o ResourceAuroraPostgresPtrOutput) ToResourceAuroraPostgresPtrOutputWithContext(ctx context.Context) ResourceAuroraPostgresPtrOutput {
	return o
}

func (o ResourceAuroraPostgresPtrOutput) Elem() ResourceAuroraPostgresOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgres) ResourceAuroraPostgres {
		if v != nil {
			return *v
		}
		var ret ResourceAuroraPostgres
		return ret
	}).(ResourceAuroraPostgresOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAuroraPostgresPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgres) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceAuroraPostgresPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAuroraPostgresPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgres) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAuroraPostgresPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAuroraPostgresPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceAuroraPostgresPtrOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgres) *bool {
		if v == nil {
			return nil
		}
		return v.OverrideDatabase
	}).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceAuroraPostgresPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgres) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAuroraPostgresPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgres) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAuroraPostgresPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgres) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAuroraPostgresPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgres) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAuroraPostgresPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgres) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAuroraPostgresPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgres) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAuroraPostgresPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgres) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceAuroraPostgresPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgres) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceAuroraPostgresIam struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region string `pulumi:"region"`
	// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
	RoleAssumptionArn *string `pulumi:"roleAssumptionArn"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceAuroraPostgresIamInput is an input type that accepts ResourceAuroraPostgresIamArgs and ResourceAuroraPostgresIamOutput values.
// You can construct a concrete instance of `ResourceAuroraPostgresIamInput` via:
//
//	ResourceAuroraPostgresIamArgs{...}
type ResourceAuroraPostgresIamInput interface {
	pulumi.Input

	ToResourceAuroraPostgresIamOutput() ResourceAuroraPostgresIamOutput
	ToResourceAuroraPostgresIamOutputWithContext(context.Context) ResourceAuroraPostgresIamOutput
}

type ResourceAuroraPostgresIamArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringInput `pulumi:"region"`
	// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
	RoleAssumptionArn pulumi.StringPtrInput `pulumi:"roleAssumptionArn"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceAuroraPostgresIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAuroraPostgresIam)(nil)).Elem()
}

func (i ResourceAuroraPostgresIamArgs) ToResourceAuroraPostgresIamOutput() ResourceAuroraPostgresIamOutput {
	return i.ToResourceAuroraPostgresIamOutputWithContext(context.Background())
}

func (i ResourceAuroraPostgresIamArgs) ToResourceAuroraPostgresIamOutputWithContext(ctx context.Context) ResourceAuroraPostgresIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAuroraPostgresIamOutput)
}

func (i ResourceAuroraPostgresIamArgs) ToResourceAuroraPostgresIamPtrOutput() ResourceAuroraPostgresIamPtrOutput {
	return i.ToResourceAuroraPostgresIamPtrOutputWithContext(context.Background())
}

func (i ResourceAuroraPostgresIamArgs) ToResourceAuroraPostgresIamPtrOutputWithContext(ctx context.Context) ResourceAuroraPostgresIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAuroraPostgresIamOutput).ToResourceAuroraPostgresIamPtrOutputWithContext(ctx)
}

// ResourceAuroraPostgresIamPtrInput is an input type that accepts ResourceAuroraPostgresIamArgs, ResourceAuroraPostgresIamPtr and ResourceAuroraPostgresIamPtrOutput values.
// You can construct a concrete instance of `ResourceAuroraPostgresIamPtrInput` via:
//
//	        ResourceAuroraPostgresIamArgs{...}
//
//	or:
//
//	        nil
type ResourceAuroraPostgresIamPtrInput interface {
	pulumi.Input

	ToResourceAuroraPostgresIamPtrOutput() ResourceAuroraPostgresIamPtrOutput
	ToResourceAuroraPostgresIamPtrOutputWithContext(context.Context) ResourceAuroraPostgresIamPtrOutput
}

type resourceAuroraPostgresIamPtrType ResourceAuroraPostgresIamArgs

func ResourceAuroraPostgresIamPtr(v *ResourceAuroraPostgresIamArgs) ResourceAuroraPostgresIamPtrInput {
	return (*resourceAuroraPostgresIamPtrType)(v)
}

func (*resourceAuroraPostgresIamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAuroraPostgresIam)(nil)).Elem()
}

func (i *resourceAuroraPostgresIamPtrType) ToResourceAuroraPostgresIamPtrOutput() ResourceAuroraPostgresIamPtrOutput {
	return i.ToResourceAuroraPostgresIamPtrOutputWithContext(context.Background())
}

func (i *resourceAuroraPostgresIamPtrType) ToResourceAuroraPostgresIamPtrOutputWithContext(ctx context.Context) ResourceAuroraPostgresIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAuroraPostgresIamPtrOutput)
}

type ResourceAuroraPostgresIamOutput struct{ *pulumi.OutputState }

func (ResourceAuroraPostgresIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAuroraPostgresIam)(nil)).Elem()
}

func (o ResourceAuroraPostgresIamOutput) ToResourceAuroraPostgresIamOutput() ResourceAuroraPostgresIamOutput {
	return o
}

func (o ResourceAuroraPostgresIamOutput) ToResourceAuroraPostgresIamOutputWithContext(ctx context.Context) ResourceAuroraPostgresIamOutput {
	return o
}

func (o ResourceAuroraPostgresIamOutput) ToResourceAuroraPostgresIamPtrOutput() ResourceAuroraPostgresIamPtrOutput {
	return o.ToResourceAuroraPostgresIamPtrOutputWithContext(context.Background())
}

func (o ResourceAuroraPostgresIamOutput) ToResourceAuroraPostgresIamPtrOutputWithContext(ctx context.Context) ResourceAuroraPostgresIamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAuroraPostgresIam) *ResourceAuroraPostgresIam {
		return &v
	}).(ResourceAuroraPostgresIamPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAuroraPostgresIamOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgresIam) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceAuroraPostgresIamOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAuroraPostgresIam) string { return v.Database }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAuroraPostgresIamOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgresIam) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAuroraPostgresIamOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAuroraPostgresIam) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAuroraPostgresIamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAuroraPostgresIam) string { return v.Name }).(pulumi.StringOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceAuroraPostgresIamOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgresIam) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAuroraPostgresIamOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgresIam) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAuroraPostgresIamOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgresIam) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAuroraPostgresIamOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgresIam) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAuroraPostgresIamOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAuroraPostgresIam) string { return v.Region }).(pulumi.StringOutput)
}

// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
func (o ResourceAuroraPostgresIamOutput) RoleAssumptionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgresIam) *string { return v.RoleAssumptionArn }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAuroraPostgresIamOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgresIam) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAuroraPostgresIamOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgresIam) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAuroraPostgresIamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAuroraPostgresIam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceAuroraPostgresIamOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAuroraPostgresIam) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceAuroraPostgresIamPtrOutput struct{ *pulumi.OutputState }

func (ResourceAuroraPostgresIamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAuroraPostgresIam)(nil)).Elem()
}

func (o ResourceAuroraPostgresIamPtrOutput) ToResourceAuroraPostgresIamPtrOutput() ResourceAuroraPostgresIamPtrOutput {
	return o
}

func (o ResourceAuroraPostgresIamPtrOutput) ToResourceAuroraPostgresIamPtrOutputWithContext(ctx context.Context) ResourceAuroraPostgresIamPtrOutput {
	return o
}

func (o ResourceAuroraPostgresIamPtrOutput) Elem() ResourceAuroraPostgresIamOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgresIam) ResourceAuroraPostgresIam {
		if v != nil {
			return *v
		}
		var ret ResourceAuroraPostgresIam
		return ret
	}).(ResourceAuroraPostgresIamOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAuroraPostgresIamPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgresIam) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceAuroraPostgresIamPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgresIam) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAuroraPostgresIamPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgresIam) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAuroraPostgresIamPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgresIam) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAuroraPostgresIamPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgresIam) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceAuroraPostgresIamPtrOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgresIam) *bool {
		if v == nil {
			return nil
		}
		return v.OverrideDatabase
	}).(pulumi.BoolPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAuroraPostgresIamPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgresIam) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAuroraPostgresIamPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgresIam) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAuroraPostgresIamPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgresIam) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAuroraPostgresIamPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgresIam) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
func (o ResourceAuroraPostgresIamPtrOutput) RoleAssumptionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgresIam) *string {
		if v == nil {
			return nil
		}
		return v.RoleAssumptionArn
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAuroraPostgresIamPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgresIam) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAuroraPostgresIamPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgresIam) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAuroraPostgresIamPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgresIam) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceAuroraPostgresIamPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAuroraPostgresIam) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceAws struct {
	// The Access Key ID to use to authenticate.
	AccessKey *string `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The AWS region healthcheck requests should attempt to connect to.
	HealthcheckRegion string `pulumi:"healthcheckRegion"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceAwsInput is an input type that accepts ResourceAwsArgs and ResourceAwsOutput values.
// You can construct a concrete instance of `ResourceAwsInput` via:
//
//	ResourceAwsArgs{...}
type ResourceAwsInput interface {
	pulumi.Input

	ToResourceAwsOutput() ResourceAwsOutput
	ToResourceAwsOutputWithContext(context.Context) ResourceAwsOutput
}

type ResourceAwsArgs struct {
	// The Access Key ID to use to authenticate.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The AWS region healthcheck requests should attempt to connect to.
	HealthcheckRegion pulumi.StringInput `pulumi:"healthcheckRegion"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceAwsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAws)(nil)).Elem()
}

func (i ResourceAwsArgs) ToResourceAwsOutput() ResourceAwsOutput {
	return i.ToResourceAwsOutputWithContext(context.Background())
}

func (i ResourceAwsArgs) ToResourceAwsOutputWithContext(ctx context.Context) ResourceAwsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAwsOutput)
}

func (i ResourceAwsArgs) ToResourceAwsPtrOutput() ResourceAwsPtrOutput {
	return i.ToResourceAwsPtrOutputWithContext(context.Background())
}

func (i ResourceAwsArgs) ToResourceAwsPtrOutputWithContext(ctx context.Context) ResourceAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAwsOutput).ToResourceAwsPtrOutputWithContext(ctx)
}

// ResourceAwsPtrInput is an input type that accepts ResourceAwsArgs, ResourceAwsPtr and ResourceAwsPtrOutput values.
// You can construct a concrete instance of `ResourceAwsPtrInput` via:
//
//	        ResourceAwsArgs{...}
//
//	or:
//
//	        nil
type ResourceAwsPtrInput interface {
	pulumi.Input

	ToResourceAwsPtrOutput() ResourceAwsPtrOutput
	ToResourceAwsPtrOutputWithContext(context.Context) ResourceAwsPtrOutput
}

type resourceAwsPtrType ResourceAwsArgs

func ResourceAwsPtr(v *ResourceAwsArgs) ResourceAwsPtrInput {
	return (*resourceAwsPtrType)(v)
}

func (*resourceAwsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAws)(nil)).Elem()
}

func (i *resourceAwsPtrType) ToResourceAwsPtrOutput() ResourceAwsPtrOutput {
	return i.ToResourceAwsPtrOutputWithContext(context.Background())
}

func (i *resourceAwsPtrType) ToResourceAwsPtrOutputWithContext(ctx context.Context) ResourceAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAwsPtrOutput)
}

type ResourceAwsOutput struct{ *pulumi.OutputState }

func (ResourceAwsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAws)(nil)).Elem()
}

func (o ResourceAwsOutput) ToResourceAwsOutput() ResourceAwsOutput {
	return o
}

func (o ResourceAwsOutput) ToResourceAwsOutputWithContext(ctx context.Context) ResourceAwsOutput {
	return o
}

func (o ResourceAwsOutput) ToResourceAwsPtrOutput() ResourceAwsPtrOutput {
	return o.ToResourceAwsPtrOutputWithContext(context.Background())
}

func (o ResourceAwsOutput) ToResourceAwsPtrOutputWithContext(ctx context.Context) ResourceAwsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAws) *ResourceAws {
		return &v
	}).(ResourceAwsPtrOutput)
}

// The Access Key ID to use to authenticate.
func (o ResourceAwsOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAws) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAwsOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAws) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAwsOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAws) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The AWS region healthcheck requests should attempt to connect to.
func (o ResourceAwsOutput) HealthcheckRegion() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAws) string { return v.HealthcheckRegion }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAwsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAws) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAwsOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAws) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAwsOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAws) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o ResourceAwsOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAws) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAwsOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAws) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o ResourceAwsOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAws) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAwsOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAws) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAwsOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAws) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAwsOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAws) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceAwsPtrOutput struct{ *pulumi.OutputState }

func (ResourceAwsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAws)(nil)).Elem()
}

func (o ResourceAwsPtrOutput) ToResourceAwsPtrOutput() ResourceAwsPtrOutput {
	return o
}

func (o ResourceAwsPtrOutput) ToResourceAwsPtrOutputWithContext(ctx context.Context) ResourceAwsPtrOutput {
	return o
}

func (o ResourceAwsPtrOutput) Elem() ResourceAwsOutput {
	return o.ApplyT(func(v *ResourceAws) ResourceAws {
		if v != nil {
			return *v
		}
		var ret ResourceAws
		return ret
	}).(ResourceAwsOutput)
}

// The Access Key ID to use to authenticate.
func (o ResourceAwsPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAws) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAwsPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAws) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAwsPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAws) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The AWS region healthcheck requests should attempt to connect to.
func (o ResourceAwsPtrOutput) HealthcheckRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAws) *string {
		if v == nil {
			return nil
		}
		return &v.HealthcheckRegion
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAwsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAws) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAwsPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAws) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAwsPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAws) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o ResourceAwsPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAws) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAwsPtrOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAws) *string {
		if v == nil {
			return nil
		}
		return v.RoleExternalId
	}).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o ResourceAwsPtrOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAws) *string {
		if v == nil {
			return nil
		}
		return v.SecretAccessKey
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAwsPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAws) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAwsPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAws) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAwsPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAws) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceAwsConsole struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// If true, prefer environment variables to authenticate connection even if EC2 roles are configured.
	EnableEnvVariables *bool `pulumi:"enableEnvVariables"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// The length of time in seconds console sessions will live before needing to reauthenticate.
	SessionExpiry *int `pulumi:"sessionExpiry"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceAwsConsoleInput is an input type that accepts ResourceAwsConsoleArgs and ResourceAwsConsoleOutput values.
// You can construct a concrete instance of `ResourceAwsConsoleInput` via:
//
//	ResourceAwsConsoleArgs{...}
type ResourceAwsConsoleInput interface {
	pulumi.Input

	ToResourceAwsConsoleOutput() ResourceAwsConsoleOutput
	ToResourceAwsConsoleOutputWithContext(context.Context) ResourceAwsConsoleOutput
}

type ResourceAwsConsoleArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// If true, prefer environment variables to authenticate connection even if EC2 roles are configured.
	EnableEnvVariables pulumi.BoolPtrInput `pulumi:"enableEnvVariables"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// The length of time in seconds console sessions will live before needing to reauthenticate.
	SessionExpiry pulumi.IntPtrInput `pulumi:"sessionExpiry"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceAwsConsoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAwsConsole)(nil)).Elem()
}

func (i ResourceAwsConsoleArgs) ToResourceAwsConsoleOutput() ResourceAwsConsoleOutput {
	return i.ToResourceAwsConsoleOutputWithContext(context.Background())
}

func (i ResourceAwsConsoleArgs) ToResourceAwsConsoleOutputWithContext(ctx context.Context) ResourceAwsConsoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAwsConsoleOutput)
}

func (i ResourceAwsConsoleArgs) ToResourceAwsConsolePtrOutput() ResourceAwsConsolePtrOutput {
	return i.ToResourceAwsConsolePtrOutputWithContext(context.Background())
}

func (i ResourceAwsConsoleArgs) ToResourceAwsConsolePtrOutputWithContext(ctx context.Context) ResourceAwsConsolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAwsConsoleOutput).ToResourceAwsConsolePtrOutputWithContext(ctx)
}

// ResourceAwsConsolePtrInput is an input type that accepts ResourceAwsConsoleArgs, ResourceAwsConsolePtr and ResourceAwsConsolePtrOutput values.
// You can construct a concrete instance of `ResourceAwsConsolePtrInput` via:
//
//	        ResourceAwsConsoleArgs{...}
//
//	or:
//
//	        nil
type ResourceAwsConsolePtrInput interface {
	pulumi.Input

	ToResourceAwsConsolePtrOutput() ResourceAwsConsolePtrOutput
	ToResourceAwsConsolePtrOutputWithContext(context.Context) ResourceAwsConsolePtrOutput
}

type resourceAwsConsolePtrType ResourceAwsConsoleArgs

func ResourceAwsConsolePtr(v *ResourceAwsConsoleArgs) ResourceAwsConsolePtrInput {
	return (*resourceAwsConsolePtrType)(v)
}

func (*resourceAwsConsolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAwsConsole)(nil)).Elem()
}

func (i *resourceAwsConsolePtrType) ToResourceAwsConsolePtrOutput() ResourceAwsConsolePtrOutput {
	return i.ToResourceAwsConsolePtrOutputWithContext(context.Background())
}

func (i *resourceAwsConsolePtrType) ToResourceAwsConsolePtrOutputWithContext(ctx context.Context) ResourceAwsConsolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAwsConsolePtrOutput)
}

type ResourceAwsConsoleOutput struct{ *pulumi.OutputState }

func (ResourceAwsConsoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAwsConsole)(nil)).Elem()
}

func (o ResourceAwsConsoleOutput) ToResourceAwsConsoleOutput() ResourceAwsConsoleOutput {
	return o
}

func (o ResourceAwsConsoleOutput) ToResourceAwsConsoleOutputWithContext(ctx context.Context) ResourceAwsConsoleOutput {
	return o
}

func (o ResourceAwsConsoleOutput) ToResourceAwsConsolePtrOutput() ResourceAwsConsolePtrOutput {
	return o.ToResourceAwsConsolePtrOutputWithContext(context.Background())
}

func (o ResourceAwsConsoleOutput) ToResourceAwsConsolePtrOutputWithContext(ctx context.Context) ResourceAwsConsolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAwsConsole) *ResourceAwsConsole {
		return &v
	}).(ResourceAwsConsolePtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAwsConsoleOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsole) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAwsConsoleOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsole) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// If true, prefer environment variables to authenticate connection even if EC2 roles are configured.
func (o ResourceAwsConsoleOutput) EnableEnvVariables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsole) *bool { return v.EnableEnvVariables }).(pulumi.BoolPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceAwsConsoleOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsole) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceAwsConsoleOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsole) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAwsConsoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAwsConsole) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAwsConsoleOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsole) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAwsConsoleOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsole) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAwsConsoleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAwsConsole) string { return v.Region }).(pulumi.StringOutput)
}

// The role to assume after logging in.
func (o ResourceAwsConsoleOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsole) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAwsConsoleOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsole) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAwsConsoleOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsole) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// The length of time in seconds console sessions will live before needing to reauthenticate.
func (o ResourceAwsConsoleOutput) SessionExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsole) *int { return v.SessionExpiry }).(pulumi.IntPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAwsConsoleOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAwsConsole) string { return v.Subdomain }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAwsConsoleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAwsConsole) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceAwsConsolePtrOutput struct{ *pulumi.OutputState }

func (ResourceAwsConsolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAwsConsole)(nil)).Elem()
}

func (o ResourceAwsConsolePtrOutput) ToResourceAwsConsolePtrOutput() ResourceAwsConsolePtrOutput {
	return o
}

func (o ResourceAwsConsolePtrOutput) ToResourceAwsConsolePtrOutputWithContext(ctx context.Context) ResourceAwsConsolePtrOutput {
	return o
}

func (o ResourceAwsConsolePtrOutput) Elem() ResourceAwsConsoleOutput {
	return o.ApplyT(func(v *ResourceAwsConsole) ResourceAwsConsole {
		if v != nil {
			return *v
		}
		var ret ResourceAwsConsole
		return ret
	}).(ResourceAwsConsoleOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAwsConsolePtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsole) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAwsConsolePtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsole) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// If true, prefer environment variables to authenticate connection even if EC2 roles are configured.
func (o ResourceAwsConsolePtrOutput) EnableEnvVariables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsole) *bool {
		if v == nil {
			return nil
		}
		return v.EnableEnvVariables
	}).(pulumi.BoolPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceAwsConsolePtrOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsole) *string {
		if v == nil {
			return nil
		}
		return v.IdentityAliasHealthcheckUsername
	}).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceAwsConsolePtrOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsole) *string {
		if v == nil {
			return nil
		}
		return v.IdentitySetId
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAwsConsolePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsole) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAwsConsolePtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsole) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAwsConsolePtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsole) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAwsConsolePtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsole) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o ResourceAwsConsolePtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsole) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAwsConsolePtrOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsole) *string {
		if v == nil {
			return nil
		}
		return v.RoleExternalId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAwsConsolePtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsole) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// The length of time in seconds console sessions will live before needing to reauthenticate.
func (o ResourceAwsConsolePtrOutput) SessionExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsole) *int {
		if v == nil {
			return nil
		}
		return v.SessionExpiry
	}).(pulumi.IntPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAwsConsolePtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsole) *string {
		if v == nil {
			return nil
		}
		return &v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAwsConsolePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAwsConsole) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceAwsConsoleStaticKeyPair struct {
	// The Access Key ID to use to authenticate.
	AccessKey *string `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// The length of time in seconds console sessions will live before needing to reauthenticate.
	SessionExpiry *int `pulumi:"sessionExpiry"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceAwsConsoleStaticKeyPairInput is an input type that accepts ResourceAwsConsoleStaticKeyPairArgs and ResourceAwsConsoleStaticKeyPairOutput values.
// You can construct a concrete instance of `ResourceAwsConsoleStaticKeyPairInput` via:
//
//	ResourceAwsConsoleStaticKeyPairArgs{...}
type ResourceAwsConsoleStaticKeyPairInput interface {
	pulumi.Input

	ToResourceAwsConsoleStaticKeyPairOutput() ResourceAwsConsoleStaticKeyPairOutput
	ToResourceAwsConsoleStaticKeyPairOutputWithContext(context.Context) ResourceAwsConsoleStaticKeyPairOutput
}

type ResourceAwsConsoleStaticKeyPairArgs struct {
	// The Access Key ID to use to authenticate.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// The length of time in seconds console sessions will live before needing to reauthenticate.
	SessionExpiry pulumi.IntPtrInput `pulumi:"sessionExpiry"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceAwsConsoleStaticKeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAwsConsoleStaticKeyPair)(nil)).Elem()
}

func (i ResourceAwsConsoleStaticKeyPairArgs) ToResourceAwsConsoleStaticKeyPairOutput() ResourceAwsConsoleStaticKeyPairOutput {
	return i.ToResourceAwsConsoleStaticKeyPairOutputWithContext(context.Background())
}

func (i ResourceAwsConsoleStaticKeyPairArgs) ToResourceAwsConsoleStaticKeyPairOutputWithContext(ctx context.Context) ResourceAwsConsoleStaticKeyPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAwsConsoleStaticKeyPairOutput)
}

func (i ResourceAwsConsoleStaticKeyPairArgs) ToResourceAwsConsoleStaticKeyPairPtrOutput() ResourceAwsConsoleStaticKeyPairPtrOutput {
	return i.ToResourceAwsConsoleStaticKeyPairPtrOutputWithContext(context.Background())
}

func (i ResourceAwsConsoleStaticKeyPairArgs) ToResourceAwsConsoleStaticKeyPairPtrOutputWithContext(ctx context.Context) ResourceAwsConsoleStaticKeyPairPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAwsConsoleStaticKeyPairOutput).ToResourceAwsConsoleStaticKeyPairPtrOutputWithContext(ctx)
}

// ResourceAwsConsoleStaticKeyPairPtrInput is an input type that accepts ResourceAwsConsoleStaticKeyPairArgs, ResourceAwsConsoleStaticKeyPairPtr and ResourceAwsConsoleStaticKeyPairPtrOutput values.
// You can construct a concrete instance of `ResourceAwsConsoleStaticKeyPairPtrInput` via:
//
//	        ResourceAwsConsoleStaticKeyPairArgs{...}
//
//	or:
//
//	        nil
type ResourceAwsConsoleStaticKeyPairPtrInput interface {
	pulumi.Input

	ToResourceAwsConsoleStaticKeyPairPtrOutput() ResourceAwsConsoleStaticKeyPairPtrOutput
	ToResourceAwsConsoleStaticKeyPairPtrOutputWithContext(context.Context) ResourceAwsConsoleStaticKeyPairPtrOutput
}

type resourceAwsConsoleStaticKeyPairPtrType ResourceAwsConsoleStaticKeyPairArgs

func ResourceAwsConsoleStaticKeyPairPtr(v *ResourceAwsConsoleStaticKeyPairArgs) ResourceAwsConsoleStaticKeyPairPtrInput {
	return (*resourceAwsConsoleStaticKeyPairPtrType)(v)
}

func (*resourceAwsConsoleStaticKeyPairPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAwsConsoleStaticKeyPair)(nil)).Elem()
}

func (i *resourceAwsConsoleStaticKeyPairPtrType) ToResourceAwsConsoleStaticKeyPairPtrOutput() ResourceAwsConsoleStaticKeyPairPtrOutput {
	return i.ToResourceAwsConsoleStaticKeyPairPtrOutputWithContext(context.Background())
}

func (i *resourceAwsConsoleStaticKeyPairPtrType) ToResourceAwsConsoleStaticKeyPairPtrOutputWithContext(ctx context.Context) ResourceAwsConsoleStaticKeyPairPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAwsConsoleStaticKeyPairPtrOutput)
}

type ResourceAwsConsoleStaticKeyPairOutput struct{ *pulumi.OutputState }

func (ResourceAwsConsoleStaticKeyPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAwsConsoleStaticKeyPair)(nil)).Elem()
}

func (o ResourceAwsConsoleStaticKeyPairOutput) ToResourceAwsConsoleStaticKeyPairOutput() ResourceAwsConsoleStaticKeyPairOutput {
	return o
}

func (o ResourceAwsConsoleStaticKeyPairOutput) ToResourceAwsConsoleStaticKeyPairOutputWithContext(ctx context.Context) ResourceAwsConsoleStaticKeyPairOutput {
	return o
}

func (o ResourceAwsConsoleStaticKeyPairOutput) ToResourceAwsConsoleStaticKeyPairPtrOutput() ResourceAwsConsoleStaticKeyPairPtrOutput {
	return o.ToResourceAwsConsoleStaticKeyPairPtrOutputWithContext(context.Background())
}

func (o ResourceAwsConsoleStaticKeyPairOutput) ToResourceAwsConsoleStaticKeyPairPtrOutputWithContext(ctx context.Context) ResourceAwsConsoleStaticKeyPairPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAwsConsoleStaticKeyPair) *ResourceAwsConsoleStaticKeyPair {
		return &v
	}).(ResourceAwsConsoleStaticKeyPairPtrOutput)
}

// The Access Key ID to use to authenticate.
func (o ResourceAwsConsoleStaticKeyPairOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsoleStaticKeyPair) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAwsConsoleStaticKeyPairOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsoleStaticKeyPair) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAwsConsoleStaticKeyPairOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsoleStaticKeyPair) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceAwsConsoleStaticKeyPairOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsoleStaticKeyPair) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceAwsConsoleStaticKeyPairOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsoleStaticKeyPair) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAwsConsoleStaticKeyPairOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAwsConsoleStaticKeyPair) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAwsConsoleStaticKeyPairOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsoleStaticKeyPair) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAwsConsoleStaticKeyPairOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsoleStaticKeyPair) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAwsConsoleStaticKeyPairOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAwsConsoleStaticKeyPair) string { return v.Region }).(pulumi.StringOutput)
}

// The role to assume after logging in.
func (o ResourceAwsConsoleStaticKeyPairOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsoleStaticKeyPair) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAwsConsoleStaticKeyPairOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsoleStaticKeyPair) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o ResourceAwsConsoleStaticKeyPairOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsoleStaticKeyPair) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAwsConsoleStaticKeyPairOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsoleStaticKeyPair) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// The length of time in seconds console sessions will live before needing to reauthenticate.
func (o ResourceAwsConsoleStaticKeyPairOutput) SessionExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAwsConsoleStaticKeyPair) *int { return v.SessionExpiry }).(pulumi.IntPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAwsConsoleStaticKeyPairOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAwsConsoleStaticKeyPair) string { return v.Subdomain }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAwsConsoleStaticKeyPairOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAwsConsoleStaticKeyPair) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceAwsConsoleStaticKeyPairPtrOutput struct{ *pulumi.OutputState }

func (ResourceAwsConsoleStaticKeyPairPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAwsConsoleStaticKeyPair)(nil)).Elem()
}

func (o ResourceAwsConsoleStaticKeyPairPtrOutput) ToResourceAwsConsoleStaticKeyPairPtrOutput() ResourceAwsConsoleStaticKeyPairPtrOutput {
	return o
}

func (o ResourceAwsConsoleStaticKeyPairPtrOutput) ToResourceAwsConsoleStaticKeyPairPtrOutputWithContext(ctx context.Context) ResourceAwsConsoleStaticKeyPairPtrOutput {
	return o
}

func (o ResourceAwsConsoleStaticKeyPairPtrOutput) Elem() ResourceAwsConsoleStaticKeyPairOutput {
	return o.ApplyT(func(v *ResourceAwsConsoleStaticKeyPair) ResourceAwsConsoleStaticKeyPair {
		if v != nil {
			return *v
		}
		var ret ResourceAwsConsoleStaticKeyPair
		return ret
	}).(ResourceAwsConsoleStaticKeyPairOutput)
}

// The Access Key ID to use to authenticate.
func (o ResourceAwsConsoleStaticKeyPairPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsoleStaticKeyPair) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAwsConsoleStaticKeyPairPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsoleStaticKeyPair) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAwsConsoleStaticKeyPairPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsoleStaticKeyPair) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceAwsConsoleStaticKeyPairPtrOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsoleStaticKeyPair) *string {
		if v == nil {
			return nil
		}
		return v.IdentityAliasHealthcheckUsername
	}).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceAwsConsoleStaticKeyPairPtrOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsoleStaticKeyPair) *string {
		if v == nil {
			return nil
		}
		return v.IdentitySetId
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAwsConsoleStaticKeyPairPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsoleStaticKeyPair) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAwsConsoleStaticKeyPairPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsoleStaticKeyPair) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAwsConsoleStaticKeyPairPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsoleStaticKeyPair) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAwsConsoleStaticKeyPairPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsoleStaticKeyPair) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o ResourceAwsConsoleStaticKeyPairPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsoleStaticKeyPair) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAwsConsoleStaticKeyPairPtrOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsoleStaticKeyPair) *string {
		if v == nil {
			return nil
		}
		return v.RoleExternalId
	}).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o ResourceAwsConsoleStaticKeyPairPtrOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsoleStaticKeyPair) *string {
		if v == nil {
			return nil
		}
		return v.SecretAccessKey
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAwsConsoleStaticKeyPairPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsoleStaticKeyPair) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// The length of time in seconds console sessions will live before needing to reauthenticate.
func (o ResourceAwsConsoleStaticKeyPairPtrOutput) SessionExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsoleStaticKeyPair) *int {
		if v == nil {
			return nil
		}
		return v.SessionExpiry
	}).(pulumi.IntPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAwsConsoleStaticKeyPairPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsConsoleStaticKeyPair) *string {
		if v == nil {
			return nil
		}
		return &v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAwsConsoleStaticKeyPairPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAwsConsoleStaticKeyPair) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceAwsInstanceProfile struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// If true, prefer environment variables to authenticate connection even if EC2 roles are configured.
	EnableEnvVariables *bool `pulumi:"enableEnvVariables"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceAwsInstanceProfileInput is an input type that accepts ResourceAwsInstanceProfileArgs and ResourceAwsInstanceProfileOutput values.
// You can construct a concrete instance of `ResourceAwsInstanceProfileInput` via:
//
//	ResourceAwsInstanceProfileArgs{...}
type ResourceAwsInstanceProfileInput interface {
	pulumi.Input

	ToResourceAwsInstanceProfileOutput() ResourceAwsInstanceProfileOutput
	ToResourceAwsInstanceProfileOutputWithContext(context.Context) ResourceAwsInstanceProfileOutput
}

type ResourceAwsInstanceProfileArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// If true, prefer environment variables to authenticate connection even if EC2 roles are configured.
	EnableEnvVariables pulumi.BoolPtrInput `pulumi:"enableEnvVariables"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceAwsInstanceProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAwsInstanceProfile)(nil)).Elem()
}

func (i ResourceAwsInstanceProfileArgs) ToResourceAwsInstanceProfileOutput() ResourceAwsInstanceProfileOutput {
	return i.ToResourceAwsInstanceProfileOutputWithContext(context.Background())
}

func (i ResourceAwsInstanceProfileArgs) ToResourceAwsInstanceProfileOutputWithContext(ctx context.Context) ResourceAwsInstanceProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAwsInstanceProfileOutput)
}

func (i ResourceAwsInstanceProfileArgs) ToResourceAwsInstanceProfilePtrOutput() ResourceAwsInstanceProfilePtrOutput {
	return i.ToResourceAwsInstanceProfilePtrOutputWithContext(context.Background())
}

func (i ResourceAwsInstanceProfileArgs) ToResourceAwsInstanceProfilePtrOutputWithContext(ctx context.Context) ResourceAwsInstanceProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAwsInstanceProfileOutput).ToResourceAwsInstanceProfilePtrOutputWithContext(ctx)
}

// ResourceAwsInstanceProfilePtrInput is an input type that accepts ResourceAwsInstanceProfileArgs, ResourceAwsInstanceProfilePtr and ResourceAwsInstanceProfilePtrOutput values.
// You can construct a concrete instance of `ResourceAwsInstanceProfilePtrInput` via:
//
//	        ResourceAwsInstanceProfileArgs{...}
//
//	or:
//
//	        nil
type ResourceAwsInstanceProfilePtrInput interface {
	pulumi.Input

	ToResourceAwsInstanceProfilePtrOutput() ResourceAwsInstanceProfilePtrOutput
	ToResourceAwsInstanceProfilePtrOutputWithContext(context.Context) ResourceAwsInstanceProfilePtrOutput
}

type resourceAwsInstanceProfilePtrType ResourceAwsInstanceProfileArgs

func ResourceAwsInstanceProfilePtr(v *ResourceAwsInstanceProfileArgs) ResourceAwsInstanceProfilePtrInput {
	return (*resourceAwsInstanceProfilePtrType)(v)
}

func (*resourceAwsInstanceProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAwsInstanceProfile)(nil)).Elem()
}

func (i *resourceAwsInstanceProfilePtrType) ToResourceAwsInstanceProfilePtrOutput() ResourceAwsInstanceProfilePtrOutput {
	return i.ToResourceAwsInstanceProfilePtrOutputWithContext(context.Background())
}

func (i *resourceAwsInstanceProfilePtrType) ToResourceAwsInstanceProfilePtrOutputWithContext(ctx context.Context) ResourceAwsInstanceProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAwsInstanceProfilePtrOutput)
}

type ResourceAwsInstanceProfileOutput struct{ *pulumi.OutputState }

func (ResourceAwsInstanceProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAwsInstanceProfile)(nil)).Elem()
}

func (o ResourceAwsInstanceProfileOutput) ToResourceAwsInstanceProfileOutput() ResourceAwsInstanceProfileOutput {
	return o
}

func (o ResourceAwsInstanceProfileOutput) ToResourceAwsInstanceProfileOutputWithContext(ctx context.Context) ResourceAwsInstanceProfileOutput {
	return o
}

func (o ResourceAwsInstanceProfileOutput) ToResourceAwsInstanceProfilePtrOutput() ResourceAwsInstanceProfilePtrOutput {
	return o.ToResourceAwsInstanceProfilePtrOutputWithContext(context.Background())
}

func (o ResourceAwsInstanceProfileOutput) ToResourceAwsInstanceProfilePtrOutputWithContext(ctx context.Context) ResourceAwsInstanceProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAwsInstanceProfile) *ResourceAwsInstanceProfile {
		return &v
	}).(ResourceAwsInstanceProfilePtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAwsInstanceProfileOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsInstanceProfile) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAwsInstanceProfileOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsInstanceProfile) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// If true, prefer environment variables to authenticate connection even if EC2 roles are configured.
func (o ResourceAwsInstanceProfileOutput) EnableEnvVariables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAwsInstanceProfile) *bool { return v.EnableEnvVariables }).(pulumi.BoolPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAwsInstanceProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAwsInstanceProfile) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAwsInstanceProfileOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAwsInstanceProfile) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAwsInstanceProfileOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsInstanceProfile) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAwsInstanceProfileOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAwsInstanceProfile) string { return v.Region }).(pulumi.StringOutput)
}

// The role to assume after logging in.
func (o ResourceAwsInstanceProfileOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsInstanceProfile) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAwsInstanceProfileOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsInstanceProfile) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAwsInstanceProfileOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsInstanceProfile) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAwsInstanceProfileOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAwsInstanceProfile) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAwsInstanceProfileOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAwsInstanceProfile) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceAwsInstanceProfilePtrOutput struct{ *pulumi.OutputState }

func (ResourceAwsInstanceProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAwsInstanceProfile)(nil)).Elem()
}

func (o ResourceAwsInstanceProfilePtrOutput) ToResourceAwsInstanceProfilePtrOutput() ResourceAwsInstanceProfilePtrOutput {
	return o
}

func (o ResourceAwsInstanceProfilePtrOutput) ToResourceAwsInstanceProfilePtrOutputWithContext(ctx context.Context) ResourceAwsInstanceProfilePtrOutput {
	return o
}

func (o ResourceAwsInstanceProfilePtrOutput) Elem() ResourceAwsInstanceProfileOutput {
	return o.ApplyT(func(v *ResourceAwsInstanceProfile) ResourceAwsInstanceProfile {
		if v != nil {
			return *v
		}
		var ret ResourceAwsInstanceProfile
		return ret
	}).(ResourceAwsInstanceProfileOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAwsInstanceProfilePtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAwsInstanceProfilePtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// If true, prefer environment variables to authenticate connection even if EC2 roles are configured.
func (o ResourceAwsInstanceProfilePtrOutput) EnableEnvVariables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAwsInstanceProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnableEnvVariables
	}).(pulumi.BoolPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAwsInstanceProfilePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAwsInstanceProfilePtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAwsInstanceProfile) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAwsInstanceProfilePtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceAwsInstanceProfilePtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o ResourceAwsInstanceProfilePtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceAwsInstanceProfilePtrOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.RoleExternalId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAwsInstanceProfilePtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAwsInstanceProfilePtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAwsInstanceProfile) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAwsInstanceProfilePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAwsInstanceProfile) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceAzure struct {
	// The application ID to authenticate with.
	AppId *string `pulumi:"appId"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The Azure AD directory (tenant) ID with which to authenticate.
	// * sql_server_kerberos_ad:
	TenantId *string `pulumi:"tenantId"`
}

// ResourceAzureInput is an input type that accepts ResourceAzureArgs and ResourceAzureOutput values.
// You can construct a concrete instance of `ResourceAzureInput` via:
//
//	ResourceAzureArgs{...}
type ResourceAzureInput interface {
	pulumi.Input

	ToResourceAzureOutput() ResourceAzureOutput
	ToResourceAzureOutputWithContext(context.Context) ResourceAzureOutput
}

type ResourceAzureArgs struct {
	// The application ID to authenticate with.
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The Azure AD directory (tenant) ID with which to authenticate.
	// * sql_server_kerberos_ad:
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (ResourceAzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAzure)(nil)).Elem()
}

func (i ResourceAzureArgs) ToResourceAzureOutput() ResourceAzureOutput {
	return i.ToResourceAzureOutputWithContext(context.Background())
}

func (i ResourceAzureArgs) ToResourceAzureOutputWithContext(ctx context.Context) ResourceAzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAzureOutput)
}

func (i ResourceAzureArgs) ToResourceAzurePtrOutput() ResourceAzurePtrOutput {
	return i.ToResourceAzurePtrOutputWithContext(context.Background())
}

func (i ResourceAzureArgs) ToResourceAzurePtrOutputWithContext(ctx context.Context) ResourceAzurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAzureOutput).ToResourceAzurePtrOutputWithContext(ctx)
}

// ResourceAzurePtrInput is an input type that accepts ResourceAzureArgs, ResourceAzurePtr and ResourceAzurePtrOutput values.
// You can construct a concrete instance of `ResourceAzurePtrInput` via:
//
//	        ResourceAzureArgs{...}
//
//	or:
//
//	        nil
type ResourceAzurePtrInput interface {
	pulumi.Input

	ToResourceAzurePtrOutput() ResourceAzurePtrOutput
	ToResourceAzurePtrOutputWithContext(context.Context) ResourceAzurePtrOutput
}

type resourceAzurePtrType ResourceAzureArgs

func ResourceAzurePtr(v *ResourceAzureArgs) ResourceAzurePtrInput {
	return (*resourceAzurePtrType)(v)
}

func (*resourceAzurePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAzure)(nil)).Elem()
}

func (i *resourceAzurePtrType) ToResourceAzurePtrOutput() ResourceAzurePtrOutput {
	return i.ToResourceAzurePtrOutputWithContext(context.Background())
}

func (i *resourceAzurePtrType) ToResourceAzurePtrOutputWithContext(ctx context.Context) ResourceAzurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAzurePtrOutput)
}

type ResourceAzureOutput struct{ *pulumi.OutputState }

func (ResourceAzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAzure)(nil)).Elem()
}

func (o ResourceAzureOutput) ToResourceAzureOutput() ResourceAzureOutput {
	return o
}

func (o ResourceAzureOutput) ToResourceAzureOutputWithContext(ctx context.Context) ResourceAzureOutput {
	return o
}

func (o ResourceAzureOutput) ToResourceAzurePtrOutput() ResourceAzurePtrOutput {
	return o.ToResourceAzurePtrOutputWithContext(context.Background())
}

func (o ResourceAzureOutput) ToResourceAzurePtrOutputWithContext(ctx context.Context) ResourceAzurePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAzure) *ResourceAzure {
		return &v
	}).(ResourceAzurePtrOutput)
}

// The application ID to authenticate with.
func (o ResourceAzureOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzure) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAzureOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzure) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAzureOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzure) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAzureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAzure) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceAzureOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzure) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAzureOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAzure) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAzureOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzure) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAzureOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzure) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAzureOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzure) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAzureOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAzure) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The Azure AD directory (tenant) ID with which to authenticate.
// * sql_server_kerberos_ad:
func (o ResourceAzureOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzure) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type ResourceAzurePtrOutput struct{ *pulumi.OutputState }

func (ResourceAzurePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAzure)(nil)).Elem()
}

func (o ResourceAzurePtrOutput) ToResourceAzurePtrOutput() ResourceAzurePtrOutput {
	return o
}

func (o ResourceAzurePtrOutput) ToResourceAzurePtrOutputWithContext(ctx context.Context) ResourceAzurePtrOutput {
	return o
}

func (o ResourceAzurePtrOutput) Elem() ResourceAzureOutput {
	return o.ApplyT(func(v *ResourceAzure) ResourceAzure {
		if v != nil {
			return *v
		}
		var ret ResourceAzure
		return ret
	}).(ResourceAzureOutput)
}

// The application ID to authenticate with.
func (o ResourceAzurePtrOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzure) *string {
		if v == nil {
			return nil
		}
		return v.AppId
	}).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAzurePtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzure) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAzurePtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzure) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAzurePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzure) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceAzurePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzure) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAzurePtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAzure) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAzurePtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzure) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAzurePtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzure) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAzurePtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzure) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAzurePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAzure) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The Azure AD directory (tenant) ID with which to authenticate.
// * sql_server_kerberos_ad:
func (o ResourceAzurePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzure) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

type ResourceAzureCertificate struct {
	// The application ID to authenticate with.
	AppId *string `pulumi:"appId"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The Azure AD directory (tenant) ID with which to authenticate.
	// * sql_server_kerberos_ad:
	TenantId *string `pulumi:"tenantId"`
}

// ResourceAzureCertificateInput is an input type that accepts ResourceAzureCertificateArgs and ResourceAzureCertificateOutput values.
// You can construct a concrete instance of `ResourceAzureCertificateInput` via:
//
//	ResourceAzureCertificateArgs{...}
type ResourceAzureCertificateInput interface {
	pulumi.Input

	ToResourceAzureCertificateOutput() ResourceAzureCertificateOutput
	ToResourceAzureCertificateOutputWithContext(context.Context) ResourceAzureCertificateOutput
}

type ResourceAzureCertificateArgs struct {
	// The application ID to authenticate with.
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The Azure AD directory (tenant) ID with which to authenticate.
	// * sql_server_kerberos_ad:
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (ResourceAzureCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAzureCertificate)(nil)).Elem()
}

func (i ResourceAzureCertificateArgs) ToResourceAzureCertificateOutput() ResourceAzureCertificateOutput {
	return i.ToResourceAzureCertificateOutputWithContext(context.Background())
}

func (i ResourceAzureCertificateArgs) ToResourceAzureCertificateOutputWithContext(ctx context.Context) ResourceAzureCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAzureCertificateOutput)
}

func (i ResourceAzureCertificateArgs) ToResourceAzureCertificatePtrOutput() ResourceAzureCertificatePtrOutput {
	return i.ToResourceAzureCertificatePtrOutputWithContext(context.Background())
}

func (i ResourceAzureCertificateArgs) ToResourceAzureCertificatePtrOutputWithContext(ctx context.Context) ResourceAzureCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAzureCertificateOutput).ToResourceAzureCertificatePtrOutputWithContext(ctx)
}

// ResourceAzureCertificatePtrInput is an input type that accepts ResourceAzureCertificateArgs, ResourceAzureCertificatePtr and ResourceAzureCertificatePtrOutput values.
// You can construct a concrete instance of `ResourceAzureCertificatePtrInput` via:
//
//	        ResourceAzureCertificateArgs{...}
//
//	or:
//
//	        nil
type ResourceAzureCertificatePtrInput interface {
	pulumi.Input

	ToResourceAzureCertificatePtrOutput() ResourceAzureCertificatePtrOutput
	ToResourceAzureCertificatePtrOutputWithContext(context.Context) ResourceAzureCertificatePtrOutput
}

type resourceAzureCertificatePtrType ResourceAzureCertificateArgs

func ResourceAzureCertificatePtr(v *ResourceAzureCertificateArgs) ResourceAzureCertificatePtrInput {
	return (*resourceAzureCertificatePtrType)(v)
}

func (*resourceAzureCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAzureCertificate)(nil)).Elem()
}

func (i *resourceAzureCertificatePtrType) ToResourceAzureCertificatePtrOutput() ResourceAzureCertificatePtrOutput {
	return i.ToResourceAzureCertificatePtrOutputWithContext(context.Background())
}

func (i *resourceAzureCertificatePtrType) ToResourceAzureCertificatePtrOutputWithContext(ctx context.Context) ResourceAzureCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAzureCertificatePtrOutput)
}

type ResourceAzureCertificateOutput struct{ *pulumi.OutputState }

func (ResourceAzureCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAzureCertificate)(nil)).Elem()
}

func (o ResourceAzureCertificateOutput) ToResourceAzureCertificateOutput() ResourceAzureCertificateOutput {
	return o
}

func (o ResourceAzureCertificateOutput) ToResourceAzureCertificateOutputWithContext(ctx context.Context) ResourceAzureCertificateOutput {
	return o
}

func (o ResourceAzureCertificateOutput) ToResourceAzureCertificatePtrOutput() ResourceAzureCertificatePtrOutput {
	return o.ToResourceAzureCertificatePtrOutputWithContext(context.Background())
}

func (o ResourceAzureCertificateOutput) ToResourceAzureCertificatePtrOutputWithContext(ctx context.Context) ResourceAzureCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAzureCertificate) *ResourceAzureCertificate {
		return &v
	}).(ResourceAzureCertificatePtrOutput)
}

// The application ID to authenticate with.
func (o ResourceAzureCertificateOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzureCertificate) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAzureCertificateOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzureCertificate) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o ResourceAzureCertificateOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzureCertificate) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAzureCertificateOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzureCertificate) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAzureCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAzureCertificate) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAzureCertificateOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAzureCertificate) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAzureCertificateOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzureCertificate) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAzureCertificateOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzureCertificate) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAzureCertificateOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzureCertificate) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAzureCertificateOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAzureCertificate) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The Azure AD directory (tenant) ID with which to authenticate.
// * sql_server_kerberos_ad:
func (o ResourceAzureCertificateOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzureCertificate) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type ResourceAzureCertificatePtrOutput struct{ *pulumi.OutputState }

func (ResourceAzureCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAzureCertificate)(nil)).Elem()
}

func (o ResourceAzureCertificatePtrOutput) ToResourceAzureCertificatePtrOutput() ResourceAzureCertificatePtrOutput {
	return o
}

func (o ResourceAzureCertificatePtrOutput) ToResourceAzureCertificatePtrOutputWithContext(ctx context.Context) ResourceAzureCertificatePtrOutput {
	return o
}

func (o ResourceAzureCertificatePtrOutput) Elem() ResourceAzureCertificateOutput {
	return o.ApplyT(func(v *ResourceAzureCertificate) ResourceAzureCertificate {
		if v != nil {
			return *v
		}
		var ret ResourceAzureCertificate
		return ret
	}).(ResourceAzureCertificateOutput)
}

// The application ID to authenticate with.
func (o ResourceAzureCertificatePtrOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureCertificate) *string {
		if v == nil {
			return nil
		}
		return v.AppId
	}).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAzureCertificatePtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureCertificate) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o ResourceAzureCertificatePtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureCertificate) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAzureCertificatePtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureCertificate) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAzureCertificatePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureCertificate) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAzureCertificatePtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAzureCertificate) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAzureCertificatePtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureCertificate) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAzureCertificatePtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureCertificate) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAzureCertificatePtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureCertificate) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAzureCertificatePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAzureCertificate) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The Azure AD directory (tenant) ID with which to authenticate.
// * sql_server_kerberos_ad:
func (o ResourceAzureCertificatePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureCertificate) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

type ResourceAzureMysql struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceAzureMysqlInput is an input type that accepts ResourceAzureMysqlArgs and ResourceAzureMysqlOutput values.
// You can construct a concrete instance of `ResourceAzureMysqlInput` via:
//
//	ResourceAzureMysqlArgs{...}
type ResourceAzureMysqlInput interface {
	pulumi.Input

	ToResourceAzureMysqlOutput() ResourceAzureMysqlOutput
	ToResourceAzureMysqlOutputWithContext(context.Context) ResourceAzureMysqlOutput
}

type ResourceAzureMysqlArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceAzureMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAzureMysql)(nil)).Elem()
}

func (i ResourceAzureMysqlArgs) ToResourceAzureMysqlOutput() ResourceAzureMysqlOutput {
	return i.ToResourceAzureMysqlOutputWithContext(context.Background())
}

func (i ResourceAzureMysqlArgs) ToResourceAzureMysqlOutputWithContext(ctx context.Context) ResourceAzureMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAzureMysqlOutput)
}

func (i ResourceAzureMysqlArgs) ToResourceAzureMysqlPtrOutput() ResourceAzureMysqlPtrOutput {
	return i.ToResourceAzureMysqlPtrOutputWithContext(context.Background())
}

func (i ResourceAzureMysqlArgs) ToResourceAzureMysqlPtrOutputWithContext(ctx context.Context) ResourceAzureMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAzureMysqlOutput).ToResourceAzureMysqlPtrOutputWithContext(ctx)
}

// ResourceAzureMysqlPtrInput is an input type that accepts ResourceAzureMysqlArgs, ResourceAzureMysqlPtr and ResourceAzureMysqlPtrOutput values.
// You can construct a concrete instance of `ResourceAzureMysqlPtrInput` via:
//
//	        ResourceAzureMysqlArgs{...}
//
//	or:
//
//	        nil
type ResourceAzureMysqlPtrInput interface {
	pulumi.Input

	ToResourceAzureMysqlPtrOutput() ResourceAzureMysqlPtrOutput
	ToResourceAzureMysqlPtrOutputWithContext(context.Context) ResourceAzureMysqlPtrOutput
}

type resourceAzureMysqlPtrType ResourceAzureMysqlArgs

func ResourceAzureMysqlPtr(v *ResourceAzureMysqlArgs) ResourceAzureMysqlPtrInput {
	return (*resourceAzureMysqlPtrType)(v)
}

func (*resourceAzureMysqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAzureMysql)(nil)).Elem()
}

func (i *resourceAzureMysqlPtrType) ToResourceAzureMysqlPtrOutput() ResourceAzureMysqlPtrOutput {
	return i.ToResourceAzureMysqlPtrOutputWithContext(context.Background())
}

func (i *resourceAzureMysqlPtrType) ToResourceAzureMysqlPtrOutputWithContext(ctx context.Context) ResourceAzureMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAzureMysqlPtrOutput)
}

type ResourceAzureMysqlOutput struct{ *pulumi.OutputState }

func (ResourceAzureMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAzureMysql)(nil)).Elem()
}

func (o ResourceAzureMysqlOutput) ToResourceAzureMysqlOutput() ResourceAzureMysqlOutput {
	return o
}

func (o ResourceAzureMysqlOutput) ToResourceAzureMysqlOutputWithContext(ctx context.Context) ResourceAzureMysqlOutput {
	return o
}

func (o ResourceAzureMysqlOutput) ToResourceAzureMysqlPtrOutput() ResourceAzureMysqlPtrOutput {
	return o.ToResourceAzureMysqlPtrOutputWithContext(context.Background())
}

func (o ResourceAzureMysqlOutput) ToResourceAzureMysqlPtrOutputWithContext(ctx context.Context) ResourceAzureMysqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAzureMysql) *ResourceAzureMysql {
		return &v
	}).(ResourceAzureMysqlPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAzureMysqlOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzureMysql) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceAzureMysqlOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzureMysql) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAzureMysqlOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzureMysql) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAzureMysqlOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAzureMysql) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAzureMysqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAzureMysql) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceAzureMysqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzureMysql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAzureMysqlOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAzureMysql) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAzureMysqlOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAzureMysql) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAzureMysqlOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzureMysql) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceAzureMysqlOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAzureMysql) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAzureMysqlOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzureMysql) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAzureMysqlOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzureMysql) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAzureMysqlOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAzureMysql) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceAzureMysqlOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAzureMysql) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceAzureMysqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzureMysql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceAzureMysqlPtrOutput struct{ *pulumi.OutputState }

func (ResourceAzureMysqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAzureMysql)(nil)).Elem()
}

func (o ResourceAzureMysqlPtrOutput) ToResourceAzureMysqlPtrOutput() ResourceAzureMysqlPtrOutput {
	return o
}

func (o ResourceAzureMysqlPtrOutput) ToResourceAzureMysqlPtrOutputWithContext(ctx context.Context) ResourceAzureMysqlPtrOutput {
	return o
}

func (o ResourceAzureMysqlPtrOutput) Elem() ResourceAzureMysqlOutput {
	return o.ApplyT(func(v *ResourceAzureMysql) ResourceAzureMysql {
		if v != nil {
			return *v
		}
		var ret ResourceAzureMysql
		return ret
	}).(ResourceAzureMysqlOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAzureMysqlPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureMysql) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceAzureMysqlPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureMysql) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAzureMysqlPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureMysql) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAzureMysqlPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureMysql) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAzureMysqlPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureMysql) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceAzureMysqlPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureMysql) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAzureMysqlPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAzureMysql) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAzureMysqlPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAzureMysql) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAzureMysqlPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureMysql) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceAzureMysqlPtrOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAzureMysql) *bool {
		if v == nil {
			return nil
		}
		return v.RequireNativeAuth
	}).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAzureMysqlPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureMysql) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAzureMysqlPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureMysql) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAzureMysqlPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAzureMysql) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceAzureMysqlPtrOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAzureMysql) *bool {
		if v == nil {
			return nil
		}
		return v.UseAzureSingleServerUsernames
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceAzureMysqlPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzureMysql) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceAzurePostgres struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceAzurePostgresInput is an input type that accepts ResourceAzurePostgresArgs and ResourceAzurePostgresOutput values.
// You can construct a concrete instance of `ResourceAzurePostgresInput` via:
//
//	ResourceAzurePostgresArgs{...}
type ResourceAzurePostgresInput interface {
	pulumi.Input

	ToResourceAzurePostgresOutput() ResourceAzurePostgresOutput
	ToResourceAzurePostgresOutputWithContext(context.Context) ResourceAzurePostgresOutput
}

type ResourceAzurePostgresArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceAzurePostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAzurePostgres)(nil)).Elem()
}

func (i ResourceAzurePostgresArgs) ToResourceAzurePostgresOutput() ResourceAzurePostgresOutput {
	return i.ToResourceAzurePostgresOutputWithContext(context.Background())
}

func (i ResourceAzurePostgresArgs) ToResourceAzurePostgresOutputWithContext(ctx context.Context) ResourceAzurePostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAzurePostgresOutput)
}

func (i ResourceAzurePostgresArgs) ToResourceAzurePostgresPtrOutput() ResourceAzurePostgresPtrOutput {
	return i.ToResourceAzurePostgresPtrOutputWithContext(context.Background())
}

func (i ResourceAzurePostgresArgs) ToResourceAzurePostgresPtrOutputWithContext(ctx context.Context) ResourceAzurePostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAzurePostgresOutput).ToResourceAzurePostgresPtrOutputWithContext(ctx)
}

// ResourceAzurePostgresPtrInput is an input type that accepts ResourceAzurePostgresArgs, ResourceAzurePostgresPtr and ResourceAzurePostgresPtrOutput values.
// You can construct a concrete instance of `ResourceAzurePostgresPtrInput` via:
//
//	        ResourceAzurePostgresArgs{...}
//
//	or:
//
//	        nil
type ResourceAzurePostgresPtrInput interface {
	pulumi.Input

	ToResourceAzurePostgresPtrOutput() ResourceAzurePostgresPtrOutput
	ToResourceAzurePostgresPtrOutputWithContext(context.Context) ResourceAzurePostgresPtrOutput
}

type resourceAzurePostgresPtrType ResourceAzurePostgresArgs

func ResourceAzurePostgresPtr(v *ResourceAzurePostgresArgs) ResourceAzurePostgresPtrInput {
	return (*resourceAzurePostgresPtrType)(v)
}

func (*resourceAzurePostgresPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAzurePostgres)(nil)).Elem()
}

func (i *resourceAzurePostgresPtrType) ToResourceAzurePostgresPtrOutput() ResourceAzurePostgresPtrOutput {
	return i.ToResourceAzurePostgresPtrOutputWithContext(context.Background())
}

func (i *resourceAzurePostgresPtrType) ToResourceAzurePostgresPtrOutputWithContext(ctx context.Context) ResourceAzurePostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAzurePostgresPtrOutput)
}

type ResourceAzurePostgresOutput struct{ *pulumi.OutputState }

func (ResourceAzurePostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAzurePostgres)(nil)).Elem()
}

func (o ResourceAzurePostgresOutput) ToResourceAzurePostgresOutput() ResourceAzurePostgresOutput {
	return o
}

func (o ResourceAzurePostgresOutput) ToResourceAzurePostgresOutputWithContext(ctx context.Context) ResourceAzurePostgresOutput {
	return o
}

func (o ResourceAzurePostgresOutput) ToResourceAzurePostgresPtrOutput() ResourceAzurePostgresPtrOutput {
	return o.ToResourceAzurePostgresPtrOutputWithContext(context.Background())
}

func (o ResourceAzurePostgresOutput) ToResourceAzurePostgresPtrOutputWithContext(ctx context.Context) ResourceAzurePostgresPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAzurePostgres) *ResourceAzurePostgres {
		return &v
	}).(ResourceAzurePostgresPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAzurePostgresOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgres) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceAzurePostgresOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAzurePostgres) string { return v.Database }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAzurePostgresOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgres) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAzurePostgresOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAzurePostgres) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAzurePostgresOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAzurePostgres) string { return v.Name }).(pulumi.StringOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceAzurePostgresOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgres) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceAzurePostgresOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgres) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAzurePostgresOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgres) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAzurePostgresOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgres) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAzurePostgresOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgres) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAzurePostgresOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgres) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAzurePostgresOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgres) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAzurePostgresOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAzurePostgres) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceAzurePostgresOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgres) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceAzurePostgresPtrOutput struct{ *pulumi.OutputState }

func (ResourceAzurePostgresPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAzurePostgres)(nil)).Elem()
}

func (o ResourceAzurePostgresPtrOutput) ToResourceAzurePostgresPtrOutput() ResourceAzurePostgresPtrOutput {
	return o
}

func (o ResourceAzurePostgresPtrOutput) ToResourceAzurePostgresPtrOutputWithContext(ctx context.Context) ResourceAzurePostgresPtrOutput {
	return o
}

func (o ResourceAzurePostgresPtrOutput) Elem() ResourceAzurePostgresOutput {
	return o.ApplyT(func(v *ResourceAzurePostgres) ResourceAzurePostgres {
		if v != nil {
			return *v
		}
		var ret ResourceAzurePostgres
		return ret
	}).(ResourceAzurePostgresOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAzurePostgresPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgres) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceAzurePostgresPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAzurePostgresPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgres) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAzurePostgresPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAzurePostgresPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceAzurePostgresPtrOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgres) *bool {
		if v == nil {
			return nil
		}
		return v.OverrideDatabase
	}).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceAzurePostgresPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgres) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAzurePostgresPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgres) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAzurePostgresPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgres) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAzurePostgresPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgres) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAzurePostgresPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgres) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAzurePostgresPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgres) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAzurePostgresPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAzurePostgres) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceAzurePostgresPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgres) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceAzurePostgresManagedIdentity struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceAzurePostgresManagedIdentityInput is an input type that accepts ResourceAzurePostgresManagedIdentityArgs and ResourceAzurePostgresManagedIdentityOutput values.
// You can construct a concrete instance of `ResourceAzurePostgresManagedIdentityInput` via:
//
//	ResourceAzurePostgresManagedIdentityArgs{...}
type ResourceAzurePostgresManagedIdentityInput interface {
	pulumi.Input

	ToResourceAzurePostgresManagedIdentityOutput() ResourceAzurePostgresManagedIdentityOutput
	ToResourceAzurePostgresManagedIdentityOutputWithContext(context.Context) ResourceAzurePostgresManagedIdentityOutput
}

type ResourceAzurePostgresManagedIdentityArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceAzurePostgresManagedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAzurePostgresManagedIdentity)(nil)).Elem()
}

func (i ResourceAzurePostgresManagedIdentityArgs) ToResourceAzurePostgresManagedIdentityOutput() ResourceAzurePostgresManagedIdentityOutput {
	return i.ToResourceAzurePostgresManagedIdentityOutputWithContext(context.Background())
}

func (i ResourceAzurePostgresManagedIdentityArgs) ToResourceAzurePostgresManagedIdentityOutputWithContext(ctx context.Context) ResourceAzurePostgresManagedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAzurePostgresManagedIdentityOutput)
}

func (i ResourceAzurePostgresManagedIdentityArgs) ToResourceAzurePostgresManagedIdentityPtrOutput() ResourceAzurePostgresManagedIdentityPtrOutput {
	return i.ToResourceAzurePostgresManagedIdentityPtrOutputWithContext(context.Background())
}

func (i ResourceAzurePostgresManagedIdentityArgs) ToResourceAzurePostgresManagedIdentityPtrOutputWithContext(ctx context.Context) ResourceAzurePostgresManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAzurePostgresManagedIdentityOutput).ToResourceAzurePostgresManagedIdentityPtrOutputWithContext(ctx)
}

// ResourceAzurePostgresManagedIdentityPtrInput is an input type that accepts ResourceAzurePostgresManagedIdentityArgs, ResourceAzurePostgresManagedIdentityPtr and ResourceAzurePostgresManagedIdentityPtrOutput values.
// You can construct a concrete instance of `ResourceAzurePostgresManagedIdentityPtrInput` via:
//
//	        ResourceAzurePostgresManagedIdentityArgs{...}
//
//	or:
//
//	        nil
type ResourceAzurePostgresManagedIdentityPtrInput interface {
	pulumi.Input

	ToResourceAzurePostgresManagedIdentityPtrOutput() ResourceAzurePostgresManagedIdentityPtrOutput
	ToResourceAzurePostgresManagedIdentityPtrOutputWithContext(context.Context) ResourceAzurePostgresManagedIdentityPtrOutput
}

type resourceAzurePostgresManagedIdentityPtrType ResourceAzurePostgresManagedIdentityArgs

func ResourceAzurePostgresManagedIdentityPtr(v *ResourceAzurePostgresManagedIdentityArgs) ResourceAzurePostgresManagedIdentityPtrInput {
	return (*resourceAzurePostgresManagedIdentityPtrType)(v)
}

func (*resourceAzurePostgresManagedIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAzurePostgresManagedIdentity)(nil)).Elem()
}

func (i *resourceAzurePostgresManagedIdentityPtrType) ToResourceAzurePostgresManagedIdentityPtrOutput() ResourceAzurePostgresManagedIdentityPtrOutput {
	return i.ToResourceAzurePostgresManagedIdentityPtrOutputWithContext(context.Background())
}

func (i *resourceAzurePostgresManagedIdentityPtrType) ToResourceAzurePostgresManagedIdentityPtrOutputWithContext(ctx context.Context) ResourceAzurePostgresManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceAzurePostgresManagedIdentityPtrOutput)
}

type ResourceAzurePostgresManagedIdentityOutput struct{ *pulumi.OutputState }

func (ResourceAzurePostgresManagedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceAzurePostgresManagedIdentity)(nil)).Elem()
}

func (o ResourceAzurePostgresManagedIdentityOutput) ToResourceAzurePostgresManagedIdentityOutput() ResourceAzurePostgresManagedIdentityOutput {
	return o
}

func (o ResourceAzurePostgresManagedIdentityOutput) ToResourceAzurePostgresManagedIdentityOutputWithContext(ctx context.Context) ResourceAzurePostgresManagedIdentityOutput {
	return o
}

func (o ResourceAzurePostgresManagedIdentityOutput) ToResourceAzurePostgresManagedIdentityPtrOutput() ResourceAzurePostgresManagedIdentityPtrOutput {
	return o.ToResourceAzurePostgresManagedIdentityPtrOutputWithContext(context.Background())
}

func (o ResourceAzurePostgresManagedIdentityOutput) ToResourceAzurePostgresManagedIdentityPtrOutputWithContext(ctx context.Context) ResourceAzurePostgresManagedIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceAzurePostgresManagedIdentity) *ResourceAzurePostgresManagedIdentity {
		return &v
	}).(ResourceAzurePostgresManagedIdentityPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAzurePostgresManagedIdentityOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgresManagedIdentity) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceAzurePostgresManagedIdentityOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAzurePostgresManagedIdentity) string { return v.Database }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAzurePostgresManagedIdentityOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgresManagedIdentity) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAzurePostgresManagedIdentityOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAzurePostgresManagedIdentity) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAzurePostgresManagedIdentityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceAzurePostgresManagedIdentity) string { return v.Name }).(pulumi.StringOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceAzurePostgresManagedIdentityOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgresManagedIdentity) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceAzurePostgresManagedIdentityOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgresManagedIdentity) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAzurePostgresManagedIdentityOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgresManagedIdentity) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAzurePostgresManagedIdentityOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgresManagedIdentity) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAzurePostgresManagedIdentityOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgresManagedIdentity) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAzurePostgresManagedIdentityOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgresManagedIdentity) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAzurePostgresManagedIdentityOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgresManagedIdentity) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAzurePostgresManagedIdentityOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceAzurePostgresManagedIdentity) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceAzurePostgresManagedIdentityOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgresManagedIdentity) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceAzurePostgresManagedIdentityOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceAzurePostgresManagedIdentity) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceAzurePostgresManagedIdentityPtrOutput struct{ *pulumi.OutputState }

func (ResourceAzurePostgresManagedIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceAzurePostgresManagedIdentity)(nil)).Elem()
}

func (o ResourceAzurePostgresManagedIdentityPtrOutput) ToResourceAzurePostgresManagedIdentityPtrOutput() ResourceAzurePostgresManagedIdentityPtrOutput {
	return o
}

func (o ResourceAzurePostgresManagedIdentityPtrOutput) ToResourceAzurePostgresManagedIdentityPtrOutputWithContext(ctx context.Context) ResourceAzurePostgresManagedIdentityPtrOutput {
	return o
}

func (o ResourceAzurePostgresManagedIdentityPtrOutput) Elem() ResourceAzurePostgresManagedIdentityOutput {
	return o.ApplyT(func(v *ResourceAzurePostgresManagedIdentity) ResourceAzurePostgresManagedIdentity {
		if v != nil {
			return *v
		}
		var ret ResourceAzurePostgresManagedIdentity
		return ret
	}).(ResourceAzurePostgresManagedIdentityOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceAzurePostgresManagedIdentityPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgresManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceAzurePostgresManagedIdentityPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgresManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceAzurePostgresManagedIdentityPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgresManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceAzurePostgresManagedIdentityPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgresManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceAzurePostgresManagedIdentityPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgresManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceAzurePostgresManagedIdentityPtrOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgresManagedIdentity) *bool {
		if v == nil {
			return nil
		}
		return v.OverrideDatabase
	}).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceAzurePostgresManagedIdentityPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgresManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceAzurePostgresManagedIdentityPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgresManagedIdentity) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceAzurePostgresManagedIdentityPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgresManagedIdentity) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceAzurePostgresManagedIdentityPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgresManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceAzurePostgresManagedIdentityPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgresManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceAzurePostgresManagedIdentityPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgresManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceAzurePostgresManagedIdentityPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceAzurePostgresManagedIdentity) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceAzurePostgresManagedIdentityPtrOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgresManagedIdentity) *bool {
		if v == nil {
			return nil
		}
		return v.UseAzureSingleServerUsernames
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceAzurePostgresManagedIdentityPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceAzurePostgresManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceBigQuery struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint string `pulumi:"endpoint"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// The private key used to authenticate with the server.
	PrivateKey *string `pulumi:"privateKey"`
	// The project to connect to.
	Project string `pulumi:"project"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceBigQueryInput is an input type that accepts ResourceBigQueryArgs and ResourceBigQueryOutput values.
// You can construct a concrete instance of `ResourceBigQueryInput` via:
//
//	ResourceBigQueryArgs{...}
type ResourceBigQueryInput interface {
	pulumi.Input

	ToResourceBigQueryOutput() ResourceBigQueryOutput
	ToResourceBigQueryOutputWithContext(context.Context) ResourceBigQueryOutput
}

type ResourceBigQueryArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// The private key used to authenticate with the server.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// The project to connect to.
	Project pulumi.StringInput `pulumi:"project"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceBigQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceBigQuery)(nil)).Elem()
}

func (i ResourceBigQueryArgs) ToResourceBigQueryOutput() ResourceBigQueryOutput {
	return i.ToResourceBigQueryOutputWithContext(context.Background())
}

func (i ResourceBigQueryArgs) ToResourceBigQueryOutputWithContext(ctx context.Context) ResourceBigQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceBigQueryOutput)
}

func (i ResourceBigQueryArgs) ToResourceBigQueryPtrOutput() ResourceBigQueryPtrOutput {
	return i.ToResourceBigQueryPtrOutputWithContext(context.Background())
}

func (i ResourceBigQueryArgs) ToResourceBigQueryPtrOutputWithContext(ctx context.Context) ResourceBigQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceBigQueryOutput).ToResourceBigQueryPtrOutputWithContext(ctx)
}

// ResourceBigQueryPtrInput is an input type that accepts ResourceBigQueryArgs, ResourceBigQueryPtr and ResourceBigQueryPtrOutput values.
// You can construct a concrete instance of `ResourceBigQueryPtrInput` via:
//
//	        ResourceBigQueryArgs{...}
//
//	or:
//
//	        nil
type ResourceBigQueryPtrInput interface {
	pulumi.Input

	ToResourceBigQueryPtrOutput() ResourceBigQueryPtrOutput
	ToResourceBigQueryPtrOutputWithContext(context.Context) ResourceBigQueryPtrOutput
}

type resourceBigQueryPtrType ResourceBigQueryArgs

func ResourceBigQueryPtr(v *ResourceBigQueryArgs) ResourceBigQueryPtrInput {
	return (*resourceBigQueryPtrType)(v)
}

func (*resourceBigQueryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceBigQuery)(nil)).Elem()
}

func (i *resourceBigQueryPtrType) ToResourceBigQueryPtrOutput() ResourceBigQueryPtrOutput {
	return i.ToResourceBigQueryPtrOutputWithContext(context.Background())
}

func (i *resourceBigQueryPtrType) ToResourceBigQueryPtrOutputWithContext(ctx context.Context) ResourceBigQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceBigQueryPtrOutput)
}

type ResourceBigQueryOutput struct{ *pulumi.OutputState }

func (ResourceBigQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceBigQuery)(nil)).Elem()
}

func (o ResourceBigQueryOutput) ToResourceBigQueryOutput() ResourceBigQueryOutput {
	return o
}

func (o ResourceBigQueryOutput) ToResourceBigQueryOutputWithContext(ctx context.Context) ResourceBigQueryOutput {
	return o
}

func (o ResourceBigQueryOutput) ToResourceBigQueryPtrOutput() ResourceBigQueryPtrOutput {
	return o.ToResourceBigQueryPtrOutputWithContext(context.Background())
}

func (o ResourceBigQueryOutput) ToResourceBigQueryPtrOutputWithContext(ctx context.Context) ResourceBigQueryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceBigQuery) *ResourceBigQuery {
		return &v
	}).(ResourceBigQueryPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceBigQueryOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceBigQuery) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceBigQueryOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceBigQuery) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceBigQueryOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceBigQuery) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceBigQueryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceBigQuery) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceBigQueryOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceBigQuery) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// The private key used to authenticate with the server.
func (o ResourceBigQueryOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceBigQuery) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// The project to connect to.
func (o ResourceBigQueryOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceBigQuery) string { return v.Project }).(pulumi.StringOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceBigQueryOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceBigQuery) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceBigQueryOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceBigQuery) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceBigQueryOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceBigQuery) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceBigQueryOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceBigQuery) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceBigQueryOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceBigQuery) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceBigQueryPtrOutput struct{ *pulumi.OutputState }

func (ResourceBigQueryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceBigQuery)(nil)).Elem()
}

func (o ResourceBigQueryPtrOutput) ToResourceBigQueryPtrOutput() ResourceBigQueryPtrOutput {
	return o
}

func (o ResourceBigQueryPtrOutput) ToResourceBigQueryPtrOutputWithContext(ctx context.Context) ResourceBigQueryPtrOutput {
	return o
}

func (o ResourceBigQueryPtrOutput) Elem() ResourceBigQueryOutput {
	return o.ApplyT(func(v *ResourceBigQuery) ResourceBigQuery {
		if v != nil {
			return *v
		}
		var ret ResourceBigQuery
		return ret
	}).(ResourceBigQueryOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceBigQueryPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceBigQuery) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceBigQueryPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceBigQuery) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceBigQueryPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceBigQuery) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceBigQueryPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceBigQuery) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceBigQueryPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceBigQuery) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// The private key used to authenticate with the server.
func (o ResourceBigQueryPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceBigQuery) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// The project to connect to.
func (o ResourceBigQueryPtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceBigQuery) *string {
		if v == nil {
			return nil
		}
		return &v.Project
	}).(pulumi.StringPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceBigQueryPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceBigQuery) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceBigQueryPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceBigQuery) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceBigQueryPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceBigQuery) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceBigQueryPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceBigQuery) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceBigQueryPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceBigQuery) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceCassandra struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceCassandraInput is an input type that accepts ResourceCassandraArgs and ResourceCassandraOutput values.
// You can construct a concrete instance of `ResourceCassandraInput` via:
//
//	ResourceCassandraArgs{...}
type ResourceCassandraInput interface {
	pulumi.Input

	ToResourceCassandraOutput() ResourceCassandraOutput
	ToResourceCassandraOutputWithContext(context.Context) ResourceCassandraOutput
}

type ResourceCassandraArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceCassandraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceCassandra)(nil)).Elem()
}

func (i ResourceCassandraArgs) ToResourceCassandraOutput() ResourceCassandraOutput {
	return i.ToResourceCassandraOutputWithContext(context.Background())
}

func (i ResourceCassandraArgs) ToResourceCassandraOutputWithContext(ctx context.Context) ResourceCassandraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCassandraOutput)
}

func (i ResourceCassandraArgs) ToResourceCassandraPtrOutput() ResourceCassandraPtrOutput {
	return i.ToResourceCassandraPtrOutputWithContext(context.Background())
}

func (i ResourceCassandraArgs) ToResourceCassandraPtrOutputWithContext(ctx context.Context) ResourceCassandraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCassandraOutput).ToResourceCassandraPtrOutputWithContext(ctx)
}

// ResourceCassandraPtrInput is an input type that accepts ResourceCassandraArgs, ResourceCassandraPtr and ResourceCassandraPtrOutput values.
// You can construct a concrete instance of `ResourceCassandraPtrInput` via:
//
//	        ResourceCassandraArgs{...}
//
//	or:
//
//	        nil
type ResourceCassandraPtrInput interface {
	pulumi.Input

	ToResourceCassandraPtrOutput() ResourceCassandraPtrOutput
	ToResourceCassandraPtrOutputWithContext(context.Context) ResourceCassandraPtrOutput
}

type resourceCassandraPtrType ResourceCassandraArgs

func ResourceCassandraPtr(v *ResourceCassandraArgs) ResourceCassandraPtrInput {
	return (*resourceCassandraPtrType)(v)
}

func (*resourceCassandraPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceCassandra)(nil)).Elem()
}

func (i *resourceCassandraPtrType) ToResourceCassandraPtrOutput() ResourceCassandraPtrOutput {
	return i.ToResourceCassandraPtrOutputWithContext(context.Background())
}

func (i *resourceCassandraPtrType) ToResourceCassandraPtrOutputWithContext(ctx context.Context) ResourceCassandraPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCassandraPtrOutput)
}

type ResourceCassandraOutput struct{ *pulumi.OutputState }

func (ResourceCassandraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceCassandra)(nil)).Elem()
}

func (o ResourceCassandraOutput) ToResourceCassandraOutput() ResourceCassandraOutput {
	return o
}

func (o ResourceCassandraOutput) ToResourceCassandraOutputWithContext(ctx context.Context) ResourceCassandraOutput {
	return o
}

func (o ResourceCassandraOutput) ToResourceCassandraPtrOutput() ResourceCassandraPtrOutput {
	return o.ToResourceCassandraPtrOutputWithContext(context.Background())
}

func (o ResourceCassandraOutput) ToResourceCassandraPtrOutputWithContext(ctx context.Context) ResourceCassandraPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceCassandra) *ResourceCassandra {
		return &v
	}).(ResourceCassandraPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceCassandraOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCassandra) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceCassandraOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCassandra) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceCassandraOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceCassandra) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceCassandraOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceCassandra) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceCassandraOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCassandra) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceCassandraOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceCassandra) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceCassandraOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceCassandra) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceCassandraOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCassandra) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceCassandraOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCassandra) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceCassandraOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCassandra) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceCassandraOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceCassandra) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceCassandraOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceCassandra) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceCassandraOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCassandra) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceCassandraPtrOutput struct{ *pulumi.OutputState }

func (ResourceCassandraPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceCassandra)(nil)).Elem()
}

func (o ResourceCassandraPtrOutput) ToResourceCassandraPtrOutput() ResourceCassandraPtrOutput {
	return o
}

func (o ResourceCassandraPtrOutput) ToResourceCassandraPtrOutputWithContext(ctx context.Context) ResourceCassandraPtrOutput {
	return o
}

func (o ResourceCassandraPtrOutput) Elem() ResourceCassandraOutput {
	return o.ApplyT(func(v *ResourceCassandra) ResourceCassandra {
		if v != nil {
			return *v
		}
		var ret ResourceCassandra
		return ret
	}).(ResourceCassandraOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceCassandraPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCassandra) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceCassandraPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCassandra) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceCassandraPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCassandra) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceCassandraPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCassandra) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceCassandraPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCassandra) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceCassandraPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceCassandra) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceCassandraPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceCassandra) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceCassandraPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCassandra) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceCassandraPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCassandra) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceCassandraPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCassandra) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceCassandraPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceCassandra) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceCassandraPtrOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceCassandra) *bool {
		if v == nil {
			return nil
		}
		return v.TlsRequired
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceCassandraPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCassandra) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceCitus struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceCitusInput is an input type that accepts ResourceCitusArgs and ResourceCitusOutput values.
// You can construct a concrete instance of `ResourceCitusInput` via:
//
//	ResourceCitusArgs{...}
type ResourceCitusInput interface {
	pulumi.Input

	ToResourceCitusOutput() ResourceCitusOutput
	ToResourceCitusOutputWithContext(context.Context) ResourceCitusOutput
}

type ResourceCitusArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceCitusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceCitus)(nil)).Elem()
}

func (i ResourceCitusArgs) ToResourceCitusOutput() ResourceCitusOutput {
	return i.ToResourceCitusOutputWithContext(context.Background())
}

func (i ResourceCitusArgs) ToResourceCitusOutputWithContext(ctx context.Context) ResourceCitusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCitusOutput)
}

func (i ResourceCitusArgs) ToResourceCitusPtrOutput() ResourceCitusPtrOutput {
	return i.ToResourceCitusPtrOutputWithContext(context.Background())
}

func (i ResourceCitusArgs) ToResourceCitusPtrOutputWithContext(ctx context.Context) ResourceCitusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCitusOutput).ToResourceCitusPtrOutputWithContext(ctx)
}

// ResourceCitusPtrInput is an input type that accepts ResourceCitusArgs, ResourceCitusPtr and ResourceCitusPtrOutput values.
// You can construct a concrete instance of `ResourceCitusPtrInput` via:
//
//	        ResourceCitusArgs{...}
//
//	or:
//
//	        nil
type ResourceCitusPtrInput interface {
	pulumi.Input

	ToResourceCitusPtrOutput() ResourceCitusPtrOutput
	ToResourceCitusPtrOutputWithContext(context.Context) ResourceCitusPtrOutput
}

type resourceCitusPtrType ResourceCitusArgs

func ResourceCitusPtr(v *ResourceCitusArgs) ResourceCitusPtrInput {
	return (*resourceCitusPtrType)(v)
}

func (*resourceCitusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceCitus)(nil)).Elem()
}

func (i *resourceCitusPtrType) ToResourceCitusPtrOutput() ResourceCitusPtrOutput {
	return i.ToResourceCitusPtrOutputWithContext(context.Background())
}

func (i *resourceCitusPtrType) ToResourceCitusPtrOutputWithContext(ctx context.Context) ResourceCitusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCitusPtrOutput)
}

type ResourceCitusOutput struct{ *pulumi.OutputState }

func (ResourceCitusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceCitus)(nil)).Elem()
}

func (o ResourceCitusOutput) ToResourceCitusOutput() ResourceCitusOutput {
	return o
}

func (o ResourceCitusOutput) ToResourceCitusOutputWithContext(ctx context.Context) ResourceCitusOutput {
	return o
}

func (o ResourceCitusOutput) ToResourceCitusPtrOutput() ResourceCitusPtrOutput {
	return o.ToResourceCitusPtrOutputWithContext(context.Background())
}

func (o ResourceCitusOutput) ToResourceCitusPtrOutputWithContext(ctx context.Context) ResourceCitusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceCitus) *ResourceCitus {
		return &v
	}).(ResourceCitusPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceCitusOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCitus) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceCitusOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceCitus) string { return v.Database }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceCitusOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCitus) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceCitusOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceCitus) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceCitusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceCitus) string { return v.Name }).(pulumi.StringOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceCitusOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceCitus) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceCitusOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCitus) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceCitusOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceCitus) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceCitusOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceCitus) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceCitusOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCitus) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceCitusOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCitus) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceCitusOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCitus) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceCitusOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceCitus) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceCitusOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCitus) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceCitusPtrOutput struct{ *pulumi.OutputState }

func (ResourceCitusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceCitus)(nil)).Elem()
}

func (o ResourceCitusPtrOutput) ToResourceCitusPtrOutput() ResourceCitusPtrOutput {
	return o
}

func (o ResourceCitusPtrOutput) ToResourceCitusPtrOutputWithContext(ctx context.Context) ResourceCitusPtrOutput {
	return o
}

func (o ResourceCitusPtrOutput) Elem() ResourceCitusOutput {
	return o.ApplyT(func(v *ResourceCitus) ResourceCitus {
		if v != nil {
			return *v
		}
		var ret ResourceCitus
		return ret
	}).(ResourceCitusOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceCitusPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCitus) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceCitusPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCitus) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceCitusPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCitus) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceCitusPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCitus) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceCitusPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCitus) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceCitusPtrOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceCitus) *bool {
		if v == nil {
			return nil
		}
		return v.OverrideDatabase
	}).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceCitusPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCitus) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceCitusPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceCitus) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceCitusPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceCitus) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceCitusPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCitus) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceCitusPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCitus) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceCitusPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCitus) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceCitusPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceCitus) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceCitusPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCitus) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceClickHouseHttp struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url string `pulumi:"url"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceClickHouseHttpInput is an input type that accepts ResourceClickHouseHttpArgs and ResourceClickHouseHttpOutput values.
// You can construct a concrete instance of `ResourceClickHouseHttpInput` via:
//
//	ResourceClickHouseHttpArgs{...}
type ResourceClickHouseHttpInput interface {
	pulumi.Input

	ToResourceClickHouseHttpOutput() ResourceClickHouseHttpOutput
	ToResourceClickHouseHttpOutputWithContext(context.Context) ResourceClickHouseHttpOutput
}

type ResourceClickHouseHttpArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url pulumi.StringInput `pulumi:"url"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceClickHouseHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClickHouseHttp)(nil)).Elem()
}

func (i ResourceClickHouseHttpArgs) ToResourceClickHouseHttpOutput() ResourceClickHouseHttpOutput {
	return i.ToResourceClickHouseHttpOutputWithContext(context.Background())
}

func (i ResourceClickHouseHttpArgs) ToResourceClickHouseHttpOutputWithContext(ctx context.Context) ResourceClickHouseHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClickHouseHttpOutput)
}

func (i ResourceClickHouseHttpArgs) ToResourceClickHouseHttpPtrOutput() ResourceClickHouseHttpPtrOutput {
	return i.ToResourceClickHouseHttpPtrOutputWithContext(context.Background())
}

func (i ResourceClickHouseHttpArgs) ToResourceClickHouseHttpPtrOutputWithContext(ctx context.Context) ResourceClickHouseHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClickHouseHttpOutput).ToResourceClickHouseHttpPtrOutputWithContext(ctx)
}

// ResourceClickHouseHttpPtrInput is an input type that accepts ResourceClickHouseHttpArgs, ResourceClickHouseHttpPtr and ResourceClickHouseHttpPtrOutput values.
// You can construct a concrete instance of `ResourceClickHouseHttpPtrInput` via:
//
//	        ResourceClickHouseHttpArgs{...}
//
//	or:
//
//	        nil
type ResourceClickHouseHttpPtrInput interface {
	pulumi.Input

	ToResourceClickHouseHttpPtrOutput() ResourceClickHouseHttpPtrOutput
	ToResourceClickHouseHttpPtrOutputWithContext(context.Context) ResourceClickHouseHttpPtrOutput
}

type resourceClickHouseHttpPtrType ResourceClickHouseHttpArgs

func ResourceClickHouseHttpPtr(v *ResourceClickHouseHttpArgs) ResourceClickHouseHttpPtrInput {
	return (*resourceClickHouseHttpPtrType)(v)
}

func (*resourceClickHouseHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClickHouseHttp)(nil)).Elem()
}

func (i *resourceClickHouseHttpPtrType) ToResourceClickHouseHttpPtrOutput() ResourceClickHouseHttpPtrOutput {
	return i.ToResourceClickHouseHttpPtrOutputWithContext(context.Background())
}

func (i *resourceClickHouseHttpPtrType) ToResourceClickHouseHttpPtrOutputWithContext(ctx context.Context) ResourceClickHouseHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClickHouseHttpPtrOutput)
}

type ResourceClickHouseHttpOutput struct{ *pulumi.OutputState }

func (ResourceClickHouseHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClickHouseHttp)(nil)).Elem()
}

func (o ResourceClickHouseHttpOutput) ToResourceClickHouseHttpOutput() ResourceClickHouseHttpOutput {
	return o
}

func (o ResourceClickHouseHttpOutput) ToResourceClickHouseHttpOutputWithContext(ctx context.Context) ResourceClickHouseHttpOutput {
	return o
}

func (o ResourceClickHouseHttpOutput) ToResourceClickHouseHttpPtrOutput() ResourceClickHouseHttpPtrOutput {
	return o.ToResourceClickHouseHttpPtrOutputWithContext(context.Background())
}

func (o ResourceClickHouseHttpOutput) ToResourceClickHouseHttpPtrOutputWithContext(ctx context.Context) ResourceClickHouseHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClickHouseHttp) *ResourceClickHouseHttp {
		return &v
	}).(ResourceClickHouseHttpPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceClickHouseHttpOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseHttp) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceClickHouseHttpOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseHttp) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceClickHouseHttpOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseHttp) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceClickHouseHttpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClickHouseHttp) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceClickHouseHttpOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseHttp) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceClickHouseHttpOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseHttp) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceClickHouseHttpOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseHttp) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceClickHouseHttpOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseHttp) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceClickHouseHttpOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceClickHouseHttp) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The base address of your website without the path.
// * kubernetes:
func (o ResourceClickHouseHttpOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClickHouseHttp) string { return v.Url }).(pulumi.StringOutput)
}

// The username to authenticate with.
func (o ResourceClickHouseHttpOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseHttp) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceClickHouseHttpPtrOutput struct{ *pulumi.OutputState }

func (ResourceClickHouseHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClickHouseHttp)(nil)).Elem()
}

func (o ResourceClickHouseHttpPtrOutput) ToResourceClickHouseHttpPtrOutput() ResourceClickHouseHttpPtrOutput {
	return o
}

func (o ResourceClickHouseHttpPtrOutput) ToResourceClickHouseHttpPtrOutputWithContext(ctx context.Context) ResourceClickHouseHttpPtrOutput {
	return o
}

func (o ResourceClickHouseHttpPtrOutput) Elem() ResourceClickHouseHttpOutput {
	return o.ApplyT(func(v *ResourceClickHouseHttp) ResourceClickHouseHttp {
		if v != nil {
			return *v
		}
		var ret ResourceClickHouseHttp
		return ret
	}).(ResourceClickHouseHttpOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceClickHouseHttpPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseHttp) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceClickHouseHttpPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseHttp) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceClickHouseHttpPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseHttp) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceClickHouseHttpPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseHttp) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceClickHouseHttpPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseHttp) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceClickHouseHttpPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseHttp) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceClickHouseHttpPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseHttp) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceClickHouseHttpPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseHttp) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceClickHouseHttpPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceClickHouseHttp) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The base address of your website without the path.
// * kubernetes:
func (o ResourceClickHouseHttpPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseHttp) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o ResourceClickHouseHttpPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseHttp) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceClickHouseMySql struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceClickHouseMySqlInput is an input type that accepts ResourceClickHouseMySqlArgs and ResourceClickHouseMySqlOutput values.
// You can construct a concrete instance of `ResourceClickHouseMySqlInput` via:
//
//	ResourceClickHouseMySqlArgs{...}
type ResourceClickHouseMySqlInput interface {
	pulumi.Input

	ToResourceClickHouseMySqlOutput() ResourceClickHouseMySqlOutput
	ToResourceClickHouseMySqlOutputWithContext(context.Context) ResourceClickHouseMySqlOutput
}

type ResourceClickHouseMySqlArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceClickHouseMySqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClickHouseMySql)(nil)).Elem()
}

func (i ResourceClickHouseMySqlArgs) ToResourceClickHouseMySqlOutput() ResourceClickHouseMySqlOutput {
	return i.ToResourceClickHouseMySqlOutputWithContext(context.Background())
}

func (i ResourceClickHouseMySqlArgs) ToResourceClickHouseMySqlOutputWithContext(ctx context.Context) ResourceClickHouseMySqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClickHouseMySqlOutput)
}

func (i ResourceClickHouseMySqlArgs) ToResourceClickHouseMySqlPtrOutput() ResourceClickHouseMySqlPtrOutput {
	return i.ToResourceClickHouseMySqlPtrOutputWithContext(context.Background())
}

func (i ResourceClickHouseMySqlArgs) ToResourceClickHouseMySqlPtrOutputWithContext(ctx context.Context) ResourceClickHouseMySqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClickHouseMySqlOutput).ToResourceClickHouseMySqlPtrOutputWithContext(ctx)
}

// ResourceClickHouseMySqlPtrInput is an input type that accepts ResourceClickHouseMySqlArgs, ResourceClickHouseMySqlPtr and ResourceClickHouseMySqlPtrOutput values.
// You can construct a concrete instance of `ResourceClickHouseMySqlPtrInput` via:
//
//	        ResourceClickHouseMySqlArgs{...}
//
//	or:
//
//	        nil
type ResourceClickHouseMySqlPtrInput interface {
	pulumi.Input

	ToResourceClickHouseMySqlPtrOutput() ResourceClickHouseMySqlPtrOutput
	ToResourceClickHouseMySqlPtrOutputWithContext(context.Context) ResourceClickHouseMySqlPtrOutput
}

type resourceClickHouseMySqlPtrType ResourceClickHouseMySqlArgs

func ResourceClickHouseMySqlPtr(v *ResourceClickHouseMySqlArgs) ResourceClickHouseMySqlPtrInput {
	return (*resourceClickHouseMySqlPtrType)(v)
}

func (*resourceClickHouseMySqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClickHouseMySql)(nil)).Elem()
}

func (i *resourceClickHouseMySqlPtrType) ToResourceClickHouseMySqlPtrOutput() ResourceClickHouseMySqlPtrOutput {
	return i.ToResourceClickHouseMySqlPtrOutputWithContext(context.Background())
}

func (i *resourceClickHouseMySqlPtrType) ToResourceClickHouseMySqlPtrOutputWithContext(ctx context.Context) ResourceClickHouseMySqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClickHouseMySqlPtrOutput)
}

type ResourceClickHouseMySqlOutput struct{ *pulumi.OutputState }

func (ResourceClickHouseMySqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClickHouseMySql)(nil)).Elem()
}

func (o ResourceClickHouseMySqlOutput) ToResourceClickHouseMySqlOutput() ResourceClickHouseMySqlOutput {
	return o
}

func (o ResourceClickHouseMySqlOutput) ToResourceClickHouseMySqlOutputWithContext(ctx context.Context) ResourceClickHouseMySqlOutput {
	return o
}

func (o ResourceClickHouseMySqlOutput) ToResourceClickHouseMySqlPtrOutput() ResourceClickHouseMySqlPtrOutput {
	return o.ToResourceClickHouseMySqlPtrOutputWithContext(context.Background())
}

func (o ResourceClickHouseMySqlOutput) ToResourceClickHouseMySqlPtrOutputWithContext(ctx context.Context) ResourceClickHouseMySqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClickHouseMySql) *ResourceClickHouseMySql {
		return &v
	}).(ResourceClickHouseMySqlPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceClickHouseMySqlOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseMySql) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceClickHouseMySqlOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseMySql) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceClickHouseMySqlOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseMySql) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceClickHouseMySqlOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClickHouseMySql) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceClickHouseMySqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClickHouseMySql) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceClickHouseMySqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseMySql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceClickHouseMySqlOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseMySql) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceClickHouseMySqlOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseMySql) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceClickHouseMySqlOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseMySql) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceClickHouseMySqlOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseMySql) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceClickHouseMySqlOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseMySql) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceClickHouseMySqlOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseMySql) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceClickHouseMySqlOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceClickHouseMySql) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceClickHouseMySqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseMySql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceClickHouseMySqlPtrOutput struct{ *pulumi.OutputState }

func (ResourceClickHouseMySqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClickHouseMySql)(nil)).Elem()
}

func (o ResourceClickHouseMySqlPtrOutput) ToResourceClickHouseMySqlPtrOutput() ResourceClickHouseMySqlPtrOutput {
	return o
}

func (o ResourceClickHouseMySqlPtrOutput) ToResourceClickHouseMySqlPtrOutputWithContext(ctx context.Context) ResourceClickHouseMySqlPtrOutput {
	return o
}

func (o ResourceClickHouseMySqlPtrOutput) Elem() ResourceClickHouseMySqlOutput {
	return o.ApplyT(func(v *ResourceClickHouseMySql) ResourceClickHouseMySql {
		if v != nil {
			return *v
		}
		var ret ResourceClickHouseMySql
		return ret
	}).(ResourceClickHouseMySqlOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceClickHouseMySqlPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseMySql) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceClickHouseMySqlPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseMySql) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceClickHouseMySqlPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseMySql) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceClickHouseMySqlPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseMySql) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceClickHouseMySqlPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseMySql) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceClickHouseMySqlPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseMySql) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceClickHouseMySqlPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseMySql) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceClickHouseMySqlPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseMySql) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceClickHouseMySqlPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseMySql) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceClickHouseMySqlPtrOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseMySql) *bool {
		if v == nil {
			return nil
		}
		return v.RequireNativeAuth
	}).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceClickHouseMySqlPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseMySql) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceClickHouseMySqlPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseMySql) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceClickHouseMySqlPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceClickHouseMySql) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceClickHouseMySqlPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseMySql) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceClickHouseTcp struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceClickHouseTcpInput is an input type that accepts ResourceClickHouseTcpArgs and ResourceClickHouseTcpOutput values.
// You can construct a concrete instance of `ResourceClickHouseTcpInput` via:
//
//	ResourceClickHouseTcpArgs{...}
type ResourceClickHouseTcpInput interface {
	pulumi.Input

	ToResourceClickHouseTcpOutput() ResourceClickHouseTcpOutput
	ToResourceClickHouseTcpOutputWithContext(context.Context) ResourceClickHouseTcpOutput
}

type ResourceClickHouseTcpArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceClickHouseTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClickHouseTcp)(nil)).Elem()
}

func (i ResourceClickHouseTcpArgs) ToResourceClickHouseTcpOutput() ResourceClickHouseTcpOutput {
	return i.ToResourceClickHouseTcpOutputWithContext(context.Background())
}

func (i ResourceClickHouseTcpArgs) ToResourceClickHouseTcpOutputWithContext(ctx context.Context) ResourceClickHouseTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClickHouseTcpOutput)
}

func (i ResourceClickHouseTcpArgs) ToResourceClickHouseTcpPtrOutput() ResourceClickHouseTcpPtrOutput {
	return i.ToResourceClickHouseTcpPtrOutputWithContext(context.Background())
}

func (i ResourceClickHouseTcpArgs) ToResourceClickHouseTcpPtrOutputWithContext(ctx context.Context) ResourceClickHouseTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClickHouseTcpOutput).ToResourceClickHouseTcpPtrOutputWithContext(ctx)
}

// ResourceClickHouseTcpPtrInput is an input type that accepts ResourceClickHouseTcpArgs, ResourceClickHouseTcpPtr and ResourceClickHouseTcpPtrOutput values.
// You can construct a concrete instance of `ResourceClickHouseTcpPtrInput` via:
//
//	        ResourceClickHouseTcpArgs{...}
//
//	or:
//
//	        nil
type ResourceClickHouseTcpPtrInput interface {
	pulumi.Input

	ToResourceClickHouseTcpPtrOutput() ResourceClickHouseTcpPtrOutput
	ToResourceClickHouseTcpPtrOutputWithContext(context.Context) ResourceClickHouseTcpPtrOutput
}

type resourceClickHouseTcpPtrType ResourceClickHouseTcpArgs

func ResourceClickHouseTcpPtr(v *ResourceClickHouseTcpArgs) ResourceClickHouseTcpPtrInput {
	return (*resourceClickHouseTcpPtrType)(v)
}

func (*resourceClickHouseTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClickHouseTcp)(nil)).Elem()
}

func (i *resourceClickHouseTcpPtrType) ToResourceClickHouseTcpPtrOutput() ResourceClickHouseTcpPtrOutput {
	return i.ToResourceClickHouseTcpPtrOutputWithContext(context.Background())
}

func (i *resourceClickHouseTcpPtrType) ToResourceClickHouseTcpPtrOutputWithContext(ctx context.Context) ResourceClickHouseTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClickHouseTcpPtrOutput)
}

type ResourceClickHouseTcpOutput struct{ *pulumi.OutputState }

func (ResourceClickHouseTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClickHouseTcp)(nil)).Elem()
}

func (o ResourceClickHouseTcpOutput) ToResourceClickHouseTcpOutput() ResourceClickHouseTcpOutput {
	return o
}

func (o ResourceClickHouseTcpOutput) ToResourceClickHouseTcpOutputWithContext(ctx context.Context) ResourceClickHouseTcpOutput {
	return o
}

func (o ResourceClickHouseTcpOutput) ToResourceClickHouseTcpPtrOutput() ResourceClickHouseTcpPtrOutput {
	return o.ToResourceClickHouseTcpPtrOutputWithContext(context.Background())
}

func (o ResourceClickHouseTcpOutput) ToResourceClickHouseTcpPtrOutputWithContext(ctx context.Context) ResourceClickHouseTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClickHouseTcp) *ResourceClickHouseTcp {
		return &v
	}).(ResourceClickHouseTcpPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceClickHouseTcpOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseTcp) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceClickHouseTcpOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseTcp) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceClickHouseTcpOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseTcp) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceClickHouseTcpOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClickHouseTcp) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceClickHouseTcpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClickHouseTcp) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceClickHouseTcpOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseTcp) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceClickHouseTcpOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceClickHouseTcp) int { return v.Port }).(pulumi.IntOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceClickHouseTcpOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseTcp) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceClickHouseTcpOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseTcp) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceClickHouseTcpOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseTcp) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceClickHouseTcpOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseTcp) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceClickHouseTcpOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceClickHouseTcp) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceClickHouseTcpOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseTcp) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceClickHouseTcpOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClickHouseTcp) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceClickHouseTcpPtrOutput struct{ *pulumi.OutputState }

func (ResourceClickHouseTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClickHouseTcp)(nil)).Elem()
}

func (o ResourceClickHouseTcpPtrOutput) ToResourceClickHouseTcpPtrOutput() ResourceClickHouseTcpPtrOutput {
	return o
}

func (o ResourceClickHouseTcpPtrOutput) ToResourceClickHouseTcpPtrOutputWithContext(ctx context.Context) ResourceClickHouseTcpPtrOutput {
	return o
}

func (o ResourceClickHouseTcpPtrOutput) Elem() ResourceClickHouseTcpOutput {
	return o.ApplyT(func(v *ResourceClickHouseTcp) ResourceClickHouseTcp {
		if v != nil {
			return *v
		}
		var ret ResourceClickHouseTcp
		return ret
	}).(ResourceClickHouseTcpOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceClickHouseTcpPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseTcp) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceClickHouseTcpPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseTcp) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceClickHouseTcpPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseTcp) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceClickHouseTcpPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseTcp) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceClickHouseTcpPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseTcp) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceClickHouseTcpPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseTcp) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceClickHouseTcpPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseTcp) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceClickHouseTcpPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseTcp) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceClickHouseTcpPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseTcp) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceClickHouseTcpPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseTcp) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceClickHouseTcpPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseTcp) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceClickHouseTcpPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceClickHouseTcp) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceClickHouseTcpPtrOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseTcp) *bool {
		if v == nil {
			return nil
		}
		return v.TlsRequired
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceClickHouseTcpPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClickHouseTcp) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceClustrix struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceClustrixInput is an input type that accepts ResourceClustrixArgs and ResourceClustrixOutput values.
// You can construct a concrete instance of `ResourceClustrixInput` via:
//
//	ResourceClustrixArgs{...}
type ResourceClustrixInput interface {
	pulumi.Input

	ToResourceClustrixOutput() ResourceClustrixOutput
	ToResourceClustrixOutputWithContext(context.Context) ResourceClustrixOutput
}

type ResourceClustrixArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceClustrixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClustrix)(nil)).Elem()
}

func (i ResourceClustrixArgs) ToResourceClustrixOutput() ResourceClustrixOutput {
	return i.ToResourceClustrixOutputWithContext(context.Background())
}

func (i ResourceClustrixArgs) ToResourceClustrixOutputWithContext(ctx context.Context) ResourceClustrixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClustrixOutput)
}

func (i ResourceClustrixArgs) ToResourceClustrixPtrOutput() ResourceClustrixPtrOutput {
	return i.ToResourceClustrixPtrOutputWithContext(context.Background())
}

func (i ResourceClustrixArgs) ToResourceClustrixPtrOutputWithContext(ctx context.Context) ResourceClustrixPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClustrixOutput).ToResourceClustrixPtrOutputWithContext(ctx)
}

// ResourceClustrixPtrInput is an input type that accepts ResourceClustrixArgs, ResourceClustrixPtr and ResourceClustrixPtrOutput values.
// You can construct a concrete instance of `ResourceClustrixPtrInput` via:
//
//	        ResourceClustrixArgs{...}
//
//	or:
//
//	        nil
type ResourceClustrixPtrInput interface {
	pulumi.Input

	ToResourceClustrixPtrOutput() ResourceClustrixPtrOutput
	ToResourceClustrixPtrOutputWithContext(context.Context) ResourceClustrixPtrOutput
}

type resourceClustrixPtrType ResourceClustrixArgs

func ResourceClustrixPtr(v *ResourceClustrixArgs) ResourceClustrixPtrInput {
	return (*resourceClustrixPtrType)(v)
}

func (*resourceClustrixPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClustrix)(nil)).Elem()
}

func (i *resourceClustrixPtrType) ToResourceClustrixPtrOutput() ResourceClustrixPtrOutput {
	return i.ToResourceClustrixPtrOutputWithContext(context.Background())
}

func (i *resourceClustrixPtrType) ToResourceClustrixPtrOutputWithContext(ctx context.Context) ResourceClustrixPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClustrixPtrOutput)
}

type ResourceClustrixOutput struct{ *pulumi.OutputState }

func (ResourceClustrixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceClustrix)(nil)).Elem()
}

func (o ResourceClustrixOutput) ToResourceClustrixOutput() ResourceClustrixOutput {
	return o
}

func (o ResourceClustrixOutput) ToResourceClustrixOutputWithContext(ctx context.Context) ResourceClustrixOutput {
	return o
}

func (o ResourceClustrixOutput) ToResourceClustrixPtrOutput() ResourceClustrixPtrOutput {
	return o.ToResourceClustrixPtrOutputWithContext(context.Background())
}

func (o ResourceClustrixOutput) ToResourceClustrixPtrOutputWithContext(ctx context.Context) ResourceClustrixPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceClustrix) *ResourceClustrix {
		return &v
	}).(ResourceClustrixPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceClustrixOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClustrix) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceClustrixOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClustrix) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceClustrixOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClustrix) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceClustrixOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClustrix) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceClustrixOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceClustrix) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceClustrixOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClustrix) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceClustrixOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceClustrix) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceClustrixOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceClustrix) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceClustrixOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClustrix) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceClustrixOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceClustrix) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceClustrixOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClustrix) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceClustrixOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClustrix) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceClustrixOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceClustrix) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceClustrixOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceClustrix) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceClustrixOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceClustrix) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceClustrixPtrOutput struct{ *pulumi.OutputState }

func (ResourceClustrixPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClustrix)(nil)).Elem()
}

func (o ResourceClustrixPtrOutput) ToResourceClustrixPtrOutput() ResourceClustrixPtrOutput {
	return o
}

func (o ResourceClustrixPtrOutput) ToResourceClustrixPtrOutputWithContext(ctx context.Context) ResourceClustrixPtrOutput {
	return o
}

func (o ResourceClustrixPtrOutput) Elem() ResourceClustrixOutput {
	return o.ApplyT(func(v *ResourceClustrix) ResourceClustrix {
		if v != nil {
			return *v
		}
		var ret ResourceClustrix
		return ret
	}).(ResourceClustrixOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceClustrixPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClustrix) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceClustrixPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClustrix) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceClustrixPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClustrix) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceClustrixPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClustrix) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceClustrixPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClustrix) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceClustrixPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClustrix) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceClustrixPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceClustrix) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceClustrixPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceClustrix) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceClustrixPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClustrix) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceClustrixPtrOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceClustrix) *bool {
		if v == nil {
			return nil
		}
		return v.RequireNativeAuth
	}).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceClustrixPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClustrix) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceClustrixPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClustrix) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceClustrixPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceClustrix) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceClustrixPtrOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceClustrix) *bool {
		if v == nil {
			return nil
		}
		return v.UseAzureSingleServerUsernames
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceClustrixPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceClustrix) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceCockroach struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceCockroachInput is an input type that accepts ResourceCockroachArgs and ResourceCockroachOutput values.
// You can construct a concrete instance of `ResourceCockroachInput` via:
//
//	ResourceCockroachArgs{...}
type ResourceCockroachInput interface {
	pulumi.Input

	ToResourceCockroachOutput() ResourceCockroachOutput
	ToResourceCockroachOutputWithContext(context.Context) ResourceCockroachOutput
}

type ResourceCockroachArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceCockroachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceCockroach)(nil)).Elem()
}

func (i ResourceCockroachArgs) ToResourceCockroachOutput() ResourceCockroachOutput {
	return i.ToResourceCockroachOutputWithContext(context.Background())
}

func (i ResourceCockroachArgs) ToResourceCockroachOutputWithContext(ctx context.Context) ResourceCockroachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCockroachOutput)
}

func (i ResourceCockroachArgs) ToResourceCockroachPtrOutput() ResourceCockroachPtrOutput {
	return i.ToResourceCockroachPtrOutputWithContext(context.Background())
}

func (i ResourceCockroachArgs) ToResourceCockroachPtrOutputWithContext(ctx context.Context) ResourceCockroachPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCockroachOutput).ToResourceCockroachPtrOutputWithContext(ctx)
}

// ResourceCockroachPtrInput is an input type that accepts ResourceCockroachArgs, ResourceCockroachPtr and ResourceCockroachPtrOutput values.
// You can construct a concrete instance of `ResourceCockroachPtrInput` via:
//
//	        ResourceCockroachArgs{...}
//
//	or:
//
//	        nil
type ResourceCockroachPtrInput interface {
	pulumi.Input

	ToResourceCockroachPtrOutput() ResourceCockroachPtrOutput
	ToResourceCockroachPtrOutputWithContext(context.Context) ResourceCockroachPtrOutput
}

type resourceCockroachPtrType ResourceCockroachArgs

func ResourceCockroachPtr(v *ResourceCockroachArgs) ResourceCockroachPtrInput {
	return (*resourceCockroachPtrType)(v)
}

func (*resourceCockroachPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceCockroach)(nil)).Elem()
}

func (i *resourceCockroachPtrType) ToResourceCockroachPtrOutput() ResourceCockroachPtrOutput {
	return i.ToResourceCockroachPtrOutputWithContext(context.Background())
}

func (i *resourceCockroachPtrType) ToResourceCockroachPtrOutputWithContext(ctx context.Context) ResourceCockroachPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCockroachPtrOutput)
}

type ResourceCockroachOutput struct{ *pulumi.OutputState }

func (ResourceCockroachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceCockroach)(nil)).Elem()
}

func (o ResourceCockroachOutput) ToResourceCockroachOutput() ResourceCockroachOutput {
	return o
}

func (o ResourceCockroachOutput) ToResourceCockroachOutputWithContext(ctx context.Context) ResourceCockroachOutput {
	return o
}

func (o ResourceCockroachOutput) ToResourceCockroachPtrOutput() ResourceCockroachPtrOutput {
	return o.ToResourceCockroachPtrOutputWithContext(context.Background())
}

func (o ResourceCockroachOutput) ToResourceCockroachPtrOutputWithContext(ctx context.Context) ResourceCockroachPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceCockroach) *ResourceCockroach {
		return &v
	}).(ResourceCockroachPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceCockroachOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCockroach) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceCockroachOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceCockroach) string { return v.Database }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceCockroachOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCockroach) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceCockroachOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceCockroach) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceCockroachOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceCockroach) string { return v.Name }).(pulumi.StringOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceCockroachOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceCockroach) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceCockroachOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCockroach) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceCockroachOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceCockroach) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceCockroachOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceCockroach) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceCockroachOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCockroach) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceCockroachOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCockroach) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceCockroachOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCockroach) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceCockroachOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceCockroach) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceCockroachOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCockroach) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceCockroachPtrOutput struct{ *pulumi.OutputState }

func (ResourceCockroachPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceCockroach)(nil)).Elem()
}

func (o ResourceCockroachPtrOutput) ToResourceCockroachPtrOutput() ResourceCockroachPtrOutput {
	return o
}

func (o ResourceCockroachPtrOutput) ToResourceCockroachPtrOutputWithContext(ctx context.Context) ResourceCockroachPtrOutput {
	return o
}

func (o ResourceCockroachPtrOutput) Elem() ResourceCockroachOutput {
	return o.ApplyT(func(v *ResourceCockroach) ResourceCockroach {
		if v != nil {
			return *v
		}
		var ret ResourceCockroach
		return ret
	}).(ResourceCockroachOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceCockroachPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCockroach) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceCockroachPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCockroach) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceCockroachPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCockroach) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceCockroachPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCockroach) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceCockroachPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCockroach) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceCockroachPtrOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceCockroach) *bool {
		if v == nil {
			return nil
		}
		return v.OverrideDatabase
	}).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceCockroachPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCockroach) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceCockroachPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceCockroach) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceCockroachPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceCockroach) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceCockroachPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCockroach) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceCockroachPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCockroach) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceCockroachPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCockroach) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceCockroachPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceCockroach) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceCockroachPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCockroach) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceCouchbaseDatabase struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// The port number for N1QL queries. Default HTTP is 8093. Default HTTPS is 18093.
	N1QlPort int `pulumi:"n1QlPort"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceCouchbaseDatabaseInput is an input type that accepts ResourceCouchbaseDatabaseArgs and ResourceCouchbaseDatabaseOutput values.
// You can construct a concrete instance of `ResourceCouchbaseDatabaseInput` via:
//
//	ResourceCouchbaseDatabaseArgs{...}
type ResourceCouchbaseDatabaseInput interface {
	pulumi.Input

	ToResourceCouchbaseDatabaseOutput() ResourceCouchbaseDatabaseOutput
	ToResourceCouchbaseDatabaseOutputWithContext(context.Context) ResourceCouchbaseDatabaseOutput
}

type ResourceCouchbaseDatabaseArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The port number for N1QL queries. Default HTTP is 8093. Default HTTPS is 18093.
	N1QlPort pulumi.IntInput `pulumi:"n1QlPort"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceCouchbaseDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceCouchbaseDatabase)(nil)).Elem()
}

func (i ResourceCouchbaseDatabaseArgs) ToResourceCouchbaseDatabaseOutput() ResourceCouchbaseDatabaseOutput {
	return i.ToResourceCouchbaseDatabaseOutputWithContext(context.Background())
}

func (i ResourceCouchbaseDatabaseArgs) ToResourceCouchbaseDatabaseOutputWithContext(ctx context.Context) ResourceCouchbaseDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCouchbaseDatabaseOutput)
}

func (i ResourceCouchbaseDatabaseArgs) ToResourceCouchbaseDatabasePtrOutput() ResourceCouchbaseDatabasePtrOutput {
	return i.ToResourceCouchbaseDatabasePtrOutputWithContext(context.Background())
}

func (i ResourceCouchbaseDatabaseArgs) ToResourceCouchbaseDatabasePtrOutputWithContext(ctx context.Context) ResourceCouchbaseDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCouchbaseDatabaseOutput).ToResourceCouchbaseDatabasePtrOutputWithContext(ctx)
}

// ResourceCouchbaseDatabasePtrInput is an input type that accepts ResourceCouchbaseDatabaseArgs, ResourceCouchbaseDatabasePtr and ResourceCouchbaseDatabasePtrOutput values.
// You can construct a concrete instance of `ResourceCouchbaseDatabasePtrInput` via:
//
//	        ResourceCouchbaseDatabaseArgs{...}
//
//	or:
//
//	        nil
type ResourceCouchbaseDatabasePtrInput interface {
	pulumi.Input

	ToResourceCouchbaseDatabasePtrOutput() ResourceCouchbaseDatabasePtrOutput
	ToResourceCouchbaseDatabasePtrOutputWithContext(context.Context) ResourceCouchbaseDatabasePtrOutput
}

type resourceCouchbaseDatabasePtrType ResourceCouchbaseDatabaseArgs

func ResourceCouchbaseDatabasePtr(v *ResourceCouchbaseDatabaseArgs) ResourceCouchbaseDatabasePtrInput {
	return (*resourceCouchbaseDatabasePtrType)(v)
}

func (*resourceCouchbaseDatabasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceCouchbaseDatabase)(nil)).Elem()
}

func (i *resourceCouchbaseDatabasePtrType) ToResourceCouchbaseDatabasePtrOutput() ResourceCouchbaseDatabasePtrOutput {
	return i.ToResourceCouchbaseDatabasePtrOutputWithContext(context.Background())
}

func (i *resourceCouchbaseDatabasePtrType) ToResourceCouchbaseDatabasePtrOutputWithContext(ctx context.Context) ResourceCouchbaseDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCouchbaseDatabasePtrOutput)
}

type ResourceCouchbaseDatabaseOutput struct{ *pulumi.OutputState }

func (ResourceCouchbaseDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceCouchbaseDatabase)(nil)).Elem()
}

func (o ResourceCouchbaseDatabaseOutput) ToResourceCouchbaseDatabaseOutput() ResourceCouchbaseDatabaseOutput {
	return o
}

func (o ResourceCouchbaseDatabaseOutput) ToResourceCouchbaseDatabaseOutputWithContext(ctx context.Context) ResourceCouchbaseDatabaseOutput {
	return o
}

func (o ResourceCouchbaseDatabaseOutput) ToResourceCouchbaseDatabasePtrOutput() ResourceCouchbaseDatabasePtrOutput {
	return o.ToResourceCouchbaseDatabasePtrOutputWithContext(context.Background())
}

func (o ResourceCouchbaseDatabaseOutput) ToResourceCouchbaseDatabasePtrOutputWithContext(ctx context.Context) ResourceCouchbaseDatabasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceCouchbaseDatabase) *ResourceCouchbaseDatabase {
		return &v
	}).(ResourceCouchbaseDatabasePtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceCouchbaseDatabaseOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCouchbaseDatabase) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceCouchbaseDatabaseOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCouchbaseDatabase) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceCouchbaseDatabaseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceCouchbaseDatabase) string { return v.Hostname }).(pulumi.StringOutput)
}

// The port number for N1QL queries. Default HTTP is 8093. Default HTTPS is 18093.
func (o ResourceCouchbaseDatabaseOutput) N1QlPort() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceCouchbaseDatabase) int { return v.N1QlPort }).(pulumi.IntOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceCouchbaseDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceCouchbaseDatabase) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceCouchbaseDatabaseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCouchbaseDatabase) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceCouchbaseDatabaseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceCouchbaseDatabase) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceCouchbaseDatabaseOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceCouchbaseDatabase) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceCouchbaseDatabaseOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCouchbaseDatabase) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceCouchbaseDatabaseOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCouchbaseDatabase) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceCouchbaseDatabaseOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCouchbaseDatabase) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceCouchbaseDatabaseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceCouchbaseDatabase) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceCouchbaseDatabaseOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceCouchbaseDatabase) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceCouchbaseDatabaseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCouchbaseDatabase) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceCouchbaseDatabasePtrOutput struct{ *pulumi.OutputState }

func (ResourceCouchbaseDatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceCouchbaseDatabase)(nil)).Elem()
}

func (o ResourceCouchbaseDatabasePtrOutput) ToResourceCouchbaseDatabasePtrOutput() ResourceCouchbaseDatabasePtrOutput {
	return o
}

func (o ResourceCouchbaseDatabasePtrOutput) ToResourceCouchbaseDatabasePtrOutputWithContext(ctx context.Context) ResourceCouchbaseDatabasePtrOutput {
	return o
}

func (o ResourceCouchbaseDatabasePtrOutput) Elem() ResourceCouchbaseDatabaseOutput {
	return o.ApplyT(func(v *ResourceCouchbaseDatabase) ResourceCouchbaseDatabase {
		if v != nil {
			return *v
		}
		var ret ResourceCouchbaseDatabase
		return ret
	}).(ResourceCouchbaseDatabaseOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceCouchbaseDatabasePtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseDatabase) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceCouchbaseDatabasePtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseDatabase) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceCouchbaseDatabasePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The port number for N1QL queries. Default HTTP is 8093. Default HTTPS is 18093.
func (o ResourceCouchbaseDatabasePtrOutput) N1QlPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseDatabase) *int {
		if v == nil {
			return nil
		}
		return &v.N1QlPort
	}).(pulumi.IntPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceCouchbaseDatabasePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceCouchbaseDatabasePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceCouchbaseDatabasePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseDatabase) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceCouchbaseDatabasePtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseDatabase) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceCouchbaseDatabasePtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseDatabase) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceCouchbaseDatabasePtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseDatabase) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceCouchbaseDatabasePtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceCouchbaseDatabasePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceCouchbaseDatabase) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceCouchbaseDatabasePtrOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseDatabase) *bool {
		if v == nil {
			return nil
		}
		return v.TlsRequired
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceCouchbaseDatabasePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceCouchbaseWebUi struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url string `pulumi:"url"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceCouchbaseWebUiInput is an input type that accepts ResourceCouchbaseWebUiArgs and ResourceCouchbaseWebUiOutput values.
// You can construct a concrete instance of `ResourceCouchbaseWebUiInput` via:
//
//	ResourceCouchbaseWebUiArgs{...}
type ResourceCouchbaseWebUiInput interface {
	pulumi.Input

	ToResourceCouchbaseWebUiOutput() ResourceCouchbaseWebUiOutput
	ToResourceCouchbaseWebUiOutputWithContext(context.Context) ResourceCouchbaseWebUiOutput
}

type ResourceCouchbaseWebUiArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url pulumi.StringInput `pulumi:"url"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceCouchbaseWebUiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceCouchbaseWebUi)(nil)).Elem()
}

func (i ResourceCouchbaseWebUiArgs) ToResourceCouchbaseWebUiOutput() ResourceCouchbaseWebUiOutput {
	return i.ToResourceCouchbaseWebUiOutputWithContext(context.Background())
}

func (i ResourceCouchbaseWebUiArgs) ToResourceCouchbaseWebUiOutputWithContext(ctx context.Context) ResourceCouchbaseWebUiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCouchbaseWebUiOutput)
}

func (i ResourceCouchbaseWebUiArgs) ToResourceCouchbaseWebUiPtrOutput() ResourceCouchbaseWebUiPtrOutput {
	return i.ToResourceCouchbaseWebUiPtrOutputWithContext(context.Background())
}

func (i ResourceCouchbaseWebUiArgs) ToResourceCouchbaseWebUiPtrOutputWithContext(ctx context.Context) ResourceCouchbaseWebUiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCouchbaseWebUiOutput).ToResourceCouchbaseWebUiPtrOutputWithContext(ctx)
}

// ResourceCouchbaseWebUiPtrInput is an input type that accepts ResourceCouchbaseWebUiArgs, ResourceCouchbaseWebUiPtr and ResourceCouchbaseWebUiPtrOutput values.
// You can construct a concrete instance of `ResourceCouchbaseWebUiPtrInput` via:
//
//	        ResourceCouchbaseWebUiArgs{...}
//
//	or:
//
//	        nil
type ResourceCouchbaseWebUiPtrInput interface {
	pulumi.Input

	ToResourceCouchbaseWebUiPtrOutput() ResourceCouchbaseWebUiPtrOutput
	ToResourceCouchbaseWebUiPtrOutputWithContext(context.Context) ResourceCouchbaseWebUiPtrOutput
}

type resourceCouchbaseWebUiPtrType ResourceCouchbaseWebUiArgs

func ResourceCouchbaseWebUiPtr(v *ResourceCouchbaseWebUiArgs) ResourceCouchbaseWebUiPtrInput {
	return (*resourceCouchbaseWebUiPtrType)(v)
}

func (*resourceCouchbaseWebUiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceCouchbaseWebUi)(nil)).Elem()
}

func (i *resourceCouchbaseWebUiPtrType) ToResourceCouchbaseWebUiPtrOutput() ResourceCouchbaseWebUiPtrOutput {
	return i.ToResourceCouchbaseWebUiPtrOutputWithContext(context.Background())
}

func (i *resourceCouchbaseWebUiPtrType) ToResourceCouchbaseWebUiPtrOutputWithContext(ctx context.Context) ResourceCouchbaseWebUiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceCouchbaseWebUiPtrOutput)
}

type ResourceCouchbaseWebUiOutput struct{ *pulumi.OutputState }

func (ResourceCouchbaseWebUiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceCouchbaseWebUi)(nil)).Elem()
}

func (o ResourceCouchbaseWebUiOutput) ToResourceCouchbaseWebUiOutput() ResourceCouchbaseWebUiOutput {
	return o
}

func (o ResourceCouchbaseWebUiOutput) ToResourceCouchbaseWebUiOutputWithContext(ctx context.Context) ResourceCouchbaseWebUiOutput {
	return o
}

func (o ResourceCouchbaseWebUiOutput) ToResourceCouchbaseWebUiPtrOutput() ResourceCouchbaseWebUiPtrOutput {
	return o.ToResourceCouchbaseWebUiPtrOutputWithContext(context.Background())
}

func (o ResourceCouchbaseWebUiOutput) ToResourceCouchbaseWebUiPtrOutputWithContext(ctx context.Context) ResourceCouchbaseWebUiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceCouchbaseWebUi) *ResourceCouchbaseWebUi {
		return &v
	}).(ResourceCouchbaseWebUiPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceCouchbaseWebUiOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCouchbaseWebUi) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceCouchbaseWebUiOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCouchbaseWebUi) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceCouchbaseWebUiOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceCouchbaseWebUi) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceCouchbaseWebUiOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCouchbaseWebUi) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceCouchbaseWebUiOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceCouchbaseWebUi) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceCouchbaseWebUiOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCouchbaseWebUi) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceCouchbaseWebUiOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCouchbaseWebUi) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceCouchbaseWebUiOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceCouchbaseWebUi) string { return v.Subdomain }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceCouchbaseWebUiOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceCouchbaseWebUi) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The base address of your website without the path.
// * kubernetes:
func (o ResourceCouchbaseWebUiOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceCouchbaseWebUi) string { return v.Url }).(pulumi.StringOutput)
}

// The username to authenticate with.
func (o ResourceCouchbaseWebUiOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceCouchbaseWebUi) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceCouchbaseWebUiPtrOutput struct{ *pulumi.OutputState }

func (ResourceCouchbaseWebUiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceCouchbaseWebUi)(nil)).Elem()
}

func (o ResourceCouchbaseWebUiPtrOutput) ToResourceCouchbaseWebUiPtrOutput() ResourceCouchbaseWebUiPtrOutput {
	return o
}

func (o ResourceCouchbaseWebUiPtrOutput) ToResourceCouchbaseWebUiPtrOutputWithContext(ctx context.Context) ResourceCouchbaseWebUiPtrOutput {
	return o
}

func (o ResourceCouchbaseWebUiPtrOutput) Elem() ResourceCouchbaseWebUiOutput {
	return o.ApplyT(func(v *ResourceCouchbaseWebUi) ResourceCouchbaseWebUi {
		if v != nil {
			return *v
		}
		var ret ResourceCouchbaseWebUi
		return ret
	}).(ResourceCouchbaseWebUiOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceCouchbaseWebUiPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseWebUi) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceCouchbaseWebUiPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseWebUi) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceCouchbaseWebUiPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseWebUi) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceCouchbaseWebUiPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseWebUi) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceCouchbaseWebUiPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseWebUi) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceCouchbaseWebUiPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseWebUi) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceCouchbaseWebUiPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseWebUi) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceCouchbaseWebUiPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseWebUi) *string {
		if v == nil {
			return nil
		}
		return &v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceCouchbaseWebUiPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceCouchbaseWebUi) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The base address of your website without the path.
// * kubernetes:
func (o ResourceCouchbaseWebUiPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseWebUi) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o ResourceCouchbaseWebUiPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceCouchbaseWebUi) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceDb2I struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceDb2IInput is an input type that accepts ResourceDb2IArgs and ResourceDb2IOutput values.
// You can construct a concrete instance of `ResourceDb2IInput` via:
//
//	ResourceDb2IArgs{...}
type ResourceDb2IInput interface {
	pulumi.Input

	ToResourceDb2IOutput() ResourceDb2IOutput
	ToResourceDb2IOutputWithContext(context.Context) ResourceDb2IOutput
}

type ResourceDb2IArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceDb2IArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDb2I)(nil)).Elem()
}

func (i ResourceDb2IArgs) ToResourceDb2IOutput() ResourceDb2IOutput {
	return i.ToResourceDb2IOutputWithContext(context.Background())
}

func (i ResourceDb2IArgs) ToResourceDb2IOutputWithContext(ctx context.Context) ResourceDb2IOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDb2IOutput)
}

func (i ResourceDb2IArgs) ToResourceDb2IPtrOutput() ResourceDb2IPtrOutput {
	return i.ToResourceDb2IPtrOutputWithContext(context.Background())
}

func (i ResourceDb2IArgs) ToResourceDb2IPtrOutputWithContext(ctx context.Context) ResourceDb2IPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDb2IOutput).ToResourceDb2IPtrOutputWithContext(ctx)
}

// ResourceDb2IPtrInput is an input type that accepts ResourceDb2IArgs, ResourceDb2IPtr and ResourceDb2IPtrOutput values.
// You can construct a concrete instance of `ResourceDb2IPtrInput` via:
//
//	        ResourceDb2IArgs{...}
//
//	or:
//
//	        nil
type ResourceDb2IPtrInput interface {
	pulumi.Input

	ToResourceDb2IPtrOutput() ResourceDb2IPtrOutput
	ToResourceDb2IPtrOutputWithContext(context.Context) ResourceDb2IPtrOutput
}

type resourceDb2IPtrType ResourceDb2IArgs

func ResourceDb2IPtr(v *ResourceDb2IArgs) ResourceDb2IPtrInput {
	return (*resourceDb2IPtrType)(v)
}

func (*resourceDb2IPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDb2I)(nil)).Elem()
}

func (i *resourceDb2IPtrType) ToResourceDb2IPtrOutput() ResourceDb2IPtrOutput {
	return i.ToResourceDb2IPtrOutputWithContext(context.Background())
}

func (i *resourceDb2IPtrType) ToResourceDb2IPtrOutputWithContext(ctx context.Context) ResourceDb2IPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDb2IPtrOutput)
}

type ResourceDb2IOutput struct{ *pulumi.OutputState }

func (ResourceDb2IOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDb2I)(nil)).Elem()
}

func (o ResourceDb2IOutput) ToResourceDb2IOutput() ResourceDb2IOutput {
	return o
}

func (o ResourceDb2IOutput) ToResourceDb2IOutputWithContext(ctx context.Context) ResourceDb2IOutput {
	return o
}

func (o ResourceDb2IOutput) ToResourceDb2IPtrOutput() ResourceDb2IPtrOutput {
	return o.ToResourceDb2IPtrOutputWithContext(context.Background())
}

func (o ResourceDb2IOutput) ToResourceDb2IPtrOutputWithContext(ctx context.Context) ResourceDb2IPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceDb2I) *ResourceDb2I {
		return &v
	}).(ResourceDb2IPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceDb2IOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDb2I) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceDb2IOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDb2I) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceDb2IOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDb2I) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceDb2IOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDb2I) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceDb2IOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDb2I) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceDb2IOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceDb2I) int { return v.Port }).(pulumi.IntOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceDb2IOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceDb2I) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceDb2IOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDb2I) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceDb2IOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDb2I) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceDb2IOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDb2I) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceDb2IOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceDb2I) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceDb2IOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceDb2I) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceDb2IOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDb2I) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceDb2IPtrOutput struct{ *pulumi.OutputState }

func (ResourceDb2IPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDb2I)(nil)).Elem()
}

func (o ResourceDb2IPtrOutput) ToResourceDb2IPtrOutput() ResourceDb2IPtrOutput {
	return o
}

func (o ResourceDb2IPtrOutput) ToResourceDb2IPtrOutputWithContext(ctx context.Context) ResourceDb2IPtrOutput {
	return o
}

func (o ResourceDb2IPtrOutput) Elem() ResourceDb2IOutput {
	return o.ApplyT(func(v *ResourceDb2I) ResourceDb2I {
		if v != nil {
			return *v
		}
		var ret ResourceDb2I
		return ret
	}).(ResourceDb2IOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceDb2IPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2I) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceDb2IPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2I) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceDb2IPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2I) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceDb2IPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2I) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceDb2IPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2I) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceDb2IPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceDb2I) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceDb2IPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceDb2I) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceDb2IPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2I) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceDb2IPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2I) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceDb2IPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2I) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceDb2IPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceDb2I) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceDb2IPtrOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceDb2I) *bool {
		if v == nil {
			return nil
		}
		return v.TlsRequired
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceDb2IPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2I) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceDb2Luw struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceDb2LuwInput is an input type that accepts ResourceDb2LuwArgs and ResourceDb2LuwOutput values.
// You can construct a concrete instance of `ResourceDb2LuwInput` via:
//
//	ResourceDb2LuwArgs{...}
type ResourceDb2LuwInput interface {
	pulumi.Input

	ToResourceDb2LuwOutput() ResourceDb2LuwOutput
	ToResourceDb2LuwOutputWithContext(context.Context) ResourceDb2LuwOutput
}

type ResourceDb2LuwArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceDb2LuwArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDb2Luw)(nil)).Elem()
}

func (i ResourceDb2LuwArgs) ToResourceDb2LuwOutput() ResourceDb2LuwOutput {
	return i.ToResourceDb2LuwOutputWithContext(context.Background())
}

func (i ResourceDb2LuwArgs) ToResourceDb2LuwOutputWithContext(ctx context.Context) ResourceDb2LuwOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDb2LuwOutput)
}

func (i ResourceDb2LuwArgs) ToResourceDb2LuwPtrOutput() ResourceDb2LuwPtrOutput {
	return i.ToResourceDb2LuwPtrOutputWithContext(context.Background())
}

func (i ResourceDb2LuwArgs) ToResourceDb2LuwPtrOutputWithContext(ctx context.Context) ResourceDb2LuwPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDb2LuwOutput).ToResourceDb2LuwPtrOutputWithContext(ctx)
}

// ResourceDb2LuwPtrInput is an input type that accepts ResourceDb2LuwArgs, ResourceDb2LuwPtr and ResourceDb2LuwPtrOutput values.
// You can construct a concrete instance of `ResourceDb2LuwPtrInput` via:
//
//	        ResourceDb2LuwArgs{...}
//
//	or:
//
//	        nil
type ResourceDb2LuwPtrInput interface {
	pulumi.Input

	ToResourceDb2LuwPtrOutput() ResourceDb2LuwPtrOutput
	ToResourceDb2LuwPtrOutputWithContext(context.Context) ResourceDb2LuwPtrOutput
}

type resourceDb2LuwPtrType ResourceDb2LuwArgs

func ResourceDb2LuwPtr(v *ResourceDb2LuwArgs) ResourceDb2LuwPtrInput {
	return (*resourceDb2LuwPtrType)(v)
}

func (*resourceDb2LuwPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDb2Luw)(nil)).Elem()
}

func (i *resourceDb2LuwPtrType) ToResourceDb2LuwPtrOutput() ResourceDb2LuwPtrOutput {
	return i.ToResourceDb2LuwPtrOutputWithContext(context.Background())
}

func (i *resourceDb2LuwPtrType) ToResourceDb2LuwPtrOutputWithContext(ctx context.Context) ResourceDb2LuwPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDb2LuwPtrOutput)
}

type ResourceDb2LuwOutput struct{ *pulumi.OutputState }

func (ResourceDb2LuwOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDb2Luw)(nil)).Elem()
}

func (o ResourceDb2LuwOutput) ToResourceDb2LuwOutput() ResourceDb2LuwOutput {
	return o
}

func (o ResourceDb2LuwOutput) ToResourceDb2LuwOutputWithContext(ctx context.Context) ResourceDb2LuwOutput {
	return o
}

func (o ResourceDb2LuwOutput) ToResourceDb2LuwPtrOutput() ResourceDb2LuwPtrOutput {
	return o.ToResourceDb2LuwPtrOutputWithContext(context.Background())
}

func (o ResourceDb2LuwOutput) ToResourceDb2LuwPtrOutputWithContext(ctx context.Context) ResourceDb2LuwPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceDb2Luw) *ResourceDb2Luw {
		return &v
	}).(ResourceDb2LuwPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceDb2LuwOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDb2Luw) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceDb2LuwOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDb2Luw) string { return v.Database }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceDb2LuwOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDb2Luw) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceDb2LuwOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDb2Luw) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceDb2LuwOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDb2Luw) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceDb2LuwOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDb2Luw) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceDb2LuwOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceDb2Luw) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceDb2LuwOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceDb2Luw) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceDb2LuwOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDb2Luw) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceDb2LuwOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDb2Luw) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceDb2LuwOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDb2Luw) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceDb2LuwOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceDb2Luw) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceDb2LuwOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDb2Luw) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceDb2LuwPtrOutput struct{ *pulumi.OutputState }

func (ResourceDb2LuwPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDb2Luw)(nil)).Elem()
}

func (o ResourceDb2LuwPtrOutput) ToResourceDb2LuwPtrOutput() ResourceDb2LuwPtrOutput {
	return o
}

func (o ResourceDb2LuwPtrOutput) ToResourceDb2LuwPtrOutputWithContext(ctx context.Context) ResourceDb2LuwPtrOutput {
	return o
}

func (o ResourceDb2LuwPtrOutput) Elem() ResourceDb2LuwOutput {
	return o.ApplyT(func(v *ResourceDb2Luw) ResourceDb2Luw {
		if v != nil {
			return *v
		}
		var ret ResourceDb2Luw
		return ret
	}).(ResourceDb2LuwOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceDb2LuwPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2Luw) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceDb2LuwPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2Luw) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceDb2LuwPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2Luw) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceDb2LuwPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2Luw) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceDb2LuwPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2Luw) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceDb2LuwPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2Luw) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceDb2LuwPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceDb2Luw) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceDb2LuwPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceDb2Luw) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceDb2LuwPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2Luw) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceDb2LuwPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2Luw) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceDb2LuwPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2Luw) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceDb2LuwPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceDb2Luw) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceDb2LuwPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDb2Luw) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceDocumentDbHost struct {
	// The authentication database to use.
	AuthDatabase string `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceDocumentDbHostInput is an input type that accepts ResourceDocumentDbHostArgs and ResourceDocumentDbHostOutput values.
// You can construct a concrete instance of `ResourceDocumentDbHostInput` via:
//
//	ResourceDocumentDbHostArgs{...}
type ResourceDocumentDbHostInput interface {
	pulumi.Input

	ToResourceDocumentDbHostOutput() ResourceDocumentDbHostOutput
	ToResourceDocumentDbHostOutputWithContext(context.Context) ResourceDocumentDbHostOutput
}

type ResourceDocumentDbHostArgs struct {
	// The authentication database to use.
	AuthDatabase pulumi.StringInput `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceDocumentDbHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDocumentDbHost)(nil)).Elem()
}

func (i ResourceDocumentDbHostArgs) ToResourceDocumentDbHostOutput() ResourceDocumentDbHostOutput {
	return i.ToResourceDocumentDbHostOutputWithContext(context.Background())
}

func (i ResourceDocumentDbHostArgs) ToResourceDocumentDbHostOutputWithContext(ctx context.Context) ResourceDocumentDbHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDocumentDbHostOutput)
}

func (i ResourceDocumentDbHostArgs) ToResourceDocumentDbHostPtrOutput() ResourceDocumentDbHostPtrOutput {
	return i.ToResourceDocumentDbHostPtrOutputWithContext(context.Background())
}

func (i ResourceDocumentDbHostArgs) ToResourceDocumentDbHostPtrOutputWithContext(ctx context.Context) ResourceDocumentDbHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDocumentDbHostOutput).ToResourceDocumentDbHostPtrOutputWithContext(ctx)
}

// ResourceDocumentDbHostPtrInput is an input type that accepts ResourceDocumentDbHostArgs, ResourceDocumentDbHostPtr and ResourceDocumentDbHostPtrOutput values.
// You can construct a concrete instance of `ResourceDocumentDbHostPtrInput` via:
//
//	        ResourceDocumentDbHostArgs{...}
//
//	or:
//
//	        nil
type ResourceDocumentDbHostPtrInput interface {
	pulumi.Input

	ToResourceDocumentDbHostPtrOutput() ResourceDocumentDbHostPtrOutput
	ToResourceDocumentDbHostPtrOutputWithContext(context.Context) ResourceDocumentDbHostPtrOutput
}

type resourceDocumentDbHostPtrType ResourceDocumentDbHostArgs

func ResourceDocumentDbHostPtr(v *ResourceDocumentDbHostArgs) ResourceDocumentDbHostPtrInput {
	return (*resourceDocumentDbHostPtrType)(v)
}

func (*resourceDocumentDbHostPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDocumentDbHost)(nil)).Elem()
}

func (i *resourceDocumentDbHostPtrType) ToResourceDocumentDbHostPtrOutput() ResourceDocumentDbHostPtrOutput {
	return i.ToResourceDocumentDbHostPtrOutputWithContext(context.Background())
}

func (i *resourceDocumentDbHostPtrType) ToResourceDocumentDbHostPtrOutputWithContext(ctx context.Context) ResourceDocumentDbHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDocumentDbHostPtrOutput)
}

type ResourceDocumentDbHostOutput struct{ *pulumi.OutputState }

func (ResourceDocumentDbHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDocumentDbHost)(nil)).Elem()
}

func (o ResourceDocumentDbHostOutput) ToResourceDocumentDbHostOutput() ResourceDocumentDbHostOutput {
	return o
}

func (o ResourceDocumentDbHostOutput) ToResourceDocumentDbHostOutputWithContext(ctx context.Context) ResourceDocumentDbHostOutput {
	return o
}

func (o ResourceDocumentDbHostOutput) ToResourceDocumentDbHostPtrOutput() ResourceDocumentDbHostPtrOutput {
	return o.ToResourceDocumentDbHostPtrOutputWithContext(context.Background())
}

func (o ResourceDocumentDbHostOutput) ToResourceDocumentDbHostPtrOutputWithContext(ctx context.Context) ResourceDocumentDbHostPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceDocumentDbHost) *ResourceDocumentDbHost {
		return &v
	}).(ResourceDocumentDbHostPtrOutput)
}

// The authentication database to use.
func (o ResourceDocumentDbHostOutput) AuthDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDocumentDbHost) string { return v.AuthDatabase }).(pulumi.StringOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceDocumentDbHostOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbHost) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceDocumentDbHostOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbHost) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceDocumentDbHostOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDocumentDbHost) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceDocumentDbHostOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDocumentDbHost) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceDocumentDbHostOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbHost) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceDocumentDbHostOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbHost) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceDocumentDbHostOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbHost) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceDocumentDbHostOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbHost) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceDocumentDbHostOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbHost) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceDocumentDbHostOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbHost) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceDocumentDbHostOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceDocumentDbHost) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceDocumentDbHostOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbHost) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceDocumentDbHostPtrOutput struct{ *pulumi.OutputState }

func (ResourceDocumentDbHostPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDocumentDbHost)(nil)).Elem()
}

func (o ResourceDocumentDbHostPtrOutput) ToResourceDocumentDbHostPtrOutput() ResourceDocumentDbHostPtrOutput {
	return o
}

func (o ResourceDocumentDbHostPtrOutput) ToResourceDocumentDbHostPtrOutputWithContext(ctx context.Context) ResourceDocumentDbHostPtrOutput {
	return o
}

func (o ResourceDocumentDbHostPtrOutput) Elem() ResourceDocumentDbHostOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHost) ResourceDocumentDbHost {
		if v != nil {
			return *v
		}
		var ret ResourceDocumentDbHost
		return ret
	}).(ResourceDocumentDbHostOutput)
}

// The authentication database to use.
func (o ResourceDocumentDbHostPtrOutput) AuthDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHost) *string {
		if v == nil {
			return nil
		}
		return &v.AuthDatabase
	}).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceDocumentDbHostPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHost) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceDocumentDbHostPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHost) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceDocumentDbHostPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHost) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceDocumentDbHostPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHost) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceDocumentDbHostPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHost) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceDocumentDbHostPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHost) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceDocumentDbHostPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHost) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceDocumentDbHostPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHost) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceDocumentDbHostPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHost) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceDocumentDbHostPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHost) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceDocumentDbHostPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHost) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceDocumentDbHostPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHost) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceDocumentDbHostIam struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region string `pulumi:"region"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceDocumentDbHostIamInput is an input type that accepts ResourceDocumentDbHostIamArgs and ResourceDocumentDbHostIamOutput values.
// You can construct a concrete instance of `ResourceDocumentDbHostIamInput` via:
//
//	ResourceDocumentDbHostIamArgs{...}
type ResourceDocumentDbHostIamInput interface {
	pulumi.Input

	ToResourceDocumentDbHostIamOutput() ResourceDocumentDbHostIamOutput
	ToResourceDocumentDbHostIamOutputWithContext(context.Context) ResourceDocumentDbHostIamOutput
}

type ResourceDocumentDbHostIamArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringInput `pulumi:"region"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceDocumentDbHostIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDocumentDbHostIam)(nil)).Elem()
}

func (i ResourceDocumentDbHostIamArgs) ToResourceDocumentDbHostIamOutput() ResourceDocumentDbHostIamOutput {
	return i.ToResourceDocumentDbHostIamOutputWithContext(context.Background())
}

func (i ResourceDocumentDbHostIamArgs) ToResourceDocumentDbHostIamOutputWithContext(ctx context.Context) ResourceDocumentDbHostIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDocumentDbHostIamOutput)
}

func (i ResourceDocumentDbHostIamArgs) ToResourceDocumentDbHostIamPtrOutput() ResourceDocumentDbHostIamPtrOutput {
	return i.ToResourceDocumentDbHostIamPtrOutputWithContext(context.Background())
}

func (i ResourceDocumentDbHostIamArgs) ToResourceDocumentDbHostIamPtrOutputWithContext(ctx context.Context) ResourceDocumentDbHostIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDocumentDbHostIamOutput).ToResourceDocumentDbHostIamPtrOutputWithContext(ctx)
}

// ResourceDocumentDbHostIamPtrInput is an input type that accepts ResourceDocumentDbHostIamArgs, ResourceDocumentDbHostIamPtr and ResourceDocumentDbHostIamPtrOutput values.
// You can construct a concrete instance of `ResourceDocumentDbHostIamPtrInput` via:
//
//	        ResourceDocumentDbHostIamArgs{...}
//
//	or:
//
//	        nil
type ResourceDocumentDbHostIamPtrInput interface {
	pulumi.Input

	ToResourceDocumentDbHostIamPtrOutput() ResourceDocumentDbHostIamPtrOutput
	ToResourceDocumentDbHostIamPtrOutputWithContext(context.Context) ResourceDocumentDbHostIamPtrOutput
}

type resourceDocumentDbHostIamPtrType ResourceDocumentDbHostIamArgs

func ResourceDocumentDbHostIamPtr(v *ResourceDocumentDbHostIamArgs) ResourceDocumentDbHostIamPtrInput {
	return (*resourceDocumentDbHostIamPtrType)(v)
}

func (*resourceDocumentDbHostIamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDocumentDbHostIam)(nil)).Elem()
}

func (i *resourceDocumentDbHostIamPtrType) ToResourceDocumentDbHostIamPtrOutput() ResourceDocumentDbHostIamPtrOutput {
	return i.ToResourceDocumentDbHostIamPtrOutputWithContext(context.Background())
}

func (i *resourceDocumentDbHostIamPtrType) ToResourceDocumentDbHostIamPtrOutputWithContext(ctx context.Context) ResourceDocumentDbHostIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDocumentDbHostIamPtrOutput)
}

type ResourceDocumentDbHostIamOutput struct{ *pulumi.OutputState }

func (ResourceDocumentDbHostIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDocumentDbHostIam)(nil)).Elem()
}

func (o ResourceDocumentDbHostIamOutput) ToResourceDocumentDbHostIamOutput() ResourceDocumentDbHostIamOutput {
	return o
}

func (o ResourceDocumentDbHostIamOutput) ToResourceDocumentDbHostIamOutputWithContext(ctx context.Context) ResourceDocumentDbHostIamOutput {
	return o
}

func (o ResourceDocumentDbHostIamOutput) ToResourceDocumentDbHostIamPtrOutput() ResourceDocumentDbHostIamPtrOutput {
	return o.ToResourceDocumentDbHostIamPtrOutputWithContext(context.Background())
}

func (o ResourceDocumentDbHostIamOutput) ToResourceDocumentDbHostIamPtrOutputWithContext(ctx context.Context) ResourceDocumentDbHostIamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceDocumentDbHostIam) *ResourceDocumentDbHostIam {
		return &v
	}).(ResourceDocumentDbHostIamPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceDocumentDbHostIamOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbHostIam) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceDocumentDbHostIamOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbHostIam) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceDocumentDbHostIamOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDocumentDbHostIam) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceDocumentDbHostIamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDocumentDbHostIam) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceDocumentDbHostIamOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbHostIam) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceDocumentDbHostIamOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbHostIam) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceDocumentDbHostIamOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbHostIam) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceDocumentDbHostIamOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDocumentDbHostIam) string { return v.Region }).(pulumi.StringOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceDocumentDbHostIamOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbHostIam) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceDocumentDbHostIamOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbHostIam) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceDocumentDbHostIamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceDocumentDbHostIam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceDocumentDbHostIamPtrOutput struct{ *pulumi.OutputState }

func (ResourceDocumentDbHostIamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDocumentDbHostIam)(nil)).Elem()
}

func (o ResourceDocumentDbHostIamPtrOutput) ToResourceDocumentDbHostIamPtrOutput() ResourceDocumentDbHostIamPtrOutput {
	return o
}

func (o ResourceDocumentDbHostIamPtrOutput) ToResourceDocumentDbHostIamPtrOutputWithContext(ctx context.Context) ResourceDocumentDbHostIamPtrOutput {
	return o
}

func (o ResourceDocumentDbHostIamPtrOutput) Elem() ResourceDocumentDbHostIamOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHostIam) ResourceDocumentDbHostIam {
		if v != nil {
			return *v
		}
		var ret ResourceDocumentDbHostIam
		return ret
	}).(ResourceDocumentDbHostIamOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceDocumentDbHostIamPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHostIam) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceDocumentDbHostIamPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHostIam) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceDocumentDbHostIamPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHostIam) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceDocumentDbHostIamPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHostIam) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceDocumentDbHostIamPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHostIam) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceDocumentDbHostIamPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHostIam) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceDocumentDbHostIamPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHostIam) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceDocumentDbHostIamPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHostIam) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceDocumentDbHostIamPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHostIam) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceDocumentDbHostIamPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHostIam) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceDocumentDbHostIamPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceDocumentDbHostIam) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceDocumentDbReplicaSet struct {
	// The authentication database to use.
	AuthDatabase string `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// Set to connect to a replica instead of the primary node.
	ConnectToReplica *bool `pulumi:"connectToReplica"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The name of the mongo replicaset.
	ReplicaSet string `pulumi:"replicaSet"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceDocumentDbReplicaSetInput is an input type that accepts ResourceDocumentDbReplicaSetArgs and ResourceDocumentDbReplicaSetOutput values.
// You can construct a concrete instance of `ResourceDocumentDbReplicaSetInput` via:
//
//	ResourceDocumentDbReplicaSetArgs{...}
type ResourceDocumentDbReplicaSetInput interface {
	pulumi.Input

	ToResourceDocumentDbReplicaSetOutput() ResourceDocumentDbReplicaSetOutput
	ToResourceDocumentDbReplicaSetOutputWithContext(context.Context) ResourceDocumentDbReplicaSetOutput
}

type ResourceDocumentDbReplicaSetArgs struct {
	// The authentication database to use.
	AuthDatabase pulumi.StringInput `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// Set to connect to a replica instead of the primary node.
	ConnectToReplica pulumi.BoolPtrInput `pulumi:"connectToReplica"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The name of the mongo replicaset.
	ReplicaSet pulumi.StringInput `pulumi:"replicaSet"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceDocumentDbReplicaSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDocumentDbReplicaSet)(nil)).Elem()
}

func (i ResourceDocumentDbReplicaSetArgs) ToResourceDocumentDbReplicaSetOutput() ResourceDocumentDbReplicaSetOutput {
	return i.ToResourceDocumentDbReplicaSetOutputWithContext(context.Background())
}

func (i ResourceDocumentDbReplicaSetArgs) ToResourceDocumentDbReplicaSetOutputWithContext(ctx context.Context) ResourceDocumentDbReplicaSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDocumentDbReplicaSetOutput)
}

func (i ResourceDocumentDbReplicaSetArgs) ToResourceDocumentDbReplicaSetPtrOutput() ResourceDocumentDbReplicaSetPtrOutput {
	return i.ToResourceDocumentDbReplicaSetPtrOutputWithContext(context.Background())
}

func (i ResourceDocumentDbReplicaSetArgs) ToResourceDocumentDbReplicaSetPtrOutputWithContext(ctx context.Context) ResourceDocumentDbReplicaSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDocumentDbReplicaSetOutput).ToResourceDocumentDbReplicaSetPtrOutputWithContext(ctx)
}

// ResourceDocumentDbReplicaSetPtrInput is an input type that accepts ResourceDocumentDbReplicaSetArgs, ResourceDocumentDbReplicaSetPtr and ResourceDocumentDbReplicaSetPtrOutput values.
// You can construct a concrete instance of `ResourceDocumentDbReplicaSetPtrInput` via:
//
//	        ResourceDocumentDbReplicaSetArgs{...}
//
//	or:
//
//	        nil
type ResourceDocumentDbReplicaSetPtrInput interface {
	pulumi.Input

	ToResourceDocumentDbReplicaSetPtrOutput() ResourceDocumentDbReplicaSetPtrOutput
	ToResourceDocumentDbReplicaSetPtrOutputWithContext(context.Context) ResourceDocumentDbReplicaSetPtrOutput
}

type resourceDocumentDbReplicaSetPtrType ResourceDocumentDbReplicaSetArgs

func ResourceDocumentDbReplicaSetPtr(v *ResourceDocumentDbReplicaSetArgs) ResourceDocumentDbReplicaSetPtrInput {
	return (*resourceDocumentDbReplicaSetPtrType)(v)
}

func (*resourceDocumentDbReplicaSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDocumentDbReplicaSet)(nil)).Elem()
}

func (i *resourceDocumentDbReplicaSetPtrType) ToResourceDocumentDbReplicaSetPtrOutput() ResourceDocumentDbReplicaSetPtrOutput {
	return i.ToResourceDocumentDbReplicaSetPtrOutputWithContext(context.Background())
}

func (i *resourceDocumentDbReplicaSetPtrType) ToResourceDocumentDbReplicaSetPtrOutputWithContext(ctx context.Context) ResourceDocumentDbReplicaSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDocumentDbReplicaSetPtrOutput)
}

type ResourceDocumentDbReplicaSetOutput struct{ *pulumi.OutputState }

func (ResourceDocumentDbReplicaSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDocumentDbReplicaSet)(nil)).Elem()
}

func (o ResourceDocumentDbReplicaSetOutput) ToResourceDocumentDbReplicaSetOutput() ResourceDocumentDbReplicaSetOutput {
	return o
}

func (o ResourceDocumentDbReplicaSetOutput) ToResourceDocumentDbReplicaSetOutputWithContext(ctx context.Context) ResourceDocumentDbReplicaSetOutput {
	return o
}

func (o ResourceDocumentDbReplicaSetOutput) ToResourceDocumentDbReplicaSetPtrOutput() ResourceDocumentDbReplicaSetPtrOutput {
	return o.ToResourceDocumentDbReplicaSetPtrOutputWithContext(context.Background())
}

func (o ResourceDocumentDbReplicaSetOutput) ToResourceDocumentDbReplicaSetPtrOutputWithContext(ctx context.Context) ResourceDocumentDbReplicaSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceDocumentDbReplicaSet) *ResourceDocumentDbReplicaSet {
		return &v
	}).(ResourceDocumentDbReplicaSetPtrOutput)
}

// The authentication database to use.
func (o ResourceDocumentDbReplicaSetOutput) AuthDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDocumentDbReplicaSet) string { return v.AuthDatabase }).(pulumi.StringOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceDocumentDbReplicaSetOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbReplicaSet) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// Set to connect to a replica instead of the primary node.
func (o ResourceDocumentDbReplicaSetOutput) ConnectToReplica() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbReplicaSet) *bool { return v.ConnectToReplica }).(pulumi.BoolPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceDocumentDbReplicaSetOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbReplicaSet) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceDocumentDbReplicaSetOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDocumentDbReplicaSet) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceDocumentDbReplicaSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDocumentDbReplicaSet) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceDocumentDbReplicaSetOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbReplicaSet) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceDocumentDbReplicaSetOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbReplicaSet) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceDocumentDbReplicaSetOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbReplicaSet) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The name of the mongo replicaset.
func (o ResourceDocumentDbReplicaSetOutput) ReplicaSet() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDocumentDbReplicaSet) string { return v.ReplicaSet }).(pulumi.StringOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceDocumentDbReplicaSetOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbReplicaSet) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceDocumentDbReplicaSetOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbReplicaSet) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceDocumentDbReplicaSetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceDocumentDbReplicaSet) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceDocumentDbReplicaSetOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDocumentDbReplicaSet) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceDocumentDbReplicaSetPtrOutput struct{ *pulumi.OutputState }

func (ResourceDocumentDbReplicaSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDocumentDbReplicaSet)(nil)).Elem()
}

func (o ResourceDocumentDbReplicaSetPtrOutput) ToResourceDocumentDbReplicaSetPtrOutput() ResourceDocumentDbReplicaSetPtrOutput {
	return o
}

func (o ResourceDocumentDbReplicaSetPtrOutput) ToResourceDocumentDbReplicaSetPtrOutputWithContext(ctx context.Context) ResourceDocumentDbReplicaSetPtrOutput {
	return o
}

func (o ResourceDocumentDbReplicaSetPtrOutput) Elem() ResourceDocumentDbReplicaSetOutput {
	return o.ApplyT(func(v *ResourceDocumentDbReplicaSet) ResourceDocumentDbReplicaSet {
		if v != nil {
			return *v
		}
		var ret ResourceDocumentDbReplicaSet
		return ret
	}).(ResourceDocumentDbReplicaSetOutput)
}

// The authentication database to use.
func (o ResourceDocumentDbReplicaSetPtrOutput) AuthDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbReplicaSet) *string {
		if v == nil {
			return nil
		}
		return &v.AuthDatabase
	}).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceDocumentDbReplicaSetPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbReplicaSet) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// Set to connect to a replica instead of the primary node.
func (o ResourceDocumentDbReplicaSetPtrOutput) ConnectToReplica() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbReplicaSet) *bool {
		if v == nil {
			return nil
		}
		return v.ConnectToReplica
	}).(pulumi.BoolPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceDocumentDbReplicaSetPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbReplicaSet) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceDocumentDbReplicaSetPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbReplicaSet) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceDocumentDbReplicaSetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbReplicaSet) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceDocumentDbReplicaSetPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbReplicaSet) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceDocumentDbReplicaSetPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbReplicaSet) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceDocumentDbReplicaSetPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbReplicaSet) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The name of the mongo replicaset.
func (o ResourceDocumentDbReplicaSetPtrOutput) ReplicaSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbReplicaSet) *string {
		if v == nil {
			return nil
		}
		return &v.ReplicaSet
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceDocumentDbReplicaSetPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbReplicaSet) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceDocumentDbReplicaSetPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbReplicaSet) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceDocumentDbReplicaSetPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceDocumentDbReplicaSet) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceDocumentDbReplicaSetPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDocumentDbReplicaSet) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceDruid struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceDruidInput is an input type that accepts ResourceDruidArgs and ResourceDruidOutput values.
// You can construct a concrete instance of `ResourceDruidInput` via:
//
//	ResourceDruidArgs{...}
type ResourceDruidInput interface {
	pulumi.Input

	ToResourceDruidOutput() ResourceDruidOutput
	ToResourceDruidOutputWithContext(context.Context) ResourceDruidOutput
}

type ResourceDruidArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceDruidArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDruid)(nil)).Elem()
}

func (i ResourceDruidArgs) ToResourceDruidOutput() ResourceDruidOutput {
	return i.ToResourceDruidOutputWithContext(context.Background())
}

func (i ResourceDruidArgs) ToResourceDruidOutputWithContext(ctx context.Context) ResourceDruidOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDruidOutput)
}

func (i ResourceDruidArgs) ToResourceDruidPtrOutput() ResourceDruidPtrOutput {
	return i.ToResourceDruidPtrOutputWithContext(context.Background())
}

func (i ResourceDruidArgs) ToResourceDruidPtrOutputWithContext(ctx context.Context) ResourceDruidPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDruidOutput).ToResourceDruidPtrOutputWithContext(ctx)
}

// ResourceDruidPtrInput is an input type that accepts ResourceDruidArgs, ResourceDruidPtr and ResourceDruidPtrOutput values.
// You can construct a concrete instance of `ResourceDruidPtrInput` via:
//
//	        ResourceDruidArgs{...}
//
//	or:
//
//	        nil
type ResourceDruidPtrInput interface {
	pulumi.Input

	ToResourceDruidPtrOutput() ResourceDruidPtrOutput
	ToResourceDruidPtrOutputWithContext(context.Context) ResourceDruidPtrOutput
}

type resourceDruidPtrType ResourceDruidArgs

func ResourceDruidPtr(v *ResourceDruidArgs) ResourceDruidPtrInput {
	return (*resourceDruidPtrType)(v)
}

func (*resourceDruidPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDruid)(nil)).Elem()
}

func (i *resourceDruidPtrType) ToResourceDruidPtrOutput() ResourceDruidPtrOutput {
	return i.ToResourceDruidPtrOutputWithContext(context.Background())
}

func (i *resourceDruidPtrType) ToResourceDruidPtrOutputWithContext(ctx context.Context) ResourceDruidPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDruidPtrOutput)
}

type ResourceDruidOutput struct{ *pulumi.OutputState }

func (ResourceDruidOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDruid)(nil)).Elem()
}

func (o ResourceDruidOutput) ToResourceDruidOutput() ResourceDruidOutput {
	return o
}

func (o ResourceDruidOutput) ToResourceDruidOutputWithContext(ctx context.Context) ResourceDruidOutput {
	return o
}

func (o ResourceDruidOutput) ToResourceDruidPtrOutput() ResourceDruidPtrOutput {
	return o.ToResourceDruidPtrOutputWithContext(context.Background())
}

func (o ResourceDruidOutput) ToResourceDruidPtrOutputWithContext(ctx context.Context) ResourceDruidPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceDruid) *ResourceDruid {
		return &v
	}).(ResourceDruidPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceDruidOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDruid) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceDruidOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDruid) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceDruidOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDruid) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceDruidOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDruid) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceDruidOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDruid) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceDruidOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceDruid) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceDruidOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceDruid) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceDruidOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDruid) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceDruidOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDruid) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceDruidOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDruid) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceDruidOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceDruid) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceDruidOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDruid) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceDruidPtrOutput struct{ *pulumi.OutputState }

func (ResourceDruidPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDruid)(nil)).Elem()
}

func (o ResourceDruidPtrOutput) ToResourceDruidPtrOutput() ResourceDruidPtrOutput {
	return o
}

func (o ResourceDruidPtrOutput) ToResourceDruidPtrOutputWithContext(ctx context.Context) ResourceDruidPtrOutput {
	return o
}

func (o ResourceDruidPtrOutput) Elem() ResourceDruidOutput {
	return o.ApplyT(func(v *ResourceDruid) ResourceDruid {
		if v != nil {
			return *v
		}
		var ret ResourceDruid
		return ret
	}).(ResourceDruidOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceDruidPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDruid) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceDruidPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDruid) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceDruidPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDruid) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceDruidPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDruid) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceDruidPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDruid) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceDruidPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceDruid) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceDruidPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceDruid) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceDruidPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDruid) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceDruidPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDruid) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceDruidPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDruid) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceDruidPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceDruid) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceDruidPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDruid) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceDynamoDb struct {
	// The Access Key ID to use to authenticate.
	AccessKey *string `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint string `pulumi:"endpoint"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceDynamoDbInput is an input type that accepts ResourceDynamoDbArgs and ResourceDynamoDbOutput values.
// You can construct a concrete instance of `ResourceDynamoDbInput` via:
//
//	ResourceDynamoDbArgs{...}
type ResourceDynamoDbInput interface {
	pulumi.Input

	ToResourceDynamoDbOutput() ResourceDynamoDbOutput
	ToResourceDynamoDbOutputWithContext(context.Context) ResourceDynamoDbOutput
}

type ResourceDynamoDbArgs struct {
	// The Access Key ID to use to authenticate.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceDynamoDbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDynamoDb)(nil)).Elem()
}

func (i ResourceDynamoDbArgs) ToResourceDynamoDbOutput() ResourceDynamoDbOutput {
	return i.ToResourceDynamoDbOutputWithContext(context.Background())
}

func (i ResourceDynamoDbArgs) ToResourceDynamoDbOutputWithContext(ctx context.Context) ResourceDynamoDbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDynamoDbOutput)
}

func (i ResourceDynamoDbArgs) ToResourceDynamoDbPtrOutput() ResourceDynamoDbPtrOutput {
	return i.ToResourceDynamoDbPtrOutputWithContext(context.Background())
}

func (i ResourceDynamoDbArgs) ToResourceDynamoDbPtrOutputWithContext(ctx context.Context) ResourceDynamoDbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDynamoDbOutput).ToResourceDynamoDbPtrOutputWithContext(ctx)
}

// ResourceDynamoDbPtrInput is an input type that accepts ResourceDynamoDbArgs, ResourceDynamoDbPtr and ResourceDynamoDbPtrOutput values.
// You can construct a concrete instance of `ResourceDynamoDbPtrInput` via:
//
//	        ResourceDynamoDbArgs{...}
//
//	or:
//
//	        nil
type ResourceDynamoDbPtrInput interface {
	pulumi.Input

	ToResourceDynamoDbPtrOutput() ResourceDynamoDbPtrOutput
	ToResourceDynamoDbPtrOutputWithContext(context.Context) ResourceDynamoDbPtrOutput
}

type resourceDynamoDbPtrType ResourceDynamoDbArgs

func ResourceDynamoDbPtr(v *ResourceDynamoDbArgs) ResourceDynamoDbPtrInput {
	return (*resourceDynamoDbPtrType)(v)
}

func (*resourceDynamoDbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDynamoDb)(nil)).Elem()
}

func (i *resourceDynamoDbPtrType) ToResourceDynamoDbPtrOutput() ResourceDynamoDbPtrOutput {
	return i.ToResourceDynamoDbPtrOutputWithContext(context.Background())
}

func (i *resourceDynamoDbPtrType) ToResourceDynamoDbPtrOutputWithContext(ctx context.Context) ResourceDynamoDbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDynamoDbPtrOutput)
}

type ResourceDynamoDbOutput struct{ *pulumi.OutputState }

func (ResourceDynamoDbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDynamoDb)(nil)).Elem()
}

func (o ResourceDynamoDbOutput) ToResourceDynamoDbOutput() ResourceDynamoDbOutput {
	return o
}

func (o ResourceDynamoDbOutput) ToResourceDynamoDbOutputWithContext(ctx context.Context) ResourceDynamoDbOutput {
	return o
}

func (o ResourceDynamoDbOutput) ToResourceDynamoDbPtrOutput() ResourceDynamoDbPtrOutput {
	return o.ToResourceDynamoDbPtrOutputWithContext(context.Background())
}

func (o ResourceDynamoDbOutput) ToResourceDynamoDbPtrOutputWithContext(ctx context.Context) ResourceDynamoDbPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceDynamoDb) *ResourceDynamoDb {
		return &v
	}).(ResourceDynamoDbPtrOutput)
}

// The Access Key ID to use to authenticate.
func (o ResourceDynamoDbOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDb) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceDynamoDbOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDb) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceDynamoDbOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDb) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceDynamoDbOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDynamoDb) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceDynamoDbOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDynamoDb) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceDynamoDbOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDb) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceDynamoDbOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDb) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceDynamoDbOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDynamoDb) string { return v.Region }).(pulumi.StringOutput)
}

// The role to assume after logging in.
func (o ResourceDynamoDbOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDb) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceDynamoDbOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDb) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o ResourceDynamoDbOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDb) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceDynamoDbOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDb) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceDynamoDbOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDb) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceDynamoDbOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceDynamoDb) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceDynamoDbPtrOutput struct{ *pulumi.OutputState }

func (ResourceDynamoDbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDynamoDb)(nil)).Elem()
}

func (o ResourceDynamoDbPtrOutput) ToResourceDynamoDbPtrOutput() ResourceDynamoDbPtrOutput {
	return o
}

func (o ResourceDynamoDbPtrOutput) ToResourceDynamoDbPtrOutputWithContext(ctx context.Context) ResourceDynamoDbPtrOutput {
	return o
}

func (o ResourceDynamoDbPtrOutput) Elem() ResourceDynamoDbOutput {
	return o.ApplyT(func(v *ResourceDynamoDb) ResourceDynamoDb {
		if v != nil {
			return *v
		}
		var ret ResourceDynamoDb
		return ret
	}).(ResourceDynamoDbOutput)
}

// The Access Key ID to use to authenticate.
func (o ResourceDynamoDbPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDb) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceDynamoDbPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDb) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceDynamoDbPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDb) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceDynamoDbPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDb) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceDynamoDbPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDb) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceDynamoDbPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDb) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceDynamoDbPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDb) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceDynamoDbPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDb) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o ResourceDynamoDbPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDb) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceDynamoDbPtrOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDb) *string {
		if v == nil {
			return nil
		}
		return v.RoleExternalId
	}).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o ResourceDynamoDbPtrOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDb) *string {
		if v == nil {
			return nil
		}
		return v.SecretAccessKey
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceDynamoDbPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDb) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceDynamoDbPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDb) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceDynamoDbPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceDynamoDb) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceDynamoDbiam struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint string `pulumi:"endpoint"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceDynamoDbiamInput is an input type that accepts ResourceDynamoDbiamArgs and ResourceDynamoDbiamOutput values.
// You can construct a concrete instance of `ResourceDynamoDbiamInput` via:
//
//	ResourceDynamoDbiamArgs{...}
type ResourceDynamoDbiamInput interface {
	pulumi.Input

	ToResourceDynamoDbiamOutput() ResourceDynamoDbiamOutput
	ToResourceDynamoDbiamOutputWithContext(context.Context) ResourceDynamoDbiamOutput
}

type ResourceDynamoDbiamArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceDynamoDbiamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDynamoDbiam)(nil)).Elem()
}

func (i ResourceDynamoDbiamArgs) ToResourceDynamoDbiamOutput() ResourceDynamoDbiamOutput {
	return i.ToResourceDynamoDbiamOutputWithContext(context.Background())
}

func (i ResourceDynamoDbiamArgs) ToResourceDynamoDbiamOutputWithContext(ctx context.Context) ResourceDynamoDbiamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDynamoDbiamOutput)
}

func (i ResourceDynamoDbiamArgs) ToResourceDynamoDbiamPtrOutput() ResourceDynamoDbiamPtrOutput {
	return i.ToResourceDynamoDbiamPtrOutputWithContext(context.Background())
}

func (i ResourceDynamoDbiamArgs) ToResourceDynamoDbiamPtrOutputWithContext(ctx context.Context) ResourceDynamoDbiamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDynamoDbiamOutput).ToResourceDynamoDbiamPtrOutputWithContext(ctx)
}

// ResourceDynamoDbiamPtrInput is an input type that accepts ResourceDynamoDbiamArgs, ResourceDynamoDbiamPtr and ResourceDynamoDbiamPtrOutput values.
// You can construct a concrete instance of `ResourceDynamoDbiamPtrInput` via:
//
//	        ResourceDynamoDbiamArgs{...}
//
//	or:
//
//	        nil
type ResourceDynamoDbiamPtrInput interface {
	pulumi.Input

	ToResourceDynamoDbiamPtrOutput() ResourceDynamoDbiamPtrOutput
	ToResourceDynamoDbiamPtrOutputWithContext(context.Context) ResourceDynamoDbiamPtrOutput
}

type resourceDynamoDbiamPtrType ResourceDynamoDbiamArgs

func ResourceDynamoDbiamPtr(v *ResourceDynamoDbiamArgs) ResourceDynamoDbiamPtrInput {
	return (*resourceDynamoDbiamPtrType)(v)
}

func (*resourceDynamoDbiamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDynamoDbiam)(nil)).Elem()
}

func (i *resourceDynamoDbiamPtrType) ToResourceDynamoDbiamPtrOutput() ResourceDynamoDbiamPtrOutput {
	return i.ToResourceDynamoDbiamPtrOutputWithContext(context.Background())
}

func (i *resourceDynamoDbiamPtrType) ToResourceDynamoDbiamPtrOutputWithContext(ctx context.Context) ResourceDynamoDbiamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceDynamoDbiamPtrOutput)
}

type ResourceDynamoDbiamOutput struct{ *pulumi.OutputState }

func (ResourceDynamoDbiamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceDynamoDbiam)(nil)).Elem()
}

func (o ResourceDynamoDbiamOutput) ToResourceDynamoDbiamOutput() ResourceDynamoDbiamOutput {
	return o
}

func (o ResourceDynamoDbiamOutput) ToResourceDynamoDbiamOutputWithContext(ctx context.Context) ResourceDynamoDbiamOutput {
	return o
}

func (o ResourceDynamoDbiamOutput) ToResourceDynamoDbiamPtrOutput() ResourceDynamoDbiamPtrOutput {
	return o.ToResourceDynamoDbiamPtrOutputWithContext(context.Background())
}

func (o ResourceDynamoDbiamOutput) ToResourceDynamoDbiamPtrOutputWithContext(ctx context.Context) ResourceDynamoDbiamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceDynamoDbiam) *ResourceDynamoDbiam {
		return &v
	}).(ResourceDynamoDbiamPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceDynamoDbiamOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDbiam) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceDynamoDbiamOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDbiam) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceDynamoDbiamOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDynamoDbiam) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceDynamoDbiamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDynamoDbiam) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceDynamoDbiamOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDbiam) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceDynamoDbiamOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDbiam) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceDynamoDbiamOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceDynamoDbiam) string { return v.Region }).(pulumi.StringOutput)
}

// The role to assume after logging in.
func (o ResourceDynamoDbiamOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDbiam) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceDynamoDbiamOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDbiam) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceDynamoDbiamOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDbiam) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceDynamoDbiamOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceDynamoDbiam) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceDynamoDbiamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceDynamoDbiam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceDynamoDbiamPtrOutput struct{ *pulumi.OutputState }

func (ResourceDynamoDbiamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceDynamoDbiam)(nil)).Elem()
}

func (o ResourceDynamoDbiamPtrOutput) ToResourceDynamoDbiamPtrOutput() ResourceDynamoDbiamPtrOutput {
	return o
}

func (o ResourceDynamoDbiamPtrOutput) ToResourceDynamoDbiamPtrOutputWithContext(ctx context.Context) ResourceDynamoDbiamPtrOutput {
	return o
}

func (o ResourceDynamoDbiamPtrOutput) Elem() ResourceDynamoDbiamOutput {
	return o.ApplyT(func(v *ResourceDynamoDbiam) ResourceDynamoDbiam {
		if v != nil {
			return *v
		}
		var ret ResourceDynamoDbiam
		return ret
	}).(ResourceDynamoDbiamOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceDynamoDbiamPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDbiam) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceDynamoDbiamPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDbiam) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceDynamoDbiamPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDbiam) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceDynamoDbiamPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDbiam) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceDynamoDbiamPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDbiam) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceDynamoDbiamPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDbiam) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceDynamoDbiamPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDbiam) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o ResourceDynamoDbiamPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDbiam) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceDynamoDbiamPtrOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDbiam) *string {
		if v == nil {
			return nil
		}
		return v.RoleExternalId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceDynamoDbiamPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDbiam) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceDynamoDbiamPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceDynamoDbiam) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceDynamoDbiamPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceDynamoDbiam) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceElastic struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceElasticInput is an input type that accepts ResourceElasticArgs and ResourceElasticOutput values.
// You can construct a concrete instance of `ResourceElasticInput` via:
//
//	ResourceElasticArgs{...}
type ResourceElasticInput interface {
	pulumi.Input

	ToResourceElasticOutput() ResourceElasticOutput
	ToResourceElasticOutputWithContext(context.Context) ResourceElasticOutput
}

type ResourceElasticArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceElasticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceElastic)(nil)).Elem()
}

func (i ResourceElasticArgs) ToResourceElasticOutput() ResourceElasticOutput {
	return i.ToResourceElasticOutputWithContext(context.Background())
}

func (i ResourceElasticArgs) ToResourceElasticOutputWithContext(ctx context.Context) ResourceElasticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceElasticOutput)
}

func (i ResourceElasticArgs) ToResourceElasticPtrOutput() ResourceElasticPtrOutput {
	return i.ToResourceElasticPtrOutputWithContext(context.Background())
}

func (i ResourceElasticArgs) ToResourceElasticPtrOutputWithContext(ctx context.Context) ResourceElasticPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceElasticOutput).ToResourceElasticPtrOutputWithContext(ctx)
}

// ResourceElasticPtrInput is an input type that accepts ResourceElasticArgs, ResourceElasticPtr and ResourceElasticPtrOutput values.
// You can construct a concrete instance of `ResourceElasticPtrInput` via:
//
//	        ResourceElasticArgs{...}
//
//	or:
//
//	        nil
type ResourceElasticPtrInput interface {
	pulumi.Input

	ToResourceElasticPtrOutput() ResourceElasticPtrOutput
	ToResourceElasticPtrOutputWithContext(context.Context) ResourceElasticPtrOutput
}

type resourceElasticPtrType ResourceElasticArgs

func ResourceElasticPtr(v *ResourceElasticArgs) ResourceElasticPtrInput {
	return (*resourceElasticPtrType)(v)
}

func (*resourceElasticPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceElastic)(nil)).Elem()
}

func (i *resourceElasticPtrType) ToResourceElasticPtrOutput() ResourceElasticPtrOutput {
	return i.ToResourceElasticPtrOutputWithContext(context.Background())
}

func (i *resourceElasticPtrType) ToResourceElasticPtrOutputWithContext(ctx context.Context) ResourceElasticPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceElasticPtrOutput)
}

type ResourceElasticOutput struct{ *pulumi.OutputState }

func (ResourceElasticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceElastic)(nil)).Elem()
}

func (o ResourceElasticOutput) ToResourceElasticOutput() ResourceElasticOutput {
	return o
}

func (o ResourceElasticOutput) ToResourceElasticOutputWithContext(ctx context.Context) ResourceElasticOutput {
	return o
}

func (o ResourceElasticOutput) ToResourceElasticPtrOutput() ResourceElasticPtrOutput {
	return o.ToResourceElasticPtrOutputWithContext(context.Background())
}

func (o ResourceElasticOutput) ToResourceElasticPtrOutputWithContext(ctx context.Context) ResourceElasticPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceElastic) *ResourceElastic {
		return &v
	}).(ResourceElasticPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceElasticOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceElastic) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceElasticOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceElastic) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceElasticOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceElastic) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceElasticOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceElastic) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceElasticOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceElastic) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceElasticOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceElastic) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceElasticOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceElastic) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceElasticOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceElastic) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceElasticOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceElastic) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceElasticOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceElastic) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceElasticOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceElastic) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceElasticOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceElastic) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceElasticOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceElastic) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceElasticPtrOutput struct{ *pulumi.OutputState }

func (ResourceElasticPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceElastic)(nil)).Elem()
}

func (o ResourceElasticPtrOutput) ToResourceElasticPtrOutput() ResourceElasticPtrOutput {
	return o
}

func (o ResourceElasticPtrOutput) ToResourceElasticPtrOutputWithContext(ctx context.Context) ResourceElasticPtrOutput {
	return o
}

func (o ResourceElasticPtrOutput) Elem() ResourceElasticOutput {
	return o.ApplyT(func(v *ResourceElastic) ResourceElastic {
		if v != nil {
			return *v
		}
		var ret ResourceElastic
		return ret
	}).(ResourceElasticOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceElasticPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElastic) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceElasticPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElastic) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceElasticPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElastic) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceElasticPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElastic) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceElasticPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElastic) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceElasticPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceElastic) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceElasticPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceElastic) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceElasticPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElastic) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceElasticPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElastic) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceElasticPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElastic) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceElasticPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceElastic) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceElasticPtrOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceElastic) *bool {
		if v == nil {
			return nil
		}
		return v.TlsRequired
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceElasticPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElastic) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceElasticacheRedis struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceElasticacheRedisInput is an input type that accepts ResourceElasticacheRedisArgs and ResourceElasticacheRedisOutput values.
// You can construct a concrete instance of `ResourceElasticacheRedisInput` via:
//
//	ResourceElasticacheRedisArgs{...}
type ResourceElasticacheRedisInput interface {
	pulumi.Input

	ToResourceElasticacheRedisOutput() ResourceElasticacheRedisOutput
	ToResourceElasticacheRedisOutputWithContext(context.Context) ResourceElasticacheRedisOutput
}

type ResourceElasticacheRedisArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceElasticacheRedisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceElasticacheRedis)(nil)).Elem()
}

func (i ResourceElasticacheRedisArgs) ToResourceElasticacheRedisOutput() ResourceElasticacheRedisOutput {
	return i.ToResourceElasticacheRedisOutputWithContext(context.Background())
}

func (i ResourceElasticacheRedisArgs) ToResourceElasticacheRedisOutputWithContext(ctx context.Context) ResourceElasticacheRedisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceElasticacheRedisOutput)
}

func (i ResourceElasticacheRedisArgs) ToResourceElasticacheRedisPtrOutput() ResourceElasticacheRedisPtrOutput {
	return i.ToResourceElasticacheRedisPtrOutputWithContext(context.Background())
}

func (i ResourceElasticacheRedisArgs) ToResourceElasticacheRedisPtrOutputWithContext(ctx context.Context) ResourceElasticacheRedisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceElasticacheRedisOutput).ToResourceElasticacheRedisPtrOutputWithContext(ctx)
}

// ResourceElasticacheRedisPtrInput is an input type that accepts ResourceElasticacheRedisArgs, ResourceElasticacheRedisPtr and ResourceElasticacheRedisPtrOutput values.
// You can construct a concrete instance of `ResourceElasticacheRedisPtrInput` via:
//
//	        ResourceElasticacheRedisArgs{...}
//
//	or:
//
//	        nil
type ResourceElasticacheRedisPtrInput interface {
	pulumi.Input

	ToResourceElasticacheRedisPtrOutput() ResourceElasticacheRedisPtrOutput
	ToResourceElasticacheRedisPtrOutputWithContext(context.Context) ResourceElasticacheRedisPtrOutput
}

type resourceElasticacheRedisPtrType ResourceElasticacheRedisArgs

func ResourceElasticacheRedisPtr(v *ResourceElasticacheRedisArgs) ResourceElasticacheRedisPtrInput {
	return (*resourceElasticacheRedisPtrType)(v)
}

func (*resourceElasticacheRedisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceElasticacheRedis)(nil)).Elem()
}

func (i *resourceElasticacheRedisPtrType) ToResourceElasticacheRedisPtrOutput() ResourceElasticacheRedisPtrOutput {
	return i.ToResourceElasticacheRedisPtrOutputWithContext(context.Background())
}

func (i *resourceElasticacheRedisPtrType) ToResourceElasticacheRedisPtrOutputWithContext(ctx context.Context) ResourceElasticacheRedisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceElasticacheRedisPtrOutput)
}

type ResourceElasticacheRedisOutput struct{ *pulumi.OutputState }

func (ResourceElasticacheRedisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceElasticacheRedis)(nil)).Elem()
}

func (o ResourceElasticacheRedisOutput) ToResourceElasticacheRedisOutput() ResourceElasticacheRedisOutput {
	return o
}

func (o ResourceElasticacheRedisOutput) ToResourceElasticacheRedisOutputWithContext(ctx context.Context) ResourceElasticacheRedisOutput {
	return o
}

func (o ResourceElasticacheRedisOutput) ToResourceElasticacheRedisPtrOutput() ResourceElasticacheRedisPtrOutput {
	return o.ToResourceElasticacheRedisPtrOutputWithContext(context.Background())
}

func (o ResourceElasticacheRedisOutput) ToResourceElasticacheRedisPtrOutputWithContext(ctx context.Context) ResourceElasticacheRedisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceElasticacheRedis) *ResourceElasticacheRedis {
		return &v
	}).(ResourceElasticacheRedisPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceElasticacheRedisOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceElasticacheRedis) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceElasticacheRedisOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceElasticacheRedis) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceElasticacheRedisOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceElasticacheRedis) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceElasticacheRedisOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceElasticacheRedis) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceElasticacheRedisOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceElasticacheRedis) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceElasticacheRedisOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceElasticacheRedis) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceElasticacheRedisOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceElasticacheRedis) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceElasticacheRedisOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceElasticacheRedis) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceElasticacheRedisOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceElasticacheRedis) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceElasticacheRedisOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceElasticacheRedis) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceElasticacheRedisOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceElasticacheRedis) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceElasticacheRedisOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceElasticacheRedis) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceElasticacheRedisOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceElasticacheRedis) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceElasticacheRedisPtrOutput struct{ *pulumi.OutputState }

func (ResourceElasticacheRedisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceElasticacheRedis)(nil)).Elem()
}

func (o ResourceElasticacheRedisPtrOutput) ToResourceElasticacheRedisPtrOutput() ResourceElasticacheRedisPtrOutput {
	return o
}

func (o ResourceElasticacheRedisPtrOutput) ToResourceElasticacheRedisPtrOutputWithContext(ctx context.Context) ResourceElasticacheRedisPtrOutput {
	return o
}

func (o ResourceElasticacheRedisPtrOutput) Elem() ResourceElasticacheRedisOutput {
	return o.ApplyT(func(v *ResourceElasticacheRedis) ResourceElasticacheRedis {
		if v != nil {
			return *v
		}
		var ret ResourceElasticacheRedis
		return ret
	}).(ResourceElasticacheRedisOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceElasticacheRedisPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElasticacheRedis) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceElasticacheRedisPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElasticacheRedis) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceElasticacheRedisPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElasticacheRedis) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceElasticacheRedisPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElasticacheRedis) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceElasticacheRedisPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElasticacheRedis) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceElasticacheRedisPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceElasticacheRedis) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceElasticacheRedisPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceElasticacheRedis) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceElasticacheRedisPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElasticacheRedis) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceElasticacheRedisPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElasticacheRedis) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceElasticacheRedisPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElasticacheRedis) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceElasticacheRedisPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceElasticacheRedis) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceElasticacheRedisPtrOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceElasticacheRedis) *bool {
		if v == nil {
			return nil
		}
		return v.TlsRequired
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceElasticacheRedisPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceElasticacheRedis) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceGcp struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The service account keyfile to authenticate with.
	Keyfile *string `pulumi:"keyfile"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Space separated scopes that this login should assume into when authenticating.
	Scopes string `pulumi:"scopes"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceGcpInput is an input type that accepts ResourceGcpArgs and ResourceGcpOutput values.
// You can construct a concrete instance of `ResourceGcpInput` via:
//
//	ResourceGcpArgs{...}
type ResourceGcpInput interface {
	pulumi.Input

	ToResourceGcpOutput() ResourceGcpOutput
	ToResourceGcpOutputWithContext(context.Context) ResourceGcpOutput
}

type ResourceGcpArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The service account keyfile to authenticate with.
	Keyfile pulumi.StringPtrInput `pulumi:"keyfile"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Space separated scopes that this login should assume into when authenticating.
	Scopes pulumi.StringInput `pulumi:"scopes"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGcp)(nil)).Elem()
}

func (i ResourceGcpArgs) ToResourceGcpOutput() ResourceGcpOutput {
	return i.ToResourceGcpOutputWithContext(context.Background())
}

func (i ResourceGcpArgs) ToResourceGcpOutputWithContext(ctx context.Context) ResourceGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGcpOutput)
}

func (i ResourceGcpArgs) ToResourceGcpPtrOutput() ResourceGcpPtrOutput {
	return i.ToResourceGcpPtrOutputWithContext(context.Background())
}

func (i ResourceGcpArgs) ToResourceGcpPtrOutputWithContext(ctx context.Context) ResourceGcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGcpOutput).ToResourceGcpPtrOutputWithContext(ctx)
}

// ResourceGcpPtrInput is an input type that accepts ResourceGcpArgs, ResourceGcpPtr and ResourceGcpPtrOutput values.
// You can construct a concrete instance of `ResourceGcpPtrInput` via:
//
//	        ResourceGcpArgs{...}
//
//	or:
//
//	        nil
type ResourceGcpPtrInput interface {
	pulumi.Input

	ToResourceGcpPtrOutput() ResourceGcpPtrOutput
	ToResourceGcpPtrOutputWithContext(context.Context) ResourceGcpPtrOutput
}

type resourceGcpPtrType ResourceGcpArgs

func ResourceGcpPtr(v *ResourceGcpArgs) ResourceGcpPtrInput {
	return (*resourceGcpPtrType)(v)
}

func (*resourceGcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGcp)(nil)).Elem()
}

func (i *resourceGcpPtrType) ToResourceGcpPtrOutput() ResourceGcpPtrOutput {
	return i.ToResourceGcpPtrOutputWithContext(context.Background())
}

func (i *resourceGcpPtrType) ToResourceGcpPtrOutputWithContext(ctx context.Context) ResourceGcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGcpPtrOutput)
}

type ResourceGcpOutput struct{ *pulumi.OutputState }

func (ResourceGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGcp)(nil)).Elem()
}

func (o ResourceGcpOutput) ToResourceGcpOutput() ResourceGcpOutput {
	return o
}

func (o ResourceGcpOutput) ToResourceGcpOutputWithContext(ctx context.Context) ResourceGcpOutput {
	return o
}

func (o ResourceGcpOutput) ToResourceGcpPtrOutput() ResourceGcpPtrOutput {
	return o.ToResourceGcpPtrOutputWithContext(context.Background())
}

func (o ResourceGcpOutput) ToResourceGcpPtrOutputWithContext(ctx context.Context) ResourceGcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceGcp) *ResourceGcp {
		return &v
	}).(ResourceGcpPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceGcpOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcp) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceGcpOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcp) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The service account keyfile to authenticate with.
func (o ResourceGcpOutput) Keyfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcp) *string { return v.Keyfile }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceGcpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGcp) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceGcpOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceGcp) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceGcpOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcp) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Space separated scopes that this login should assume into when authenticating.
func (o ResourceGcpOutput) Scopes() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGcp) string { return v.Scopes }).(pulumi.StringOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceGcpOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcp) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceGcpOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcp) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceGcpOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceGcp) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceGcpPtrOutput struct{ *pulumi.OutputState }

func (ResourceGcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGcp)(nil)).Elem()
}

func (o ResourceGcpPtrOutput) ToResourceGcpPtrOutput() ResourceGcpPtrOutput {
	return o
}

func (o ResourceGcpPtrOutput) ToResourceGcpPtrOutputWithContext(ctx context.Context) ResourceGcpPtrOutput {
	return o
}

func (o ResourceGcpPtrOutput) Elem() ResourceGcpOutput {
	return o.ApplyT(func(v *ResourceGcp) ResourceGcp {
		if v != nil {
			return *v
		}
		var ret ResourceGcp
		return ret
	}).(ResourceGcpOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceGcpPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcp) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceGcpPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcp) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The service account keyfile to authenticate with.
func (o ResourceGcpPtrOutput) Keyfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcp) *string {
		if v == nil {
			return nil
		}
		return v.Keyfile
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceGcpPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcp) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceGcpPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceGcp) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceGcpPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcp) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// Space separated scopes that this login should assume into when authenticating.
func (o ResourceGcpPtrOutput) Scopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcp) *string {
		if v == nil {
			return nil
		}
		return &v.Scopes
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceGcpPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcp) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceGcpPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcp) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceGcpPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceGcp) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceGcpConsole struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// The length of time in seconds console sessions will live before needing to reauthenticate.
	SessionExpiry *int `pulumi:"sessionExpiry"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the Workforce Identity Pool in GCP to use for federated authentication.
	WorkforcePoolId string `pulumi:"workforcePoolId"`
	// The ID of the Workforce Identity Provider in GCP to use for federated authentication.
	// * google_gke:
	WorkforceProviderId string `pulumi:"workforceProviderId"`
}

// ResourceGcpConsoleInput is an input type that accepts ResourceGcpConsoleArgs and ResourceGcpConsoleOutput values.
// You can construct a concrete instance of `ResourceGcpConsoleInput` via:
//
//	ResourceGcpConsoleArgs{...}
type ResourceGcpConsoleInput interface {
	pulumi.Input

	ToResourceGcpConsoleOutput() ResourceGcpConsoleOutput
	ToResourceGcpConsoleOutputWithContext(context.Context) ResourceGcpConsoleOutput
}

type ResourceGcpConsoleArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// The length of time in seconds console sessions will live before needing to reauthenticate.
	SessionExpiry pulumi.IntPtrInput `pulumi:"sessionExpiry"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The ID of the Workforce Identity Pool in GCP to use for federated authentication.
	WorkforcePoolId pulumi.StringInput `pulumi:"workforcePoolId"`
	// The ID of the Workforce Identity Provider in GCP to use for federated authentication.
	// * google_gke:
	WorkforceProviderId pulumi.StringInput `pulumi:"workforceProviderId"`
}

func (ResourceGcpConsoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGcpConsole)(nil)).Elem()
}

func (i ResourceGcpConsoleArgs) ToResourceGcpConsoleOutput() ResourceGcpConsoleOutput {
	return i.ToResourceGcpConsoleOutputWithContext(context.Background())
}

func (i ResourceGcpConsoleArgs) ToResourceGcpConsoleOutputWithContext(ctx context.Context) ResourceGcpConsoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGcpConsoleOutput)
}

func (i ResourceGcpConsoleArgs) ToResourceGcpConsolePtrOutput() ResourceGcpConsolePtrOutput {
	return i.ToResourceGcpConsolePtrOutputWithContext(context.Background())
}

func (i ResourceGcpConsoleArgs) ToResourceGcpConsolePtrOutputWithContext(ctx context.Context) ResourceGcpConsolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGcpConsoleOutput).ToResourceGcpConsolePtrOutputWithContext(ctx)
}

// ResourceGcpConsolePtrInput is an input type that accepts ResourceGcpConsoleArgs, ResourceGcpConsolePtr and ResourceGcpConsolePtrOutput values.
// You can construct a concrete instance of `ResourceGcpConsolePtrInput` via:
//
//	        ResourceGcpConsoleArgs{...}
//
//	or:
//
//	        nil
type ResourceGcpConsolePtrInput interface {
	pulumi.Input

	ToResourceGcpConsolePtrOutput() ResourceGcpConsolePtrOutput
	ToResourceGcpConsolePtrOutputWithContext(context.Context) ResourceGcpConsolePtrOutput
}

type resourceGcpConsolePtrType ResourceGcpConsoleArgs

func ResourceGcpConsolePtr(v *ResourceGcpConsoleArgs) ResourceGcpConsolePtrInput {
	return (*resourceGcpConsolePtrType)(v)
}

func (*resourceGcpConsolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGcpConsole)(nil)).Elem()
}

func (i *resourceGcpConsolePtrType) ToResourceGcpConsolePtrOutput() ResourceGcpConsolePtrOutput {
	return i.ToResourceGcpConsolePtrOutputWithContext(context.Background())
}

func (i *resourceGcpConsolePtrType) ToResourceGcpConsolePtrOutputWithContext(ctx context.Context) ResourceGcpConsolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGcpConsolePtrOutput)
}

type ResourceGcpConsoleOutput struct{ *pulumi.OutputState }

func (ResourceGcpConsoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGcpConsole)(nil)).Elem()
}

func (o ResourceGcpConsoleOutput) ToResourceGcpConsoleOutput() ResourceGcpConsoleOutput {
	return o
}

func (o ResourceGcpConsoleOutput) ToResourceGcpConsoleOutputWithContext(ctx context.Context) ResourceGcpConsoleOutput {
	return o
}

func (o ResourceGcpConsoleOutput) ToResourceGcpConsolePtrOutput() ResourceGcpConsolePtrOutput {
	return o.ToResourceGcpConsolePtrOutputWithContext(context.Background())
}

func (o ResourceGcpConsoleOutput) ToResourceGcpConsolePtrOutputWithContext(ctx context.Context) ResourceGcpConsolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceGcpConsole) *ResourceGcpConsole {
		return &v
	}).(ResourceGcpConsolePtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceGcpConsoleOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcpConsole) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceGcpConsoleOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcpConsole) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceGcpConsoleOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcpConsole) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceGcpConsoleOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcpConsole) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceGcpConsoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGcpConsole) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceGcpConsoleOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceGcpConsole) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceGcpConsoleOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcpConsole) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceGcpConsoleOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcpConsole) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// The length of time in seconds console sessions will live before needing to reauthenticate.
func (o ResourceGcpConsoleOutput) SessionExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceGcpConsole) *int { return v.SessionExpiry }).(pulumi.IntPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceGcpConsoleOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGcpConsole) string { return v.Subdomain }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceGcpConsoleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceGcpConsole) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The ID of the Workforce Identity Pool in GCP to use for federated authentication.
func (o ResourceGcpConsoleOutput) WorkforcePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGcpConsole) string { return v.WorkforcePoolId }).(pulumi.StringOutput)
}

// The ID of the Workforce Identity Provider in GCP to use for federated authentication.
// * google_gke:
func (o ResourceGcpConsoleOutput) WorkforceProviderId() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGcpConsole) string { return v.WorkforceProviderId }).(pulumi.StringOutput)
}

type ResourceGcpConsolePtrOutput struct{ *pulumi.OutputState }

func (ResourceGcpConsolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGcpConsole)(nil)).Elem()
}

func (o ResourceGcpConsolePtrOutput) ToResourceGcpConsolePtrOutput() ResourceGcpConsolePtrOutput {
	return o
}

func (o ResourceGcpConsolePtrOutput) ToResourceGcpConsolePtrOutputWithContext(ctx context.Context) ResourceGcpConsolePtrOutput {
	return o
}

func (o ResourceGcpConsolePtrOutput) Elem() ResourceGcpConsoleOutput {
	return o.ApplyT(func(v *ResourceGcpConsole) ResourceGcpConsole {
		if v != nil {
			return *v
		}
		var ret ResourceGcpConsole
		return ret
	}).(ResourceGcpConsoleOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceGcpConsolePtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpConsole) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceGcpConsolePtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpConsole) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceGcpConsolePtrOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpConsole) *string {
		if v == nil {
			return nil
		}
		return v.IdentityAliasHealthcheckUsername
	}).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceGcpConsolePtrOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpConsole) *string {
		if v == nil {
			return nil
		}
		return v.IdentitySetId
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceGcpConsolePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpConsole) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceGcpConsolePtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceGcpConsole) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceGcpConsolePtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpConsole) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceGcpConsolePtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpConsole) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// The length of time in seconds console sessions will live before needing to reauthenticate.
func (o ResourceGcpConsolePtrOutput) SessionExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceGcpConsole) *int {
		if v == nil {
			return nil
		}
		return v.SessionExpiry
	}).(pulumi.IntPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceGcpConsolePtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpConsole) *string {
		if v == nil {
			return nil
		}
		return &v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceGcpConsolePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceGcpConsole) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The ID of the Workforce Identity Pool in GCP to use for federated authentication.
func (o ResourceGcpConsolePtrOutput) WorkforcePoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpConsole) *string {
		if v == nil {
			return nil
		}
		return &v.WorkforcePoolId
	}).(pulumi.StringPtrOutput)
}

// The ID of the Workforce Identity Provider in GCP to use for federated authentication.
// * google_gke:
func (o ResourceGcpConsolePtrOutput) WorkforceProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpConsole) *string {
		if v == nil {
			return nil
		}
		return &v.WorkforceProviderId
	}).(pulumi.StringPtrOutput)
}

type ResourceGcpwif struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// When specified, all project scoped requests will use this Project ID, overriding the project ID specified by clients
	ProjectId *string `pulumi:"projectId"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Space separated scopes that this login should assume into when authenticating.
	Scopes string `pulumi:"scopes"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// The length of time in seconds console sessions will live before needing to reauthenticate.
	SessionExpiry *int `pulumi:"sessionExpiry"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the Workforce Identity Pool in GCP to use for federated authentication.
	WorkforcePoolId string `pulumi:"workforcePoolId"`
	// The ID of the Workforce Identity Provider in GCP to use for federated authentication.
	// * google_gke:
	WorkforceProviderId string `pulumi:"workforceProviderId"`
}

// ResourceGcpwifInput is an input type that accepts ResourceGcpwifArgs and ResourceGcpwifOutput values.
// You can construct a concrete instance of `ResourceGcpwifInput` via:
//
//	ResourceGcpwifArgs{...}
type ResourceGcpwifInput interface {
	pulumi.Input

	ToResourceGcpwifOutput() ResourceGcpwifOutput
	ToResourceGcpwifOutputWithContext(context.Context) ResourceGcpwifOutput
}

type ResourceGcpwifArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// When specified, all project scoped requests will use this Project ID, overriding the project ID specified by clients
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Space separated scopes that this login should assume into when authenticating.
	Scopes pulumi.StringInput `pulumi:"scopes"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// The length of time in seconds console sessions will live before needing to reauthenticate.
	SessionExpiry pulumi.IntPtrInput `pulumi:"sessionExpiry"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The ID of the Workforce Identity Pool in GCP to use for federated authentication.
	WorkforcePoolId pulumi.StringInput `pulumi:"workforcePoolId"`
	// The ID of the Workforce Identity Provider in GCP to use for federated authentication.
	// * google_gke:
	WorkforceProviderId pulumi.StringInput `pulumi:"workforceProviderId"`
}

func (ResourceGcpwifArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGcpwif)(nil)).Elem()
}

func (i ResourceGcpwifArgs) ToResourceGcpwifOutput() ResourceGcpwifOutput {
	return i.ToResourceGcpwifOutputWithContext(context.Background())
}

func (i ResourceGcpwifArgs) ToResourceGcpwifOutputWithContext(ctx context.Context) ResourceGcpwifOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGcpwifOutput)
}

func (i ResourceGcpwifArgs) ToResourceGcpwifPtrOutput() ResourceGcpwifPtrOutput {
	return i.ToResourceGcpwifPtrOutputWithContext(context.Background())
}

func (i ResourceGcpwifArgs) ToResourceGcpwifPtrOutputWithContext(ctx context.Context) ResourceGcpwifPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGcpwifOutput).ToResourceGcpwifPtrOutputWithContext(ctx)
}

// ResourceGcpwifPtrInput is an input type that accepts ResourceGcpwifArgs, ResourceGcpwifPtr and ResourceGcpwifPtrOutput values.
// You can construct a concrete instance of `ResourceGcpwifPtrInput` via:
//
//	        ResourceGcpwifArgs{...}
//
//	or:
//
//	        nil
type ResourceGcpwifPtrInput interface {
	pulumi.Input

	ToResourceGcpwifPtrOutput() ResourceGcpwifPtrOutput
	ToResourceGcpwifPtrOutputWithContext(context.Context) ResourceGcpwifPtrOutput
}

type resourceGcpwifPtrType ResourceGcpwifArgs

func ResourceGcpwifPtr(v *ResourceGcpwifArgs) ResourceGcpwifPtrInput {
	return (*resourceGcpwifPtrType)(v)
}

func (*resourceGcpwifPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGcpwif)(nil)).Elem()
}

func (i *resourceGcpwifPtrType) ToResourceGcpwifPtrOutput() ResourceGcpwifPtrOutput {
	return i.ToResourceGcpwifPtrOutputWithContext(context.Background())
}

func (i *resourceGcpwifPtrType) ToResourceGcpwifPtrOutputWithContext(ctx context.Context) ResourceGcpwifPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGcpwifPtrOutput)
}

type ResourceGcpwifOutput struct{ *pulumi.OutputState }

func (ResourceGcpwifOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGcpwif)(nil)).Elem()
}

func (o ResourceGcpwifOutput) ToResourceGcpwifOutput() ResourceGcpwifOutput {
	return o
}

func (o ResourceGcpwifOutput) ToResourceGcpwifOutputWithContext(ctx context.Context) ResourceGcpwifOutput {
	return o
}

func (o ResourceGcpwifOutput) ToResourceGcpwifPtrOutput() ResourceGcpwifPtrOutput {
	return o.ToResourceGcpwifPtrOutputWithContext(context.Background())
}

func (o ResourceGcpwifOutput) ToResourceGcpwifPtrOutputWithContext(ctx context.Context) ResourceGcpwifPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceGcpwif) *ResourceGcpwif {
		return &v
	}).(ResourceGcpwifPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceGcpwifOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcpwif) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceGcpwifOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcpwif) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceGcpwifOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcpwif) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceGcpwifOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcpwif) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceGcpwifOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGcpwif) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceGcpwifOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceGcpwif) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// When specified, all project scoped requests will use this Project ID, overriding the project ID specified by clients
func (o ResourceGcpwifOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcpwif) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceGcpwifOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcpwif) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Space separated scopes that this login should assume into when authenticating.
func (o ResourceGcpwifOutput) Scopes() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGcpwif) string { return v.Scopes }).(pulumi.StringOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceGcpwifOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcpwif) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// The length of time in seconds console sessions will live before needing to reauthenticate.
func (o ResourceGcpwifOutput) SessionExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceGcpwif) *int { return v.SessionExpiry }).(pulumi.IntPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceGcpwifOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGcpwif) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceGcpwifOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceGcpwif) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The ID of the Workforce Identity Pool in GCP to use for federated authentication.
func (o ResourceGcpwifOutput) WorkforcePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGcpwif) string { return v.WorkforcePoolId }).(pulumi.StringOutput)
}

// The ID of the Workforce Identity Provider in GCP to use for federated authentication.
// * google_gke:
func (o ResourceGcpwifOutput) WorkforceProviderId() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGcpwif) string { return v.WorkforceProviderId }).(pulumi.StringOutput)
}

type ResourceGcpwifPtrOutput struct{ *pulumi.OutputState }

func (ResourceGcpwifPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGcpwif)(nil)).Elem()
}

func (o ResourceGcpwifPtrOutput) ToResourceGcpwifPtrOutput() ResourceGcpwifPtrOutput {
	return o
}

func (o ResourceGcpwifPtrOutput) ToResourceGcpwifPtrOutputWithContext(ctx context.Context) ResourceGcpwifPtrOutput {
	return o
}

func (o ResourceGcpwifPtrOutput) Elem() ResourceGcpwifOutput {
	return o.ApplyT(func(v *ResourceGcpwif) ResourceGcpwif {
		if v != nil {
			return *v
		}
		var ret ResourceGcpwif
		return ret
	}).(ResourceGcpwifOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceGcpwifPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpwif) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceGcpwifPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpwif) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceGcpwifPtrOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpwif) *string {
		if v == nil {
			return nil
		}
		return v.IdentityAliasHealthcheckUsername
	}).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceGcpwifPtrOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpwif) *string {
		if v == nil {
			return nil
		}
		return v.IdentitySetId
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceGcpwifPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpwif) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceGcpwifPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceGcpwif) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// When specified, all project scoped requests will use this Project ID, overriding the project ID specified by clients
func (o ResourceGcpwifPtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpwif) *string {
		if v == nil {
			return nil
		}
		return v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceGcpwifPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpwif) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// Space separated scopes that this login should assume into when authenticating.
func (o ResourceGcpwifPtrOutput) Scopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpwif) *string {
		if v == nil {
			return nil
		}
		return &v.Scopes
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceGcpwifPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpwif) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// The length of time in seconds console sessions will live before needing to reauthenticate.
func (o ResourceGcpwifPtrOutput) SessionExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceGcpwif) *int {
		if v == nil {
			return nil
		}
		return v.SessionExpiry
	}).(pulumi.IntPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceGcpwifPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpwif) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceGcpwifPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceGcpwif) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The ID of the Workforce Identity Pool in GCP to use for federated authentication.
func (o ResourceGcpwifPtrOutput) WorkforcePoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpwif) *string {
		if v == nil {
			return nil
		}
		return &v.WorkforcePoolId
	}).(pulumi.StringPtrOutput)
}

// The ID of the Workforce Identity Provider in GCP to use for federated authentication.
// * google_gke:
func (o ResourceGcpwifPtrOutput) WorkforceProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGcpwif) *string {
		if v == nil {
			return nil
		}
		return &v.WorkforceProviderId
	}).(pulumi.StringPtrOutput)
}

type ResourceGoogleGke struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass *bool `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled *bool `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername *string `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint string `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// The service account key to authenticate with.
	ServiceAccountKey *string `pulumi:"serviceAccountKey"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceGoogleGkeInput is an input type that accepts ResourceGoogleGkeArgs and ResourceGoogleGkeOutput values.
// You can construct a concrete instance of `ResourceGoogleGkeInput` via:
//
//	ResourceGoogleGkeArgs{...}
type ResourceGoogleGkeInput interface {
	pulumi.Input

	ToResourceGoogleGkeOutput() ResourceGoogleGkeOutput
	ToResourceGoogleGkeOutputWithContext(context.Context) ResourceGoogleGkeOutput
}

type ResourceGoogleGkeArgs struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass pulumi.BoolPtrInput `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled pulumi.BoolPtrInput `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername pulumi.StringPtrInput `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// The service account key to authenticate with.
	ServiceAccountKey pulumi.StringPtrInput `pulumi:"serviceAccountKey"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceGoogleGkeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGoogleGke)(nil)).Elem()
}

func (i ResourceGoogleGkeArgs) ToResourceGoogleGkeOutput() ResourceGoogleGkeOutput {
	return i.ToResourceGoogleGkeOutputWithContext(context.Background())
}

func (i ResourceGoogleGkeArgs) ToResourceGoogleGkeOutputWithContext(ctx context.Context) ResourceGoogleGkeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGoogleGkeOutput)
}

func (i ResourceGoogleGkeArgs) ToResourceGoogleGkePtrOutput() ResourceGoogleGkePtrOutput {
	return i.ToResourceGoogleGkePtrOutputWithContext(context.Background())
}

func (i ResourceGoogleGkeArgs) ToResourceGoogleGkePtrOutputWithContext(ctx context.Context) ResourceGoogleGkePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGoogleGkeOutput).ToResourceGoogleGkePtrOutputWithContext(ctx)
}

// ResourceGoogleGkePtrInput is an input type that accepts ResourceGoogleGkeArgs, ResourceGoogleGkePtr and ResourceGoogleGkePtrOutput values.
// You can construct a concrete instance of `ResourceGoogleGkePtrInput` via:
//
//	        ResourceGoogleGkeArgs{...}
//
//	or:
//
//	        nil
type ResourceGoogleGkePtrInput interface {
	pulumi.Input

	ToResourceGoogleGkePtrOutput() ResourceGoogleGkePtrOutput
	ToResourceGoogleGkePtrOutputWithContext(context.Context) ResourceGoogleGkePtrOutput
}

type resourceGoogleGkePtrType ResourceGoogleGkeArgs

func ResourceGoogleGkePtr(v *ResourceGoogleGkeArgs) ResourceGoogleGkePtrInput {
	return (*resourceGoogleGkePtrType)(v)
}

func (*resourceGoogleGkePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGoogleGke)(nil)).Elem()
}

func (i *resourceGoogleGkePtrType) ToResourceGoogleGkePtrOutput() ResourceGoogleGkePtrOutput {
	return i.ToResourceGoogleGkePtrOutputWithContext(context.Background())
}

func (i *resourceGoogleGkePtrType) ToResourceGoogleGkePtrOutputWithContext(ctx context.Context) ResourceGoogleGkePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGoogleGkePtrOutput)
}

type ResourceGoogleGkeOutput struct{ *pulumi.OutputState }

func (ResourceGoogleGkeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGoogleGke)(nil)).Elem()
}

func (o ResourceGoogleGkeOutput) ToResourceGoogleGkeOutput() ResourceGoogleGkeOutput {
	return o
}

func (o ResourceGoogleGkeOutput) ToResourceGoogleGkeOutputWithContext(ctx context.Context) ResourceGoogleGkeOutput {
	return o
}

func (o ResourceGoogleGkeOutput) ToResourceGoogleGkePtrOutput() ResourceGoogleGkePtrOutput {
	return o.ToResourceGoogleGkePtrOutputWithContext(context.Background())
}

func (o ResourceGoogleGkeOutput) ToResourceGoogleGkePtrOutputWithContext(ctx context.Context) ResourceGoogleGkePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceGoogleGke) *ResourceGoogleGke {
		return &v
	}).(ResourceGoogleGkePtrOutput)
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o ResourceGoogleGkeOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGke) *bool { return v.AllowResourceRoleBypass }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceGoogleGkeOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGke) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceGoogleGkeOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGke) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o ResourceGoogleGkeOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGke) *bool { return v.DiscoveryEnabled }).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o ResourceGoogleGkeOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGke) *string { return v.DiscoveryUsername }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceGoogleGkeOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGke) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceGoogleGkeOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGoogleGke) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceGoogleGkeOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGke) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceGoogleGkeOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGke) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceGoogleGkeOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGke) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceGoogleGkeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGoogleGke) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceGoogleGkeOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGke) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceGoogleGkeOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGke) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceGoogleGkeOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGke) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// The service account key to authenticate with.
func (o ResourceGoogleGkeOutput) ServiceAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGke) *string { return v.ServiceAccountKey }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceGoogleGkeOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGke) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceGoogleGkeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceGoogleGke) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceGoogleGkePtrOutput struct{ *pulumi.OutputState }

func (ResourceGoogleGkePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGoogleGke)(nil)).Elem()
}

func (o ResourceGoogleGkePtrOutput) ToResourceGoogleGkePtrOutput() ResourceGoogleGkePtrOutput {
	return o
}

func (o ResourceGoogleGkePtrOutput) ToResourceGoogleGkePtrOutputWithContext(ctx context.Context) ResourceGoogleGkePtrOutput {
	return o
}

func (o ResourceGoogleGkePtrOutput) Elem() ResourceGoogleGkeOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) ResourceGoogleGke {
		if v != nil {
			return *v
		}
		var ret ResourceGoogleGke
		return ret
	}).(ResourceGoogleGkeOutput)
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o ResourceGoogleGkePtrOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) *bool {
		if v == nil {
			return nil
		}
		return v.AllowResourceRoleBypass
	}).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceGoogleGkePtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceGoogleGkePtrOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) *string {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o ResourceGoogleGkePtrOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) *bool {
		if v == nil {
			return nil
		}
		return v.DiscoveryEnabled
	}).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o ResourceGoogleGkePtrOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) *string {
		if v == nil {
			return nil
		}
		return v.DiscoveryUsername
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceGoogleGkePtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceGoogleGkePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceGoogleGkePtrOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) *string {
		if v == nil {
			return nil
		}
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceGoogleGkePtrOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) *string {
		if v == nil {
			return nil
		}
		return v.IdentityAliasHealthcheckUsername
	}).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceGoogleGkePtrOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) *string {
		if v == nil {
			return nil
		}
		return v.IdentitySetId
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceGoogleGkePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceGoogleGkePtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceGoogleGkePtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceGoogleGkePtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// The service account key to authenticate with.
func (o ResourceGoogleGkePtrOutput) ServiceAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountKey
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceGoogleGkePtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceGoogleGkePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceGoogleGke) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceGoogleGkeUserImpersonation struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint string `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// The service account key to authenticate with.
	ServiceAccountKey *string `pulumi:"serviceAccountKey"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceGoogleGkeUserImpersonationInput is an input type that accepts ResourceGoogleGkeUserImpersonationArgs and ResourceGoogleGkeUserImpersonationOutput values.
// You can construct a concrete instance of `ResourceGoogleGkeUserImpersonationInput` via:
//
//	ResourceGoogleGkeUserImpersonationArgs{...}
type ResourceGoogleGkeUserImpersonationInput interface {
	pulumi.Input

	ToResourceGoogleGkeUserImpersonationOutput() ResourceGoogleGkeUserImpersonationOutput
	ToResourceGoogleGkeUserImpersonationOutputWithContext(context.Context) ResourceGoogleGkeUserImpersonationOutput
}

type ResourceGoogleGkeUserImpersonationArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// The service account key to authenticate with.
	ServiceAccountKey pulumi.StringPtrInput `pulumi:"serviceAccountKey"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceGoogleGkeUserImpersonationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGoogleGkeUserImpersonation)(nil)).Elem()
}

func (i ResourceGoogleGkeUserImpersonationArgs) ToResourceGoogleGkeUserImpersonationOutput() ResourceGoogleGkeUserImpersonationOutput {
	return i.ToResourceGoogleGkeUserImpersonationOutputWithContext(context.Background())
}

func (i ResourceGoogleGkeUserImpersonationArgs) ToResourceGoogleGkeUserImpersonationOutputWithContext(ctx context.Context) ResourceGoogleGkeUserImpersonationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGoogleGkeUserImpersonationOutput)
}

func (i ResourceGoogleGkeUserImpersonationArgs) ToResourceGoogleGkeUserImpersonationPtrOutput() ResourceGoogleGkeUserImpersonationPtrOutput {
	return i.ToResourceGoogleGkeUserImpersonationPtrOutputWithContext(context.Background())
}

func (i ResourceGoogleGkeUserImpersonationArgs) ToResourceGoogleGkeUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceGoogleGkeUserImpersonationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGoogleGkeUserImpersonationOutput).ToResourceGoogleGkeUserImpersonationPtrOutputWithContext(ctx)
}

// ResourceGoogleGkeUserImpersonationPtrInput is an input type that accepts ResourceGoogleGkeUserImpersonationArgs, ResourceGoogleGkeUserImpersonationPtr and ResourceGoogleGkeUserImpersonationPtrOutput values.
// You can construct a concrete instance of `ResourceGoogleGkeUserImpersonationPtrInput` via:
//
//	        ResourceGoogleGkeUserImpersonationArgs{...}
//
//	or:
//
//	        nil
type ResourceGoogleGkeUserImpersonationPtrInput interface {
	pulumi.Input

	ToResourceGoogleGkeUserImpersonationPtrOutput() ResourceGoogleGkeUserImpersonationPtrOutput
	ToResourceGoogleGkeUserImpersonationPtrOutputWithContext(context.Context) ResourceGoogleGkeUserImpersonationPtrOutput
}

type resourceGoogleGkeUserImpersonationPtrType ResourceGoogleGkeUserImpersonationArgs

func ResourceGoogleGkeUserImpersonationPtr(v *ResourceGoogleGkeUserImpersonationArgs) ResourceGoogleGkeUserImpersonationPtrInput {
	return (*resourceGoogleGkeUserImpersonationPtrType)(v)
}

func (*resourceGoogleGkeUserImpersonationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGoogleGkeUserImpersonation)(nil)).Elem()
}

func (i *resourceGoogleGkeUserImpersonationPtrType) ToResourceGoogleGkeUserImpersonationPtrOutput() ResourceGoogleGkeUserImpersonationPtrOutput {
	return i.ToResourceGoogleGkeUserImpersonationPtrOutputWithContext(context.Background())
}

func (i *resourceGoogleGkeUserImpersonationPtrType) ToResourceGoogleGkeUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceGoogleGkeUserImpersonationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGoogleGkeUserImpersonationPtrOutput)
}

type ResourceGoogleGkeUserImpersonationOutput struct{ *pulumi.OutputState }

func (ResourceGoogleGkeUserImpersonationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGoogleGkeUserImpersonation)(nil)).Elem()
}

func (o ResourceGoogleGkeUserImpersonationOutput) ToResourceGoogleGkeUserImpersonationOutput() ResourceGoogleGkeUserImpersonationOutput {
	return o
}

func (o ResourceGoogleGkeUserImpersonationOutput) ToResourceGoogleGkeUserImpersonationOutputWithContext(ctx context.Context) ResourceGoogleGkeUserImpersonationOutput {
	return o
}

func (o ResourceGoogleGkeUserImpersonationOutput) ToResourceGoogleGkeUserImpersonationPtrOutput() ResourceGoogleGkeUserImpersonationPtrOutput {
	return o.ToResourceGoogleGkeUserImpersonationPtrOutputWithContext(context.Background())
}

func (o ResourceGoogleGkeUserImpersonationOutput) ToResourceGoogleGkeUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceGoogleGkeUserImpersonationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceGoogleGkeUserImpersonation) *ResourceGoogleGkeUserImpersonation {
		return &v
	}).(ResourceGoogleGkeUserImpersonationPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceGoogleGkeUserImpersonationOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGkeUserImpersonation) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceGoogleGkeUserImpersonationOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGkeUserImpersonation) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceGoogleGkeUserImpersonationOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGkeUserImpersonation) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceGoogleGkeUserImpersonationOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGoogleGkeUserImpersonation) string { return v.Endpoint }).(pulumi.StringOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceGoogleGkeUserImpersonationOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGkeUserImpersonation) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceGoogleGkeUserImpersonationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGoogleGkeUserImpersonation) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceGoogleGkeUserImpersonationOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGkeUserImpersonation) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceGoogleGkeUserImpersonationOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGkeUserImpersonation) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceGoogleGkeUserImpersonationOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGkeUserImpersonation) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// The service account key to authenticate with.
func (o ResourceGoogleGkeUserImpersonationOutput) ServiceAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGkeUserImpersonation) *string { return v.ServiceAccountKey }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceGoogleGkeUserImpersonationOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGoogleGkeUserImpersonation) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceGoogleGkeUserImpersonationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceGoogleGkeUserImpersonation) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceGoogleGkeUserImpersonationPtrOutput struct{ *pulumi.OutputState }

func (ResourceGoogleGkeUserImpersonationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGoogleGkeUserImpersonation)(nil)).Elem()
}

func (o ResourceGoogleGkeUserImpersonationPtrOutput) ToResourceGoogleGkeUserImpersonationPtrOutput() ResourceGoogleGkeUserImpersonationPtrOutput {
	return o
}

func (o ResourceGoogleGkeUserImpersonationPtrOutput) ToResourceGoogleGkeUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceGoogleGkeUserImpersonationPtrOutput {
	return o
}

func (o ResourceGoogleGkeUserImpersonationPtrOutput) Elem() ResourceGoogleGkeUserImpersonationOutput {
	return o.ApplyT(func(v *ResourceGoogleGkeUserImpersonation) ResourceGoogleGkeUserImpersonation {
		if v != nil {
			return *v
		}
		var ret ResourceGoogleGkeUserImpersonation
		return ret
	}).(ResourceGoogleGkeUserImpersonationOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceGoogleGkeUserImpersonationPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGkeUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceGoogleGkeUserImpersonationPtrOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGkeUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceGoogleGkeUserImpersonationPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGkeUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceGoogleGkeUserImpersonationPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGkeUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceGoogleGkeUserImpersonationPtrOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGkeUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceGoogleGkeUserImpersonationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGkeUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceGoogleGkeUserImpersonationPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGkeUserImpersonation) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceGoogleGkeUserImpersonationPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGkeUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceGoogleGkeUserImpersonationPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGkeUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// The service account key to authenticate with.
func (o ResourceGoogleGkeUserImpersonationPtrOutput) ServiceAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGkeUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountKey
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceGoogleGkeUserImpersonationPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGoogleGkeUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceGoogleGkeUserImpersonationPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceGoogleGkeUserImpersonation) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceGreenplum struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceGreenplumInput is an input type that accepts ResourceGreenplumArgs and ResourceGreenplumOutput values.
// You can construct a concrete instance of `ResourceGreenplumInput` via:
//
//	ResourceGreenplumArgs{...}
type ResourceGreenplumInput interface {
	pulumi.Input

	ToResourceGreenplumOutput() ResourceGreenplumOutput
	ToResourceGreenplumOutputWithContext(context.Context) ResourceGreenplumOutput
}

type ResourceGreenplumArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceGreenplumArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGreenplum)(nil)).Elem()
}

func (i ResourceGreenplumArgs) ToResourceGreenplumOutput() ResourceGreenplumOutput {
	return i.ToResourceGreenplumOutputWithContext(context.Background())
}

func (i ResourceGreenplumArgs) ToResourceGreenplumOutputWithContext(ctx context.Context) ResourceGreenplumOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGreenplumOutput)
}

func (i ResourceGreenplumArgs) ToResourceGreenplumPtrOutput() ResourceGreenplumPtrOutput {
	return i.ToResourceGreenplumPtrOutputWithContext(context.Background())
}

func (i ResourceGreenplumArgs) ToResourceGreenplumPtrOutputWithContext(ctx context.Context) ResourceGreenplumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGreenplumOutput).ToResourceGreenplumPtrOutputWithContext(ctx)
}

// ResourceGreenplumPtrInput is an input type that accepts ResourceGreenplumArgs, ResourceGreenplumPtr and ResourceGreenplumPtrOutput values.
// You can construct a concrete instance of `ResourceGreenplumPtrInput` via:
//
//	        ResourceGreenplumArgs{...}
//
//	or:
//
//	        nil
type ResourceGreenplumPtrInput interface {
	pulumi.Input

	ToResourceGreenplumPtrOutput() ResourceGreenplumPtrOutput
	ToResourceGreenplumPtrOutputWithContext(context.Context) ResourceGreenplumPtrOutput
}

type resourceGreenplumPtrType ResourceGreenplumArgs

func ResourceGreenplumPtr(v *ResourceGreenplumArgs) ResourceGreenplumPtrInput {
	return (*resourceGreenplumPtrType)(v)
}

func (*resourceGreenplumPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGreenplum)(nil)).Elem()
}

func (i *resourceGreenplumPtrType) ToResourceGreenplumPtrOutput() ResourceGreenplumPtrOutput {
	return i.ToResourceGreenplumPtrOutputWithContext(context.Background())
}

func (i *resourceGreenplumPtrType) ToResourceGreenplumPtrOutputWithContext(ctx context.Context) ResourceGreenplumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGreenplumPtrOutput)
}

type ResourceGreenplumOutput struct{ *pulumi.OutputState }

func (ResourceGreenplumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGreenplum)(nil)).Elem()
}

func (o ResourceGreenplumOutput) ToResourceGreenplumOutput() ResourceGreenplumOutput {
	return o
}

func (o ResourceGreenplumOutput) ToResourceGreenplumOutputWithContext(ctx context.Context) ResourceGreenplumOutput {
	return o
}

func (o ResourceGreenplumOutput) ToResourceGreenplumPtrOutput() ResourceGreenplumPtrOutput {
	return o.ToResourceGreenplumPtrOutputWithContext(context.Background())
}

func (o ResourceGreenplumOutput) ToResourceGreenplumPtrOutputWithContext(ctx context.Context) ResourceGreenplumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceGreenplum) *ResourceGreenplum {
		return &v
	}).(ResourceGreenplumPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceGreenplumOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGreenplum) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceGreenplumOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGreenplum) string { return v.Database }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceGreenplumOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGreenplum) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceGreenplumOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGreenplum) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceGreenplumOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGreenplum) string { return v.Name }).(pulumi.StringOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceGreenplumOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceGreenplum) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceGreenplumOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGreenplum) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceGreenplumOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceGreenplum) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceGreenplumOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceGreenplum) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceGreenplumOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGreenplum) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceGreenplumOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGreenplum) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceGreenplumOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGreenplum) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceGreenplumOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceGreenplum) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceGreenplumOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGreenplum) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceGreenplumPtrOutput struct{ *pulumi.OutputState }

func (ResourceGreenplumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGreenplum)(nil)).Elem()
}

func (o ResourceGreenplumPtrOutput) ToResourceGreenplumPtrOutput() ResourceGreenplumPtrOutput {
	return o
}

func (o ResourceGreenplumPtrOutput) ToResourceGreenplumPtrOutputWithContext(ctx context.Context) ResourceGreenplumPtrOutput {
	return o
}

func (o ResourceGreenplumPtrOutput) Elem() ResourceGreenplumOutput {
	return o.ApplyT(func(v *ResourceGreenplum) ResourceGreenplum {
		if v != nil {
			return *v
		}
		var ret ResourceGreenplum
		return ret
	}).(ResourceGreenplumOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceGreenplumPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGreenplum) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceGreenplumPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGreenplum) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceGreenplumPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGreenplum) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceGreenplumPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGreenplum) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceGreenplumPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGreenplum) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceGreenplumPtrOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceGreenplum) *bool {
		if v == nil {
			return nil
		}
		return v.OverrideDatabase
	}).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceGreenplumPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGreenplum) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceGreenplumPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceGreenplum) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceGreenplumPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceGreenplum) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceGreenplumPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGreenplum) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceGreenplumPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGreenplum) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceGreenplumPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGreenplum) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceGreenplumPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceGreenplum) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceGreenplumPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGreenplum) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceHttpAuth struct {
	// The content to set as the authorization header.
	AuthHeader *string `pulumi:"authHeader"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// Automatically redirect to this path upon connecting.
	DefaultPath *string `pulumi:"defaultPath"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Header names (e.g. Authorization), to omit from logs.
	HeadersBlacklist *string `pulumi:"headersBlacklist"`
	// This path will be used to check the health of your site.
	HealthcheckPath string `pulumi:"healthcheckPath"`
	// The host header will be overwritten with this field if provided.
	HostOverride *string `pulumi:"hostOverride"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url string `pulumi:"url"`
}

// ResourceHttpAuthInput is an input type that accepts ResourceHttpAuthArgs and ResourceHttpAuthOutput values.
// You can construct a concrete instance of `ResourceHttpAuthInput` via:
//
//	ResourceHttpAuthArgs{...}
type ResourceHttpAuthInput interface {
	pulumi.Input

	ToResourceHttpAuthOutput() ResourceHttpAuthOutput
	ToResourceHttpAuthOutputWithContext(context.Context) ResourceHttpAuthOutput
}

type ResourceHttpAuthArgs struct {
	// The content to set as the authorization header.
	AuthHeader pulumi.StringPtrInput `pulumi:"authHeader"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// Automatically redirect to this path upon connecting.
	DefaultPath pulumi.StringPtrInput `pulumi:"defaultPath"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Header names (e.g. Authorization), to omit from logs.
	HeadersBlacklist pulumi.StringPtrInput `pulumi:"headersBlacklist"`
	// This path will be used to check the health of your site.
	HealthcheckPath pulumi.StringInput `pulumi:"healthcheckPath"`
	// The host header will be overwritten with this field if provided.
	HostOverride pulumi.StringPtrInput `pulumi:"hostOverride"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url pulumi.StringInput `pulumi:"url"`
}

func (ResourceHttpAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceHttpAuth)(nil)).Elem()
}

func (i ResourceHttpAuthArgs) ToResourceHttpAuthOutput() ResourceHttpAuthOutput {
	return i.ToResourceHttpAuthOutputWithContext(context.Background())
}

func (i ResourceHttpAuthArgs) ToResourceHttpAuthOutputWithContext(ctx context.Context) ResourceHttpAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHttpAuthOutput)
}

func (i ResourceHttpAuthArgs) ToResourceHttpAuthPtrOutput() ResourceHttpAuthPtrOutput {
	return i.ToResourceHttpAuthPtrOutputWithContext(context.Background())
}

func (i ResourceHttpAuthArgs) ToResourceHttpAuthPtrOutputWithContext(ctx context.Context) ResourceHttpAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHttpAuthOutput).ToResourceHttpAuthPtrOutputWithContext(ctx)
}

// ResourceHttpAuthPtrInput is an input type that accepts ResourceHttpAuthArgs, ResourceHttpAuthPtr and ResourceHttpAuthPtrOutput values.
// You can construct a concrete instance of `ResourceHttpAuthPtrInput` via:
//
//	        ResourceHttpAuthArgs{...}
//
//	or:
//
//	        nil
type ResourceHttpAuthPtrInput interface {
	pulumi.Input

	ToResourceHttpAuthPtrOutput() ResourceHttpAuthPtrOutput
	ToResourceHttpAuthPtrOutputWithContext(context.Context) ResourceHttpAuthPtrOutput
}

type resourceHttpAuthPtrType ResourceHttpAuthArgs

func ResourceHttpAuthPtr(v *ResourceHttpAuthArgs) ResourceHttpAuthPtrInput {
	return (*resourceHttpAuthPtrType)(v)
}

func (*resourceHttpAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceHttpAuth)(nil)).Elem()
}

func (i *resourceHttpAuthPtrType) ToResourceHttpAuthPtrOutput() ResourceHttpAuthPtrOutput {
	return i.ToResourceHttpAuthPtrOutputWithContext(context.Background())
}

func (i *resourceHttpAuthPtrType) ToResourceHttpAuthPtrOutputWithContext(ctx context.Context) ResourceHttpAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHttpAuthPtrOutput)
}

type ResourceHttpAuthOutput struct{ *pulumi.OutputState }

func (ResourceHttpAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceHttpAuth)(nil)).Elem()
}

func (o ResourceHttpAuthOutput) ToResourceHttpAuthOutput() ResourceHttpAuthOutput {
	return o
}

func (o ResourceHttpAuthOutput) ToResourceHttpAuthOutputWithContext(ctx context.Context) ResourceHttpAuthOutput {
	return o
}

func (o ResourceHttpAuthOutput) ToResourceHttpAuthPtrOutput() ResourceHttpAuthPtrOutput {
	return o.ToResourceHttpAuthPtrOutputWithContext(context.Background())
}

func (o ResourceHttpAuthOutput) ToResourceHttpAuthPtrOutputWithContext(ctx context.Context) ResourceHttpAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceHttpAuth) *ResourceHttpAuth {
		return &v
	}).(ResourceHttpAuthPtrOutput)
}

// The content to set as the authorization header.
func (o ResourceHttpAuthOutput) AuthHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpAuth) *string { return v.AuthHeader }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceHttpAuthOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpAuth) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// Automatically redirect to this path upon connecting.
func (o ResourceHttpAuthOutput) DefaultPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpAuth) *string { return v.DefaultPath }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceHttpAuthOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpAuth) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Header names (e.g. Authorization), to omit from logs.
func (o ResourceHttpAuthOutput) HeadersBlacklist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpAuth) *string { return v.HeadersBlacklist }).(pulumi.StringPtrOutput)
}

// This path will be used to check the health of your site.
func (o ResourceHttpAuthOutput) HealthcheckPath() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceHttpAuth) string { return v.HealthcheckPath }).(pulumi.StringOutput)
}

// The host header will be overwritten with this field if provided.
func (o ResourceHttpAuthOutput) HostOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpAuth) *string { return v.HostOverride }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceHttpAuthOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceHttpAuth) string { return v.Name }).(pulumi.StringOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceHttpAuthOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpAuth) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceHttpAuthOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpAuth) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceHttpAuthOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceHttpAuth) string { return v.Subdomain }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceHttpAuthOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceHttpAuth) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The base address of your website without the path.
// * kubernetes:
func (o ResourceHttpAuthOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceHttpAuth) string { return v.Url }).(pulumi.StringOutput)
}

type ResourceHttpAuthPtrOutput struct{ *pulumi.OutputState }

func (ResourceHttpAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceHttpAuth)(nil)).Elem()
}

func (o ResourceHttpAuthPtrOutput) ToResourceHttpAuthPtrOutput() ResourceHttpAuthPtrOutput {
	return o
}

func (o ResourceHttpAuthPtrOutput) ToResourceHttpAuthPtrOutputWithContext(ctx context.Context) ResourceHttpAuthPtrOutput {
	return o
}

func (o ResourceHttpAuthPtrOutput) Elem() ResourceHttpAuthOutput {
	return o.ApplyT(func(v *ResourceHttpAuth) ResourceHttpAuth {
		if v != nil {
			return *v
		}
		var ret ResourceHttpAuth
		return ret
	}).(ResourceHttpAuthOutput)
}

// The content to set as the authorization header.
func (o ResourceHttpAuthPtrOutput) AuthHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpAuth) *string {
		if v == nil {
			return nil
		}
		return v.AuthHeader
	}).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceHttpAuthPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpAuth) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// Automatically redirect to this path upon connecting.
func (o ResourceHttpAuthPtrOutput) DefaultPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpAuth) *string {
		if v == nil {
			return nil
		}
		return v.DefaultPath
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceHttpAuthPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpAuth) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// Header names (e.g. Authorization), to omit from logs.
func (o ResourceHttpAuthPtrOutput) HeadersBlacklist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpAuth) *string {
		if v == nil {
			return nil
		}
		return v.HeadersBlacklist
	}).(pulumi.StringPtrOutput)
}

// This path will be used to check the health of your site.
func (o ResourceHttpAuthPtrOutput) HealthcheckPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpAuth) *string {
		if v == nil {
			return nil
		}
		return &v.HealthcheckPath
	}).(pulumi.StringPtrOutput)
}

// The host header will be overwritten with this field if provided.
func (o ResourceHttpAuthPtrOutput) HostOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpAuth) *string {
		if v == nil {
			return nil
		}
		return v.HostOverride
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceHttpAuthPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceHttpAuthPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpAuth) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceHttpAuthPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpAuth) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceHttpAuthPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceHttpAuthPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceHttpAuth) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The base address of your website without the path.
// * kubernetes:
func (o ResourceHttpAuthPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type ResourceHttpBasicAuth struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// Automatically redirect to this path upon connecting.
	DefaultPath *string `pulumi:"defaultPath"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Header names (e.g. Authorization), to omit from logs.
	HeadersBlacklist *string `pulumi:"headersBlacklist"`
	// This path will be used to check the health of your site.
	HealthcheckPath string `pulumi:"healthcheckPath"`
	// The host header will be overwritten with this field if provided.
	HostOverride *string `pulumi:"hostOverride"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url string `pulumi:"url"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceHttpBasicAuthInput is an input type that accepts ResourceHttpBasicAuthArgs and ResourceHttpBasicAuthOutput values.
// You can construct a concrete instance of `ResourceHttpBasicAuthInput` via:
//
//	ResourceHttpBasicAuthArgs{...}
type ResourceHttpBasicAuthInput interface {
	pulumi.Input

	ToResourceHttpBasicAuthOutput() ResourceHttpBasicAuthOutput
	ToResourceHttpBasicAuthOutputWithContext(context.Context) ResourceHttpBasicAuthOutput
}

type ResourceHttpBasicAuthArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// Automatically redirect to this path upon connecting.
	DefaultPath pulumi.StringPtrInput `pulumi:"defaultPath"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Header names (e.g. Authorization), to omit from logs.
	HeadersBlacklist pulumi.StringPtrInput `pulumi:"headersBlacklist"`
	// This path will be used to check the health of your site.
	HealthcheckPath pulumi.StringInput `pulumi:"healthcheckPath"`
	// The host header will be overwritten with this field if provided.
	HostOverride pulumi.StringPtrInput `pulumi:"hostOverride"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url pulumi.StringInput `pulumi:"url"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceHttpBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceHttpBasicAuth)(nil)).Elem()
}

func (i ResourceHttpBasicAuthArgs) ToResourceHttpBasicAuthOutput() ResourceHttpBasicAuthOutput {
	return i.ToResourceHttpBasicAuthOutputWithContext(context.Background())
}

func (i ResourceHttpBasicAuthArgs) ToResourceHttpBasicAuthOutputWithContext(ctx context.Context) ResourceHttpBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHttpBasicAuthOutput)
}

func (i ResourceHttpBasicAuthArgs) ToResourceHttpBasicAuthPtrOutput() ResourceHttpBasicAuthPtrOutput {
	return i.ToResourceHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (i ResourceHttpBasicAuthArgs) ToResourceHttpBasicAuthPtrOutputWithContext(ctx context.Context) ResourceHttpBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHttpBasicAuthOutput).ToResourceHttpBasicAuthPtrOutputWithContext(ctx)
}

// ResourceHttpBasicAuthPtrInput is an input type that accepts ResourceHttpBasicAuthArgs, ResourceHttpBasicAuthPtr and ResourceHttpBasicAuthPtrOutput values.
// You can construct a concrete instance of `ResourceHttpBasicAuthPtrInput` via:
//
//	        ResourceHttpBasicAuthArgs{...}
//
//	or:
//
//	        nil
type ResourceHttpBasicAuthPtrInput interface {
	pulumi.Input

	ToResourceHttpBasicAuthPtrOutput() ResourceHttpBasicAuthPtrOutput
	ToResourceHttpBasicAuthPtrOutputWithContext(context.Context) ResourceHttpBasicAuthPtrOutput
}

type resourceHttpBasicAuthPtrType ResourceHttpBasicAuthArgs

func ResourceHttpBasicAuthPtr(v *ResourceHttpBasicAuthArgs) ResourceHttpBasicAuthPtrInput {
	return (*resourceHttpBasicAuthPtrType)(v)
}

func (*resourceHttpBasicAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceHttpBasicAuth)(nil)).Elem()
}

func (i *resourceHttpBasicAuthPtrType) ToResourceHttpBasicAuthPtrOutput() ResourceHttpBasicAuthPtrOutput {
	return i.ToResourceHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (i *resourceHttpBasicAuthPtrType) ToResourceHttpBasicAuthPtrOutputWithContext(ctx context.Context) ResourceHttpBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHttpBasicAuthPtrOutput)
}

type ResourceHttpBasicAuthOutput struct{ *pulumi.OutputState }

func (ResourceHttpBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceHttpBasicAuth)(nil)).Elem()
}

func (o ResourceHttpBasicAuthOutput) ToResourceHttpBasicAuthOutput() ResourceHttpBasicAuthOutput {
	return o
}

func (o ResourceHttpBasicAuthOutput) ToResourceHttpBasicAuthOutputWithContext(ctx context.Context) ResourceHttpBasicAuthOutput {
	return o
}

func (o ResourceHttpBasicAuthOutput) ToResourceHttpBasicAuthPtrOutput() ResourceHttpBasicAuthPtrOutput {
	return o.ToResourceHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (o ResourceHttpBasicAuthOutput) ToResourceHttpBasicAuthPtrOutputWithContext(ctx context.Context) ResourceHttpBasicAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceHttpBasicAuth) *ResourceHttpBasicAuth {
		return &v
	}).(ResourceHttpBasicAuthPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceHttpBasicAuthOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpBasicAuth) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// Automatically redirect to this path upon connecting.
func (o ResourceHttpBasicAuthOutput) DefaultPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpBasicAuth) *string { return v.DefaultPath }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceHttpBasicAuthOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpBasicAuth) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Header names (e.g. Authorization), to omit from logs.
func (o ResourceHttpBasicAuthOutput) HeadersBlacklist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpBasicAuth) *string { return v.HeadersBlacklist }).(pulumi.StringPtrOutput)
}

// This path will be used to check the health of your site.
func (o ResourceHttpBasicAuthOutput) HealthcheckPath() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceHttpBasicAuth) string { return v.HealthcheckPath }).(pulumi.StringOutput)
}

// The host header will be overwritten with this field if provided.
func (o ResourceHttpBasicAuthOutput) HostOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpBasicAuth) *string { return v.HostOverride }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceHttpBasicAuthOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceHttpBasicAuth) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceHttpBasicAuthOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpBasicAuth) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceHttpBasicAuthOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpBasicAuth) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceHttpBasicAuthOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpBasicAuth) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceHttpBasicAuthOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceHttpBasicAuth) string { return v.Subdomain }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceHttpBasicAuthOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceHttpBasicAuth) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The base address of your website without the path.
// * kubernetes:
func (o ResourceHttpBasicAuthOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceHttpBasicAuth) string { return v.Url }).(pulumi.StringOutput)
}

// The username to authenticate with.
func (o ResourceHttpBasicAuthOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpBasicAuth) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceHttpBasicAuthPtrOutput struct{ *pulumi.OutputState }

func (ResourceHttpBasicAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceHttpBasicAuth)(nil)).Elem()
}

func (o ResourceHttpBasicAuthPtrOutput) ToResourceHttpBasicAuthPtrOutput() ResourceHttpBasicAuthPtrOutput {
	return o
}

func (o ResourceHttpBasicAuthPtrOutput) ToResourceHttpBasicAuthPtrOutputWithContext(ctx context.Context) ResourceHttpBasicAuthPtrOutput {
	return o
}

func (o ResourceHttpBasicAuthPtrOutput) Elem() ResourceHttpBasicAuthOutput {
	return o.ApplyT(func(v *ResourceHttpBasicAuth) ResourceHttpBasicAuth {
		if v != nil {
			return *v
		}
		var ret ResourceHttpBasicAuth
		return ret
	}).(ResourceHttpBasicAuthOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceHttpBasicAuthPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// Automatically redirect to this path upon connecting.
func (o ResourceHttpBasicAuthPtrOutput) DefaultPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.DefaultPath
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceHttpBasicAuthPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// Header names (e.g. Authorization), to omit from logs.
func (o ResourceHttpBasicAuthPtrOutput) HeadersBlacklist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.HeadersBlacklist
	}).(pulumi.StringPtrOutput)
}

// This path will be used to check the health of your site.
func (o ResourceHttpBasicAuthPtrOutput) HealthcheckPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.HealthcheckPath
	}).(pulumi.StringPtrOutput)
}

// The host header will be overwritten with this field if provided.
func (o ResourceHttpBasicAuthPtrOutput) HostOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.HostOverride
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceHttpBasicAuthPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceHttpBasicAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceHttpBasicAuthPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceHttpBasicAuthPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceHttpBasicAuthPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceHttpBasicAuthPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceHttpBasicAuth) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The base address of your website without the path.
// * kubernetes:
func (o ResourceHttpBasicAuthPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o ResourceHttpBasicAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceHttpNoAuth struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// Automatically redirect to this path upon connecting.
	DefaultPath *string `pulumi:"defaultPath"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Header names (e.g. Authorization), to omit from logs.
	HeadersBlacklist *string `pulumi:"headersBlacklist"`
	// This path will be used to check the health of your site.
	HealthcheckPath string `pulumi:"healthcheckPath"`
	// The host header will be overwritten with this field if provided.
	HostOverride *string `pulumi:"hostOverride"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url string `pulumi:"url"`
}

// ResourceHttpNoAuthInput is an input type that accepts ResourceHttpNoAuthArgs and ResourceHttpNoAuthOutput values.
// You can construct a concrete instance of `ResourceHttpNoAuthInput` via:
//
//	ResourceHttpNoAuthArgs{...}
type ResourceHttpNoAuthInput interface {
	pulumi.Input

	ToResourceHttpNoAuthOutput() ResourceHttpNoAuthOutput
	ToResourceHttpNoAuthOutputWithContext(context.Context) ResourceHttpNoAuthOutput
}

type ResourceHttpNoAuthArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// Automatically redirect to this path upon connecting.
	DefaultPath pulumi.StringPtrInput `pulumi:"defaultPath"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Header names (e.g. Authorization), to omit from logs.
	HeadersBlacklist pulumi.StringPtrInput `pulumi:"headersBlacklist"`
	// This path will be used to check the health of your site.
	HealthcheckPath pulumi.StringInput `pulumi:"healthcheckPath"`
	// The host header will be overwritten with this field if provided.
	HostOverride pulumi.StringPtrInput `pulumi:"hostOverride"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url pulumi.StringInput `pulumi:"url"`
}

func (ResourceHttpNoAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceHttpNoAuth)(nil)).Elem()
}

func (i ResourceHttpNoAuthArgs) ToResourceHttpNoAuthOutput() ResourceHttpNoAuthOutput {
	return i.ToResourceHttpNoAuthOutputWithContext(context.Background())
}

func (i ResourceHttpNoAuthArgs) ToResourceHttpNoAuthOutputWithContext(ctx context.Context) ResourceHttpNoAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHttpNoAuthOutput)
}

func (i ResourceHttpNoAuthArgs) ToResourceHttpNoAuthPtrOutput() ResourceHttpNoAuthPtrOutput {
	return i.ToResourceHttpNoAuthPtrOutputWithContext(context.Background())
}

func (i ResourceHttpNoAuthArgs) ToResourceHttpNoAuthPtrOutputWithContext(ctx context.Context) ResourceHttpNoAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHttpNoAuthOutput).ToResourceHttpNoAuthPtrOutputWithContext(ctx)
}

// ResourceHttpNoAuthPtrInput is an input type that accepts ResourceHttpNoAuthArgs, ResourceHttpNoAuthPtr and ResourceHttpNoAuthPtrOutput values.
// You can construct a concrete instance of `ResourceHttpNoAuthPtrInput` via:
//
//	        ResourceHttpNoAuthArgs{...}
//
//	or:
//
//	        nil
type ResourceHttpNoAuthPtrInput interface {
	pulumi.Input

	ToResourceHttpNoAuthPtrOutput() ResourceHttpNoAuthPtrOutput
	ToResourceHttpNoAuthPtrOutputWithContext(context.Context) ResourceHttpNoAuthPtrOutput
}

type resourceHttpNoAuthPtrType ResourceHttpNoAuthArgs

func ResourceHttpNoAuthPtr(v *ResourceHttpNoAuthArgs) ResourceHttpNoAuthPtrInput {
	return (*resourceHttpNoAuthPtrType)(v)
}

func (*resourceHttpNoAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceHttpNoAuth)(nil)).Elem()
}

func (i *resourceHttpNoAuthPtrType) ToResourceHttpNoAuthPtrOutput() ResourceHttpNoAuthPtrOutput {
	return i.ToResourceHttpNoAuthPtrOutputWithContext(context.Background())
}

func (i *resourceHttpNoAuthPtrType) ToResourceHttpNoAuthPtrOutputWithContext(ctx context.Context) ResourceHttpNoAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHttpNoAuthPtrOutput)
}

type ResourceHttpNoAuthOutput struct{ *pulumi.OutputState }

func (ResourceHttpNoAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceHttpNoAuth)(nil)).Elem()
}

func (o ResourceHttpNoAuthOutput) ToResourceHttpNoAuthOutput() ResourceHttpNoAuthOutput {
	return o
}

func (o ResourceHttpNoAuthOutput) ToResourceHttpNoAuthOutputWithContext(ctx context.Context) ResourceHttpNoAuthOutput {
	return o
}

func (o ResourceHttpNoAuthOutput) ToResourceHttpNoAuthPtrOutput() ResourceHttpNoAuthPtrOutput {
	return o.ToResourceHttpNoAuthPtrOutputWithContext(context.Background())
}

func (o ResourceHttpNoAuthOutput) ToResourceHttpNoAuthPtrOutputWithContext(ctx context.Context) ResourceHttpNoAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceHttpNoAuth) *ResourceHttpNoAuth {
		return &v
	}).(ResourceHttpNoAuthPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceHttpNoAuthOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpNoAuth) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// Automatically redirect to this path upon connecting.
func (o ResourceHttpNoAuthOutput) DefaultPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpNoAuth) *string { return v.DefaultPath }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceHttpNoAuthOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpNoAuth) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Header names (e.g. Authorization), to omit from logs.
func (o ResourceHttpNoAuthOutput) HeadersBlacklist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpNoAuth) *string { return v.HeadersBlacklist }).(pulumi.StringPtrOutput)
}

// This path will be used to check the health of your site.
func (o ResourceHttpNoAuthOutput) HealthcheckPath() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceHttpNoAuth) string { return v.HealthcheckPath }).(pulumi.StringOutput)
}

// The host header will be overwritten with this field if provided.
func (o ResourceHttpNoAuthOutput) HostOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpNoAuth) *string { return v.HostOverride }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceHttpNoAuthOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceHttpNoAuth) string { return v.Name }).(pulumi.StringOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceHttpNoAuthOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpNoAuth) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceHttpNoAuthOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceHttpNoAuth) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceHttpNoAuthOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceHttpNoAuth) string { return v.Subdomain }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceHttpNoAuthOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceHttpNoAuth) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The base address of your website without the path.
// * kubernetes:
func (o ResourceHttpNoAuthOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceHttpNoAuth) string { return v.Url }).(pulumi.StringOutput)
}

type ResourceHttpNoAuthPtrOutput struct{ *pulumi.OutputState }

func (ResourceHttpNoAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceHttpNoAuth)(nil)).Elem()
}

func (o ResourceHttpNoAuthPtrOutput) ToResourceHttpNoAuthPtrOutput() ResourceHttpNoAuthPtrOutput {
	return o
}

func (o ResourceHttpNoAuthPtrOutput) ToResourceHttpNoAuthPtrOutputWithContext(ctx context.Context) ResourceHttpNoAuthPtrOutput {
	return o
}

func (o ResourceHttpNoAuthPtrOutput) Elem() ResourceHttpNoAuthOutput {
	return o.ApplyT(func(v *ResourceHttpNoAuth) ResourceHttpNoAuth {
		if v != nil {
			return *v
		}
		var ret ResourceHttpNoAuth
		return ret
	}).(ResourceHttpNoAuthOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceHttpNoAuthPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpNoAuth) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// Automatically redirect to this path upon connecting.
func (o ResourceHttpNoAuthPtrOutput) DefaultPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpNoAuth) *string {
		if v == nil {
			return nil
		}
		return v.DefaultPath
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceHttpNoAuthPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpNoAuth) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// Header names (e.g. Authorization), to omit from logs.
func (o ResourceHttpNoAuthPtrOutput) HeadersBlacklist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpNoAuth) *string {
		if v == nil {
			return nil
		}
		return v.HeadersBlacklist
	}).(pulumi.StringPtrOutput)
}

// This path will be used to check the health of your site.
func (o ResourceHttpNoAuthPtrOutput) HealthcheckPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpNoAuth) *string {
		if v == nil {
			return nil
		}
		return &v.HealthcheckPath
	}).(pulumi.StringPtrOutput)
}

// The host header will be overwritten with this field if provided.
func (o ResourceHttpNoAuthPtrOutput) HostOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpNoAuth) *string {
		if v == nil {
			return nil
		}
		return v.HostOverride
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceHttpNoAuthPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpNoAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceHttpNoAuthPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpNoAuth) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceHttpNoAuthPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpNoAuth) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceHttpNoAuthPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpNoAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceHttpNoAuthPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceHttpNoAuth) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The base address of your website without the path.
// * kubernetes:
func (o ResourceHttpNoAuthPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceHttpNoAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type ResourceKubernetes struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass *bool `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey *string `pulumi:"clientKey"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled *bool `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername *string `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceKubernetesInput is an input type that accepts ResourceKubernetesArgs and ResourceKubernetesOutput values.
// You can construct a concrete instance of `ResourceKubernetesInput` via:
//
//	ResourceKubernetesArgs{...}
type ResourceKubernetesInput interface {
	pulumi.Input

	ToResourceKubernetesOutput() ResourceKubernetesOutput
	ToResourceKubernetesOutputWithContext(context.Context) ResourceKubernetesOutput
}

type ResourceKubernetesArgs struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass pulumi.BoolPtrInput `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled pulumi.BoolPtrInput `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername pulumi.StringPtrInput `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceKubernetesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceKubernetes)(nil)).Elem()
}

func (i ResourceKubernetesArgs) ToResourceKubernetesOutput() ResourceKubernetesOutput {
	return i.ToResourceKubernetesOutputWithContext(context.Background())
}

func (i ResourceKubernetesArgs) ToResourceKubernetesOutputWithContext(ctx context.Context) ResourceKubernetesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceKubernetesOutput)
}

func (i ResourceKubernetesArgs) ToResourceKubernetesPtrOutput() ResourceKubernetesPtrOutput {
	return i.ToResourceKubernetesPtrOutputWithContext(context.Background())
}

func (i ResourceKubernetesArgs) ToResourceKubernetesPtrOutputWithContext(ctx context.Context) ResourceKubernetesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceKubernetesOutput).ToResourceKubernetesPtrOutputWithContext(ctx)
}

// ResourceKubernetesPtrInput is an input type that accepts ResourceKubernetesArgs, ResourceKubernetesPtr and ResourceKubernetesPtrOutput values.
// You can construct a concrete instance of `ResourceKubernetesPtrInput` via:
//
//	        ResourceKubernetesArgs{...}
//
//	or:
//
//	        nil
type ResourceKubernetesPtrInput interface {
	pulumi.Input

	ToResourceKubernetesPtrOutput() ResourceKubernetesPtrOutput
	ToResourceKubernetesPtrOutputWithContext(context.Context) ResourceKubernetesPtrOutput
}

type resourceKubernetesPtrType ResourceKubernetesArgs

func ResourceKubernetesPtr(v *ResourceKubernetesArgs) ResourceKubernetesPtrInput {
	return (*resourceKubernetesPtrType)(v)
}

func (*resourceKubernetesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceKubernetes)(nil)).Elem()
}

func (i *resourceKubernetesPtrType) ToResourceKubernetesPtrOutput() ResourceKubernetesPtrOutput {
	return i.ToResourceKubernetesPtrOutputWithContext(context.Background())
}

func (i *resourceKubernetesPtrType) ToResourceKubernetesPtrOutputWithContext(ctx context.Context) ResourceKubernetesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceKubernetesPtrOutput)
}

type ResourceKubernetesOutput struct{ *pulumi.OutputState }

func (ResourceKubernetesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceKubernetes)(nil)).Elem()
}

func (o ResourceKubernetesOutput) ToResourceKubernetesOutput() ResourceKubernetesOutput {
	return o
}

func (o ResourceKubernetesOutput) ToResourceKubernetesOutputWithContext(ctx context.Context) ResourceKubernetesOutput {
	return o
}

func (o ResourceKubernetesOutput) ToResourceKubernetesPtrOutput() ResourceKubernetesPtrOutput {
	return o.ToResourceKubernetesPtrOutputWithContext(context.Background())
}

func (o ResourceKubernetesOutput) ToResourceKubernetesPtrOutputWithContext(ctx context.Context) ResourceKubernetesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceKubernetes) *ResourceKubernetes {
		return &v
	}).(ResourceKubernetesPtrOutput)
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o ResourceKubernetesOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceKubernetes) *bool { return v.AllowResourceRoleBypass }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceKubernetesOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetes) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceKubernetesOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetes) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o ResourceKubernetesOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetes) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o ResourceKubernetesOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetes) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o ResourceKubernetesOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceKubernetes) *bool { return v.DiscoveryEnabled }).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o ResourceKubernetesOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetes) *string { return v.DiscoveryUsername }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceKubernetesOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetes) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceKubernetesOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetes) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceKubernetes) string { return v.Hostname }).(pulumi.StringOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceKubernetesOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetes) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceKubernetesOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetes) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceKubernetesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceKubernetes) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceKubernetes) int { return v.Port }).(pulumi.IntOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceKubernetesOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceKubernetes) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceKubernetesOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetes) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceKubernetesOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetes) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceKubernetesOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetes) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceKubernetesOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceKubernetes) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceKubernetesPtrOutput struct{ *pulumi.OutputState }

func (ResourceKubernetesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceKubernetes)(nil)).Elem()
}

func (o ResourceKubernetesPtrOutput) ToResourceKubernetesPtrOutput() ResourceKubernetesPtrOutput {
	return o
}

func (o ResourceKubernetesPtrOutput) ToResourceKubernetesPtrOutputWithContext(ctx context.Context) ResourceKubernetesPtrOutput {
	return o
}

func (o ResourceKubernetesPtrOutput) Elem() ResourceKubernetesOutput {
	return o.ApplyT(func(v *ResourceKubernetes) ResourceKubernetes {
		if v != nil {
			return *v
		}
		var ret ResourceKubernetes
		return ret
	}).(ResourceKubernetesOutput)
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o ResourceKubernetesPtrOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *bool {
		if v == nil {
			return nil
		}
		return v.AllowResourceRoleBypass
	}).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceKubernetesPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceKubernetesPtrOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o ResourceKubernetesPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o ResourceKubernetesPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o ResourceKubernetesPtrOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *bool {
		if v == nil {
			return nil
		}
		return v.DiscoveryEnabled
	}).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o ResourceKubernetesPtrOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.DiscoveryUsername
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceKubernetesPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceKubernetesPtrOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceKubernetesPtrOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.IdentityAliasHealthcheckUsername
	}).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceKubernetesPtrOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.IdentitySetId
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceKubernetesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceKubernetesPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceKubernetesPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceKubernetesPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceKubernetesPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceKubernetesPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceKubernetes) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceKubernetesBasicAuth struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceKubernetesBasicAuthInput is an input type that accepts ResourceKubernetesBasicAuthArgs and ResourceKubernetesBasicAuthOutput values.
// You can construct a concrete instance of `ResourceKubernetesBasicAuthInput` via:
//
//	ResourceKubernetesBasicAuthArgs{...}
type ResourceKubernetesBasicAuthInput interface {
	pulumi.Input

	ToResourceKubernetesBasicAuthOutput() ResourceKubernetesBasicAuthOutput
	ToResourceKubernetesBasicAuthOutputWithContext(context.Context) ResourceKubernetesBasicAuthOutput
}

type ResourceKubernetesBasicAuthArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceKubernetesBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceKubernetesBasicAuth)(nil)).Elem()
}

func (i ResourceKubernetesBasicAuthArgs) ToResourceKubernetesBasicAuthOutput() ResourceKubernetesBasicAuthOutput {
	return i.ToResourceKubernetesBasicAuthOutputWithContext(context.Background())
}

func (i ResourceKubernetesBasicAuthArgs) ToResourceKubernetesBasicAuthOutputWithContext(ctx context.Context) ResourceKubernetesBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceKubernetesBasicAuthOutput)
}

func (i ResourceKubernetesBasicAuthArgs) ToResourceKubernetesBasicAuthPtrOutput() ResourceKubernetesBasicAuthPtrOutput {
	return i.ToResourceKubernetesBasicAuthPtrOutputWithContext(context.Background())
}

func (i ResourceKubernetesBasicAuthArgs) ToResourceKubernetesBasicAuthPtrOutputWithContext(ctx context.Context) ResourceKubernetesBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceKubernetesBasicAuthOutput).ToResourceKubernetesBasicAuthPtrOutputWithContext(ctx)
}

// ResourceKubernetesBasicAuthPtrInput is an input type that accepts ResourceKubernetesBasicAuthArgs, ResourceKubernetesBasicAuthPtr and ResourceKubernetesBasicAuthPtrOutput values.
// You can construct a concrete instance of `ResourceKubernetesBasicAuthPtrInput` via:
//
//	        ResourceKubernetesBasicAuthArgs{...}
//
//	or:
//
//	        nil
type ResourceKubernetesBasicAuthPtrInput interface {
	pulumi.Input

	ToResourceKubernetesBasicAuthPtrOutput() ResourceKubernetesBasicAuthPtrOutput
	ToResourceKubernetesBasicAuthPtrOutputWithContext(context.Context) ResourceKubernetesBasicAuthPtrOutput
}

type resourceKubernetesBasicAuthPtrType ResourceKubernetesBasicAuthArgs

func ResourceKubernetesBasicAuthPtr(v *ResourceKubernetesBasicAuthArgs) ResourceKubernetesBasicAuthPtrInput {
	return (*resourceKubernetesBasicAuthPtrType)(v)
}

func (*resourceKubernetesBasicAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceKubernetesBasicAuth)(nil)).Elem()
}

func (i *resourceKubernetesBasicAuthPtrType) ToResourceKubernetesBasicAuthPtrOutput() ResourceKubernetesBasicAuthPtrOutput {
	return i.ToResourceKubernetesBasicAuthPtrOutputWithContext(context.Background())
}

func (i *resourceKubernetesBasicAuthPtrType) ToResourceKubernetesBasicAuthPtrOutputWithContext(ctx context.Context) ResourceKubernetesBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceKubernetesBasicAuthPtrOutput)
}

type ResourceKubernetesBasicAuthOutput struct{ *pulumi.OutputState }

func (ResourceKubernetesBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceKubernetesBasicAuth)(nil)).Elem()
}

func (o ResourceKubernetesBasicAuthOutput) ToResourceKubernetesBasicAuthOutput() ResourceKubernetesBasicAuthOutput {
	return o
}

func (o ResourceKubernetesBasicAuthOutput) ToResourceKubernetesBasicAuthOutputWithContext(ctx context.Context) ResourceKubernetesBasicAuthOutput {
	return o
}

func (o ResourceKubernetesBasicAuthOutput) ToResourceKubernetesBasicAuthPtrOutput() ResourceKubernetesBasicAuthPtrOutput {
	return o.ToResourceKubernetesBasicAuthPtrOutputWithContext(context.Background())
}

func (o ResourceKubernetesBasicAuthOutput) ToResourceKubernetesBasicAuthPtrOutputWithContext(ctx context.Context) ResourceKubernetesBasicAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceKubernetesBasicAuth) *ResourceKubernetesBasicAuth {
		return &v
	}).(ResourceKubernetesBasicAuthPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceKubernetesBasicAuthOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesBasicAuth) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceKubernetesBasicAuthOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesBasicAuth) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceKubernetesBasicAuthOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesBasicAuth) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesBasicAuthOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceKubernetesBasicAuth) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceKubernetesBasicAuthOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceKubernetesBasicAuth) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceKubernetesBasicAuthOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesBasicAuth) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesBasicAuthOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceKubernetesBasicAuth) int { return v.Port }).(pulumi.IntOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceKubernetesBasicAuthOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesBasicAuth) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceKubernetesBasicAuthOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesBasicAuth) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceKubernetesBasicAuthOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesBasicAuth) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceKubernetesBasicAuthOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesBasicAuth) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceKubernetesBasicAuthOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceKubernetesBasicAuth) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceKubernetesBasicAuthOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesBasicAuth) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceKubernetesBasicAuthPtrOutput struct{ *pulumi.OutputState }

func (ResourceKubernetesBasicAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceKubernetesBasicAuth)(nil)).Elem()
}

func (o ResourceKubernetesBasicAuthPtrOutput) ToResourceKubernetesBasicAuthPtrOutput() ResourceKubernetesBasicAuthPtrOutput {
	return o
}

func (o ResourceKubernetesBasicAuthPtrOutput) ToResourceKubernetesBasicAuthPtrOutputWithContext(ctx context.Context) ResourceKubernetesBasicAuthPtrOutput {
	return o
}

func (o ResourceKubernetesBasicAuthPtrOutput) Elem() ResourceKubernetesBasicAuthOutput {
	return o.ApplyT(func(v *ResourceKubernetesBasicAuth) ResourceKubernetesBasicAuth {
		if v != nil {
			return *v
		}
		var ret ResourceKubernetesBasicAuth
		return ret
	}).(ResourceKubernetesBasicAuthOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceKubernetesBasicAuthPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceKubernetesBasicAuthPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceKubernetesBasicAuthPtrOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesBasicAuthPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceKubernetesBasicAuthPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceKubernetesBasicAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesBasicAuthPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesBasicAuth) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceKubernetesBasicAuthPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesBasicAuth) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceKubernetesBasicAuthPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceKubernetesBasicAuthPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceKubernetesBasicAuthPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceKubernetesBasicAuthPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceKubernetesBasicAuth) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceKubernetesBasicAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesBasicAuth) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceKubernetesServiceAccount struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass *bool `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled *bool `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername *string `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The API token to authenticate with.
	// * kubernetes_user_impersonation:
	Token *string `pulumi:"token"`
}

// ResourceKubernetesServiceAccountInput is an input type that accepts ResourceKubernetesServiceAccountArgs and ResourceKubernetesServiceAccountOutput values.
// You can construct a concrete instance of `ResourceKubernetesServiceAccountInput` via:
//
//	ResourceKubernetesServiceAccountArgs{...}
type ResourceKubernetesServiceAccountInput interface {
	pulumi.Input

	ToResourceKubernetesServiceAccountOutput() ResourceKubernetesServiceAccountOutput
	ToResourceKubernetesServiceAccountOutputWithContext(context.Context) ResourceKubernetesServiceAccountOutput
}

type ResourceKubernetesServiceAccountArgs struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass pulumi.BoolPtrInput `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled pulumi.BoolPtrInput `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername pulumi.StringPtrInput `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The API token to authenticate with.
	// * kubernetes_user_impersonation:
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (ResourceKubernetesServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceKubernetesServiceAccount)(nil)).Elem()
}

func (i ResourceKubernetesServiceAccountArgs) ToResourceKubernetesServiceAccountOutput() ResourceKubernetesServiceAccountOutput {
	return i.ToResourceKubernetesServiceAccountOutputWithContext(context.Background())
}

func (i ResourceKubernetesServiceAccountArgs) ToResourceKubernetesServiceAccountOutputWithContext(ctx context.Context) ResourceKubernetesServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceKubernetesServiceAccountOutput)
}

func (i ResourceKubernetesServiceAccountArgs) ToResourceKubernetesServiceAccountPtrOutput() ResourceKubernetesServiceAccountPtrOutput {
	return i.ToResourceKubernetesServiceAccountPtrOutputWithContext(context.Background())
}

func (i ResourceKubernetesServiceAccountArgs) ToResourceKubernetesServiceAccountPtrOutputWithContext(ctx context.Context) ResourceKubernetesServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceKubernetesServiceAccountOutput).ToResourceKubernetesServiceAccountPtrOutputWithContext(ctx)
}

// ResourceKubernetesServiceAccountPtrInput is an input type that accepts ResourceKubernetesServiceAccountArgs, ResourceKubernetesServiceAccountPtr and ResourceKubernetesServiceAccountPtrOutput values.
// You can construct a concrete instance of `ResourceKubernetesServiceAccountPtrInput` via:
//
//	        ResourceKubernetesServiceAccountArgs{...}
//
//	or:
//
//	        nil
type ResourceKubernetesServiceAccountPtrInput interface {
	pulumi.Input

	ToResourceKubernetesServiceAccountPtrOutput() ResourceKubernetesServiceAccountPtrOutput
	ToResourceKubernetesServiceAccountPtrOutputWithContext(context.Context) ResourceKubernetesServiceAccountPtrOutput
}

type resourceKubernetesServiceAccountPtrType ResourceKubernetesServiceAccountArgs

func ResourceKubernetesServiceAccountPtr(v *ResourceKubernetesServiceAccountArgs) ResourceKubernetesServiceAccountPtrInput {
	return (*resourceKubernetesServiceAccountPtrType)(v)
}

func (*resourceKubernetesServiceAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceKubernetesServiceAccount)(nil)).Elem()
}

func (i *resourceKubernetesServiceAccountPtrType) ToResourceKubernetesServiceAccountPtrOutput() ResourceKubernetesServiceAccountPtrOutput {
	return i.ToResourceKubernetesServiceAccountPtrOutputWithContext(context.Background())
}

func (i *resourceKubernetesServiceAccountPtrType) ToResourceKubernetesServiceAccountPtrOutputWithContext(ctx context.Context) ResourceKubernetesServiceAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceKubernetesServiceAccountPtrOutput)
}

type ResourceKubernetesServiceAccountOutput struct{ *pulumi.OutputState }

func (ResourceKubernetesServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceKubernetesServiceAccount)(nil)).Elem()
}

func (o ResourceKubernetesServiceAccountOutput) ToResourceKubernetesServiceAccountOutput() ResourceKubernetesServiceAccountOutput {
	return o
}

func (o ResourceKubernetesServiceAccountOutput) ToResourceKubernetesServiceAccountOutputWithContext(ctx context.Context) ResourceKubernetesServiceAccountOutput {
	return o
}

func (o ResourceKubernetesServiceAccountOutput) ToResourceKubernetesServiceAccountPtrOutput() ResourceKubernetesServiceAccountPtrOutput {
	return o.ToResourceKubernetesServiceAccountPtrOutputWithContext(context.Background())
}

func (o ResourceKubernetesServiceAccountOutput) ToResourceKubernetesServiceAccountPtrOutputWithContext(ctx context.Context) ResourceKubernetesServiceAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceKubernetesServiceAccount) *ResourceKubernetesServiceAccount {
		return &v
	}).(ResourceKubernetesServiceAccountPtrOutput)
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o ResourceKubernetesServiceAccountOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccount) *bool { return v.AllowResourceRoleBypass }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceKubernetesServiceAccountOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccount) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o ResourceKubernetesServiceAccountOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccount) *bool { return v.DiscoveryEnabled }).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o ResourceKubernetesServiceAccountOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccount) *string { return v.DiscoveryUsername }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceKubernetesServiceAccountOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccount) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceKubernetesServiceAccountOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccount) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesServiceAccountOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccount) string { return v.Hostname }).(pulumi.StringOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceKubernetesServiceAccountOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccount) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceKubernetesServiceAccountOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccount) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceKubernetesServiceAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccount) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesServiceAccountOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccount) int { return v.Port }).(pulumi.IntOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceKubernetesServiceAccountOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccount) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceKubernetesServiceAccountOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccount) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceKubernetesServiceAccountOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccount) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceKubernetesServiceAccountOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccount) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceKubernetesServiceAccountOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccount) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The API token to authenticate with.
// * kubernetes_user_impersonation:
func (o ResourceKubernetesServiceAccountOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccount) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type ResourceKubernetesServiceAccountPtrOutput struct{ *pulumi.OutputState }

func (ResourceKubernetesServiceAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceKubernetesServiceAccount)(nil)).Elem()
}

func (o ResourceKubernetesServiceAccountPtrOutput) ToResourceKubernetesServiceAccountPtrOutput() ResourceKubernetesServiceAccountPtrOutput {
	return o
}

func (o ResourceKubernetesServiceAccountPtrOutput) ToResourceKubernetesServiceAccountPtrOutputWithContext(ctx context.Context) ResourceKubernetesServiceAccountPtrOutput {
	return o
}

func (o ResourceKubernetesServiceAccountPtrOutput) Elem() ResourceKubernetesServiceAccountOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) ResourceKubernetesServiceAccount {
		if v != nil {
			return *v
		}
		var ret ResourceKubernetesServiceAccount
		return ret
	}).(ResourceKubernetesServiceAccountOutput)
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o ResourceKubernetesServiceAccountPtrOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) *bool {
		if v == nil {
			return nil
		}
		return v.AllowResourceRoleBypass
	}).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceKubernetesServiceAccountPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o ResourceKubernetesServiceAccountPtrOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) *bool {
		if v == nil {
			return nil
		}
		return v.DiscoveryEnabled
	}).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o ResourceKubernetesServiceAccountPtrOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.DiscoveryUsername
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceKubernetesServiceAccountPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceKubernetesServiceAccountPtrOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesServiceAccountPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceKubernetesServiceAccountPtrOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.IdentityAliasHealthcheckUsername
	}).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceKubernetesServiceAccountPtrOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.IdentitySetId
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceKubernetesServiceAccountPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesServiceAccountPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceKubernetesServiceAccountPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceKubernetesServiceAccountPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceKubernetesServiceAccountPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceKubernetesServiceAccountPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceKubernetesServiceAccountPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The API token to authenticate with.
// * kubernetes_user_impersonation:
func (o ResourceKubernetesServiceAccountPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccount) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

type ResourceKubernetesServiceAccountUserImpersonation struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The API token to authenticate with.
	// * kubernetes_user_impersonation:
	Token *string `pulumi:"token"`
}

// ResourceKubernetesServiceAccountUserImpersonationInput is an input type that accepts ResourceKubernetesServiceAccountUserImpersonationArgs and ResourceKubernetesServiceAccountUserImpersonationOutput values.
// You can construct a concrete instance of `ResourceKubernetesServiceAccountUserImpersonationInput` via:
//
//	ResourceKubernetesServiceAccountUserImpersonationArgs{...}
type ResourceKubernetesServiceAccountUserImpersonationInput interface {
	pulumi.Input

	ToResourceKubernetesServiceAccountUserImpersonationOutput() ResourceKubernetesServiceAccountUserImpersonationOutput
	ToResourceKubernetesServiceAccountUserImpersonationOutputWithContext(context.Context) ResourceKubernetesServiceAccountUserImpersonationOutput
}

type ResourceKubernetesServiceAccountUserImpersonationArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The API token to authenticate with.
	// * kubernetes_user_impersonation:
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (ResourceKubernetesServiceAccountUserImpersonationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceKubernetesServiceAccountUserImpersonation)(nil)).Elem()
}

func (i ResourceKubernetesServiceAccountUserImpersonationArgs) ToResourceKubernetesServiceAccountUserImpersonationOutput() ResourceKubernetesServiceAccountUserImpersonationOutput {
	return i.ToResourceKubernetesServiceAccountUserImpersonationOutputWithContext(context.Background())
}

func (i ResourceKubernetesServiceAccountUserImpersonationArgs) ToResourceKubernetesServiceAccountUserImpersonationOutputWithContext(ctx context.Context) ResourceKubernetesServiceAccountUserImpersonationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceKubernetesServiceAccountUserImpersonationOutput)
}

func (i ResourceKubernetesServiceAccountUserImpersonationArgs) ToResourceKubernetesServiceAccountUserImpersonationPtrOutput() ResourceKubernetesServiceAccountUserImpersonationPtrOutput {
	return i.ToResourceKubernetesServiceAccountUserImpersonationPtrOutputWithContext(context.Background())
}

func (i ResourceKubernetesServiceAccountUserImpersonationArgs) ToResourceKubernetesServiceAccountUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceKubernetesServiceAccountUserImpersonationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceKubernetesServiceAccountUserImpersonationOutput).ToResourceKubernetesServiceAccountUserImpersonationPtrOutputWithContext(ctx)
}

// ResourceKubernetesServiceAccountUserImpersonationPtrInput is an input type that accepts ResourceKubernetesServiceAccountUserImpersonationArgs, ResourceKubernetesServiceAccountUserImpersonationPtr and ResourceKubernetesServiceAccountUserImpersonationPtrOutput values.
// You can construct a concrete instance of `ResourceKubernetesServiceAccountUserImpersonationPtrInput` via:
//
//	        ResourceKubernetesServiceAccountUserImpersonationArgs{...}
//
//	or:
//
//	        nil
type ResourceKubernetesServiceAccountUserImpersonationPtrInput interface {
	pulumi.Input

	ToResourceKubernetesServiceAccountUserImpersonationPtrOutput() ResourceKubernetesServiceAccountUserImpersonationPtrOutput
	ToResourceKubernetesServiceAccountUserImpersonationPtrOutputWithContext(context.Context) ResourceKubernetesServiceAccountUserImpersonationPtrOutput
}

type resourceKubernetesServiceAccountUserImpersonationPtrType ResourceKubernetesServiceAccountUserImpersonationArgs

func ResourceKubernetesServiceAccountUserImpersonationPtr(v *ResourceKubernetesServiceAccountUserImpersonationArgs) ResourceKubernetesServiceAccountUserImpersonationPtrInput {
	return (*resourceKubernetesServiceAccountUserImpersonationPtrType)(v)
}

func (*resourceKubernetesServiceAccountUserImpersonationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceKubernetesServiceAccountUserImpersonation)(nil)).Elem()
}

func (i *resourceKubernetesServiceAccountUserImpersonationPtrType) ToResourceKubernetesServiceAccountUserImpersonationPtrOutput() ResourceKubernetesServiceAccountUserImpersonationPtrOutput {
	return i.ToResourceKubernetesServiceAccountUserImpersonationPtrOutputWithContext(context.Background())
}

func (i *resourceKubernetesServiceAccountUserImpersonationPtrType) ToResourceKubernetesServiceAccountUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceKubernetesServiceAccountUserImpersonationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceKubernetesServiceAccountUserImpersonationPtrOutput)
}

type ResourceKubernetesServiceAccountUserImpersonationOutput struct{ *pulumi.OutputState }

func (ResourceKubernetesServiceAccountUserImpersonationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceKubernetesServiceAccountUserImpersonation)(nil)).Elem()
}

func (o ResourceKubernetesServiceAccountUserImpersonationOutput) ToResourceKubernetesServiceAccountUserImpersonationOutput() ResourceKubernetesServiceAccountUserImpersonationOutput {
	return o
}

func (o ResourceKubernetesServiceAccountUserImpersonationOutput) ToResourceKubernetesServiceAccountUserImpersonationOutputWithContext(ctx context.Context) ResourceKubernetesServiceAccountUserImpersonationOutput {
	return o
}

func (o ResourceKubernetesServiceAccountUserImpersonationOutput) ToResourceKubernetesServiceAccountUserImpersonationPtrOutput() ResourceKubernetesServiceAccountUserImpersonationPtrOutput {
	return o.ToResourceKubernetesServiceAccountUserImpersonationPtrOutputWithContext(context.Background())
}

func (o ResourceKubernetesServiceAccountUserImpersonationOutput) ToResourceKubernetesServiceAccountUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceKubernetesServiceAccountUserImpersonationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceKubernetesServiceAccountUserImpersonation) *ResourceKubernetesServiceAccountUserImpersonation {
		return &v
	}).(ResourceKubernetesServiceAccountUserImpersonationPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceKubernetesServiceAccountUserImpersonationOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccountUserImpersonation) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceKubernetesServiceAccountUserImpersonationOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccountUserImpersonation) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceKubernetesServiceAccountUserImpersonationOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccountUserImpersonation) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesServiceAccountUserImpersonationOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccountUserImpersonation) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceKubernetesServiceAccountUserImpersonationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccountUserImpersonation) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesServiceAccountUserImpersonationOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccountUserImpersonation) int { return v.Port }).(pulumi.IntOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceKubernetesServiceAccountUserImpersonationOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccountUserImpersonation) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceKubernetesServiceAccountUserImpersonationOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccountUserImpersonation) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceKubernetesServiceAccountUserImpersonationOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccountUserImpersonation) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceKubernetesServiceAccountUserImpersonationOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccountUserImpersonation) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceKubernetesServiceAccountUserImpersonationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccountUserImpersonation) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The API token to authenticate with.
// * kubernetes_user_impersonation:
func (o ResourceKubernetesServiceAccountUserImpersonationOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesServiceAccountUserImpersonation) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type ResourceKubernetesServiceAccountUserImpersonationPtrOutput struct{ *pulumi.OutputState }

func (ResourceKubernetesServiceAccountUserImpersonationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceKubernetesServiceAccountUserImpersonation)(nil)).Elem()
}

func (o ResourceKubernetesServiceAccountUserImpersonationPtrOutput) ToResourceKubernetesServiceAccountUserImpersonationPtrOutput() ResourceKubernetesServiceAccountUserImpersonationPtrOutput {
	return o
}

func (o ResourceKubernetesServiceAccountUserImpersonationPtrOutput) ToResourceKubernetesServiceAccountUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceKubernetesServiceAccountUserImpersonationPtrOutput {
	return o
}

func (o ResourceKubernetesServiceAccountUserImpersonationPtrOutput) Elem() ResourceKubernetesServiceAccountUserImpersonationOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccountUserImpersonation) ResourceKubernetesServiceAccountUserImpersonation {
		if v != nil {
			return *v
		}
		var ret ResourceKubernetesServiceAccountUserImpersonation
		return ret
	}).(ResourceKubernetesServiceAccountUserImpersonationOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceKubernetesServiceAccountUserImpersonationPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceKubernetesServiceAccountUserImpersonationPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceKubernetesServiceAccountUserImpersonationPtrOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesServiceAccountUserImpersonationPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceKubernetesServiceAccountUserImpersonationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesServiceAccountUserImpersonationPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccountUserImpersonation) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceKubernetesServiceAccountUserImpersonationPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccountUserImpersonation) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceKubernetesServiceAccountUserImpersonationPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceKubernetesServiceAccountUserImpersonationPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceKubernetesServiceAccountUserImpersonationPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceKubernetesServiceAccountUserImpersonationPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccountUserImpersonation) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The API token to authenticate with.
// * kubernetes_user_impersonation:
func (o ResourceKubernetesServiceAccountUserImpersonationPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesServiceAccountUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

type ResourceKubernetesUserImpersonation struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey *string `pulumi:"clientKey"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceKubernetesUserImpersonationInput is an input type that accepts ResourceKubernetesUserImpersonationArgs and ResourceKubernetesUserImpersonationOutput values.
// You can construct a concrete instance of `ResourceKubernetesUserImpersonationInput` via:
//
//	ResourceKubernetesUserImpersonationArgs{...}
type ResourceKubernetesUserImpersonationInput interface {
	pulumi.Input

	ToResourceKubernetesUserImpersonationOutput() ResourceKubernetesUserImpersonationOutput
	ToResourceKubernetesUserImpersonationOutputWithContext(context.Context) ResourceKubernetesUserImpersonationOutput
}

type ResourceKubernetesUserImpersonationArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceKubernetesUserImpersonationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceKubernetesUserImpersonation)(nil)).Elem()
}

func (i ResourceKubernetesUserImpersonationArgs) ToResourceKubernetesUserImpersonationOutput() ResourceKubernetesUserImpersonationOutput {
	return i.ToResourceKubernetesUserImpersonationOutputWithContext(context.Background())
}

func (i ResourceKubernetesUserImpersonationArgs) ToResourceKubernetesUserImpersonationOutputWithContext(ctx context.Context) ResourceKubernetesUserImpersonationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceKubernetesUserImpersonationOutput)
}

func (i ResourceKubernetesUserImpersonationArgs) ToResourceKubernetesUserImpersonationPtrOutput() ResourceKubernetesUserImpersonationPtrOutput {
	return i.ToResourceKubernetesUserImpersonationPtrOutputWithContext(context.Background())
}

func (i ResourceKubernetesUserImpersonationArgs) ToResourceKubernetesUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceKubernetesUserImpersonationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceKubernetesUserImpersonationOutput).ToResourceKubernetesUserImpersonationPtrOutputWithContext(ctx)
}

// ResourceKubernetesUserImpersonationPtrInput is an input type that accepts ResourceKubernetesUserImpersonationArgs, ResourceKubernetesUserImpersonationPtr and ResourceKubernetesUserImpersonationPtrOutput values.
// You can construct a concrete instance of `ResourceKubernetesUserImpersonationPtrInput` via:
//
//	        ResourceKubernetesUserImpersonationArgs{...}
//
//	or:
//
//	        nil
type ResourceKubernetesUserImpersonationPtrInput interface {
	pulumi.Input

	ToResourceKubernetesUserImpersonationPtrOutput() ResourceKubernetesUserImpersonationPtrOutput
	ToResourceKubernetesUserImpersonationPtrOutputWithContext(context.Context) ResourceKubernetesUserImpersonationPtrOutput
}

type resourceKubernetesUserImpersonationPtrType ResourceKubernetesUserImpersonationArgs

func ResourceKubernetesUserImpersonationPtr(v *ResourceKubernetesUserImpersonationArgs) ResourceKubernetesUserImpersonationPtrInput {
	return (*resourceKubernetesUserImpersonationPtrType)(v)
}

func (*resourceKubernetesUserImpersonationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceKubernetesUserImpersonation)(nil)).Elem()
}

func (i *resourceKubernetesUserImpersonationPtrType) ToResourceKubernetesUserImpersonationPtrOutput() ResourceKubernetesUserImpersonationPtrOutput {
	return i.ToResourceKubernetesUserImpersonationPtrOutputWithContext(context.Background())
}

func (i *resourceKubernetesUserImpersonationPtrType) ToResourceKubernetesUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceKubernetesUserImpersonationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceKubernetesUserImpersonationPtrOutput)
}

type ResourceKubernetesUserImpersonationOutput struct{ *pulumi.OutputState }

func (ResourceKubernetesUserImpersonationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceKubernetesUserImpersonation)(nil)).Elem()
}

func (o ResourceKubernetesUserImpersonationOutput) ToResourceKubernetesUserImpersonationOutput() ResourceKubernetesUserImpersonationOutput {
	return o
}

func (o ResourceKubernetesUserImpersonationOutput) ToResourceKubernetesUserImpersonationOutputWithContext(ctx context.Context) ResourceKubernetesUserImpersonationOutput {
	return o
}

func (o ResourceKubernetesUserImpersonationOutput) ToResourceKubernetesUserImpersonationPtrOutput() ResourceKubernetesUserImpersonationPtrOutput {
	return o.ToResourceKubernetesUserImpersonationPtrOutputWithContext(context.Background())
}

func (o ResourceKubernetesUserImpersonationOutput) ToResourceKubernetesUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceKubernetesUserImpersonationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceKubernetesUserImpersonation) *ResourceKubernetesUserImpersonation {
		return &v
	}).(ResourceKubernetesUserImpersonationPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceKubernetesUserImpersonationOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesUserImpersonation) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceKubernetesUserImpersonationOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesUserImpersonation) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o ResourceKubernetesUserImpersonationOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesUserImpersonation) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o ResourceKubernetesUserImpersonationOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesUserImpersonation) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceKubernetesUserImpersonationOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesUserImpersonation) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceKubernetesUserImpersonationOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesUserImpersonation) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesUserImpersonationOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceKubernetesUserImpersonation) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceKubernetesUserImpersonationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceKubernetesUserImpersonation) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesUserImpersonationOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceKubernetesUserImpersonation) int { return v.Port }).(pulumi.IntOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceKubernetesUserImpersonationOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesUserImpersonation) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceKubernetesUserImpersonationOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesUserImpersonation) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceKubernetesUserImpersonationOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesUserImpersonation) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceKubernetesUserImpersonationOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceKubernetesUserImpersonation) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceKubernetesUserImpersonationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceKubernetesUserImpersonation) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceKubernetesUserImpersonationPtrOutput struct{ *pulumi.OutputState }

func (ResourceKubernetesUserImpersonationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceKubernetesUserImpersonation)(nil)).Elem()
}

func (o ResourceKubernetesUserImpersonationPtrOutput) ToResourceKubernetesUserImpersonationPtrOutput() ResourceKubernetesUserImpersonationPtrOutput {
	return o
}

func (o ResourceKubernetesUserImpersonationPtrOutput) ToResourceKubernetesUserImpersonationPtrOutputWithContext(ctx context.Context) ResourceKubernetesUserImpersonationPtrOutput {
	return o
}

func (o ResourceKubernetesUserImpersonationPtrOutput) Elem() ResourceKubernetesUserImpersonationOutput {
	return o.ApplyT(func(v *ResourceKubernetesUserImpersonation) ResourceKubernetesUserImpersonation {
		if v != nil {
			return *v
		}
		var ret ResourceKubernetesUserImpersonation
		return ret
	}).(ResourceKubernetesUserImpersonationOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceKubernetesUserImpersonationPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceKubernetesUserImpersonationPtrOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o ResourceKubernetesUserImpersonationPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o ResourceKubernetesUserImpersonationPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceKubernetesUserImpersonationPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o ResourceKubernetesUserImpersonationPtrOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesUserImpersonationPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceKubernetesUserImpersonationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceKubernetesUserImpersonationPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesUserImpersonation) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceKubernetesUserImpersonationPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesUserImpersonation) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceKubernetesUserImpersonationPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceKubernetesUserImpersonationPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceKubernetesUserImpersonationPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceKubernetesUserImpersonation) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceKubernetesUserImpersonationPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceKubernetesUserImpersonation) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceMaria struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceMariaInput is an input type that accepts ResourceMariaArgs and ResourceMariaOutput values.
// You can construct a concrete instance of `ResourceMariaInput` via:
//
//	ResourceMariaArgs{...}
type ResourceMariaInput interface {
	pulumi.Input

	ToResourceMariaOutput() ResourceMariaOutput
	ToResourceMariaOutputWithContext(context.Context) ResourceMariaOutput
}

type ResourceMariaArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceMariaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMaria)(nil)).Elem()
}

func (i ResourceMariaArgs) ToResourceMariaOutput() ResourceMariaOutput {
	return i.ToResourceMariaOutputWithContext(context.Background())
}

func (i ResourceMariaArgs) ToResourceMariaOutputWithContext(ctx context.Context) ResourceMariaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMariaOutput)
}

func (i ResourceMariaArgs) ToResourceMariaPtrOutput() ResourceMariaPtrOutput {
	return i.ToResourceMariaPtrOutputWithContext(context.Background())
}

func (i ResourceMariaArgs) ToResourceMariaPtrOutputWithContext(ctx context.Context) ResourceMariaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMariaOutput).ToResourceMariaPtrOutputWithContext(ctx)
}

// ResourceMariaPtrInput is an input type that accepts ResourceMariaArgs, ResourceMariaPtr and ResourceMariaPtrOutput values.
// You can construct a concrete instance of `ResourceMariaPtrInput` via:
//
//	        ResourceMariaArgs{...}
//
//	or:
//
//	        nil
type ResourceMariaPtrInput interface {
	pulumi.Input

	ToResourceMariaPtrOutput() ResourceMariaPtrOutput
	ToResourceMariaPtrOutputWithContext(context.Context) ResourceMariaPtrOutput
}

type resourceMariaPtrType ResourceMariaArgs

func ResourceMariaPtr(v *ResourceMariaArgs) ResourceMariaPtrInput {
	return (*resourceMariaPtrType)(v)
}

func (*resourceMariaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMaria)(nil)).Elem()
}

func (i *resourceMariaPtrType) ToResourceMariaPtrOutput() ResourceMariaPtrOutput {
	return i.ToResourceMariaPtrOutputWithContext(context.Background())
}

func (i *resourceMariaPtrType) ToResourceMariaPtrOutputWithContext(ctx context.Context) ResourceMariaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMariaPtrOutput)
}

type ResourceMariaOutput struct{ *pulumi.OutputState }

func (ResourceMariaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMaria)(nil)).Elem()
}

func (o ResourceMariaOutput) ToResourceMariaOutput() ResourceMariaOutput {
	return o
}

func (o ResourceMariaOutput) ToResourceMariaOutputWithContext(ctx context.Context) ResourceMariaOutput {
	return o
}

func (o ResourceMariaOutput) ToResourceMariaPtrOutput() ResourceMariaPtrOutput {
	return o.ToResourceMariaPtrOutputWithContext(context.Background())
}

func (o ResourceMariaOutput) ToResourceMariaPtrOutputWithContext(ctx context.Context) ResourceMariaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceMaria) *ResourceMaria {
		return &v
	}).(ResourceMariaPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMariaOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMaria) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceMariaOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMaria) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMariaOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMaria) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMariaOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMaria) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMariaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMaria) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceMariaOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMaria) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMariaOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMaria) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMariaOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMaria) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMariaOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMaria) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceMariaOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceMaria) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMariaOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMaria) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMariaOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMaria) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMariaOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceMaria) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceMariaOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceMaria) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMariaOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMaria) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceMariaPtrOutput struct{ *pulumi.OutputState }

func (ResourceMariaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMaria)(nil)).Elem()
}

func (o ResourceMariaPtrOutput) ToResourceMariaPtrOutput() ResourceMariaPtrOutput {
	return o
}

func (o ResourceMariaPtrOutput) ToResourceMariaPtrOutputWithContext(ctx context.Context) ResourceMariaPtrOutput {
	return o
}

func (o ResourceMariaPtrOutput) Elem() ResourceMariaOutput {
	return o.ApplyT(func(v *ResourceMaria) ResourceMaria {
		if v != nil {
			return *v
		}
		var ret ResourceMaria
		return ret
	}).(ResourceMariaOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMariaPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMaria) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceMariaPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMaria) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMariaPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMaria) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMariaPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMaria) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMariaPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMaria) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceMariaPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMaria) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMariaPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMaria) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMariaPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMaria) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMariaPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMaria) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceMariaPtrOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceMaria) *bool {
		if v == nil {
			return nil
		}
		return v.RequireNativeAuth
	}).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMariaPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMaria) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMariaPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMaria) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMariaPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceMaria) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceMariaPtrOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceMaria) *bool {
		if v == nil {
			return nil
		}
		return v.UseAzureSingleServerUsernames
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMariaPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMaria) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceMemcached struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceMemcachedInput is an input type that accepts ResourceMemcachedArgs and ResourceMemcachedOutput values.
// You can construct a concrete instance of `ResourceMemcachedInput` via:
//
//	ResourceMemcachedArgs{...}
type ResourceMemcachedInput interface {
	pulumi.Input

	ToResourceMemcachedOutput() ResourceMemcachedOutput
	ToResourceMemcachedOutputWithContext(context.Context) ResourceMemcachedOutput
}

type ResourceMemcachedArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceMemcachedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMemcached)(nil)).Elem()
}

func (i ResourceMemcachedArgs) ToResourceMemcachedOutput() ResourceMemcachedOutput {
	return i.ToResourceMemcachedOutputWithContext(context.Background())
}

func (i ResourceMemcachedArgs) ToResourceMemcachedOutputWithContext(ctx context.Context) ResourceMemcachedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMemcachedOutput)
}

func (i ResourceMemcachedArgs) ToResourceMemcachedPtrOutput() ResourceMemcachedPtrOutput {
	return i.ToResourceMemcachedPtrOutputWithContext(context.Background())
}

func (i ResourceMemcachedArgs) ToResourceMemcachedPtrOutputWithContext(ctx context.Context) ResourceMemcachedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMemcachedOutput).ToResourceMemcachedPtrOutputWithContext(ctx)
}

// ResourceMemcachedPtrInput is an input type that accepts ResourceMemcachedArgs, ResourceMemcachedPtr and ResourceMemcachedPtrOutput values.
// You can construct a concrete instance of `ResourceMemcachedPtrInput` via:
//
//	        ResourceMemcachedArgs{...}
//
//	or:
//
//	        nil
type ResourceMemcachedPtrInput interface {
	pulumi.Input

	ToResourceMemcachedPtrOutput() ResourceMemcachedPtrOutput
	ToResourceMemcachedPtrOutputWithContext(context.Context) ResourceMemcachedPtrOutput
}

type resourceMemcachedPtrType ResourceMemcachedArgs

func ResourceMemcachedPtr(v *ResourceMemcachedArgs) ResourceMemcachedPtrInput {
	return (*resourceMemcachedPtrType)(v)
}

func (*resourceMemcachedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMemcached)(nil)).Elem()
}

func (i *resourceMemcachedPtrType) ToResourceMemcachedPtrOutput() ResourceMemcachedPtrOutput {
	return i.ToResourceMemcachedPtrOutputWithContext(context.Background())
}

func (i *resourceMemcachedPtrType) ToResourceMemcachedPtrOutputWithContext(ctx context.Context) ResourceMemcachedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMemcachedPtrOutput)
}

type ResourceMemcachedOutput struct{ *pulumi.OutputState }

func (ResourceMemcachedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMemcached)(nil)).Elem()
}

func (o ResourceMemcachedOutput) ToResourceMemcachedOutput() ResourceMemcachedOutput {
	return o
}

func (o ResourceMemcachedOutput) ToResourceMemcachedOutputWithContext(ctx context.Context) ResourceMemcachedOutput {
	return o
}

func (o ResourceMemcachedOutput) ToResourceMemcachedPtrOutput() ResourceMemcachedPtrOutput {
	return o.ToResourceMemcachedPtrOutputWithContext(context.Background())
}

func (o ResourceMemcachedOutput) ToResourceMemcachedPtrOutputWithContext(ctx context.Context) ResourceMemcachedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceMemcached) *ResourceMemcached {
		return &v
	}).(ResourceMemcachedPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMemcachedOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMemcached) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMemcachedOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMemcached) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMemcachedOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMemcached) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMemcachedOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMemcached) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMemcachedOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMemcached) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMemcachedOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMemcached) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMemcachedOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMemcached) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMemcachedOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMemcached) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMemcachedOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMemcached) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMemcachedOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceMemcached) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceMemcachedPtrOutput struct{ *pulumi.OutputState }

func (ResourceMemcachedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMemcached)(nil)).Elem()
}

func (o ResourceMemcachedPtrOutput) ToResourceMemcachedPtrOutput() ResourceMemcachedPtrOutput {
	return o
}

func (o ResourceMemcachedPtrOutput) ToResourceMemcachedPtrOutputWithContext(ctx context.Context) ResourceMemcachedPtrOutput {
	return o
}

func (o ResourceMemcachedPtrOutput) Elem() ResourceMemcachedOutput {
	return o.ApplyT(func(v *ResourceMemcached) ResourceMemcached {
		if v != nil {
			return *v
		}
		var ret ResourceMemcached
		return ret
	}).(ResourceMemcachedOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMemcachedPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMemcached) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMemcachedPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMemcached) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMemcachedPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMemcached) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMemcachedPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMemcached) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMemcachedPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMemcached) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMemcachedPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMemcached) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMemcachedPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMemcached) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMemcachedPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMemcached) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMemcachedPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMemcached) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMemcachedPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceMemcached) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceMemsql struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceMemsqlInput is an input type that accepts ResourceMemsqlArgs and ResourceMemsqlOutput values.
// You can construct a concrete instance of `ResourceMemsqlInput` via:
//
//	ResourceMemsqlArgs{...}
type ResourceMemsqlInput interface {
	pulumi.Input

	ToResourceMemsqlOutput() ResourceMemsqlOutput
	ToResourceMemsqlOutputWithContext(context.Context) ResourceMemsqlOutput
}

type ResourceMemsqlArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceMemsqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMemsql)(nil)).Elem()
}

func (i ResourceMemsqlArgs) ToResourceMemsqlOutput() ResourceMemsqlOutput {
	return i.ToResourceMemsqlOutputWithContext(context.Background())
}

func (i ResourceMemsqlArgs) ToResourceMemsqlOutputWithContext(ctx context.Context) ResourceMemsqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMemsqlOutput)
}

func (i ResourceMemsqlArgs) ToResourceMemsqlPtrOutput() ResourceMemsqlPtrOutput {
	return i.ToResourceMemsqlPtrOutputWithContext(context.Background())
}

func (i ResourceMemsqlArgs) ToResourceMemsqlPtrOutputWithContext(ctx context.Context) ResourceMemsqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMemsqlOutput).ToResourceMemsqlPtrOutputWithContext(ctx)
}

// ResourceMemsqlPtrInput is an input type that accepts ResourceMemsqlArgs, ResourceMemsqlPtr and ResourceMemsqlPtrOutput values.
// You can construct a concrete instance of `ResourceMemsqlPtrInput` via:
//
//	        ResourceMemsqlArgs{...}
//
//	or:
//
//	        nil
type ResourceMemsqlPtrInput interface {
	pulumi.Input

	ToResourceMemsqlPtrOutput() ResourceMemsqlPtrOutput
	ToResourceMemsqlPtrOutputWithContext(context.Context) ResourceMemsqlPtrOutput
}

type resourceMemsqlPtrType ResourceMemsqlArgs

func ResourceMemsqlPtr(v *ResourceMemsqlArgs) ResourceMemsqlPtrInput {
	return (*resourceMemsqlPtrType)(v)
}

func (*resourceMemsqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMemsql)(nil)).Elem()
}

func (i *resourceMemsqlPtrType) ToResourceMemsqlPtrOutput() ResourceMemsqlPtrOutput {
	return i.ToResourceMemsqlPtrOutputWithContext(context.Background())
}

func (i *resourceMemsqlPtrType) ToResourceMemsqlPtrOutputWithContext(ctx context.Context) ResourceMemsqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMemsqlPtrOutput)
}

type ResourceMemsqlOutput struct{ *pulumi.OutputState }

func (ResourceMemsqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMemsql)(nil)).Elem()
}

func (o ResourceMemsqlOutput) ToResourceMemsqlOutput() ResourceMemsqlOutput {
	return o
}

func (o ResourceMemsqlOutput) ToResourceMemsqlOutputWithContext(ctx context.Context) ResourceMemsqlOutput {
	return o
}

func (o ResourceMemsqlOutput) ToResourceMemsqlPtrOutput() ResourceMemsqlPtrOutput {
	return o.ToResourceMemsqlPtrOutputWithContext(context.Background())
}

func (o ResourceMemsqlOutput) ToResourceMemsqlPtrOutputWithContext(ctx context.Context) ResourceMemsqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceMemsql) *ResourceMemsql {
		return &v
	}).(ResourceMemsqlPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMemsqlOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMemsql) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceMemsqlOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMemsql) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMemsqlOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMemsql) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMemsqlOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMemsql) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMemsqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMemsql) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceMemsqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMemsql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMemsqlOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMemsql) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMemsqlOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMemsql) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMemsqlOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMemsql) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceMemsqlOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceMemsql) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMemsqlOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMemsql) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMemsqlOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMemsql) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMemsqlOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceMemsql) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceMemsqlOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceMemsql) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMemsqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMemsql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceMemsqlPtrOutput struct{ *pulumi.OutputState }

func (ResourceMemsqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMemsql)(nil)).Elem()
}

func (o ResourceMemsqlPtrOutput) ToResourceMemsqlPtrOutput() ResourceMemsqlPtrOutput {
	return o
}

func (o ResourceMemsqlPtrOutput) ToResourceMemsqlPtrOutputWithContext(ctx context.Context) ResourceMemsqlPtrOutput {
	return o
}

func (o ResourceMemsqlPtrOutput) Elem() ResourceMemsqlOutput {
	return o.ApplyT(func(v *ResourceMemsql) ResourceMemsql {
		if v != nil {
			return *v
		}
		var ret ResourceMemsql
		return ret
	}).(ResourceMemsqlOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMemsqlPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMemsql) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceMemsqlPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMemsql) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMemsqlPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMemsql) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMemsqlPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMemsql) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMemsqlPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMemsql) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceMemsqlPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMemsql) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMemsqlPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMemsql) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMemsqlPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMemsql) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMemsqlPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMemsql) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceMemsqlPtrOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceMemsql) *bool {
		if v == nil {
			return nil
		}
		return v.RequireNativeAuth
	}).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMemsqlPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMemsql) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMemsqlPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMemsql) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMemsqlPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceMemsql) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceMemsqlPtrOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceMemsql) *bool {
		if v == nil {
			return nil
		}
		return v.UseAzureSingleServerUsernames
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMemsqlPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMemsql) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceMongoHost struct {
	// The authentication database to use.
	AuthDatabase string `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceMongoHostInput is an input type that accepts ResourceMongoHostArgs and ResourceMongoHostOutput values.
// You can construct a concrete instance of `ResourceMongoHostInput` via:
//
//	ResourceMongoHostArgs{...}
type ResourceMongoHostInput interface {
	pulumi.Input

	ToResourceMongoHostOutput() ResourceMongoHostOutput
	ToResourceMongoHostOutputWithContext(context.Context) ResourceMongoHostOutput
}

type ResourceMongoHostArgs struct {
	// The authentication database to use.
	AuthDatabase pulumi.StringInput `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceMongoHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMongoHost)(nil)).Elem()
}

func (i ResourceMongoHostArgs) ToResourceMongoHostOutput() ResourceMongoHostOutput {
	return i.ToResourceMongoHostOutputWithContext(context.Background())
}

func (i ResourceMongoHostArgs) ToResourceMongoHostOutputWithContext(ctx context.Context) ResourceMongoHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMongoHostOutput)
}

func (i ResourceMongoHostArgs) ToResourceMongoHostPtrOutput() ResourceMongoHostPtrOutput {
	return i.ToResourceMongoHostPtrOutputWithContext(context.Background())
}

func (i ResourceMongoHostArgs) ToResourceMongoHostPtrOutputWithContext(ctx context.Context) ResourceMongoHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMongoHostOutput).ToResourceMongoHostPtrOutputWithContext(ctx)
}

// ResourceMongoHostPtrInput is an input type that accepts ResourceMongoHostArgs, ResourceMongoHostPtr and ResourceMongoHostPtrOutput values.
// You can construct a concrete instance of `ResourceMongoHostPtrInput` via:
//
//	        ResourceMongoHostArgs{...}
//
//	or:
//
//	        nil
type ResourceMongoHostPtrInput interface {
	pulumi.Input

	ToResourceMongoHostPtrOutput() ResourceMongoHostPtrOutput
	ToResourceMongoHostPtrOutputWithContext(context.Context) ResourceMongoHostPtrOutput
}

type resourceMongoHostPtrType ResourceMongoHostArgs

func ResourceMongoHostPtr(v *ResourceMongoHostArgs) ResourceMongoHostPtrInput {
	return (*resourceMongoHostPtrType)(v)
}

func (*resourceMongoHostPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMongoHost)(nil)).Elem()
}

func (i *resourceMongoHostPtrType) ToResourceMongoHostPtrOutput() ResourceMongoHostPtrOutput {
	return i.ToResourceMongoHostPtrOutputWithContext(context.Background())
}

func (i *resourceMongoHostPtrType) ToResourceMongoHostPtrOutputWithContext(ctx context.Context) ResourceMongoHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMongoHostPtrOutput)
}

type ResourceMongoHostOutput struct{ *pulumi.OutputState }

func (ResourceMongoHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMongoHost)(nil)).Elem()
}

func (o ResourceMongoHostOutput) ToResourceMongoHostOutput() ResourceMongoHostOutput {
	return o
}

func (o ResourceMongoHostOutput) ToResourceMongoHostOutputWithContext(ctx context.Context) ResourceMongoHostOutput {
	return o
}

func (o ResourceMongoHostOutput) ToResourceMongoHostPtrOutput() ResourceMongoHostPtrOutput {
	return o.ToResourceMongoHostPtrOutputWithContext(context.Background())
}

func (o ResourceMongoHostOutput) ToResourceMongoHostPtrOutputWithContext(ctx context.Context) ResourceMongoHostPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceMongoHost) *ResourceMongoHost {
		return &v
	}).(ResourceMongoHostPtrOutput)
}

// The authentication database to use.
func (o ResourceMongoHostOutput) AuthDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMongoHost) string { return v.AuthDatabase }).(pulumi.StringOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMongoHostOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoHost) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMongoHostOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoHost) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoHostOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMongoHost) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMongoHostOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMongoHost) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceMongoHostOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoHost) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoHostOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMongoHost) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMongoHostOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMongoHost) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMongoHostOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoHost) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMongoHostOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoHost) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMongoHostOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoHost) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMongoHostOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceMongoHost) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceMongoHostOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceMongoHost) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMongoHostOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoHost) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceMongoHostPtrOutput struct{ *pulumi.OutputState }

func (ResourceMongoHostPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMongoHost)(nil)).Elem()
}

func (o ResourceMongoHostPtrOutput) ToResourceMongoHostPtrOutput() ResourceMongoHostPtrOutput {
	return o
}

func (o ResourceMongoHostPtrOutput) ToResourceMongoHostPtrOutputWithContext(ctx context.Context) ResourceMongoHostPtrOutput {
	return o
}

func (o ResourceMongoHostPtrOutput) Elem() ResourceMongoHostOutput {
	return o.ApplyT(func(v *ResourceMongoHost) ResourceMongoHost {
		if v != nil {
			return *v
		}
		var ret ResourceMongoHost
		return ret
	}).(ResourceMongoHostOutput)
}

// The authentication database to use.
func (o ResourceMongoHostPtrOutput) AuthDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoHost) *string {
		if v == nil {
			return nil
		}
		return &v.AuthDatabase
	}).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMongoHostPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoHost) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMongoHostPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoHost) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoHostPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoHost) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMongoHostPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoHost) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceMongoHostPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoHost) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoHostPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMongoHost) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMongoHostPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMongoHost) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMongoHostPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoHost) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMongoHostPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoHost) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMongoHostPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoHost) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMongoHostPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceMongoHost) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceMongoHostPtrOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceMongoHost) *bool {
		if v == nil {
			return nil
		}
		return v.TlsRequired
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMongoHostPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoHost) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceMongoLegacyHost struct {
	// The authentication database to use.
	AuthDatabase string `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceMongoLegacyHostInput is an input type that accepts ResourceMongoLegacyHostArgs and ResourceMongoLegacyHostOutput values.
// You can construct a concrete instance of `ResourceMongoLegacyHostInput` via:
//
//	ResourceMongoLegacyHostArgs{...}
type ResourceMongoLegacyHostInput interface {
	pulumi.Input

	ToResourceMongoLegacyHostOutput() ResourceMongoLegacyHostOutput
	ToResourceMongoLegacyHostOutputWithContext(context.Context) ResourceMongoLegacyHostOutput
}

type ResourceMongoLegacyHostArgs struct {
	// The authentication database to use.
	AuthDatabase pulumi.StringInput `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceMongoLegacyHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMongoLegacyHost)(nil)).Elem()
}

func (i ResourceMongoLegacyHostArgs) ToResourceMongoLegacyHostOutput() ResourceMongoLegacyHostOutput {
	return i.ToResourceMongoLegacyHostOutputWithContext(context.Background())
}

func (i ResourceMongoLegacyHostArgs) ToResourceMongoLegacyHostOutputWithContext(ctx context.Context) ResourceMongoLegacyHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMongoLegacyHostOutput)
}

func (i ResourceMongoLegacyHostArgs) ToResourceMongoLegacyHostPtrOutput() ResourceMongoLegacyHostPtrOutput {
	return i.ToResourceMongoLegacyHostPtrOutputWithContext(context.Background())
}

func (i ResourceMongoLegacyHostArgs) ToResourceMongoLegacyHostPtrOutputWithContext(ctx context.Context) ResourceMongoLegacyHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMongoLegacyHostOutput).ToResourceMongoLegacyHostPtrOutputWithContext(ctx)
}

// ResourceMongoLegacyHostPtrInput is an input type that accepts ResourceMongoLegacyHostArgs, ResourceMongoLegacyHostPtr and ResourceMongoLegacyHostPtrOutput values.
// You can construct a concrete instance of `ResourceMongoLegacyHostPtrInput` via:
//
//	        ResourceMongoLegacyHostArgs{...}
//
//	or:
//
//	        nil
type ResourceMongoLegacyHostPtrInput interface {
	pulumi.Input

	ToResourceMongoLegacyHostPtrOutput() ResourceMongoLegacyHostPtrOutput
	ToResourceMongoLegacyHostPtrOutputWithContext(context.Context) ResourceMongoLegacyHostPtrOutput
}

type resourceMongoLegacyHostPtrType ResourceMongoLegacyHostArgs

func ResourceMongoLegacyHostPtr(v *ResourceMongoLegacyHostArgs) ResourceMongoLegacyHostPtrInput {
	return (*resourceMongoLegacyHostPtrType)(v)
}

func (*resourceMongoLegacyHostPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMongoLegacyHost)(nil)).Elem()
}

func (i *resourceMongoLegacyHostPtrType) ToResourceMongoLegacyHostPtrOutput() ResourceMongoLegacyHostPtrOutput {
	return i.ToResourceMongoLegacyHostPtrOutputWithContext(context.Background())
}

func (i *resourceMongoLegacyHostPtrType) ToResourceMongoLegacyHostPtrOutputWithContext(ctx context.Context) ResourceMongoLegacyHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMongoLegacyHostPtrOutput)
}

type ResourceMongoLegacyHostOutput struct{ *pulumi.OutputState }

func (ResourceMongoLegacyHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMongoLegacyHost)(nil)).Elem()
}

func (o ResourceMongoLegacyHostOutput) ToResourceMongoLegacyHostOutput() ResourceMongoLegacyHostOutput {
	return o
}

func (o ResourceMongoLegacyHostOutput) ToResourceMongoLegacyHostOutputWithContext(ctx context.Context) ResourceMongoLegacyHostOutput {
	return o
}

func (o ResourceMongoLegacyHostOutput) ToResourceMongoLegacyHostPtrOutput() ResourceMongoLegacyHostPtrOutput {
	return o.ToResourceMongoLegacyHostPtrOutputWithContext(context.Background())
}

func (o ResourceMongoLegacyHostOutput) ToResourceMongoLegacyHostPtrOutputWithContext(ctx context.Context) ResourceMongoLegacyHostPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceMongoLegacyHost) *ResourceMongoLegacyHost {
		return &v
	}).(ResourceMongoLegacyHostPtrOutput)
}

// The authentication database to use.
func (o ResourceMongoLegacyHostOutput) AuthDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMongoLegacyHost) string { return v.AuthDatabase }).(pulumi.StringOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMongoLegacyHostOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyHost) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMongoLegacyHostOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyHost) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoLegacyHostOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMongoLegacyHost) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMongoLegacyHostOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMongoLegacyHost) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceMongoLegacyHostOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyHost) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoLegacyHostOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyHost) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMongoLegacyHostOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyHost) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMongoLegacyHostOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyHost) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMongoLegacyHostOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyHost) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMongoLegacyHostOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyHost) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMongoLegacyHostOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceMongoLegacyHost) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceMongoLegacyHostOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyHost) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMongoLegacyHostOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyHost) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceMongoLegacyHostPtrOutput struct{ *pulumi.OutputState }

func (ResourceMongoLegacyHostPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMongoLegacyHost)(nil)).Elem()
}

func (o ResourceMongoLegacyHostPtrOutput) ToResourceMongoLegacyHostPtrOutput() ResourceMongoLegacyHostPtrOutput {
	return o
}

func (o ResourceMongoLegacyHostPtrOutput) ToResourceMongoLegacyHostPtrOutputWithContext(ctx context.Context) ResourceMongoLegacyHostPtrOutput {
	return o
}

func (o ResourceMongoLegacyHostPtrOutput) Elem() ResourceMongoLegacyHostOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyHost) ResourceMongoLegacyHost {
		if v != nil {
			return *v
		}
		var ret ResourceMongoLegacyHost
		return ret
	}).(ResourceMongoLegacyHostOutput)
}

// The authentication database to use.
func (o ResourceMongoLegacyHostPtrOutput) AuthDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyHost) *string {
		if v == nil {
			return nil
		}
		return &v.AuthDatabase
	}).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMongoLegacyHostPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyHost) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMongoLegacyHostPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyHost) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoLegacyHostPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyHost) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMongoLegacyHostPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyHost) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceMongoLegacyHostPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyHost) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoLegacyHostPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyHost) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMongoLegacyHostPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyHost) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMongoLegacyHostPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyHost) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMongoLegacyHostPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyHost) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMongoLegacyHostPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyHost) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMongoLegacyHostPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyHost) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceMongoLegacyHostPtrOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyHost) *bool {
		if v == nil {
			return nil
		}
		return v.TlsRequired
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMongoLegacyHostPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyHost) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceMongoLegacyReplicaset struct {
	// The authentication database to use.
	AuthDatabase string `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// Set to connect to a replica instead of the primary node.
	ConnectToReplica *bool `pulumi:"connectToReplica"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The name of the mongo replicaset.
	ReplicaSet string `pulumi:"replicaSet"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceMongoLegacyReplicasetInput is an input type that accepts ResourceMongoLegacyReplicasetArgs and ResourceMongoLegacyReplicasetOutput values.
// You can construct a concrete instance of `ResourceMongoLegacyReplicasetInput` via:
//
//	ResourceMongoLegacyReplicasetArgs{...}
type ResourceMongoLegacyReplicasetInput interface {
	pulumi.Input

	ToResourceMongoLegacyReplicasetOutput() ResourceMongoLegacyReplicasetOutput
	ToResourceMongoLegacyReplicasetOutputWithContext(context.Context) ResourceMongoLegacyReplicasetOutput
}

type ResourceMongoLegacyReplicasetArgs struct {
	// The authentication database to use.
	AuthDatabase pulumi.StringInput `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// Set to connect to a replica instead of the primary node.
	ConnectToReplica pulumi.BoolPtrInput `pulumi:"connectToReplica"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The name of the mongo replicaset.
	ReplicaSet pulumi.StringInput `pulumi:"replicaSet"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceMongoLegacyReplicasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMongoLegacyReplicaset)(nil)).Elem()
}

func (i ResourceMongoLegacyReplicasetArgs) ToResourceMongoLegacyReplicasetOutput() ResourceMongoLegacyReplicasetOutput {
	return i.ToResourceMongoLegacyReplicasetOutputWithContext(context.Background())
}

func (i ResourceMongoLegacyReplicasetArgs) ToResourceMongoLegacyReplicasetOutputWithContext(ctx context.Context) ResourceMongoLegacyReplicasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMongoLegacyReplicasetOutput)
}

func (i ResourceMongoLegacyReplicasetArgs) ToResourceMongoLegacyReplicasetPtrOutput() ResourceMongoLegacyReplicasetPtrOutput {
	return i.ToResourceMongoLegacyReplicasetPtrOutputWithContext(context.Background())
}

func (i ResourceMongoLegacyReplicasetArgs) ToResourceMongoLegacyReplicasetPtrOutputWithContext(ctx context.Context) ResourceMongoLegacyReplicasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMongoLegacyReplicasetOutput).ToResourceMongoLegacyReplicasetPtrOutputWithContext(ctx)
}

// ResourceMongoLegacyReplicasetPtrInput is an input type that accepts ResourceMongoLegacyReplicasetArgs, ResourceMongoLegacyReplicasetPtr and ResourceMongoLegacyReplicasetPtrOutput values.
// You can construct a concrete instance of `ResourceMongoLegacyReplicasetPtrInput` via:
//
//	        ResourceMongoLegacyReplicasetArgs{...}
//
//	or:
//
//	        nil
type ResourceMongoLegacyReplicasetPtrInput interface {
	pulumi.Input

	ToResourceMongoLegacyReplicasetPtrOutput() ResourceMongoLegacyReplicasetPtrOutput
	ToResourceMongoLegacyReplicasetPtrOutputWithContext(context.Context) ResourceMongoLegacyReplicasetPtrOutput
}

type resourceMongoLegacyReplicasetPtrType ResourceMongoLegacyReplicasetArgs

func ResourceMongoLegacyReplicasetPtr(v *ResourceMongoLegacyReplicasetArgs) ResourceMongoLegacyReplicasetPtrInput {
	return (*resourceMongoLegacyReplicasetPtrType)(v)
}

func (*resourceMongoLegacyReplicasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMongoLegacyReplicaset)(nil)).Elem()
}

func (i *resourceMongoLegacyReplicasetPtrType) ToResourceMongoLegacyReplicasetPtrOutput() ResourceMongoLegacyReplicasetPtrOutput {
	return i.ToResourceMongoLegacyReplicasetPtrOutputWithContext(context.Background())
}

func (i *resourceMongoLegacyReplicasetPtrType) ToResourceMongoLegacyReplicasetPtrOutputWithContext(ctx context.Context) ResourceMongoLegacyReplicasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMongoLegacyReplicasetPtrOutput)
}

type ResourceMongoLegacyReplicasetOutput struct{ *pulumi.OutputState }

func (ResourceMongoLegacyReplicasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMongoLegacyReplicaset)(nil)).Elem()
}

func (o ResourceMongoLegacyReplicasetOutput) ToResourceMongoLegacyReplicasetOutput() ResourceMongoLegacyReplicasetOutput {
	return o
}

func (o ResourceMongoLegacyReplicasetOutput) ToResourceMongoLegacyReplicasetOutputWithContext(ctx context.Context) ResourceMongoLegacyReplicasetOutput {
	return o
}

func (o ResourceMongoLegacyReplicasetOutput) ToResourceMongoLegacyReplicasetPtrOutput() ResourceMongoLegacyReplicasetPtrOutput {
	return o.ToResourceMongoLegacyReplicasetPtrOutputWithContext(context.Background())
}

func (o ResourceMongoLegacyReplicasetOutput) ToResourceMongoLegacyReplicasetPtrOutputWithContext(ctx context.Context) ResourceMongoLegacyReplicasetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceMongoLegacyReplicaset) *ResourceMongoLegacyReplicaset {
		return &v
	}).(ResourceMongoLegacyReplicasetPtrOutput)
}

// The authentication database to use.
func (o ResourceMongoLegacyReplicasetOutput) AuthDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMongoLegacyReplicaset) string { return v.AuthDatabase }).(pulumi.StringOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMongoLegacyReplicasetOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyReplicaset) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// Set to connect to a replica instead of the primary node.
func (o ResourceMongoLegacyReplicasetOutput) ConnectToReplica() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyReplicaset) *bool { return v.ConnectToReplica }).(pulumi.BoolPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMongoLegacyReplicasetOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyReplicaset) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoLegacyReplicasetOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMongoLegacyReplicaset) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMongoLegacyReplicasetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMongoLegacyReplicaset) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceMongoLegacyReplicasetOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyReplicaset) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoLegacyReplicasetOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyReplicaset) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMongoLegacyReplicasetOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyReplicaset) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMongoLegacyReplicasetOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyReplicaset) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The name of the mongo replicaset.
func (o ResourceMongoLegacyReplicasetOutput) ReplicaSet() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMongoLegacyReplicaset) string { return v.ReplicaSet }).(pulumi.StringOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMongoLegacyReplicasetOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyReplicaset) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMongoLegacyReplicasetOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyReplicaset) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMongoLegacyReplicasetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceMongoLegacyReplicaset) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceMongoLegacyReplicasetOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyReplicaset) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMongoLegacyReplicasetOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoLegacyReplicaset) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceMongoLegacyReplicasetPtrOutput struct{ *pulumi.OutputState }

func (ResourceMongoLegacyReplicasetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMongoLegacyReplicaset)(nil)).Elem()
}

func (o ResourceMongoLegacyReplicasetPtrOutput) ToResourceMongoLegacyReplicasetPtrOutput() ResourceMongoLegacyReplicasetPtrOutput {
	return o
}

func (o ResourceMongoLegacyReplicasetPtrOutput) ToResourceMongoLegacyReplicasetPtrOutputWithContext(ctx context.Context) ResourceMongoLegacyReplicasetPtrOutput {
	return o
}

func (o ResourceMongoLegacyReplicasetPtrOutput) Elem() ResourceMongoLegacyReplicasetOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyReplicaset) ResourceMongoLegacyReplicaset {
		if v != nil {
			return *v
		}
		var ret ResourceMongoLegacyReplicaset
		return ret
	}).(ResourceMongoLegacyReplicasetOutput)
}

// The authentication database to use.
func (o ResourceMongoLegacyReplicasetPtrOutput) AuthDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyReplicaset) *string {
		if v == nil {
			return nil
		}
		return &v.AuthDatabase
	}).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMongoLegacyReplicasetPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyReplicaset) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// Set to connect to a replica instead of the primary node.
func (o ResourceMongoLegacyReplicasetPtrOutput) ConnectToReplica() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyReplicaset) *bool {
		if v == nil {
			return nil
		}
		return v.ConnectToReplica
	}).(pulumi.BoolPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMongoLegacyReplicasetPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyReplicaset) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoLegacyReplicasetPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyReplicaset) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMongoLegacyReplicasetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyReplicaset) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceMongoLegacyReplicasetPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyReplicaset) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoLegacyReplicasetPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyReplicaset) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMongoLegacyReplicasetPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyReplicaset) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMongoLegacyReplicasetPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyReplicaset) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The name of the mongo replicaset.
func (o ResourceMongoLegacyReplicasetPtrOutput) ReplicaSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyReplicaset) *string {
		if v == nil {
			return nil
		}
		return &v.ReplicaSet
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMongoLegacyReplicasetPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyReplicaset) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMongoLegacyReplicasetPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyReplicaset) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMongoLegacyReplicasetPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyReplicaset) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceMongoLegacyReplicasetPtrOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyReplicaset) *bool {
		if v == nil {
			return nil
		}
		return v.TlsRequired
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMongoLegacyReplicasetPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoLegacyReplicaset) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceMongoReplicaSet struct {
	// The authentication database to use.
	AuthDatabase string `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// Set to connect to a replica instead of the primary node.
	ConnectToReplica *bool `pulumi:"connectToReplica"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The name of the mongo replicaset.
	ReplicaSet string `pulumi:"replicaSet"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceMongoReplicaSetInput is an input type that accepts ResourceMongoReplicaSetArgs and ResourceMongoReplicaSetOutput values.
// You can construct a concrete instance of `ResourceMongoReplicaSetInput` via:
//
//	ResourceMongoReplicaSetArgs{...}
type ResourceMongoReplicaSetInput interface {
	pulumi.Input

	ToResourceMongoReplicaSetOutput() ResourceMongoReplicaSetOutput
	ToResourceMongoReplicaSetOutputWithContext(context.Context) ResourceMongoReplicaSetOutput
}

type ResourceMongoReplicaSetArgs struct {
	// The authentication database to use.
	AuthDatabase pulumi.StringInput `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// Set to connect to a replica instead of the primary node.
	ConnectToReplica pulumi.BoolPtrInput `pulumi:"connectToReplica"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The name of the mongo replicaset.
	ReplicaSet pulumi.StringInput `pulumi:"replicaSet"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceMongoReplicaSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMongoReplicaSet)(nil)).Elem()
}

func (i ResourceMongoReplicaSetArgs) ToResourceMongoReplicaSetOutput() ResourceMongoReplicaSetOutput {
	return i.ToResourceMongoReplicaSetOutputWithContext(context.Background())
}

func (i ResourceMongoReplicaSetArgs) ToResourceMongoReplicaSetOutputWithContext(ctx context.Context) ResourceMongoReplicaSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMongoReplicaSetOutput)
}

func (i ResourceMongoReplicaSetArgs) ToResourceMongoReplicaSetPtrOutput() ResourceMongoReplicaSetPtrOutput {
	return i.ToResourceMongoReplicaSetPtrOutputWithContext(context.Background())
}

func (i ResourceMongoReplicaSetArgs) ToResourceMongoReplicaSetPtrOutputWithContext(ctx context.Context) ResourceMongoReplicaSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMongoReplicaSetOutput).ToResourceMongoReplicaSetPtrOutputWithContext(ctx)
}

// ResourceMongoReplicaSetPtrInput is an input type that accepts ResourceMongoReplicaSetArgs, ResourceMongoReplicaSetPtr and ResourceMongoReplicaSetPtrOutput values.
// You can construct a concrete instance of `ResourceMongoReplicaSetPtrInput` via:
//
//	        ResourceMongoReplicaSetArgs{...}
//
//	or:
//
//	        nil
type ResourceMongoReplicaSetPtrInput interface {
	pulumi.Input

	ToResourceMongoReplicaSetPtrOutput() ResourceMongoReplicaSetPtrOutput
	ToResourceMongoReplicaSetPtrOutputWithContext(context.Context) ResourceMongoReplicaSetPtrOutput
}

type resourceMongoReplicaSetPtrType ResourceMongoReplicaSetArgs

func ResourceMongoReplicaSetPtr(v *ResourceMongoReplicaSetArgs) ResourceMongoReplicaSetPtrInput {
	return (*resourceMongoReplicaSetPtrType)(v)
}

func (*resourceMongoReplicaSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMongoReplicaSet)(nil)).Elem()
}

func (i *resourceMongoReplicaSetPtrType) ToResourceMongoReplicaSetPtrOutput() ResourceMongoReplicaSetPtrOutput {
	return i.ToResourceMongoReplicaSetPtrOutputWithContext(context.Background())
}

func (i *resourceMongoReplicaSetPtrType) ToResourceMongoReplicaSetPtrOutputWithContext(ctx context.Context) ResourceMongoReplicaSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMongoReplicaSetPtrOutput)
}

type ResourceMongoReplicaSetOutput struct{ *pulumi.OutputState }

func (ResourceMongoReplicaSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMongoReplicaSet)(nil)).Elem()
}

func (o ResourceMongoReplicaSetOutput) ToResourceMongoReplicaSetOutput() ResourceMongoReplicaSetOutput {
	return o
}

func (o ResourceMongoReplicaSetOutput) ToResourceMongoReplicaSetOutputWithContext(ctx context.Context) ResourceMongoReplicaSetOutput {
	return o
}

func (o ResourceMongoReplicaSetOutput) ToResourceMongoReplicaSetPtrOutput() ResourceMongoReplicaSetPtrOutput {
	return o.ToResourceMongoReplicaSetPtrOutputWithContext(context.Background())
}

func (o ResourceMongoReplicaSetOutput) ToResourceMongoReplicaSetPtrOutputWithContext(ctx context.Context) ResourceMongoReplicaSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceMongoReplicaSet) *ResourceMongoReplicaSet {
		return &v
	}).(ResourceMongoReplicaSetPtrOutput)
}

// The authentication database to use.
func (o ResourceMongoReplicaSetOutput) AuthDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMongoReplicaSet) string { return v.AuthDatabase }).(pulumi.StringOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMongoReplicaSetOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoReplicaSet) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// Set to connect to a replica instead of the primary node.
func (o ResourceMongoReplicaSetOutput) ConnectToReplica() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceMongoReplicaSet) *bool { return v.ConnectToReplica }).(pulumi.BoolPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMongoReplicaSetOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoReplicaSet) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoReplicaSetOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMongoReplicaSet) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMongoReplicaSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMongoReplicaSet) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceMongoReplicaSetOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoReplicaSet) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoReplicaSetOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMongoReplicaSet) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMongoReplicaSetOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMongoReplicaSet) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMongoReplicaSetOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoReplicaSet) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The name of the mongo replicaset.
func (o ResourceMongoReplicaSetOutput) ReplicaSet() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMongoReplicaSet) string { return v.ReplicaSet }).(pulumi.StringOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMongoReplicaSetOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoReplicaSet) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMongoReplicaSetOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoReplicaSet) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMongoReplicaSetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceMongoReplicaSet) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceMongoReplicaSetOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceMongoReplicaSet) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMongoReplicaSetOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoReplicaSet) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceMongoReplicaSetPtrOutput struct{ *pulumi.OutputState }

func (ResourceMongoReplicaSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMongoReplicaSet)(nil)).Elem()
}

func (o ResourceMongoReplicaSetPtrOutput) ToResourceMongoReplicaSetPtrOutput() ResourceMongoReplicaSetPtrOutput {
	return o
}

func (o ResourceMongoReplicaSetPtrOutput) ToResourceMongoReplicaSetPtrOutputWithContext(ctx context.Context) ResourceMongoReplicaSetPtrOutput {
	return o
}

func (o ResourceMongoReplicaSetPtrOutput) Elem() ResourceMongoReplicaSetOutput {
	return o.ApplyT(func(v *ResourceMongoReplicaSet) ResourceMongoReplicaSet {
		if v != nil {
			return *v
		}
		var ret ResourceMongoReplicaSet
		return ret
	}).(ResourceMongoReplicaSetOutput)
}

// The authentication database to use.
func (o ResourceMongoReplicaSetPtrOutput) AuthDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoReplicaSet) *string {
		if v == nil {
			return nil
		}
		return &v.AuthDatabase
	}).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMongoReplicaSetPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoReplicaSet) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// Set to connect to a replica instead of the primary node.
func (o ResourceMongoReplicaSetPtrOutput) ConnectToReplica() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceMongoReplicaSet) *bool {
		if v == nil {
			return nil
		}
		return v.ConnectToReplica
	}).(pulumi.BoolPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMongoReplicaSetPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoReplicaSet) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoReplicaSetPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoReplicaSet) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMongoReplicaSetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoReplicaSet) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceMongoReplicaSetPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoReplicaSet) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoReplicaSetPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMongoReplicaSet) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMongoReplicaSetPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMongoReplicaSet) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMongoReplicaSetPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoReplicaSet) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The name of the mongo replicaset.
func (o ResourceMongoReplicaSetPtrOutput) ReplicaSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoReplicaSet) *string {
		if v == nil {
			return nil
		}
		return &v.ReplicaSet
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMongoReplicaSetPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoReplicaSet) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMongoReplicaSetPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoReplicaSet) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMongoReplicaSetPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceMongoReplicaSet) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceMongoReplicaSetPtrOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceMongoReplicaSet) *bool {
		if v == nil {
			return nil
		}
		return v.TlsRequired
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMongoReplicaSetPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoReplicaSet) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceMongoShardedCluster struct {
	// The authentication database to use.
	AuthDatabase string `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceMongoShardedClusterInput is an input type that accepts ResourceMongoShardedClusterArgs and ResourceMongoShardedClusterOutput values.
// You can construct a concrete instance of `ResourceMongoShardedClusterInput` via:
//
//	ResourceMongoShardedClusterArgs{...}
type ResourceMongoShardedClusterInput interface {
	pulumi.Input

	ToResourceMongoShardedClusterOutput() ResourceMongoShardedClusterOutput
	ToResourceMongoShardedClusterOutputWithContext(context.Context) ResourceMongoShardedClusterOutput
}

type ResourceMongoShardedClusterArgs struct {
	// The authentication database to use.
	AuthDatabase pulumi.StringInput `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceMongoShardedClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMongoShardedCluster)(nil)).Elem()
}

func (i ResourceMongoShardedClusterArgs) ToResourceMongoShardedClusterOutput() ResourceMongoShardedClusterOutput {
	return i.ToResourceMongoShardedClusterOutputWithContext(context.Background())
}

func (i ResourceMongoShardedClusterArgs) ToResourceMongoShardedClusterOutputWithContext(ctx context.Context) ResourceMongoShardedClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMongoShardedClusterOutput)
}

func (i ResourceMongoShardedClusterArgs) ToResourceMongoShardedClusterPtrOutput() ResourceMongoShardedClusterPtrOutput {
	return i.ToResourceMongoShardedClusterPtrOutputWithContext(context.Background())
}

func (i ResourceMongoShardedClusterArgs) ToResourceMongoShardedClusterPtrOutputWithContext(ctx context.Context) ResourceMongoShardedClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMongoShardedClusterOutput).ToResourceMongoShardedClusterPtrOutputWithContext(ctx)
}

// ResourceMongoShardedClusterPtrInput is an input type that accepts ResourceMongoShardedClusterArgs, ResourceMongoShardedClusterPtr and ResourceMongoShardedClusterPtrOutput values.
// You can construct a concrete instance of `ResourceMongoShardedClusterPtrInput` via:
//
//	        ResourceMongoShardedClusterArgs{...}
//
//	or:
//
//	        nil
type ResourceMongoShardedClusterPtrInput interface {
	pulumi.Input

	ToResourceMongoShardedClusterPtrOutput() ResourceMongoShardedClusterPtrOutput
	ToResourceMongoShardedClusterPtrOutputWithContext(context.Context) ResourceMongoShardedClusterPtrOutput
}

type resourceMongoShardedClusterPtrType ResourceMongoShardedClusterArgs

func ResourceMongoShardedClusterPtr(v *ResourceMongoShardedClusterArgs) ResourceMongoShardedClusterPtrInput {
	return (*resourceMongoShardedClusterPtrType)(v)
}

func (*resourceMongoShardedClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMongoShardedCluster)(nil)).Elem()
}

func (i *resourceMongoShardedClusterPtrType) ToResourceMongoShardedClusterPtrOutput() ResourceMongoShardedClusterPtrOutput {
	return i.ToResourceMongoShardedClusterPtrOutputWithContext(context.Background())
}

func (i *resourceMongoShardedClusterPtrType) ToResourceMongoShardedClusterPtrOutputWithContext(ctx context.Context) ResourceMongoShardedClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMongoShardedClusterPtrOutput)
}

type ResourceMongoShardedClusterOutput struct{ *pulumi.OutputState }

func (ResourceMongoShardedClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMongoShardedCluster)(nil)).Elem()
}

func (o ResourceMongoShardedClusterOutput) ToResourceMongoShardedClusterOutput() ResourceMongoShardedClusterOutput {
	return o
}

func (o ResourceMongoShardedClusterOutput) ToResourceMongoShardedClusterOutputWithContext(ctx context.Context) ResourceMongoShardedClusterOutput {
	return o
}

func (o ResourceMongoShardedClusterOutput) ToResourceMongoShardedClusterPtrOutput() ResourceMongoShardedClusterPtrOutput {
	return o.ToResourceMongoShardedClusterPtrOutputWithContext(context.Background())
}

func (o ResourceMongoShardedClusterOutput) ToResourceMongoShardedClusterPtrOutputWithContext(ctx context.Context) ResourceMongoShardedClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceMongoShardedCluster) *ResourceMongoShardedCluster {
		return &v
	}).(ResourceMongoShardedClusterPtrOutput)
}

// The authentication database to use.
func (o ResourceMongoShardedClusterOutput) AuthDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMongoShardedCluster) string { return v.AuthDatabase }).(pulumi.StringOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMongoShardedClusterOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoShardedCluster) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMongoShardedClusterOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoShardedCluster) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoShardedClusterOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMongoShardedCluster) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMongoShardedClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMongoShardedCluster) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceMongoShardedClusterOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoShardedCluster) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMongoShardedClusterOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMongoShardedCluster) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMongoShardedClusterOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoShardedCluster) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMongoShardedClusterOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoShardedCluster) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMongoShardedClusterOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoShardedCluster) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMongoShardedClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceMongoShardedCluster) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceMongoShardedClusterOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceMongoShardedCluster) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMongoShardedClusterOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMongoShardedCluster) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceMongoShardedClusterPtrOutput struct{ *pulumi.OutputState }

func (ResourceMongoShardedClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMongoShardedCluster)(nil)).Elem()
}

func (o ResourceMongoShardedClusterPtrOutput) ToResourceMongoShardedClusterPtrOutput() ResourceMongoShardedClusterPtrOutput {
	return o
}

func (o ResourceMongoShardedClusterPtrOutput) ToResourceMongoShardedClusterPtrOutputWithContext(ctx context.Context) ResourceMongoShardedClusterPtrOutput {
	return o
}

func (o ResourceMongoShardedClusterPtrOutput) Elem() ResourceMongoShardedClusterOutput {
	return o.ApplyT(func(v *ResourceMongoShardedCluster) ResourceMongoShardedCluster {
		if v != nil {
			return *v
		}
		var ret ResourceMongoShardedCluster
		return ret
	}).(ResourceMongoShardedClusterOutput)
}

// The authentication database to use.
func (o ResourceMongoShardedClusterPtrOutput) AuthDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoShardedCluster) *string {
		if v == nil {
			return nil
		}
		return &v.AuthDatabase
	}).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMongoShardedClusterPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoShardedCluster) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMongoShardedClusterPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoShardedCluster) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMongoShardedClusterPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoShardedCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMongoShardedClusterPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoShardedCluster) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceMongoShardedClusterPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoShardedCluster) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMongoShardedClusterPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMongoShardedCluster) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMongoShardedClusterPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoShardedCluster) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMongoShardedClusterPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoShardedCluster) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMongoShardedClusterPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoShardedCluster) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMongoShardedClusterPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceMongoShardedCluster) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceMongoShardedClusterPtrOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceMongoShardedCluster) *bool {
		if v == nil {
			return nil
		}
		return v.TlsRequired
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMongoShardedClusterPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMongoShardedCluster) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceMtlsMysql struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey *string `pulumi:"clientKey"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Server name for TLS verification (unverified by StrongDM if empty)
	ServerName *string `pulumi:"serverName"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceMtlsMysqlInput is an input type that accepts ResourceMtlsMysqlArgs and ResourceMtlsMysqlOutput values.
// You can construct a concrete instance of `ResourceMtlsMysqlInput` via:
//
//	ResourceMtlsMysqlArgs{...}
type ResourceMtlsMysqlInput interface {
	pulumi.Input

	ToResourceMtlsMysqlOutput() ResourceMtlsMysqlOutput
	ToResourceMtlsMysqlOutputWithContext(context.Context) ResourceMtlsMysqlOutput
}

type ResourceMtlsMysqlArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Server name for TLS verification (unverified by StrongDM if empty)
	ServerName pulumi.StringPtrInput `pulumi:"serverName"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceMtlsMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMtlsMysql)(nil)).Elem()
}

func (i ResourceMtlsMysqlArgs) ToResourceMtlsMysqlOutput() ResourceMtlsMysqlOutput {
	return i.ToResourceMtlsMysqlOutputWithContext(context.Background())
}

func (i ResourceMtlsMysqlArgs) ToResourceMtlsMysqlOutputWithContext(ctx context.Context) ResourceMtlsMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMtlsMysqlOutput)
}

func (i ResourceMtlsMysqlArgs) ToResourceMtlsMysqlPtrOutput() ResourceMtlsMysqlPtrOutput {
	return i.ToResourceMtlsMysqlPtrOutputWithContext(context.Background())
}

func (i ResourceMtlsMysqlArgs) ToResourceMtlsMysqlPtrOutputWithContext(ctx context.Context) ResourceMtlsMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMtlsMysqlOutput).ToResourceMtlsMysqlPtrOutputWithContext(ctx)
}

// ResourceMtlsMysqlPtrInput is an input type that accepts ResourceMtlsMysqlArgs, ResourceMtlsMysqlPtr and ResourceMtlsMysqlPtrOutput values.
// You can construct a concrete instance of `ResourceMtlsMysqlPtrInput` via:
//
//	        ResourceMtlsMysqlArgs{...}
//
//	or:
//
//	        nil
type ResourceMtlsMysqlPtrInput interface {
	pulumi.Input

	ToResourceMtlsMysqlPtrOutput() ResourceMtlsMysqlPtrOutput
	ToResourceMtlsMysqlPtrOutputWithContext(context.Context) ResourceMtlsMysqlPtrOutput
}

type resourceMtlsMysqlPtrType ResourceMtlsMysqlArgs

func ResourceMtlsMysqlPtr(v *ResourceMtlsMysqlArgs) ResourceMtlsMysqlPtrInput {
	return (*resourceMtlsMysqlPtrType)(v)
}

func (*resourceMtlsMysqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMtlsMysql)(nil)).Elem()
}

func (i *resourceMtlsMysqlPtrType) ToResourceMtlsMysqlPtrOutput() ResourceMtlsMysqlPtrOutput {
	return i.ToResourceMtlsMysqlPtrOutputWithContext(context.Background())
}

func (i *resourceMtlsMysqlPtrType) ToResourceMtlsMysqlPtrOutputWithContext(ctx context.Context) ResourceMtlsMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMtlsMysqlPtrOutput)
}

type ResourceMtlsMysqlOutput struct{ *pulumi.OutputState }

func (ResourceMtlsMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMtlsMysql)(nil)).Elem()
}

func (o ResourceMtlsMysqlOutput) ToResourceMtlsMysqlOutput() ResourceMtlsMysqlOutput {
	return o
}

func (o ResourceMtlsMysqlOutput) ToResourceMtlsMysqlOutputWithContext(ctx context.Context) ResourceMtlsMysqlOutput {
	return o
}

func (o ResourceMtlsMysqlOutput) ToResourceMtlsMysqlPtrOutput() ResourceMtlsMysqlPtrOutput {
	return o.ToResourceMtlsMysqlPtrOutputWithContext(context.Background())
}

func (o ResourceMtlsMysqlOutput) ToResourceMtlsMysqlPtrOutputWithContext(ctx context.Context) ResourceMtlsMysqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceMtlsMysql) *ResourceMtlsMysql {
		return &v
	}).(ResourceMtlsMysqlPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMtlsMysqlOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceMtlsMysqlOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o ResourceMtlsMysqlOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o ResourceMtlsMysqlOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceMtlsMysqlOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMtlsMysqlOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMtlsMysqlOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMtlsMysqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceMtlsMysqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMtlsMysqlOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMtlsMysqlOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMtlsMysqlOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceMtlsMysqlOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMtlsMysqlOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Server name for TLS verification (unverified by StrongDM if empty)
func (o ResourceMtlsMysqlOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMtlsMysqlOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMtlsMysqlOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceMtlsMysqlOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMtlsMysqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsMysql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceMtlsMysqlPtrOutput struct{ *pulumi.OutputState }

func (ResourceMtlsMysqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMtlsMysql)(nil)).Elem()
}

func (o ResourceMtlsMysqlPtrOutput) ToResourceMtlsMysqlPtrOutput() ResourceMtlsMysqlPtrOutput {
	return o
}

func (o ResourceMtlsMysqlPtrOutput) ToResourceMtlsMysqlPtrOutputWithContext(ctx context.Context) ResourceMtlsMysqlPtrOutput {
	return o
}

func (o ResourceMtlsMysqlPtrOutput) Elem() ResourceMtlsMysqlOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) ResourceMtlsMysql {
		if v != nil {
			return *v
		}
		var ret ResourceMtlsMysql
		return ret
	}).(ResourceMtlsMysqlOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMtlsMysqlPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceMtlsMysqlPtrOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *string {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o ResourceMtlsMysqlPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o ResourceMtlsMysqlPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceMtlsMysqlPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMtlsMysqlPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMtlsMysqlPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMtlsMysqlPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceMtlsMysqlPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMtlsMysqlPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMtlsMysqlPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMtlsMysqlPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceMtlsMysqlPtrOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *bool {
		if v == nil {
			return nil
		}
		return v.RequireNativeAuth
	}).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMtlsMysqlPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Server name for TLS verification (unverified by StrongDM if empty)
func (o ResourceMtlsMysqlPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMtlsMysqlPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMtlsMysqlPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceMtlsMysqlPtrOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *bool {
		if v == nil {
			return nil
		}
		return v.UseAzureSingleServerUsernames
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMtlsMysqlPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsMysql) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceMtlsPostgres struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey *string `pulumi:"clientKey"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Server name for TLS verification (unverified by StrongDM if empty)
	ServerName *string `pulumi:"serverName"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceMtlsPostgresInput is an input type that accepts ResourceMtlsPostgresArgs and ResourceMtlsPostgresOutput values.
// You can construct a concrete instance of `ResourceMtlsPostgresInput` via:
//
//	ResourceMtlsPostgresArgs{...}
type ResourceMtlsPostgresInput interface {
	pulumi.Input

	ToResourceMtlsPostgresOutput() ResourceMtlsPostgresOutput
	ToResourceMtlsPostgresOutputWithContext(context.Context) ResourceMtlsPostgresOutput
}

type ResourceMtlsPostgresArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Server name for TLS verification (unverified by StrongDM if empty)
	ServerName pulumi.StringPtrInput `pulumi:"serverName"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceMtlsPostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMtlsPostgres)(nil)).Elem()
}

func (i ResourceMtlsPostgresArgs) ToResourceMtlsPostgresOutput() ResourceMtlsPostgresOutput {
	return i.ToResourceMtlsPostgresOutputWithContext(context.Background())
}

func (i ResourceMtlsPostgresArgs) ToResourceMtlsPostgresOutputWithContext(ctx context.Context) ResourceMtlsPostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMtlsPostgresOutput)
}

func (i ResourceMtlsPostgresArgs) ToResourceMtlsPostgresPtrOutput() ResourceMtlsPostgresPtrOutput {
	return i.ToResourceMtlsPostgresPtrOutputWithContext(context.Background())
}

func (i ResourceMtlsPostgresArgs) ToResourceMtlsPostgresPtrOutputWithContext(ctx context.Context) ResourceMtlsPostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMtlsPostgresOutput).ToResourceMtlsPostgresPtrOutputWithContext(ctx)
}

// ResourceMtlsPostgresPtrInput is an input type that accepts ResourceMtlsPostgresArgs, ResourceMtlsPostgresPtr and ResourceMtlsPostgresPtrOutput values.
// You can construct a concrete instance of `ResourceMtlsPostgresPtrInput` via:
//
//	        ResourceMtlsPostgresArgs{...}
//
//	or:
//
//	        nil
type ResourceMtlsPostgresPtrInput interface {
	pulumi.Input

	ToResourceMtlsPostgresPtrOutput() ResourceMtlsPostgresPtrOutput
	ToResourceMtlsPostgresPtrOutputWithContext(context.Context) ResourceMtlsPostgresPtrOutput
}

type resourceMtlsPostgresPtrType ResourceMtlsPostgresArgs

func ResourceMtlsPostgresPtr(v *ResourceMtlsPostgresArgs) ResourceMtlsPostgresPtrInput {
	return (*resourceMtlsPostgresPtrType)(v)
}

func (*resourceMtlsPostgresPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMtlsPostgres)(nil)).Elem()
}

func (i *resourceMtlsPostgresPtrType) ToResourceMtlsPostgresPtrOutput() ResourceMtlsPostgresPtrOutput {
	return i.ToResourceMtlsPostgresPtrOutputWithContext(context.Background())
}

func (i *resourceMtlsPostgresPtrType) ToResourceMtlsPostgresPtrOutputWithContext(ctx context.Context) ResourceMtlsPostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMtlsPostgresPtrOutput)
}

type ResourceMtlsPostgresOutput struct{ *pulumi.OutputState }

func (ResourceMtlsPostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMtlsPostgres)(nil)).Elem()
}

func (o ResourceMtlsPostgresOutput) ToResourceMtlsPostgresOutput() ResourceMtlsPostgresOutput {
	return o
}

func (o ResourceMtlsPostgresOutput) ToResourceMtlsPostgresOutputWithContext(ctx context.Context) ResourceMtlsPostgresOutput {
	return o
}

func (o ResourceMtlsPostgresOutput) ToResourceMtlsPostgresPtrOutput() ResourceMtlsPostgresPtrOutput {
	return o.ToResourceMtlsPostgresPtrOutputWithContext(context.Background())
}

func (o ResourceMtlsPostgresOutput) ToResourceMtlsPostgresPtrOutputWithContext(ctx context.Context) ResourceMtlsPostgresPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceMtlsPostgres) *ResourceMtlsPostgres {
		return &v
	}).(ResourceMtlsPostgresPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMtlsPostgresOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceMtlsPostgresOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o ResourceMtlsPostgresOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o ResourceMtlsPostgresOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceMtlsPostgresOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) string { return v.Database }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMtlsPostgresOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMtlsPostgresOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMtlsPostgresOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) string { return v.Name }).(pulumi.StringOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceMtlsPostgresOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceMtlsPostgresOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMtlsPostgresOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMtlsPostgresOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMtlsPostgresOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMtlsPostgresOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Server name for TLS verification (unverified by StrongDM if empty)
func (o ResourceMtlsPostgresOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMtlsPostgresOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMtlsPostgresOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceMtlsPostgresOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMtlsPostgres) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceMtlsPostgresPtrOutput struct{ *pulumi.OutputState }

func (ResourceMtlsPostgresPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMtlsPostgres)(nil)).Elem()
}

func (o ResourceMtlsPostgresPtrOutput) ToResourceMtlsPostgresPtrOutput() ResourceMtlsPostgresPtrOutput {
	return o
}

func (o ResourceMtlsPostgresPtrOutput) ToResourceMtlsPostgresPtrOutputWithContext(ctx context.Context) ResourceMtlsPostgresPtrOutput {
	return o
}

func (o ResourceMtlsPostgresPtrOutput) Elem() ResourceMtlsPostgresOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) ResourceMtlsPostgres {
		if v != nil {
			return *v
		}
		var ret ResourceMtlsPostgres
		return ret
	}).(ResourceMtlsPostgresOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMtlsPostgresPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o ResourceMtlsPostgresPtrOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) *string {
		if v == nil {
			return nil
		}
		return v.CertificateAuthority
	}).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o ResourceMtlsPostgresPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o ResourceMtlsPostgresPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceMtlsPostgresPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMtlsPostgresPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMtlsPostgresPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMtlsPostgresPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceMtlsPostgresPtrOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) *bool {
		if v == nil {
			return nil
		}
		return v.OverrideDatabase
	}).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceMtlsPostgresPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMtlsPostgresPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMtlsPostgresPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMtlsPostgresPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMtlsPostgresPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Server name for TLS verification (unverified by StrongDM if empty)
func (o ResourceMtlsPostgresPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMtlsPostgresPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMtlsPostgresPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceMtlsPostgresPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMtlsPostgres) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceMysql struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceMysqlInput is an input type that accepts ResourceMysqlArgs and ResourceMysqlOutput values.
// You can construct a concrete instance of `ResourceMysqlInput` via:
//
//	ResourceMysqlArgs{...}
type ResourceMysqlInput interface {
	pulumi.Input

	ToResourceMysqlOutput() ResourceMysqlOutput
	ToResourceMysqlOutputWithContext(context.Context) ResourceMysqlOutput
}

type ResourceMysqlArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMysql)(nil)).Elem()
}

func (i ResourceMysqlArgs) ToResourceMysqlOutput() ResourceMysqlOutput {
	return i.ToResourceMysqlOutputWithContext(context.Background())
}

func (i ResourceMysqlArgs) ToResourceMysqlOutputWithContext(ctx context.Context) ResourceMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMysqlOutput)
}

func (i ResourceMysqlArgs) ToResourceMysqlPtrOutput() ResourceMysqlPtrOutput {
	return i.ToResourceMysqlPtrOutputWithContext(context.Background())
}

func (i ResourceMysqlArgs) ToResourceMysqlPtrOutputWithContext(ctx context.Context) ResourceMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMysqlOutput).ToResourceMysqlPtrOutputWithContext(ctx)
}

// ResourceMysqlPtrInput is an input type that accepts ResourceMysqlArgs, ResourceMysqlPtr and ResourceMysqlPtrOutput values.
// You can construct a concrete instance of `ResourceMysqlPtrInput` via:
//
//	        ResourceMysqlArgs{...}
//
//	or:
//
//	        nil
type ResourceMysqlPtrInput interface {
	pulumi.Input

	ToResourceMysqlPtrOutput() ResourceMysqlPtrOutput
	ToResourceMysqlPtrOutputWithContext(context.Context) ResourceMysqlPtrOutput
}

type resourceMysqlPtrType ResourceMysqlArgs

func ResourceMysqlPtr(v *ResourceMysqlArgs) ResourceMysqlPtrInput {
	return (*resourceMysqlPtrType)(v)
}

func (*resourceMysqlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMysql)(nil)).Elem()
}

func (i *resourceMysqlPtrType) ToResourceMysqlPtrOutput() ResourceMysqlPtrOutput {
	return i.ToResourceMysqlPtrOutputWithContext(context.Background())
}

func (i *resourceMysqlPtrType) ToResourceMysqlPtrOutputWithContext(ctx context.Context) ResourceMysqlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMysqlPtrOutput)
}

type ResourceMysqlOutput struct{ *pulumi.OutputState }

func (ResourceMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMysql)(nil)).Elem()
}

func (o ResourceMysqlOutput) ToResourceMysqlOutput() ResourceMysqlOutput {
	return o
}

func (o ResourceMysqlOutput) ToResourceMysqlOutputWithContext(ctx context.Context) ResourceMysqlOutput {
	return o
}

func (o ResourceMysqlOutput) ToResourceMysqlPtrOutput() ResourceMysqlPtrOutput {
	return o.ToResourceMysqlPtrOutputWithContext(context.Background())
}

func (o ResourceMysqlOutput) ToResourceMysqlPtrOutputWithContext(ctx context.Context) ResourceMysqlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceMysql) *ResourceMysql {
		return &v
	}).(ResourceMysqlPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMysqlOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMysql) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceMysqlOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMysql) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMysqlOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMysql) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMysqlOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMysql) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMysqlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMysql) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceMysqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMysql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMysqlOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMysql) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMysqlOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceMysql) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMysqlOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMysql) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceMysqlOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceMysql) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMysqlOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMysql) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMysqlOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMysql) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMysqlOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceMysql) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceMysqlOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceMysql) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMysqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMysql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceMysqlPtrOutput struct{ *pulumi.OutputState }

func (ResourceMysqlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMysql)(nil)).Elem()
}

func (o ResourceMysqlPtrOutput) ToResourceMysqlPtrOutput() ResourceMysqlPtrOutput {
	return o
}

func (o ResourceMysqlPtrOutput) ToResourceMysqlPtrOutputWithContext(ctx context.Context) ResourceMysqlPtrOutput {
	return o
}

func (o ResourceMysqlPtrOutput) Elem() ResourceMysqlOutput {
	return o.ApplyT(func(v *ResourceMysql) ResourceMysql {
		if v != nil {
			return *v
		}
		var ret ResourceMysql
		return ret
	}).(ResourceMysqlOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceMysqlPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMysql) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceMysqlPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMysql) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceMysqlPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMysql) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceMysqlPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMysql) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceMysqlPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMysql) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceMysqlPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMysql) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceMysqlPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMysql) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceMysqlPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceMysql) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceMysqlPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMysql) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceMysqlPtrOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceMysql) *bool {
		if v == nil {
			return nil
		}
		return v.RequireNativeAuth
	}).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceMysqlPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMysql) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceMysqlPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMysql) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceMysqlPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceMysql) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceMysqlPtrOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceMysql) *bool {
		if v == nil {
			return nil
		}
		return v.UseAzureSingleServerUsernames
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceMysqlPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMysql) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceNeptune struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint string `pulumi:"endpoint"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceNeptuneInput is an input type that accepts ResourceNeptuneArgs and ResourceNeptuneOutput values.
// You can construct a concrete instance of `ResourceNeptuneInput` via:
//
//	ResourceNeptuneArgs{...}
type ResourceNeptuneInput interface {
	pulumi.Input

	ToResourceNeptuneOutput() ResourceNeptuneOutput
	ToResourceNeptuneOutputWithContext(context.Context) ResourceNeptuneOutput
}

type ResourceNeptuneArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceNeptuneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceNeptune)(nil)).Elem()
}

func (i ResourceNeptuneArgs) ToResourceNeptuneOutput() ResourceNeptuneOutput {
	return i.ToResourceNeptuneOutputWithContext(context.Background())
}

func (i ResourceNeptuneArgs) ToResourceNeptuneOutputWithContext(ctx context.Context) ResourceNeptuneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceNeptuneOutput)
}

func (i ResourceNeptuneArgs) ToResourceNeptunePtrOutput() ResourceNeptunePtrOutput {
	return i.ToResourceNeptunePtrOutputWithContext(context.Background())
}

func (i ResourceNeptuneArgs) ToResourceNeptunePtrOutputWithContext(ctx context.Context) ResourceNeptunePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceNeptuneOutput).ToResourceNeptunePtrOutputWithContext(ctx)
}

// ResourceNeptunePtrInput is an input type that accepts ResourceNeptuneArgs, ResourceNeptunePtr and ResourceNeptunePtrOutput values.
// You can construct a concrete instance of `ResourceNeptunePtrInput` via:
//
//	        ResourceNeptuneArgs{...}
//
//	or:
//
//	        nil
type ResourceNeptunePtrInput interface {
	pulumi.Input

	ToResourceNeptunePtrOutput() ResourceNeptunePtrOutput
	ToResourceNeptunePtrOutputWithContext(context.Context) ResourceNeptunePtrOutput
}

type resourceNeptunePtrType ResourceNeptuneArgs

func ResourceNeptunePtr(v *ResourceNeptuneArgs) ResourceNeptunePtrInput {
	return (*resourceNeptunePtrType)(v)
}

func (*resourceNeptunePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceNeptune)(nil)).Elem()
}

func (i *resourceNeptunePtrType) ToResourceNeptunePtrOutput() ResourceNeptunePtrOutput {
	return i.ToResourceNeptunePtrOutputWithContext(context.Background())
}

func (i *resourceNeptunePtrType) ToResourceNeptunePtrOutputWithContext(ctx context.Context) ResourceNeptunePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceNeptunePtrOutput)
}

type ResourceNeptuneOutput struct{ *pulumi.OutputState }

func (ResourceNeptuneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceNeptune)(nil)).Elem()
}

func (o ResourceNeptuneOutput) ToResourceNeptuneOutput() ResourceNeptuneOutput {
	return o
}

func (o ResourceNeptuneOutput) ToResourceNeptuneOutputWithContext(ctx context.Context) ResourceNeptuneOutput {
	return o
}

func (o ResourceNeptuneOutput) ToResourceNeptunePtrOutput() ResourceNeptunePtrOutput {
	return o.ToResourceNeptunePtrOutputWithContext(context.Background())
}

func (o ResourceNeptuneOutput) ToResourceNeptunePtrOutputWithContext(ctx context.Context) ResourceNeptunePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceNeptune) *ResourceNeptune {
		return &v
	}).(ResourceNeptunePtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceNeptuneOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceNeptune) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceNeptuneOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceNeptune) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceNeptuneOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceNeptune) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceNeptuneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceNeptune) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceNeptuneOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceNeptune) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceNeptuneOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceNeptune) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceNeptuneOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceNeptune) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceNeptuneOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceNeptune) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceNeptuneOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceNeptune) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceNeptuneOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceNeptune) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceNeptunePtrOutput struct{ *pulumi.OutputState }

func (ResourceNeptunePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceNeptune)(nil)).Elem()
}

func (o ResourceNeptunePtrOutput) ToResourceNeptunePtrOutput() ResourceNeptunePtrOutput {
	return o
}

func (o ResourceNeptunePtrOutput) ToResourceNeptunePtrOutputWithContext(ctx context.Context) ResourceNeptunePtrOutput {
	return o
}

func (o ResourceNeptunePtrOutput) Elem() ResourceNeptuneOutput {
	return o.ApplyT(func(v *ResourceNeptune) ResourceNeptune {
		if v != nil {
			return *v
		}
		var ret ResourceNeptune
		return ret
	}).(ResourceNeptuneOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceNeptunePtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptune) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceNeptunePtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptune) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceNeptunePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptune) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceNeptunePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptune) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceNeptunePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceNeptune) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceNeptunePtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceNeptune) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceNeptunePtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptune) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceNeptunePtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptune) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceNeptunePtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptune) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceNeptunePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceNeptune) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceNeptuneIam struct {
	// The Access Key ID to use to authenticate.
	AccessKey *string `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint string `pulumi:"endpoint"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceNeptuneIamInput is an input type that accepts ResourceNeptuneIamArgs and ResourceNeptuneIamOutput values.
// You can construct a concrete instance of `ResourceNeptuneIamInput` via:
//
//	ResourceNeptuneIamArgs{...}
type ResourceNeptuneIamInput interface {
	pulumi.Input

	ToResourceNeptuneIamOutput() ResourceNeptuneIamOutput
	ToResourceNeptuneIamOutputWithContext(context.Context) ResourceNeptuneIamOutput
}

type ResourceNeptuneIamArgs struct {
	// The Access Key ID to use to authenticate.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceNeptuneIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceNeptuneIam)(nil)).Elem()
}

func (i ResourceNeptuneIamArgs) ToResourceNeptuneIamOutput() ResourceNeptuneIamOutput {
	return i.ToResourceNeptuneIamOutputWithContext(context.Background())
}

func (i ResourceNeptuneIamArgs) ToResourceNeptuneIamOutputWithContext(ctx context.Context) ResourceNeptuneIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceNeptuneIamOutput)
}

func (i ResourceNeptuneIamArgs) ToResourceNeptuneIamPtrOutput() ResourceNeptuneIamPtrOutput {
	return i.ToResourceNeptuneIamPtrOutputWithContext(context.Background())
}

func (i ResourceNeptuneIamArgs) ToResourceNeptuneIamPtrOutputWithContext(ctx context.Context) ResourceNeptuneIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceNeptuneIamOutput).ToResourceNeptuneIamPtrOutputWithContext(ctx)
}

// ResourceNeptuneIamPtrInput is an input type that accepts ResourceNeptuneIamArgs, ResourceNeptuneIamPtr and ResourceNeptuneIamPtrOutput values.
// You can construct a concrete instance of `ResourceNeptuneIamPtrInput` via:
//
//	        ResourceNeptuneIamArgs{...}
//
//	or:
//
//	        nil
type ResourceNeptuneIamPtrInput interface {
	pulumi.Input

	ToResourceNeptuneIamPtrOutput() ResourceNeptuneIamPtrOutput
	ToResourceNeptuneIamPtrOutputWithContext(context.Context) ResourceNeptuneIamPtrOutput
}

type resourceNeptuneIamPtrType ResourceNeptuneIamArgs

func ResourceNeptuneIamPtr(v *ResourceNeptuneIamArgs) ResourceNeptuneIamPtrInput {
	return (*resourceNeptuneIamPtrType)(v)
}

func (*resourceNeptuneIamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceNeptuneIam)(nil)).Elem()
}

func (i *resourceNeptuneIamPtrType) ToResourceNeptuneIamPtrOutput() ResourceNeptuneIamPtrOutput {
	return i.ToResourceNeptuneIamPtrOutputWithContext(context.Background())
}

func (i *resourceNeptuneIamPtrType) ToResourceNeptuneIamPtrOutputWithContext(ctx context.Context) ResourceNeptuneIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceNeptuneIamPtrOutput)
}

type ResourceNeptuneIamOutput struct{ *pulumi.OutputState }

func (ResourceNeptuneIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceNeptuneIam)(nil)).Elem()
}

func (o ResourceNeptuneIamOutput) ToResourceNeptuneIamOutput() ResourceNeptuneIamOutput {
	return o
}

func (o ResourceNeptuneIamOutput) ToResourceNeptuneIamOutputWithContext(ctx context.Context) ResourceNeptuneIamOutput {
	return o
}

func (o ResourceNeptuneIamOutput) ToResourceNeptuneIamPtrOutput() ResourceNeptuneIamPtrOutput {
	return o.ToResourceNeptuneIamPtrOutputWithContext(context.Background())
}

func (o ResourceNeptuneIamOutput) ToResourceNeptuneIamPtrOutputWithContext(ctx context.Context) ResourceNeptuneIamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceNeptuneIam) *ResourceNeptuneIam {
		return &v
	}).(ResourceNeptuneIamPtrOutput)
}

// The Access Key ID to use to authenticate.
func (o ResourceNeptuneIamOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceNeptuneIam) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceNeptuneIamOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceNeptuneIam) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceNeptuneIamOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceNeptuneIam) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceNeptuneIamOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceNeptuneIam) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceNeptuneIamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceNeptuneIam) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceNeptuneIamOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceNeptuneIam) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceNeptuneIamOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceNeptuneIam) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceNeptuneIamOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceNeptuneIam) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceNeptuneIamOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceNeptuneIam) string { return v.Region }).(pulumi.StringOutput)
}

// The role to assume after logging in.
func (o ResourceNeptuneIamOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceNeptuneIam) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceNeptuneIamOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceNeptuneIam) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o ResourceNeptuneIamOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceNeptuneIam) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceNeptuneIamOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceNeptuneIam) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceNeptuneIamOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceNeptuneIam) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceNeptuneIamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceNeptuneIam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceNeptuneIamPtrOutput struct{ *pulumi.OutputState }

func (ResourceNeptuneIamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceNeptuneIam)(nil)).Elem()
}

func (o ResourceNeptuneIamPtrOutput) ToResourceNeptuneIamPtrOutput() ResourceNeptuneIamPtrOutput {
	return o
}

func (o ResourceNeptuneIamPtrOutput) ToResourceNeptuneIamPtrOutputWithContext(ctx context.Context) ResourceNeptuneIamPtrOutput {
	return o
}

func (o ResourceNeptuneIamPtrOutput) Elem() ResourceNeptuneIamOutput {
	return o.ApplyT(func(v *ResourceNeptuneIam) ResourceNeptuneIam {
		if v != nil {
			return *v
		}
		var ret ResourceNeptuneIam
		return ret
	}).(ResourceNeptuneIamOutput)
}

// The Access Key ID to use to authenticate.
func (o ResourceNeptuneIamPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptuneIam) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceNeptuneIamPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptuneIam) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceNeptuneIamPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptuneIam) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o ResourceNeptuneIamPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptuneIam) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceNeptuneIamPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptuneIam) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceNeptuneIamPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceNeptuneIam) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceNeptuneIamPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceNeptuneIam) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceNeptuneIamPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptuneIam) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceNeptuneIamPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptuneIam) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o ResourceNeptuneIamPtrOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptuneIam) *string {
		if v == nil {
			return nil
		}
		return v.RoleArn
	}).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o ResourceNeptuneIamPtrOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptuneIam) *string {
		if v == nil {
			return nil
		}
		return v.RoleExternalId
	}).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o ResourceNeptuneIamPtrOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptuneIam) *string {
		if v == nil {
			return nil
		}
		return v.SecretAccessKey
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceNeptuneIamPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptuneIam) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceNeptuneIamPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceNeptuneIam) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceNeptuneIamPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceNeptuneIam) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceOracle struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceOracleInput is an input type that accepts ResourceOracleArgs and ResourceOracleOutput values.
// You can construct a concrete instance of `ResourceOracleInput` via:
//
//	ResourceOracleArgs{...}
type ResourceOracleInput interface {
	pulumi.Input

	ToResourceOracleOutput() ResourceOracleOutput
	ToResourceOracleOutputWithContext(context.Context) ResourceOracleOutput
}

type ResourceOracleArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceOracleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceOracle)(nil)).Elem()
}

func (i ResourceOracleArgs) ToResourceOracleOutput() ResourceOracleOutput {
	return i.ToResourceOracleOutputWithContext(context.Background())
}

func (i ResourceOracleArgs) ToResourceOracleOutputWithContext(ctx context.Context) ResourceOracleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOracleOutput)
}

func (i ResourceOracleArgs) ToResourceOraclePtrOutput() ResourceOraclePtrOutput {
	return i.ToResourceOraclePtrOutputWithContext(context.Background())
}

func (i ResourceOracleArgs) ToResourceOraclePtrOutputWithContext(ctx context.Context) ResourceOraclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOracleOutput).ToResourceOraclePtrOutputWithContext(ctx)
}

// ResourceOraclePtrInput is an input type that accepts ResourceOracleArgs, ResourceOraclePtr and ResourceOraclePtrOutput values.
// You can construct a concrete instance of `ResourceOraclePtrInput` via:
//
//	        ResourceOracleArgs{...}
//
//	or:
//
//	        nil
type ResourceOraclePtrInput interface {
	pulumi.Input

	ToResourceOraclePtrOutput() ResourceOraclePtrOutput
	ToResourceOraclePtrOutputWithContext(context.Context) ResourceOraclePtrOutput
}

type resourceOraclePtrType ResourceOracleArgs

func ResourceOraclePtr(v *ResourceOracleArgs) ResourceOraclePtrInput {
	return (*resourceOraclePtrType)(v)
}

func (*resourceOraclePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceOracle)(nil)).Elem()
}

func (i *resourceOraclePtrType) ToResourceOraclePtrOutput() ResourceOraclePtrOutput {
	return i.ToResourceOraclePtrOutputWithContext(context.Background())
}

func (i *resourceOraclePtrType) ToResourceOraclePtrOutputWithContext(ctx context.Context) ResourceOraclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOraclePtrOutput)
}

type ResourceOracleOutput struct{ *pulumi.OutputState }

func (ResourceOracleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceOracle)(nil)).Elem()
}

func (o ResourceOracleOutput) ToResourceOracleOutput() ResourceOracleOutput {
	return o
}

func (o ResourceOracleOutput) ToResourceOracleOutputWithContext(ctx context.Context) ResourceOracleOutput {
	return o
}

func (o ResourceOracleOutput) ToResourceOraclePtrOutput() ResourceOraclePtrOutput {
	return o.ToResourceOraclePtrOutputWithContext(context.Background())
}

func (o ResourceOracleOutput) ToResourceOraclePtrOutputWithContext(ctx context.Context) ResourceOraclePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceOracle) *ResourceOracle {
		return &v
	}).(ResourceOraclePtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceOracleOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceOracle) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceOracleOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceOracle) string { return v.Database }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceOracleOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceOracle) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceOracleOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceOracle) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceOracleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceOracle) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceOracleOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceOracle) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceOracleOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceOracle) int { return v.Port }).(pulumi.IntOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceOracleOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceOracle) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceOracleOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceOracle) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceOracleOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceOracle) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceOracleOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceOracle) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceOracleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceOracle) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceOracleOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceOracle) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceOracleOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceOracle) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceOraclePtrOutput struct{ *pulumi.OutputState }

func (ResourceOraclePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceOracle)(nil)).Elem()
}

func (o ResourceOraclePtrOutput) ToResourceOraclePtrOutput() ResourceOraclePtrOutput {
	return o
}

func (o ResourceOraclePtrOutput) ToResourceOraclePtrOutputWithContext(ctx context.Context) ResourceOraclePtrOutput {
	return o
}

func (o ResourceOraclePtrOutput) Elem() ResourceOracleOutput {
	return o.ApplyT(func(v *ResourceOracle) ResourceOracle {
		if v != nil {
			return *v
		}
		var ret ResourceOracle
		return ret
	}).(ResourceOracleOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceOraclePtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceOracle) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceOraclePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceOracle) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceOraclePtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceOracle) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceOraclePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceOracle) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceOraclePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceOracle) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceOraclePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceOracle) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceOraclePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceOracle) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceOraclePtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceOracle) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceOraclePtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceOracle) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceOraclePtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceOracle) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceOraclePtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceOracle) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceOraclePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceOracle) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceOraclePtrOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceOracle) *bool {
		if v == nil {
			return nil
		}
		return v.TlsRequired
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceOraclePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceOracle) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourcePostgres struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourcePostgresInput is an input type that accepts ResourcePostgresArgs and ResourcePostgresOutput values.
// You can construct a concrete instance of `ResourcePostgresInput` via:
//
//	ResourcePostgresArgs{...}
type ResourcePostgresInput interface {
	pulumi.Input

	ToResourcePostgresOutput() ResourcePostgresOutput
	ToResourcePostgresOutputWithContext(context.Context) ResourcePostgresOutput
}

type ResourcePostgresArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourcePostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePostgres)(nil)).Elem()
}

func (i ResourcePostgresArgs) ToResourcePostgresOutput() ResourcePostgresOutput {
	return i.ToResourcePostgresOutputWithContext(context.Background())
}

func (i ResourcePostgresArgs) ToResourcePostgresOutputWithContext(ctx context.Context) ResourcePostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePostgresOutput)
}

func (i ResourcePostgresArgs) ToResourcePostgresPtrOutput() ResourcePostgresPtrOutput {
	return i.ToResourcePostgresPtrOutputWithContext(context.Background())
}

func (i ResourcePostgresArgs) ToResourcePostgresPtrOutputWithContext(ctx context.Context) ResourcePostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePostgresOutput).ToResourcePostgresPtrOutputWithContext(ctx)
}

// ResourcePostgresPtrInput is an input type that accepts ResourcePostgresArgs, ResourcePostgresPtr and ResourcePostgresPtrOutput values.
// You can construct a concrete instance of `ResourcePostgresPtrInput` via:
//
//	        ResourcePostgresArgs{...}
//
//	or:
//
//	        nil
type ResourcePostgresPtrInput interface {
	pulumi.Input

	ToResourcePostgresPtrOutput() ResourcePostgresPtrOutput
	ToResourcePostgresPtrOutputWithContext(context.Context) ResourcePostgresPtrOutput
}

type resourcePostgresPtrType ResourcePostgresArgs

func ResourcePostgresPtr(v *ResourcePostgresArgs) ResourcePostgresPtrInput {
	return (*resourcePostgresPtrType)(v)
}

func (*resourcePostgresPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePostgres)(nil)).Elem()
}

func (i *resourcePostgresPtrType) ToResourcePostgresPtrOutput() ResourcePostgresPtrOutput {
	return i.ToResourcePostgresPtrOutputWithContext(context.Background())
}

func (i *resourcePostgresPtrType) ToResourcePostgresPtrOutputWithContext(ctx context.Context) ResourcePostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePostgresPtrOutput)
}

type ResourcePostgresOutput struct{ *pulumi.OutputState }

func (ResourcePostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePostgres)(nil)).Elem()
}

func (o ResourcePostgresOutput) ToResourcePostgresOutput() ResourcePostgresOutput {
	return o
}

func (o ResourcePostgresOutput) ToResourcePostgresOutputWithContext(ctx context.Context) ResourcePostgresOutput {
	return o
}

func (o ResourcePostgresOutput) ToResourcePostgresPtrOutput() ResourcePostgresPtrOutput {
	return o.ToResourcePostgresPtrOutputWithContext(context.Background())
}

func (o ResourcePostgresOutput) ToResourcePostgresPtrOutputWithContext(ctx context.Context) ResourcePostgresPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourcePostgres) *ResourcePostgres {
		return &v
	}).(ResourcePostgresPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourcePostgresOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePostgres) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourcePostgresOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePostgres) string { return v.Database }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourcePostgresOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePostgres) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourcePostgresOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePostgres) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourcePostgresOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePostgres) string { return v.Name }).(pulumi.StringOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourcePostgresOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourcePostgres) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourcePostgresOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePostgres) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourcePostgresOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourcePostgres) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourcePostgresOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourcePostgres) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourcePostgresOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePostgres) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourcePostgresOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePostgres) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourcePostgresOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePostgres) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourcePostgresOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourcePostgres) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourcePostgresOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePostgres) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourcePostgresPtrOutput struct{ *pulumi.OutputState }

func (ResourcePostgresPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePostgres)(nil)).Elem()
}

func (o ResourcePostgresPtrOutput) ToResourcePostgresPtrOutput() ResourcePostgresPtrOutput {
	return o
}

func (o ResourcePostgresPtrOutput) ToResourcePostgresPtrOutputWithContext(ctx context.Context) ResourcePostgresPtrOutput {
	return o
}

func (o ResourcePostgresPtrOutput) Elem() ResourcePostgresOutput {
	return o.ApplyT(func(v *ResourcePostgres) ResourcePostgres {
		if v != nil {
			return *v
		}
		var ret ResourcePostgres
		return ret
	}).(ResourcePostgresOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourcePostgresPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePostgres) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourcePostgresPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourcePostgresPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePostgres) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourcePostgresPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourcePostgresPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourcePostgresPtrOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourcePostgres) *bool {
		if v == nil {
			return nil
		}
		return v.OverrideDatabase
	}).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourcePostgresPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePostgres) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourcePostgresPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePostgres) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourcePostgresPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePostgres) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourcePostgresPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePostgres) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourcePostgresPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePostgres) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourcePostgresPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePostgres) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourcePostgresPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourcePostgres) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourcePostgresPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePostgres) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourcePresto struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourcePrestoInput is an input type that accepts ResourcePrestoArgs and ResourcePrestoOutput values.
// You can construct a concrete instance of `ResourcePrestoInput` via:
//
//	ResourcePrestoArgs{...}
type ResourcePrestoInput interface {
	pulumi.Input

	ToResourcePrestoOutput() ResourcePrestoOutput
	ToResourcePrestoOutputWithContext(context.Context) ResourcePrestoOutput
}

type ResourcePrestoArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourcePrestoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePresto)(nil)).Elem()
}

func (i ResourcePrestoArgs) ToResourcePrestoOutput() ResourcePrestoOutput {
	return i.ToResourcePrestoOutputWithContext(context.Background())
}

func (i ResourcePrestoArgs) ToResourcePrestoOutputWithContext(ctx context.Context) ResourcePrestoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePrestoOutput)
}

func (i ResourcePrestoArgs) ToResourcePrestoPtrOutput() ResourcePrestoPtrOutput {
	return i.ToResourcePrestoPtrOutputWithContext(context.Background())
}

func (i ResourcePrestoArgs) ToResourcePrestoPtrOutputWithContext(ctx context.Context) ResourcePrestoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePrestoOutput).ToResourcePrestoPtrOutputWithContext(ctx)
}

// ResourcePrestoPtrInput is an input type that accepts ResourcePrestoArgs, ResourcePrestoPtr and ResourcePrestoPtrOutput values.
// You can construct a concrete instance of `ResourcePrestoPtrInput` via:
//
//	        ResourcePrestoArgs{...}
//
//	or:
//
//	        nil
type ResourcePrestoPtrInput interface {
	pulumi.Input

	ToResourcePrestoPtrOutput() ResourcePrestoPtrOutput
	ToResourcePrestoPtrOutputWithContext(context.Context) ResourcePrestoPtrOutput
}

type resourcePrestoPtrType ResourcePrestoArgs

func ResourcePrestoPtr(v *ResourcePrestoArgs) ResourcePrestoPtrInput {
	return (*resourcePrestoPtrType)(v)
}

func (*resourcePrestoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePresto)(nil)).Elem()
}

func (i *resourcePrestoPtrType) ToResourcePrestoPtrOutput() ResourcePrestoPtrOutput {
	return i.ToResourcePrestoPtrOutputWithContext(context.Background())
}

func (i *resourcePrestoPtrType) ToResourcePrestoPtrOutputWithContext(ctx context.Context) ResourcePrestoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcePrestoPtrOutput)
}

type ResourcePrestoOutput struct{ *pulumi.OutputState }

func (ResourcePrestoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePresto)(nil)).Elem()
}

func (o ResourcePrestoOutput) ToResourcePrestoOutput() ResourcePrestoOutput {
	return o
}

func (o ResourcePrestoOutput) ToResourcePrestoOutputWithContext(ctx context.Context) ResourcePrestoOutput {
	return o
}

func (o ResourcePrestoOutput) ToResourcePrestoPtrOutput() ResourcePrestoPtrOutput {
	return o.ToResourcePrestoPtrOutputWithContext(context.Background())
}

func (o ResourcePrestoOutput) ToResourcePrestoPtrOutputWithContext(ctx context.Context) ResourcePrestoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourcePresto) *ResourcePresto {
		return &v
	}).(ResourcePrestoPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourcePrestoOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePresto) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourcePrestoOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePresto) string { return v.Database }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourcePrestoOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePresto) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourcePrestoOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePresto) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourcePrestoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourcePresto) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourcePrestoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePresto) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourcePrestoOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourcePresto) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourcePrestoOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourcePresto) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourcePrestoOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePresto) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourcePrestoOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePresto) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourcePrestoOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePresto) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourcePrestoOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourcePresto) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourcePrestoOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourcePresto) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourcePrestoOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourcePresto) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourcePrestoPtrOutput struct{ *pulumi.OutputState }

func (ResourcePrestoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePresto)(nil)).Elem()
}

func (o ResourcePrestoPtrOutput) ToResourcePrestoPtrOutput() ResourcePrestoPtrOutput {
	return o
}

func (o ResourcePrestoPtrOutput) ToResourcePrestoPtrOutputWithContext(ctx context.Context) ResourcePrestoPtrOutput {
	return o
}

func (o ResourcePrestoPtrOutput) Elem() ResourcePrestoOutput {
	return o.ApplyT(func(v *ResourcePresto) ResourcePresto {
		if v != nil {
			return *v
		}
		var ret ResourcePresto
		return ret
	}).(ResourcePrestoOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourcePrestoPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePresto) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourcePrestoPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePresto) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourcePrestoPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePresto) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourcePrestoPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePresto) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourcePrestoPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePresto) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourcePrestoPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePresto) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourcePrestoPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePresto) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourcePrestoPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourcePresto) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourcePrestoPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePresto) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourcePrestoPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePresto) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourcePrestoPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePresto) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourcePrestoPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourcePresto) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourcePrestoPtrOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourcePresto) *bool {
		if v == nil {
			return nil
		}
		return v.TlsRequired
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourcePrestoPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourcePresto) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceRabbitmqAmqp091 struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceRabbitmqAmqp091Input is an input type that accepts ResourceRabbitmqAmqp091Args and ResourceRabbitmqAmqp091Output values.
// You can construct a concrete instance of `ResourceRabbitmqAmqp091Input` via:
//
//	ResourceRabbitmqAmqp091Args{...}
type ResourceRabbitmqAmqp091Input interface {
	pulumi.Input

	ToResourceRabbitmqAmqp091Output() ResourceRabbitmqAmqp091Output
	ToResourceRabbitmqAmqp091OutputWithContext(context.Context) ResourceRabbitmqAmqp091Output
}

type ResourceRabbitmqAmqp091Args struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceRabbitmqAmqp091Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRabbitmqAmqp091)(nil)).Elem()
}

func (i ResourceRabbitmqAmqp091Args) ToResourceRabbitmqAmqp091Output() ResourceRabbitmqAmqp091Output {
	return i.ToResourceRabbitmqAmqp091OutputWithContext(context.Background())
}

func (i ResourceRabbitmqAmqp091Args) ToResourceRabbitmqAmqp091OutputWithContext(ctx context.Context) ResourceRabbitmqAmqp091Output {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRabbitmqAmqp091Output)
}

func (i ResourceRabbitmqAmqp091Args) ToResourceRabbitmqAmqp091PtrOutput() ResourceRabbitmqAmqp091PtrOutput {
	return i.ToResourceRabbitmqAmqp091PtrOutputWithContext(context.Background())
}

func (i ResourceRabbitmqAmqp091Args) ToResourceRabbitmqAmqp091PtrOutputWithContext(ctx context.Context) ResourceRabbitmqAmqp091PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRabbitmqAmqp091Output).ToResourceRabbitmqAmqp091PtrOutputWithContext(ctx)
}

// ResourceRabbitmqAmqp091PtrInput is an input type that accepts ResourceRabbitmqAmqp091Args, ResourceRabbitmqAmqp091Ptr and ResourceRabbitmqAmqp091PtrOutput values.
// You can construct a concrete instance of `ResourceRabbitmqAmqp091PtrInput` via:
//
//	        ResourceRabbitmqAmqp091Args{...}
//
//	or:
//
//	        nil
type ResourceRabbitmqAmqp091PtrInput interface {
	pulumi.Input

	ToResourceRabbitmqAmqp091PtrOutput() ResourceRabbitmqAmqp091PtrOutput
	ToResourceRabbitmqAmqp091PtrOutputWithContext(context.Context) ResourceRabbitmqAmqp091PtrOutput
}

type resourceRabbitmqAmqp091PtrType ResourceRabbitmqAmqp091Args

func ResourceRabbitmqAmqp091Ptr(v *ResourceRabbitmqAmqp091Args) ResourceRabbitmqAmqp091PtrInput {
	return (*resourceRabbitmqAmqp091PtrType)(v)
}

func (*resourceRabbitmqAmqp091PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRabbitmqAmqp091)(nil)).Elem()
}

func (i *resourceRabbitmqAmqp091PtrType) ToResourceRabbitmqAmqp091PtrOutput() ResourceRabbitmqAmqp091PtrOutput {
	return i.ToResourceRabbitmqAmqp091PtrOutputWithContext(context.Background())
}

func (i *resourceRabbitmqAmqp091PtrType) ToResourceRabbitmqAmqp091PtrOutputWithContext(ctx context.Context) ResourceRabbitmqAmqp091PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRabbitmqAmqp091PtrOutput)
}

type ResourceRabbitmqAmqp091Output struct{ *pulumi.OutputState }

func (ResourceRabbitmqAmqp091Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRabbitmqAmqp091)(nil)).Elem()
}

func (o ResourceRabbitmqAmqp091Output) ToResourceRabbitmqAmqp091Output() ResourceRabbitmqAmqp091Output {
	return o
}

func (o ResourceRabbitmqAmqp091Output) ToResourceRabbitmqAmqp091OutputWithContext(ctx context.Context) ResourceRabbitmqAmqp091Output {
	return o
}

func (o ResourceRabbitmqAmqp091Output) ToResourceRabbitmqAmqp091PtrOutput() ResourceRabbitmqAmqp091PtrOutput {
	return o.ToResourceRabbitmqAmqp091PtrOutputWithContext(context.Background())
}

func (o ResourceRabbitmqAmqp091Output) ToResourceRabbitmqAmqp091PtrOutputWithContext(ctx context.Context) ResourceRabbitmqAmqp091PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceRabbitmqAmqp091) *ResourceRabbitmqAmqp091 {
		return &v
	}).(ResourceRabbitmqAmqp091PtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceRabbitmqAmqp091Output) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRabbitmqAmqp091) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceRabbitmqAmqp091Output) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRabbitmqAmqp091) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceRabbitmqAmqp091Output) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRabbitmqAmqp091) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceRabbitmqAmqp091Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRabbitmqAmqp091) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceRabbitmqAmqp091Output) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRabbitmqAmqp091) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceRabbitmqAmqp091Output) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRabbitmqAmqp091) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceRabbitmqAmqp091Output) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRabbitmqAmqp091) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceRabbitmqAmqp091Output) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRabbitmqAmqp091) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceRabbitmqAmqp091Output) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRabbitmqAmqp091) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceRabbitmqAmqp091Output) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRabbitmqAmqp091) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceRabbitmqAmqp091Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRabbitmqAmqp091) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceRabbitmqAmqp091Output) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceRabbitmqAmqp091) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceRabbitmqAmqp091Output) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRabbitmqAmqp091) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceRabbitmqAmqp091PtrOutput struct{ *pulumi.OutputState }

func (ResourceRabbitmqAmqp091PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRabbitmqAmqp091)(nil)).Elem()
}

func (o ResourceRabbitmqAmqp091PtrOutput) ToResourceRabbitmqAmqp091PtrOutput() ResourceRabbitmqAmqp091PtrOutput {
	return o
}

func (o ResourceRabbitmqAmqp091PtrOutput) ToResourceRabbitmqAmqp091PtrOutputWithContext(ctx context.Context) ResourceRabbitmqAmqp091PtrOutput {
	return o
}

func (o ResourceRabbitmqAmqp091PtrOutput) Elem() ResourceRabbitmqAmqp091Output {
	return o.ApplyT(func(v *ResourceRabbitmqAmqp091) ResourceRabbitmqAmqp091 {
		if v != nil {
			return *v
		}
		var ret ResourceRabbitmqAmqp091
		return ret
	}).(ResourceRabbitmqAmqp091Output)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceRabbitmqAmqp091PtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRabbitmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceRabbitmqAmqp091PtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRabbitmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceRabbitmqAmqp091PtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRabbitmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceRabbitmqAmqp091PtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRabbitmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceRabbitmqAmqp091PtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRabbitmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceRabbitmqAmqp091PtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRabbitmqAmqp091) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceRabbitmqAmqp091PtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRabbitmqAmqp091) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceRabbitmqAmqp091PtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRabbitmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceRabbitmqAmqp091PtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRabbitmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceRabbitmqAmqp091PtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRabbitmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceRabbitmqAmqp091PtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceRabbitmqAmqp091) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceRabbitmqAmqp091PtrOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceRabbitmqAmqp091) *bool {
		if v == nil {
			return nil
		}
		return v.TlsRequired
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceRabbitmqAmqp091PtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRabbitmqAmqp091) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceRawTcp struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceRawTcpInput is an input type that accepts ResourceRawTcpArgs and ResourceRawTcpOutput values.
// You can construct a concrete instance of `ResourceRawTcpInput` via:
//
//	ResourceRawTcpArgs{...}
type ResourceRawTcpInput interface {
	pulumi.Input

	ToResourceRawTcpOutput() ResourceRawTcpOutput
	ToResourceRawTcpOutputWithContext(context.Context) ResourceRawTcpOutput
}

type ResourceRawTcpArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceRawTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRawTcp)(nil)).Elem()
}

func (i ResourceRawTcpArgs) ToResourceRawTcpOutput() ResourceRawTcpOutput {
	return i.ToResourceRawTcpOutputWithContext(context.Background())
}

func (i ResourceRawTcpArgs) ToResourceRawTcpOutputWithContext(ctx context.Context) ResourceRawTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRawTcpOutput)
}

func (i ResourceRawTcpArgs) ToResourceRawTcpPtrOutput() ResourceRawTcpPtrOutput {
	return i.ToResourceRawTcpPtrOutputWithContext(context.Background())
}

func (i ResourceRawTcpArgs) ToResourceRawTcpPtrOutputWithContext(ctx context.Context) ResourceRawTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRawTcpOutput).ToResourceRawTcpPtrOutputWithContext(ctx)
}

// ResourceRawTcpPtrInput is an input type that accepts ResourceRawTcpArgs, ResourceRawTcpPtr and ResourceRawTcpPtrOutput values.
// You can construct a concrete instance of `ResourceRawTcpPtrInput` via:
//
//	        ResourceRawTcpArgs{...}
//
//	or:
//
//	        nil
type ResourceRawTcpPtrInput interface {
	pulumi.Input

	ToResourceRawTcpPtrOutput() ResourceRawTcpPtrOutput
	ToResourceRawTcpPtrOutputWithContext(context.Context) ResourceRawTcpPtrOutput
}

type resourceRawTcpPtrType ResourceRawTcpArgs

func ResourceRawTcpPtr(v *ResourceRawTcpArgs) ResourceRawTcpPtrInput {
	return (*resourceRawTcpPtrType)(v)
}

func (*resourceRawTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRawTcp)(nil)).Elem()
}

func (i *resourceRawTcpPtrType) ToResourceRawTcpPtrOutput() ResourceRawTcpPtrOutput {
	return i.ToResourceRawTcpPtrOutputWithContext(context.Background())
}

func (i *resourceRawTcpPtrType) ToResourceRawTcpPtrOutputWithContext(ctx context.Context) ResourceRawTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRawTcpPtrOutput)
}

type ResourceRawTcpOutput struct{ *pulumi.OutputState }

func (ResourceRawTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRawTcp)(nil)).Elem()
}

func (o ResourceRawTcpOutput) ToResourceRawTcpOutput() ResourceRawTcpOutput {
	return o
}

func (o ResourceRawTcpOutput) ToResourceRawTcpOutputWithContext(ctx context.Context) ResourceRawTcpOutput {
	return o
}

func (o ResourceRawTcpOutput) ToResourceRawTcpPtrOutput() ResourceRawTcpPtrOutput {
	return o.ToResourceRawTcpPtrOutputWithContext(context.Background())
}

func (o ResourceRawTcpOutput) ToResourceRawTcpPtrOutputWithContext(ctx context.Context) ResourceRawTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceRawTcp) *ResourceRawTcp {
		return &v
	}).(ResourceRawTcpPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceRawTcpOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRawTcp) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceRawTcpOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRawTcp) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceRawTcpOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRawTcp) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceRawTcpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRawTcp) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceRawTcpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRawTcp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceRawTcpOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRawTcp) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceRawTcpOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRawTcp) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceRawTcpOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRawTcp) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceRawTcpOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRawTcp) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceRawTcpOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRawTcp) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceRawTcpPtrOutput struct{ *pulumi.OutputState }

func (ResourceRawTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRawTcp)(nil)).Elem()
}

func (o ResourceRawTcpPtrOutput) ToResourceRawTcpPtrOutput() ResourceRawTcpPtrOutput {
	return o
}

func (o ResourceRawTcpPtrOutput) ToResourceRawTcpPtrOutputWithContext(ctx context.Context) ResourceRawTcpPtrOutput {
	return o
}

func (o ResourceRawTcpPtrOutput) Elem() ResourceRawTcpOutput {
	return o.ApplyT(func(v *ResourceRawTcp) ResourceRawTcp {
		if v != nil {
			return *v
		}
		var ret ResourceRawTcp
		return ret
	}).(ResourceRawTcpOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceRawTcpPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRawTcp) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceRawTcpPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRawTcp) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceRawTcpPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRawTcp) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceRawTcpPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRawTcp) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceRawTcpPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRawTcp) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceRawTcpPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRawTcp) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceRawTcpPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRawTcp) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceRawTcpPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRawTcp) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceRawTcpPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRawTcp) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceRawTcpPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceRawTcp) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceRdp struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// When set, network level authentication will not be used. May resolve unexpected authentication errors to older servers. When set, healthchecks cannot detect if a provided username / password pair is correct.
	DowngradeNlaConnections *bool `pulumi:"downgradeNlaConnections"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// When set, require a resource lock to access the resource to ensure it can only be used by one user at a time.
	LockRequired *bool `pulumi:"lockRequired"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceRdpInput is an input type that accepts ResourceRdpArgs and ResourceRdpOutput values.
// You can construct a concrete instance of `ResourceRdpInput` via:
//
//	ResourceRdpArgs{...}
type ResourceRdpInput interface {
	pulumi.Input

	ToResourceRdpOutput() ResourceRdpOutput
	ToResourceRdpOutputWithContext(context.Context) ResourceRdpOutput
}

type ResourceRdpArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// When set, network level authentication will not be used. May resolve unexpected authentication errors to older servers. When set, healthchecks cannot detect if a provided username / password pair is correct.
	DowngradeNlaConnections pulumi.BoolPtrInput `pulumi:"downgradeNlaConnections"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// When set, require a resource lock to access the resource to ensure it can only be used by one user at a time.
	LockRequired pulumi.BoolPtrInput `pulumi:"lockRequired"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceRdpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRdp)(nil)).Elem()
}

func (i ResourceRdpArgs) ToResourceRdpOutput() ResourceRdpOutput {
	return i.ToResourceRdpOutputWithContext(context.Background())
}

func (i ResourceRdpArgs) ToResourceRdpOutputWithContext(ctx context.Context) ResourceRdpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRdpOutput)
}

func (i ResourceRdpArgs) ToResourceRdpPtrOutput() ResourceRdpPtrOutput {
	return i.ToResourceRdpPtrOutputWithContext(context.Background())
}

func (i ResourceRdpArgs) ToResourceRdpPtrOutputWithContext(ctx context.Context) ResourceRdpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRdpOutput).ToResourceRdpPtrOutputWithContext(ctx)
}

// ResourceRdpPtrInput is an input type that accepts ResourceRdpArgs, ResourceRdpPtr and ResourceRdpPtrOutput values.
// You can construct a concrete instance of `ResourceRdpPtrInput` via:
//
//	        ResourceRdpArgs{...}
//
//	or:
//
//	        nil
type ResourceRdpPtrInput interface {
	pulumi.Input

	ToResourceRdpPtrOutput() ResourceRdpPtrOutput
	ToResourceRdpPtrOutputWithContext(context.Context) ResourceRdpPtrOutput
}

type resourceRdpPtrType ResourceRdpArgs

func ResourceRdpPtr(v *ResourceRdpArgs) ResourceRdpPtrInput {
	return (*resourceRdpPtrType)(v)
}

func (*resourceRdpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRdp)(nil)).Elem()
}

func (i *resourceRdpPtrType) ToResourceRdpPtrOutput() ResourceRdpPtrOutput {
	return i.ToResourceRdpPtrOutputWithContext(context.Background())
}

func (i *resourceRdpPtrType) ToResourceRdpPtrOutputWithContext(ctx context.Context) ResourceRdpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRdpPtrOutput)
}

type ResourceRdpOutput struct{ *pulumi.OutputState }

func (ResourceRdpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRdp)(nil)).Elem()
}

func (o ResourceRdpOutput) ToResourceRdpOutput() ResourceRdpOutput {
	return o
}

func (o ResourceRdpOutput) ToResourceRdpOutputWithContext(ctx context.Context) ResourceRdpOutput {
	return o
}

func (o ResourceRdpOutput) ToResourceRdpPtrOutput() ResourceRdpPtrOutput {
	return o.ToResourceRdpPtrOutputWithContext(context.Background())
}

func (o ResourceRdpOutput) ToResourceRdpPtrOutputWithContext(ctx context.Context) ResourceRdpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceRdp) *ResourceRdp {
		return &v
	}).(ResourceRdpPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceRdpOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdp) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// When set, network level authentication will not be used. May resolve unexpected authentication errors to older servers. When set, healthchecks cannot detect if a provided username / password pair is correct.
func (o ResourceRdpOutput) DowngradeNlaConnections() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceRdp) *bool { return v.DowngradeNlaConnections }).(pulumi.BoolPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceRdpOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdp) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceRdpOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRdp) string { return v.Hostname }).(pulumi.StringOutput)
}

// When set, require a resource lock to access the resource to ensure it can only be used by one user at a time.
func (o ResourceRdpOutput) LockRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceRdp) *bool { return v.LockRequired }).(pulumi.BoolPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceRdpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRdp) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceRdpOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdp) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceRdpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRdp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceRdpOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRdp) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceRdpOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdp) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceRdpOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdp) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceRdpOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdp) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceRdpOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRdp) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceRdpOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdp) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceRdpPtrOutput struct{ *pulumi.OutputState }

func (ResourceRdpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRdp)(nil)).Elem()
}

func (o ResourceRdpPtrOutput) ToResourceRdpPtrOutput() ResourceRdpPtrOutput {
	return o
}

func (o ResourceRdpPtrOutput) ToResourceRdpPtrOutputWithContext(ctx context.Context) ResourceRdpPtrOutput {
	return o
}

func (o ResourceRdpPtrOutput) Elem() ResourceRdpOutput {
	return o.ApplyT(func(v *ResourceRdp) ResourceRdp {
		if v != nil {
			return *v
		}
		var ret ResourceRdp
		return ret
	}).(ResourceRdpOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceRdpPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdp) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// When set, network level authentication will not be used. May resolve unexpected authentication errors to older servers. When set, healthchecks cannot detect if a provided username / password pair is correct.
func (o ResourceRdpPtrOutput) DowngradeNlaConnections() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceRdp) *bool {
		if v == nil {
			return nil
		}
		return v.DowngradeNlaConnections
	}).(pulumi.BoolPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceRdpPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdp) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceRdpPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdp) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// When set, require a resource lock to access the resource to ensure it can only be used by one user at a time.
func (o ResourceRdpPtrOutput) LockRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceRdp) *bool {
		if v == nil {
			return nil
		}
		return v.LockRequired
	}).(pulumi.BoolPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceRdpPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdp) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceRdpPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdp) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceRdpPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRdp) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceRdpPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRdp) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceRdpPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdp) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceRdpPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdp) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceRdpPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdp) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceRdpPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceRdp) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceRdpPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdp) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceRdpCert struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// When set, require a resource lock to access the resource to ensure it can only be used by one user at a time.
	LockRequired *bool `pulumi:"lockRequired"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceRdpCertInput is an input type that accepts ResourceRdpCertArgs and ResourceRdpCertOutput values.
// You can construct a concrete instance of `ResourceRdpCertInput` via:
//
//	ResourceRdpCertArgs{...}
type ResourceRdpCertInput interface {
	pulumi.Input

	ToResourceRdpCertOutput() ResourceRdpCertOutput
	ToResourceRdpCertOutputWithContext(context.Context) ResourceRdpCertOutput
}

type ResourceRdpCertArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// When set, require a resource lock to access the resource to ensure it can only be used by one user at a time.
	LockRequired pulumi.BoolPtrInput `pulumi:"lockRequired"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceRdpCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRdpCert)(nil)).Elem()
}

func (i ResourceRdpCertArgs) ToResourceRdpCertOutput() ResourceRdpCertOutput {
	return i.ToResourceRdpCertOutputWithContext(context.Background())
}

func (i ResourceRdpCertArgs) ToResourceRdpCertOutputWithContext(ctx context.Context) ResourceRdpCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRdpCertOutput)
}

func (i ResourceRdpCertArgs) ToResourceRdpCertPtrOutput() ResourceRdpCertPtrOutput {
	return i.ToResourceRdpCertPtrOutputWithContext(context.Background())
}

func (i ResourceRdpCertArgs) ToResourceRdpCertPtrOutputWithContext(ctx context.Context) ResourceRdpCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRdpCertOutput).ToResourceRdpCertPtrOutputWithContext(ctx)
}

// ResourceRdpCertPtrInput is an input type that accepts ResourceRdpCertArgs, ResourceRdpCertPtr and ResourceRdpCertPtrOutput values.
// You can construct a concrete instance of `ResourceRdpCertPtrInput` via:
//
//	        ResourceRdpCertArgs{...}
//
//	or:
//
//	        nil
type ResourceRdpCertPtrInput interface {
	pulumi.Input

	ToResourceRdpCertPtrOutput() ResourceRdpCertPtrOutput
	ToResourceRdpCertPtrOutputWithContext(context.Context) ResourceRdpCertPtrOutput
}

type resourceRdpCertPtrType ResourceRdpCertArgs

func ResourceRdpCertPtr(v *ResourceRdpCertArgs) ResourceRdpCertPtrInput {
	return (*resourceRdpCertPtrType)(v)
}

func (*resourceRdpCertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRdpCert)(nil)).Elem()
}

func (i *resourceRdpCertPtrType) ToResourceRdpCertPtrOutput() ResourceRdpCertPtrOutput {
	return i.ToResourceRdpCertPtrOutputWithContext(context.Background())
}

func (i *resourceRdpCertPtrType) ToResourceRdpCertPtrOutputWithContext(ctx context.Context) ResourceRdpCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRdpCertPtrOutput)
}

type ResourceRdpCertOutput struct{ *pulumi.OutputState }

func (ResourceRdpCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRdpCert)(nil)).Elem()
}

func (o ResourceRdpCertOutput) ToResourceRdpCertOutput() ResourceRdpCertOutput {
	return o
}

func (o ResourceRdpCertOutput) ToResourceRdpCertOutputWithContext(ctx context.Context) ResourceRdpCertOutput {
	return o
}

func (o ResourceRdpCertOutput) ToResourceRdpCertPtrOutput() ResourceRdpCertPtrOutput {
	return o.ToResourceRdpCertPtrOutputWithContext(context.Background())
}

func (o ResourceRdpCertOutput) ToResourceRdpCertPtrOutputWithContext(ctx context.Context) ResourceRdpCertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceRdpCert) *ResourceRdpCert {
		return &v
	}).(ResourceRdpCertPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceRdpCertOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdpCert) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceRdpCertOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdpCert) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceRdpCertOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRdpCert) string { return v.Hostname }).(pulumi.StringOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceRdpCertOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdpCert) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceRdpCertOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdpCert) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// When set, require a resource lock to access the resource to ensure it can only be used by one user at a time.
func (o ResourceRdpCertOutput) LockRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceRdpCert) *bool { return v.LockRequired }).(pulumi.BoolPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceRdpCertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRdpCert) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceRdpCertOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRdpCert) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceRdpCertOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRdpCert) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceRdpCertOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdpCert) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceRdpCertOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdpCert) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceRdpCertOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdpCert) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceRdpCertOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRdpCert) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceRdpCertOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdpCert) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceRdpCertPtrOutput struct{ *pulumi.OutputState }

func (ResourceRdpCertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRdpCert)(nil)).Elem()
}

func (o ResourceRdpCertPtrOutput) ToResourceRdpCertPtrOutput() ResourceRdpCertPtrOutput {
	return o
}

func (o ResourceRdpCertPtrOutput) ToResourceRdpCertPtrOutputWithContext(ctx context.Context) ResourceRdpCertPtrOutput {
	return o
}

func (o ResourceRdpCertPtrOutput) Elem() ResourceRdpCertOutput {
	return o.ApplyT(func(v *ResourceRdpCert) ResourceRdpCert {
		if v != nil {
			return *v
		}
		var ret ResourceRdpCert
		return ret
	}).(ResourceRdpCertOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceRdpCertPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdpCert) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceRdpCertPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdpCert) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceRdpCertPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdpCert) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceRdpCertPtrOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdpCert) *string {
		if v == nil {
			return nil
		}
		return v.IdentityAliasHealthcheckUsername
	}).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceRdpCertPtrOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdpCert) *string {
		if v == nil {
			return nil
		}
		return v.IdentitySetId
	}).(pulumi.StringPtrOutput)
}

// When set, require a resource lock to access the resource to ensure it can only be used by one user at a time.
func (o ResourceRdpCertPtrOutput) LockRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceRdpCert) *bool {
		if v == nil {
			return nil
		}
		return v.LockRequired
	}).(pulumi.BoolPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceRdpCertPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdpCert) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceRdpCertPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRdpCert) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceRdpCertPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRdpCert) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceRdpCertPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdpCert) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceRdpCertPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdpCert) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceRdpCertPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdpCert) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceRdpCertPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceRdpCert) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceRdpCertPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdpCert) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceRdsPostgresIam struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region string `pulumi:"region"`
	// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
	RoleAssumptionArn *string `pulumi:"roleAssumptionArn"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceRdsPostgresIamInput is an input type that accepts ResourceRdsPostgresIamArgs and ResourceRdsPostgresIamOutput values.
// You can construct a concrete instance of `ResourceRdsPostgresIamInput` via:
//
//	ResourceRdsPostgresIamArgs{...}
type ResourceRdsPostgresIamInput interface {
	pulumi.Input

	ToResourceRdsPostgresIamOutput() ResourceRdsPostgresIamOutput
	ToResourceRdsPostgresIamOutputWithContext(context.Context) ResourceRdsPostgresIamOutput
}

type ResourceRdsPostgresIamArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringInput `pulumi:"region"`
	// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
	RoleAssumptionArn pulumi.StringPtrInput `pulumi:"roleAssumptionArn"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceRdsPostgresIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRdsPostgresIam)(nil)).Elem()
}

func (i ResourceRdsPostgresIamArgs) ToResourceRdsPostgresIamOutput() ResourceRdsPostgresIamOutput {
	return i.ToResourceRdsPostgresIamOutputWithContext(context.Background())
}

func (i ResourceRdsPostgresIamArgs) ToResourceRdsPostgresIamOutputWithContext(ctx context.Context) ResourceRdsPostgresIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRdsPostgresIamOutput)
}

func (i ResourceRdsPostgresIamArgs) ToResourceRdsPostgresIamPtrOutput() ResourceRdsPostgresIamPtrOutput {
	return i.ToResourceRdsPostgresIamPtrOutputWithContext(context.Background())
}

func (i ResourceRdsPostgresIamArgs) ToResourceRdsPostgresIamPtrOutputWithContext(ctx context.Context) ResourceRdsPostgresIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRdsPostgresIamOutput).ToResourceRdsPostgresIamPtrOutputWithContext(ctx)
}

// ResourceRdsPostgresIamPtrInput is an input type that accepts ResourceRdsPostgresIamArgs, ResourceRdsPostgresIamPtr and ResourceRdsPostgresIamPtrOutput values.
// You can construct a concrete instance of `ResourceRdsPostgresIamPtrInput` via:
//
//	        ResourceRdsPostgresIamArgs{...}
//
//	or:
//
//	        nil
type ResourceRdsPostgresIamPtrInput interface {
	pulumi.Input

	ToResourceRdsPostgresIamPtrOutput() ResourceRdsPostgresIamPtrOutput
	ToResourceRdsPostgresIamPtrOutputWithContext(context.Context) ResourceRdsPostgresIamPtrOutput
}

type resourceRdsPostgresIamPtrType ResourceRdsPostgresIamArgs

func ResourceRdsPostgresIamPtr(v *ResourceRdsPostgresIamArgs) ResourceRdsPostgresIamPtrInput {
	return (*resourceRdsPostgresIamPtrType)(v)
}

func (*resourceRdsPostgresIamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRdsPostgresIam)(nil)).Elem()
}

func (i *resourceRdsPostgresIamPtrType) ToResourceRdsPostgresIamPtrOutput() ResourceRdsPostgresIamPtrOutput {
	return i.ToResourceRdsPostgresIamPtrOutputWithContext(context.Background())
}

func (i *resourceRdsPostgresIamPtrType) ToResourceRdsPostgresIamPtrOutputWithContext(ctx context.Context) ResourceRdsPostgresIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRdsPostgresIamPtrOutput)
}

type ResourceRdsPostgresIamOutput struct{ *pulumi.OutputState }

func (ResourceRdsPostgresIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRdsPostgresIam)(nil)).Elem()
}

func (o ResourceRdsPostgresIamOutput) ToResourceRdsPostgresIamOutput() ResourceRdsPostgresIamOutput {
	return o
}

func (o ResourceRdsPostgresIamOutput) ToResourceRdsPostgresIamOutputWithContext(ctx context.Context) ResourceRdsPostgresIamOutput {
	return o
}

func (o ResourceRdsPostgresIamOutput) ToResourceRdsPostgresIamPtrOutput() ResourceRdsPostgresIamPtrOutput {
	return o.ToResourceRdsPostgresIamPtrOutputWithContext(context.Background())
}

func (o ResourceRdsPostgresIamOutput) ToResourceRdsPostgresIamPtrOutputWithContext(ctx context.Context) ResourceRdsPostgresIamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceRdsPostgresIam) *ResourceRdsPostgresIam {
		return &v
	}).(ResourceRdsPostgresIamPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceRdsPostgresIamOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdsPostgresIam) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceRdsPostgresIamOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRdsPostgresIam) string { return v.Database }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceRdsPostgresIamOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdsPostgresIam) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceRdsPostgresIamOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRdsPostgresIam) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceRdsPostgresIamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRdsPostgresIam) string { return v.Name }).(pulumi.StringOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceRdsPostgresIamOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceRdsPostgresIam) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceRdsPostgresIamOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRdsPostgresIam) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceRdsPostgresIamOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRdsPostgresIam) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceRdsPostgresIamOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdsPostgresIam) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceRdsPostgresIamOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRdsPostgresIam) string { return v.Region }).(pulumi.StringOutput)
}

// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
func (o ResourceRdsPostgresIamOutput) RoleAssumptionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdsPostgresIam) *string { return v.RoleAssumptionArn }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceRdsPostgresIamOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdsPostgresIam) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceRdsPostgresIamOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdsPostgresIam) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceRdsPostgresIamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRdsPostgresIam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceRdsPostgresIamOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRdsPostgresIam) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceRdsPostgresIamPtrOutput struct{ *pulumi.OutputState }

func (ResourceRdsPostgresIamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRdsPostgresIam)(nil)).Elem()
}

func (o ResourceRdsPostgresIamPtrOutput) ToResourceRdsPostgresIamPtrOutput() ResourceRdsPostgresIamPtrOutput {
	return o
}

func (o ResourceRdsPostgresIamPtrOutput) ToResourceRdsPostgresIamPtrOutputWithContext(ctx context.Context) ResourceRdsPostgresIamPtrOutput {
	return o
}

func (o ResourceRdsPostgresIamPtrOutput) Elem() ResourceRdsPostgresIamOutput {
	return o.ApplyT(func(v *ResourceRdsPostgresIam) ResourceRdsPostgresIam {
		if v != nil {
			return *v
		}
		var ret ResourceRdsPostgresIam
		return ret
	}).(ResourceRdsPostgresIamOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceRdsPostgresIamPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdsPostgresIam) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceRdsPostgresIamPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdsPostgresIam) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceRdsPostgresIamPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdsPostgresIam) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceRdsPostgresIamPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdsPostgresIam) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceRdsPostgresIamPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdsPostgresIam) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceRdsPostgresIamPtrOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceRdsPostgresIam) *bool {
		if v == nil {
			return nil
		}
		return v.OverrideDatabase
	}).(pulumi.BoolPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceRdsPostgresIamPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRdsPostgresIam) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceRdsPostgresIamPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRdsPostgresIam) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceRdsPostgresIamPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdsPostgresIam) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o ResourceRdsPostgresIamPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdsPostgresIam) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
func (o ResourceRdsPostgresIamPtrOutput) RoleAssumptionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdsPostgresIam) *string {
		if v == nil {
			return nil
		}
		return v.RoleAssumptionArn
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceRdsPostgresIamPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdsPostgresIam) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceRdsPostgresIamPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdsPostgresIam) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceRdsPostgresIamPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceRdsPostgresIam) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceRdsPostgresIamPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRdsPostgresIam) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceRedis struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceRedisInput is an input type that accepts ResourceRedisArgs and ResourceRedisOutput values.
// You can construct a concrete instance of `ResourceRedisInput` via:
//
//	ResourceRedisArgs{...}
type ResourceRedisInput interface {
	pulumi.Input

	ToResourceRedisOutput() ResourceRedisOutput
	ToResourceRedisOutputWithContext(context.Context) ResourceRedisOutput
}

type ResourceRedisArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceRedisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRedis)(nil)).Elem()
}

func (i ResourceRedisArgs) ToResourceRedisOutput() ResourceRedisOutput {
	return i.ToResourceRedisOutputWithContext(context.Background())
}

func (i ResourceRedisArgs) ToResourceRedisOutputWithContext(ctx context.Context) ResourceRedisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRedisOutput)
}

func (i ResourceRedisArgs) ToResourceRedisPtrOutput() ResourceRedisPtrOutput {
	return i.ToResourceRedisPtrOutputWithContext(context.Background())
}

func (i ResourceRedisArgs) ToResourceRedisPtrOutputWithContext(ctx context.Context) ResourceRedisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRedisOutput).ToResourceRedisPtrOutputWithContext(ctx)
}

// ResourceRedisPtrInput is an input type that accepts ResourceRedisArgs, ResourceRedisPtr and ResourceRedisPtrOutput values.
// You can construct a concrete instance of `ResourceRedisPtrInput` via:
//
//	        ResourceRedisArgs{...}
//
//	or:
//
//	        nil
type ResourceRedisPtrInput interface {
	pulumi.Input

	ToResourceRedisPtrOutput() ResourceRedisPtrOutput
	ToResourceRedisPtrOutputWithContext(context.Context) ResourceRedisPtrOutput
}

type resourceRedisPtrType ResourceRedisArgs

func ResourceRedisPtr(v *ResourceRedisArgs) ResourceRedisPtrInput {
	return (*resourceRedisPtrType)(v)
}

func (*resourceRedisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRedis)(nil)).Elem()
}

func (i *resourceRedisPtrType) ToResourceRedisPtrOutput() ResourceRedisPtrOutput {
	return i.ToResourceRedisPtrOutputWithContext(context.Background())
}

func (i *resourceRedisPtrType) ToResourceRedisPtrOutputWithContext(ctx context.Context) ResourceRedisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRedisPtrOutput)
}

type ResourceRedisOutput struct{ *pulumi.OutputState }

func (ResourceRedisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRedis)(nil)).Elem()
}

func (o ResourceRedisOutput) ToResourceRedisOutput() ResourceRedisOutput {
	return o
}

func (o ResourceRedisOutput) ToResourceRedisOutputWithContext(ctx context.Context) ResourceRedisOutput {
	return o
}

func (o ResourceRedisOutput) ToResourceRedisPtrOutput() ResourceRedisPtrOutput {
	return o.ToResourceRedisPtrOutputWithContext(context.Background())
}

func (o ResourceRedisOutput) ToResourceRedisPtrOutputWithContext(ctx context.Context) ResourceRedisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceRedis) *ResourceRedis {
		return &v
	}).(ResourceRedisPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceRedisOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRedis) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceRedisOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRedis) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceRedisOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRedis) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceRedisOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRedis) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceRedisOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRedis) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceRedisOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRedis) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceRedisOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRedis) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceRedisOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRedis) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceRedisOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRedis) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceRedisOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRedis) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceRedisOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRedis) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceRedisOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceRedis) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceRedisOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRedis) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceRedisPtrOutput struct{ *pulumi.OutputState }

func (ResourceRedisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRedis)(nil)).Elem()
}

func (o ResourceRedisPtrOutput) ToResourceRedisPtrOutput() ResourceRedisPtrOutput {
	return o
}

func (o ResourceRedisPtrOutput) ToResourceRedisPtrOutputWithContext(ctx context.Context) ResourceRedisPtrOutput {
	return o
}

func (o ResourceRedisPtrOutput) Elem() ResourceRedisOutput {
	return o.ApplyT(func(v *ResourceRedis) ResourceRedis {
		if v != nil {
			return *v
		}
		var ret ResourceRedis
		return ret
	}).(ResourceRedisOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceRedisPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedis) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceRedisPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedis) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceRedisPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedis) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceRedisPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedis) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceRedisPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedis) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceRedisPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRedis) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceRedisPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRedis) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceRedisPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedis) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceRedisPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedis) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceRedisPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedis) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceRedisPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceRedis) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o ResourceRedisPtrOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceRedis) *bool {
		if v == nil {
			return nil
		}
		return v.TlsRequired
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceRedisPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedis) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceRedshift struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceRedshiftInput is an input type that accepts ResourceRedshiftArgs and ResourceRedshiftOutput values.
// You can construct a concrete instance of `ResourceRedshiftInput` via:
//
//	ResourceRedshiftArgs{...}
type ResourceRedshiftInput interface {
	pulumi.Input

	ToResourceRedshiftOutput() ResourceRedshiftOutput
	ToResourceRedshiftOutputWithContext(context.Context) ResourceRedshiftOutput
}

type ResourceRedshiftArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceRedshiftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRedshift)(nil)).Elem()
}

func (i ResourceRedshiftArgs) ToResourceRedshiftOutput() ResourceRedshiftOutput {
	return i.ToResourceRedshiftOutputWithContext(context.Background())
}

func (i ResourceRedshiftArgs) ToResourceRedshiftOutputWithContext(ctx context.Context) ResourceRedshiftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRedshiftOutput)
}

func (i ResourceRedshiftArgs) ToResourceRedshiftPtrOutput() ResourceRedshiftPtrOutput {
	return i.ToResourceRedshiftPtrOutputWithContext(context.Background())
}

func (i ResourceRedshiftArgs) ToResourceRedshiftPtrOutputWithContext(ctx context.Context) ResourceRedshiftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRedshiftOutput).ToResourceRedshiftPtrOutputWithContext(ctx)
}

// ResourceRedshiftPtrInput is an input type that accepts ResourceRedshiftArgs, ResourceRedshiftPtr and ResourceRedshiftPtrOutput values.
// You can construct a concrete instance of `ResourceRedshiftPtrInput` via:
//
//	        ResourceRedshiftArgs{...}
//
//	or:
//
//	        nil
type ResourceRedshiftPtrInput interface {
	pulumi.Input

	ToResourceRedshiftPtrOutput() ResourceRedshiftPtrOutput
	ToResourceRedshiftPtrOutputWithContext(context.Context) ResourceRedshiftPtrOutput
}

type resourceRedshiftPtrType ResourceRedshiftArgs

func ResourceRedshiftPtr(v *ResourceRedshiftArgs) ResourceRedshiftPtrInput {
	return (*resourceRedshiftPtrType)(v)
}

func (*resourceRedshiftPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRedshift)(nil)).Elem()
}

func (i *resourceRedshiftPtrType) ToResourceRedshiftPtrOutput() ResourceRedshiftPtrOutput {
	return i.ToResourceRedshiftPtrOutputWithContext(context.Background())
}

func (i *resourceRedshiftPtrType) ToResourceRedshiftPtrOutputWithContext(ctx context.Context) ResourceRedshiftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRedshiftPtrOutput)
}

type ResourceRedshiftOutput struct{ *pulumi.OutputState }

func (ResourceRedshiftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRedshift)(nil)).Elem()
}

func (o ResourceRedshiftOutput) ToResourceRedshiftOutput() ResourceRedshiftOutput {
	return o
}

func (o ResourceRedshiftOutput) ToResourceRedshiftOutputWithContext(ctx context.Context) ResourceRedshiftOutput {
	return o
}

func (o ResourceRedshiftOutput) ToResourceRedshiftPtrOutput() ResourceRedshiftPtrOutput {
	return o.ToResourceRedshiftPtrOutputWithContext(context.Background())
}

func (o ResourceRedshiftOutput) ToResourceRedshiftPtrOutputWithContext(ctx context.Context) ResourceRedshiftPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceRedshift) *ResourceRedshift {
		return &v
	}).(ResourceRedshiftPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceRedshiftOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRedshift) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceRedshiftOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRedshift) string { return v.Database }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceRedshiftOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRedshift) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceRedshiftOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRedshift) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceRedshiftOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceRedshift) string { return v.Name }).(pulumi.StringOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceRedshiftOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceRedshift) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceRedshiftOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRedshift) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceRedshiftOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRedshift) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceRedshiftOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceRedshift) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceRedshiftOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRedshift) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceRedshiftOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRedshift) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceRedshiftOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRedshift) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceRedshiftOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceRedshift) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceRedshiftOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceRedshift) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceRedshiftPtrOutput struct{ *pulumi.OutputState }

func (ResourceRedshiftPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceRedshift)(nil)).Elem()
}

func (o ResourceRedshiftPtrOutput) ToResourceRedshiftPtrOutput() ResourceRedshiftPtrOutput {
	return o
}

func (o ResourceRedshiftPtrOutput) ToResourceRedshiftPtrOutputWithContext(ctx context.Context) ResourceRedshiftPtrOutput {
	return o
}

func (o ResourceRedshiftPtrOutput) Elem() ResourceRedshiftOutput {
	return o.ApplyT(func(v *ResourceRedshift) ResourceRedshift {
		if v != nil {
			return *v
		}
		var ret ResourceRedshift
		return ret
	}).(ResourceRedshiftOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceRedshiftPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedshift) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceRedshiftPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedshift) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceRedshiftPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedshift) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceRedshiftPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedshift) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceRedshiftPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedshift) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceRedshiftPtrOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceRedshift) *bool {
		if v == nil {
			return nil
		}
		return v.OverrideDatabase
	}).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceRedshiftPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedshift) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceRedshiftPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRedshift) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceRedshiftPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceRedshift) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceRedshiftPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedshift) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceRedshiftPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedshift) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceRedshiftPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedshift) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceRedshiftPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceRedshift) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceRedshiftPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceRedshift) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceSingleStore struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceSingleStoreInput is an input type that accepts ResourceSingleStoreArgs and ResourceSingleStoreOutput values.
// You can construct a concrete instance of `ResourceSingleStoreInput` via:
//
//	ResourceSingleStoreArgs{...}
type ResourceSingleStoreInput interface {
	pulumi.Input

	ToResourceSingleStoreOutput() ResourceSingleStoreOutput
	ToResourceSingleStoreOutputWithContext(context.Context) ResourceSingleStoreOutput
}

type ResourceSingleStoreArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceSingleStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSingleStore)(nil)).Elem()
}

func (i ResourceSingleStoreArgs) ToResourceSingleStoreOutput() ResourceSingleStoreOutput {
	return i.ToResourceSingleStoreOutputWithContext(context.Background())
}

func (i ResourceSingleStoreArgs) ToResourceSingleStoreOutputWithContext(ctx context.Context) ResourceSingleStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSingleStoreOutput)
}

func (i ResourceSingleStoreArgs) ToResourceSingleStorePtrOutput() ResourceSingleStorePtrOutput {
	return i.ToResourceSingleStorePtrOutputWithContext(context.Background())
}

func (i ResourceSingleStoreArgs) ToResourceSingleStorePtrOutputWithContext(ctx context.Context) ResourceSingleStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSingleStoreOutput).ToResourceSingleStorePtrOutputWithContext(ctx)
}

// ResourceSingleStorePtrInput is an input type that accepts ResourceSingleStoreArgs, ResourceSingleStorePtr and ResourceSingleStorePtrOutput values.
// You can construct a concrete instance of `ResourceSingleStorePtrInput` via:
//
//	        ResourceSingleStoreArgs{...}
//
//	or:
//
//	        nil
type ResourceSingleStorePtrInput interface {
	pulumi.Input

	ToResourceSingleStorePtrOutput() ResourceSingleStorePtrOutput
	ToResourceSingleStorePtrOutputWithContext(context.Context) ResourceSingleStorePtrOutput
}

type resourceSingleStorePtrType ResourceSingleStoreArgs

func ResourceSingleStorePtr(v *ResourceSingleStoreArgs) ResourceSingleStorePtrInput {
	return (*resourceSingleStorePtrType)(v)
}

func (*resourceSingleStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSingleStore)(nil)).Elem()
}

func (i *resourceSingleStorePtrType) ToResourceSingleStorePtrOutput() ResourceSingleStorePtrOutput {
	return i.ToResourceSingleStorePtrOutputWithContext(context.Background())
}

func (i *resourceSingleStorePtrType) ToResourceSingleStorePtrOutputWithContext(ctx context.Context) ResourceSingleStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSingleStorePtrOutput)
}

type ResourceSingleStoreOutput struct{ *pulumi.OutputState }

func (ResourceSingleStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSingleStore)(nil)).Elem()
}

func (o ResourceSingleStoreOutput) ToResourceSingleStoreOutput() ResourceSingleStoreOutput {
	return o
}

func (o ResourceSingleStoreOutput) ToResourceSingleStoreOutputWithContext(ctx context.Context) ResourceSingleStoreOutput {
	return o
}

func (o ResourceSingleStoreOutput) ToResourceSingleStorePtrOutput() ResourceSingleStorePtrOutput {
	return o.ToResourceSingleStorePtrOutputWithContext(context.Background())
}

func (o ResourceSingleStoreOutput) ToResourceSingleStorePtrOutputWithContext(ctx context.Context) ResourceSingleStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSingleStore) *ResourceSingleStore {
		return &v
	}).(ResourceSingleStorePtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSingleStoreOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSingleStore) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceSingleStoreOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSingleStore) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSingleStoreOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSingleStore) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSingleStoreOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSingleStore) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSingleStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSingleStore) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceSingleStoreOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSingleStore) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSingleStoreOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSingleStore) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSingleStoreOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSingleStore) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSingleStoreOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSingleStore) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceSingleStoreOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceSingleStore) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSingleStoreOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSingleStore) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSingleStoreOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSingleStore) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSingleStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceSingleStore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceSingleStoreOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceSingleStore) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceSingleStoreOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSingleStore) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceSingleStorePtrOutput struct{ *pulumi.OutputState }

func (ResourceSingleStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSingleStore)(nil)).Elem()
}

func (o ResourceSingleStorePtrOutput) ToResourceSingleStorePtrOutput() ResourceSingleStorePtrOutput {
	return o
}

func (o ResourceSingleStorePtrOutput) ToResourceSingleStorePtrOutputWithContext(ctx context.Context) ResourceSingleStorePtrOutput {
	return o
}

func (o ResourceSingleStorePtrOutput) Elem() ResourceSingleStoreOutput {
	return o.ApplyT(func(v *ResourceSingleStore) ResourceSingleStore {
		if v != nil {
			return *v
		}
		var ret ResourceSingleStore
		return ret
	}).(ResourceSingleStoreOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSingleStorePtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSingleStore) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceSingleStorePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSingleStore) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSingleStorePtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSingleStore) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSingleStorePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSingleStore) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSingleStorePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSingleStore) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceSingleStorePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSingleStore) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSingleStorePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSingleStore) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSingleStorePtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSingleStore) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSingleStorePtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSingleStore) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o ResourceSingleStorePtrOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSingleStore) *bool {
		if v == nil {
			return nil
		}
		return v.RequireNativeAuth
	}).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSingleStorePtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSingleStore) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSingleStorePtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSingleStore) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSingleStorePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceSingleStore) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o ResourceSingleStorePtrOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSingleStore) *bool {
		if v == nil {
			return nil
		}
		return v.UseAzureSingleServerUsernames
	}).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o ResourceSingleStorePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSingleStore) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceSnowflake struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The Schema to use to direct initial requests.
	Schema *string `pulumi:"schema"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceSnowflakeInput is an input type that accepts ResourceSnowflakeArgs and ResourceSnowflakeOutput values.
// You can construct a concrete instance of `ResourceSnowflakeInput` via:
//
//	ResourceSnowflakeArgs{...}
type ResourceSnowflakeInput interface {
	pulumi.Input

	ToResourceSnowflakeOutput() ResourceSnowflakeOutput
	ToResourceSnowflakeOutputWithContext(context.Context) ResourceSnowflakeOutput
}

type ResourceSnowflakeArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The Schema to use to direct initial requests.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceSnowflakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSnowflake)(nil)).Elem()
}

func (i ResourceSnowflakeArgs) ToResourceSnowflakeOutput() ResourceSnowflakeOutput {
	return i.ToResourceSnowflakeOutputWithContext(context.Background())
}

func (i ResourceSnowflakeArgs) ToResourceSnowflakeOutputWithContext(ctx context.Context) ResourceSnowflakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSnowflakeOutput)
}

func (i ResourceSnowflakeArgs) ToResourceSnowflakePtrOutput() ResourceSnowflakePtrOutput {
	return i.ToResourceSnowflakePtrOutputWithContext(context.Background())
}

func (i ResourceSnowflakeArgs) ToResourceSnowflakePtrOutputWithContext(ctx context.Context) ResourceSnowflakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSnowflakeOutput).ToResourceSnowflakePtrOutputWithContext(ctx)
}

// ResourceSnowflakePtrInput is an input type that accepts ResourceSnowflakeArgs, ResourceSnowflakePtr and ResourceSnowflakePtrOutput values.
// You can construct a concrete instance of `ResourceSnowflakePtrInput` via:
//
//	        ResourceSnowflakeArgs{...}
//
//	or:
//
//	        nil
type ResourceSnowflakePtrInput interface {
	pulumi.Input

	ToResourceSnowflakePtrOutput() ResourceSnowflakePtrOutput
	ToResourceSnowflakePtrOutputWithContext(context.Context) ResourceSnowflakePtrOutput
}

type resourceSnowflakePtrType ResourceSnowflakeArgs

func ResourceSnowflakePtr(v *ResourceSnowflakeArgs) ResourceSnowflakePtrInput {
	return (*resourceSnowflakePtrType)(v)
}

func (*resourceSnowflakePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSnowflake)(nil)).Elem()
}

func (i *resourceSnowflakePtrType) ToResourceSnowflakePtrOutput() ResourceSnowflakePtrOutput {
	return i.ToResourceSnowflakePtrOutputWithContext(context.Background())
}

func (i *resourceSnowflakePtrType) ToResourceSnowflakePtrOutputWithContext(ctx context.Context) ResourceSnowflakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSnowflakePtrOutput)
}

type ResourceSnowflakeOutput struct{ *pulumi.OutputState }

func (ResourceSnowflakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSnowflake)(nil)).Elem()
}

func (o ResourceSnowflakeOutput) ToResourceSnowflakeOutput() ResourceSnowflakeOutput {
	return o
}

func (o ResourceSnowflakeOutput) ToResourceSnowflakeOutputWithContext(ctx context.Context) ResourceSnowflakeOutput {
	return o
}

func (o ResourceSnowflakeOutput) ToResourceSnowflakePtrOutput() ResourceSnowflakePtrOutput {
	return o.ToResourceSnowflakePtrOutputWithContext(context.Background())
}

func (o ResourceSnowflakeOutput) ToResourceSnowflakePtrOutputWithContext(ctx context.Context) ResourceSnowflakePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSnowflake) *ResourceSnowflake {
		return &v
	}).(ResourceSnowflakePtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSnowflakeOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSnowflake) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceSnowflakeOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSnowflake) string { return v.Database }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSnowflakeOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSnowflake) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSnowflakeOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSnowflake) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSnowflakeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSnowflake) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceSnowflakeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSnowflake) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSnowflakeOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSnowflake) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSnowflakeOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSnowflake) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The Schema to use to direct initial requests.
func (o ResourceSnowflakeOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSnowflake) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSnowflakeOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSnowflake) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSnowflakeOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSnowflake) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSnowflakeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceSnowflake) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSnowflakeOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSnowflake) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceSnowflakePtrOutput struct{ *pulumi.OutputState }

func (ResourceSnowflakePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSnowflake)(nil)).Elem()
}

func (o ResourceSnowflakePtrOutput) ToResourceSnowflakePtrOutput() ResourceSnowflakePtrOutput {
	return o
}

func (o ResourceSnowflakePtrOutput) ToResourceSnowflakePtrOutputWithContext(ctx context.Context) ResourceSnowflakePtrOutput {
	return o
}

func (o ResourceSnowflakePtrOutput) Elem() ResourceSnowflakeOutput {
	return o.ApplyT(func(v *ResourceSnowflake) ResourceSnowflake {
		if v != nil {
			return *v
		}
		var ret ResourceSnowflake
		return ret
	}).(ResourceSnowflakeOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSnowflakePtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceSnowflakePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSnowflakePtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSnowflakePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSnowflakePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceSnowflakePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSnowflakePtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSnowflake) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSnowflakePtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The Schema to use to direct initial requests.
func (o ResourceSnowflakePtrOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSnowflakePtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSnowflakePtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSnowflakePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceSnowflake) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSnowflakePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowflake) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceSnowsight struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The StrongDM user email to use for healthchecks.
	HealthcheckUsername string `pulumi:"healthcheckUsername"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The Metadata for your snowflake IDP integration
	SamlMetadata *string `pulumi:"samlMetadata"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// ResourceSnowsightInput is an input type that accepts ResourceSnowsightArgs and ResourceSnowsightOutput values.
// You can construct a concrete instance of `ResourceSnowsightInput` via:
//
//	ResourceSnowsightArgs{...}
type ResourceSnowsightInput interface {
	pulumi.Input

	ToResourceSnowsightOutput() ResourceSnowsightOutput
	ToResourceSnowsightOutputWithContext(context.Context) ResourceSnowsightOutput
}

type ResourceSnowsightArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The StrongDM user email to use for healthchecks.
	HealthcheckUsername pulumi.StringInput `pulumi:"healthcheckUsername"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The Metadata for your snowflake IDP integration
	SamlMetadata pulumi.StringPtrInput `pulumi:"samlMetadata"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (ResourceSnowsightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSnowsight)(nil)).Elem()
}

func (i ResourceSnowsightArgs) ToResourceSnowsightOutput() ResourceSnowsightOutput {
	return i.ToResourceSnowsightOutputWithContext(context.Background())
}

func (i ResourceSnowsightArgs) ToResourceSnowsightOutputWithContext(ctx context.Context) ResourceSnowsightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSnowsightOutput)
}

func (i ResourceSnowsightArgs) ToResourceSnowsightPtrOutput() ResourceSnowsightPtrOutput {
	return i.ToResourceSnowsightPtrOutputWithContext(context.Background())
}

func (i ResourceSnowsightArgs) ToResourceSnowsightPtrOutputWithContext(ctx context.Context) ResourceSnowsightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSnowsightOutput).ToResourceSnowsightPtrOutputWithContext(ctx)
}

// ResourceSnowsightPtrInput is an input type that accepts ResourceSnowsightArgs, ResourceSnowsightPtr and ResourceSnowsightPtrOutput values.
// You can construct a concrete instance of `ResourceSnowsightPtrInput` via:
//
//	        ResourceSnowsightArgs{...}
//
//	or:
//
//	        nil
type ResourceSnowsightPtrInput interface {
	pulumi.Input

	ToResourceSnowsightPtrOutput() ResourceSnowsightPtrOutput
	ToResourceSnowsightPtrOutputWithContext(context.Context) ResourceSnowsightPtrOutput
}

type resourceSnowsightPtrType ResourceSnowsightArgs

func ResourceSnowsightPtr(v *ResourceSnowsightArgs) ResourceSnowsightPtrInput {
	return (*resourceSnowsightPtrType)(v)
}

func (*resourceSnowsightPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSnowsight)(nil)).Elem()
}

func (i *resourceSnowsightPtrType) ToResourceSnowsightPtrOutput() ResourceSnowsightPtrOutput {
	return i.ToResourceSnowsightPtrOutputWithContext(context.Background())
}

func (i *resourceSnowsightPtrType) ToResourceSnowsightPtrOutputWithContext(ctx context.Context) ResourceSnowsightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSnowsightPtrOutput)
}

type ResourceSnowsightOutput struct{ *pulumi.OutputState }

func (ResourceSnowsightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSnowsight)(nil)).Elem()
}

func (o ResourceSnowsightOutput) ToResourceSnowsightOutput() ResourceSnowsightOutput {
	return o
}

func (o ResourceSnowsightOutput) ToResourceSnowsightOutputWithContext(ctx context.Context) ResourceSnowsightOutput {
	return o
}

func (o ResourceSnowsightOutput) ToResourceSnowsightPtrOutput() ResourceSnowsightPtrOutput {
	return o.ToResourceSnowsightPtrOutputWithContext(context.Background())
}

func (o ResourceSnowsightOutput) ToResourceSnowsightPtrOutputWithContext(ctx context.Context) ResourceSnowsightPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSnowsight) *ResourceSnowsight {
		return &v
	}).(ResourceSnowsightPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSnowsightOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSnowsight) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSnowsightOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSnowsight) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The StrongDM user email to use for healthchecks.
func (o ResourceSnowsightOutput) HealthcheckUsername() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSnowsight) string { return v.HealthcheckUsername }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSnowsightOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSnowsight) string { return v.Name }).(pulumi.StringOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSnowsightOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSnowsight) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSnowsightOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSnowsight) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The Metadata for your snowflake IDP integration
func (o ResourceSnowsightOutput) SamlMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSnowsight) *string { return v.SamlMetadata }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSnowsightOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSnowsight) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSnowsightOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSnowsight) string { return v.Subdomain }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSnowsightOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceSnowsight) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ResourceSnowsightPtrOutput struct{ *pulumi.OutputState }

func (ResourceSnowsightPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSnowsight)(nil)).Elem()
}

func (o ResourceSnowsightPtrOutput) ToResourceSnowsightPtrOutput() ResourceSnowsightPtrOutput {
	return o
}

func (o ResourceSnowsightPtrOutput) ToResourceSnowsightPtrOutputWithContext(ctx context.Context) ResourceSnowsightPtrOutput {
	return o
}

func (o ResourceSnowsightPtrOutput) Elem() ResourceSnowsightOutput {
	return o.ApplyT(func(v *ResourceSnowsight) ResourceSnowsight {
		if v != nil {
			return *v
		}
		var ret ResourceSnowsight
		return ret
	}).(ResourceSnowsightOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSnowsightPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowsight) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSnowsightPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowsight) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The StrongDM user email to use for healthchecks.
func (o ResourceSnowsightPtrOutput) HealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowsight) *string {
		if v == nil {
			return nil
		}
		return &v.HealthcheckUsername
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSnowsightPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowsight) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSnowsightPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSnowsight) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSnowsightPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowsight) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The Metadata for your snowflake IDP integration
func (o ResourceSnowsightPtrOutput) SamlMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowsight) *string {
		if v == nil {
			return nil
		}
		return v.SamlMetadata
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSnowsightPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowsight) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSnowsightPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSnowsight) *string {
		if v == nil {
			return nil
		}
		return &v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSnowsightPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceSnowsight) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type ResourceSqlServer struct {
	// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
	AllowDeprecatedEncryption *bool `pulumi:"allowDeprecatedEncryption"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The Schema to use to direct initial requests.
	Schema *string `pulumi:"schema"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceSqlServerInput is an input type that accepts ResourceSqlServerArgs and ResourceSqlServerOutput values.
// You can construct a concrete instance of `ResourceSqlServerInput` via:
//
//	ResourceSqlServerArgs{...}
type ResourceSqlServerInput interface {
	pulumi.Input

	ToResourceSqlServerOutput() ResourceSqlServerOutput
	ToResourceSqlServerOutputWithContext(context.Context) ResourceSqlServerOutput
}

type ResourceSqlServerArgs struct {
	// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
	AllowDeprecatedEncryption pulumi.BoolPtrInput `pulumi:"allowDeprecatedEncryption"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The Schema to use to direct initial requests.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceSqlServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSqlServer)(nil)).Elem()
}

func (i ResourceSqlServerArgs) ToResourceSqlServerOutput() ResourceSqlServerOutput {
	return i.ToResourceSqlServerOutputWithContext(context.Background())
}

func (i ResourceSqlServerArgs) ToResourceSqlServerOutputWithContext(ctx context.Context) ResourceSqlServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSqlServerOutput)
}

func (i ResourceSqlServerArgs) ToResourceSqlServerPtrOutput() ResourceSqlServerPtrOutput {
	return i.ToResourceSqlServerPtrOutputWithContext(context.Background())
}

func (i ResourceSqlServerArgs) ToResourceSqlServerPtrOutputWithContext(ctx context.Context) ResourceSqlServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSqlServerOutput).ToResourceSqlServerPtrOutputWithContext(ctx)
}

// ResourceSqlServerPtrInput is an input type that accepts ResourceSqlServerArgs, ResourceSqlServerPtr and ResourceSqlServerPtrOutput values.
// You can construct a concrete instance of `ResourceSqlServerPtrInput` via:
//
//	        ResourceSqlServerArgs{...}
//
//	or:
//
//	        nil
type ResourceSqlServerPtrInput interface {
	pulumi.Input

	ToResourceSqlServerPtrOutput() ResourceSqlServerPtrOutput
	ToResourceSqlServerPtrOutputWithContext(context.Context) ResourceSqlServerPtrOutput
}

type resourceSqlServerPtrType ResourceSqlServerArgs

func ResourceSqlServerPtr(v *ResourceSqlServerArgs) ResourceSqlServerPtrInput {
	return (*resourceSqlServerPtrType)(v)
}

func (*resourceSqlServerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSqlServer)(nil)).Elem()
}

func (i *resourceSqlServerPtrType) ToResourceSqlServerPtrOutput() ResourceSqlServerPtrOutput {
	return i.ToResourceSqlServerPtrOutputWithContext(context.Background())
}

func (i *resourceSqlServerPtrType) ToResourceSqlServerPtrOutputWithContext(ctx context.Context) ResourceSqlServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSqlServerPtrOutput)
}

type ResourceSqlServerOutput struct{ *pulumi.OutputState }

func (ResourceSqlServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSqlServer)(nil)).Elem()
}

func (o ResourceSqlServerOutput) ToResourceSqlServerOutput() ResourceSqlServerOutput {
	return o
}

func (o ResourceSqlServerOutput) ToResourceSqlServerOutputWithContext(ctx context.Context) ResourceSqlServerOutput {
	return o
}

func (o ResourceSqlServerOutput) ToResourceSqlServerPtrOutput() ResourceSqlServerPtrOutput {
	return o.ToResourceSqlServerPtrOutputWithContext(context.Background())
}

func (o ResourceSqlServerOutput) ToResourceSqlServerPtrOutputWithContext(ctx context.Context) ResourceSqlServerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSqlServer) *ResourceSqlServer {
		return &v
	}).(ResourceSqlServerPtrOutput)
}

// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
func (o ResourceSqlServerOutput) AllowDeprecatedEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceSqlServer) *bool { return v.AllowDeprecatedEncryption }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSqlServerOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServer) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceSqlServerOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServer) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSqlServerOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServer) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSqlServerOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSqlServer) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSqlServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSqlServer) string { return v.Name }).(pulumi.StringOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceSqlServerOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceSqlServer) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceSqlServerOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServer) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSqlServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSqlServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSqlServerOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSqlServer) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSqlServerOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServer) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The Schema to use to direct initial requests.
func (o ResourceSqlServerOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServer) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSqlServerOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServer) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSqlServerOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServer) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSqlServerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceSqlServer) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSqlServerOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServer) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceSqlServerPtrOutput struct{ *pulumi.OutputState }

func (ResourceSqlServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSqlServer)(nil)).Elem()
}

func (o ResourceSqlServerPtrOutput) ToResourceSqlServerPtrOutput() ResourceSqlServerPtrOutput {
	return o
}

func (o ResourceSqlServerPtrOutput) ToResourceSqlServerPtrOutputWithContext(ctx context.Context) ResourceSqlServerPtrOutput {
	return o
}

func (o ResourceSqlServerPtrOutput) Elem() ResourceSqlServerOutput {
	return o.ApplyT(func(v *ResourceSqlServer) ResourceSqlServer {
		if v != nil {
			return *v
		}
		var ret ResourceSqlServer
		return ret
	}).(ResourceSqlServerOutput)
}

// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
func (o ResourceSqlServerPtrOutput) AllowDeprecatedEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServer) *bool {
		if v == nil {
			return nil
		}
		return v.AllowDeprecatedEncryption
	}).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSqlServerPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServer) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceSqlServerPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServer) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSqlServerPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServer) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSqlServerPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServer) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSqlServerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServer) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceSqlServerPtrOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServer) *bool {
		if v == nil {
			return nil
		}
		return v.OverrideDatabase
	}).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o ResourceSqlServerPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServer) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSqlServerPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServer) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSqlServerPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServer) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSqlServerPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServer) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The Schema to use to direct initial requests.
func (o ResourceSqlServerPtrOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServer) *string {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSqlServerPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServer) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSqlServerPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServer) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSqlServerPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceSqlServer) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSqlServerPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServer) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceSqlServerAzureAd struct {
	// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
	AllowDeprecatedEncryption *bool `pulumi:"allowDeprecatedEncryption"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The Azure AD application (client) ID with which to authenticate.
	ClientId *string `pulumi:"clientId"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The Schema to use to direct initial requests.
	Schema *string `pulumi:"schema"`
	// The Azure AD client secret (application password) with which to authenticate.
	Secret *string `pulumi:"secret"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The Azure AD directory (tenant) ID with which to authenticate.
	// * sql_server_kerberos_ad:
	TenantId *string `pulumi:"tenantId"`
}

// ResourceSqlServerAzureAdInput is an input type that accepts ResourceSqlServerAzureAdArgs and ResourceSqlServerAzureAdOutput values.
// You can construct a concrete instance of `ResourceSqlServerAzureAdInput` via:
//
//	ResourceSqlServerAzureAdArgs{...}
type ResourceSqlServerAzureAdInput interface {
	pulumi.Input

	ToResourceSqlServerAzureAdOutput() ResourceSqlServerAzureAdOutput
	ToResourceSqlServerAzureAdOutputWithContext(context.Context) ResourceSqlServerAzureAdOutput
}

type ResourceSqlServerAzureAdArgs struct {
	// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
	AllowDeprecatedEncryption pulumi.BoolPtrInput `pulumi:"allowDeprecatedEncryption"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The Azure AD application (client) ID with which to authenticate.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The Schema to use to direct initial requests.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// The Azure AD client secret (application password) with which to authenticate.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The Azure AD directory (tenant) ID with which to authenticate.
	// * sql_server_kerberos_ad:
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (ResourceSqlServerAzureAdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSqlServerAzureAd)(nil)).Elem()
}

func (i ResourceSqlServerAzureAdArgs) ToResourceSqlServerAzureAdOutput() ResourceSqlServerAzureAdOutput {
	return i.ToResourceSqlServerAzureAdOutputWithContext(context.Background())
}

func (i ResourceSqlServerAzureAdArgs) ToResourceSqlServerAzureAdOutputWithContext(ctx context.Context) ResourceSqlServerAzureAdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSqlServerAzureAdOutput)
}

func (i ResourceSqlServerAzureAdArgs) ToResourceSqlServerAzureAdPtrOutput() ResourceSqlServerAzureAdPtrOutput {
	return i.ToResourceSqlServerAzureAdPtrOutputWithContext(context.Background())
}

func (i ResourceSqlServerAzureAdArgs) ToResourceSqlServerAzureAdPtrOutputWithContext(ctx context.Context) ResourceSqlServerAzureAdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSqlServerAzureAdOutput).ToResourceSqlServerAzureAdPtrOutputWithContext(ctx)
}

// ResourceSqlServerAzureAdPtrInput is an input type that accepts ResourceSqlServerAzureAdArgs, ResourceSqlServerAzureAdPtr and ResourceSqlServerAzureAdPtrOutput values.
// You can construct a concrete instance of `ResourceSqlServerAzureAdPtrInput` via:
//
//	        ResourceSqlServerAzureAdArgs{...}
//
//	or:
//
//	        nil
type ResourceSqlServerAzureAdPtrInput interface {
	pulumi.Input

	ToResourceSqlServerAzureAdPtrOutput() ResourceSqlServerAzureAdPtrOutput
	ToResourceSqlServerAzureAdPtrOutputWithContext(context.Context) ResourceSqlServerAzureAdPtrOutput
}

type resourceSqlServerAzureAdPtrType ResourceSqlServerAzureAdArgs

func ResourceSqlServerAzureAdPtr(v *ResourceSqlServerAzureAdArgs) ResourceSqlServerAzureAdPtrInput {
	return (*resourceSqlServerAzureAdPtrType)(v)
}

func (*resourceSqlServerAzureAdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSqlServerAzureAd)(nil)).Elem()
}

func (i *resourceSqlServerAzureAdPtrType) ToResourceSqlServerAzureAdPtrOutput() ResourceSqlServerAzureAdPtrOutput {
	return i.ToResourceSqlServerAzureAdPtrOutputWithContext(context.Background())
}

func (i *resourceSqlServerAzureAdPtrType) ToResourceSqlServerAzureAdPtrOutputWithContext(ctx context.Context) ResourceSqlServerAzureAdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSqlServerAzureAdPtrOutput)
}

type ResourceSqlServerAzureAdOutput struct{ *pulumi.OutputState }

func (ResourceSqlServerAzureAdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSqlServerAzureAd)(nil)).Elem()
}

func (o ResourceSqlServerAzureAdOutput) ToResourceSqlServerAzureAdOutput() ResourceSqlServerAzureAdOutput {
	return o
}

func (o ResourceSqlServerAzureAdOutput) ToResourceSqlServerAzureAdOutputWithContext(ctx context.Context) ResourceSqlServerAzureAdOutput {
	return o
}

func (o ResourceSqlServerAzureAdOutput) ToResourceSqlServerAzureAdPtrOutput() ResourceSqlServerAzureAdPtrOutput {
	return o.ToResourceSqlServerAzureAdPtrOutputWithContext(context.Background())
}

func (o ResourceSqlServerAzureAdOutput) ToResourceSqlServerAzureAdPtrOutputWithContext(ctx context.Context) ResourceSqlServerAzureAdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSqlServerAzureAd) *ResourceSqlServerAzureAd {
		return &v
	}).(ResourceSqlServerAzureAdPtrOutput)
}

// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
func (o ResourceSqlServerAzureAdOutput) AllowDeprecatedEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerAzureAd) *bool { return v.AllowDeprecatedEncryption }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSqlServerAzureAdOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerAzureAd) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The Azure AD application (client) ID with which to authenticate.
func (o ResourceSqlServerAzureAdOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerAzureAd) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceSqlServerAzureAdOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerAzureAd) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSqlServerAzureAdOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerAzureAd) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSqlServerAzureAdOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSqlServerAzureAd) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSqlServerAzureAdOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSqlServerAzureAd) string { return v.Name }).(pulumi.StringOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceSqlServerAzureAdOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerAzureAd) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSqlServerAzureAdOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerAzureAd) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSqlServerAzureAdOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerAzureAd) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSqlServerAzureAdOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerAzureAd) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The Schema to use to direct initial requests.
func (o ResourceSqlServerAzureAdOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerAzureAd) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// The Azure AD client secret (application password) with which to authenticate.
func (o ResourceSqlServerAzureAdOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerAzureAd) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSqlServerAzureAdOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerAzureAd) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSqlServerAzureAdOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerAzureAd) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSqlServerAzureAdOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceSqlServerAzureAd) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The Azure AD directory (tenant) ID with which to authenticate.
// * sql_server_kerberos_ad:
func (o ResourceSqlServerAzureAdOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerAzureAd) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type ResourceSqlServerAzureAdPtrOutput struct{ *pulumi.OutputState }

func (ResourceSqlServerAzureAdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSqlServerAzureAd)(nil)).Elem()
}

func (o ResourceSqlServerAzureAdPtrOutput) ToResourceSqlServerAzureAdPtrOutput() ResourceSqlServerAzureAdPtrOutput {
	return o
}

func (o ResourceSqlServerAzureAdPtrOutput) ToResourceSqlServerAzureAdPtrOutputWithContext(ctx context.Context) ResourceSqlServerAzureAdPtrOutput {
	return o
}

func (o ResourceSqlServerAzureAdPtrOutput) Elem() ResourceSqlServerAzureAdOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) ResourceSqlServerAzureAd {
		if v != nil {
			return *v
		}
		var ret ResourceSqlServerAzureAd
		return ret
	}).(ResourceSqlServerAzureAdOutput)
}

// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
func (o ResourceSqlServerAzureAdPtrOutput) AllowDeprecatedEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) *bool {
		if v == nil {
			return nil
		}
		return v.AllowDeprecatedEncryption
	}).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSqlServerAzureAdPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The Azure AD application (client) ID with which to authenticate.
func (o ResourceSqlServerAzureAdPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceSqlServerAzureAdPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSqlServerAzureAdPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSqlServerAzureAdPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSqlServerAzureAdPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceSqlServerAzureAdPtrOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) *bool {
		if v == nil {
			return nil
		}
		return v.OverrideDatabase
	}).(pulumi.BoolPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSqlServerAzureAdPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSqlServerAzureAdPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSqlServerAzureAdPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The Schema to use to direct initial requests.
func (o ResourceSqlServerAzureAdPtrOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) *string {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(pulumi.StringPtrOutput)
}

// The Azure AD client secret (application password) with which to authenticate.
func (o ResourceSqlServerAzureAdPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSqlServerAzureAdPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSqlServerAzureAdPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSqlServerAzureAdPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The Azure AD directory (tenant) ID with which to authenticate.
// * sql_server_kerberos_ad:
func (o ResourceSqlServerAzureAdPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerAzureAd) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

type ResourceSqlServerKerberosAd struct {
	// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
	AllowDeprecatedEncryption *bool `pulumi:"allowDeprecatedEncryption"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// The keytab file in base64 format containing an entry with the principal name (username@realm) and key version number with which to authenticate.
	Keytab *string `pulumi:"keytab"`
	// The Kerberos 5 configuration file (krb5.conf) specifying the Active Directory server (KDC) for the configured realm.
	KrbConfig *string `pulumi:"krbConfig"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The Active Directory domain (realm) to which the configured username belongs.
	Realm *string `pulumi:"realm"`
	// The Schema to use to direct initial requests.
	Schema *string `pulumi:"schema"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// The Service Principal Name of the Microsoft SQL Server instance in Active Directory.
	ServerSpn *string `pulumi:"serverSpn"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceSqlServerKerberosAdInput is an input type that accepts ResourceSqlServerKerberosAdArgs and ResourceSqlServerKerberosAdOutput values.
// You can construct a concrete instance of `ResourceSqlServerKerberosAdInput` via:
//
//	ResourceSqlServerKerberosAdArgs{...}
type ResourceSqlServerKerberosAdInput interface {
	pulumi.Input

	ToResourceSqlServerKerberosAdOutput() ResourceSqlServerKerberosAdOutput
	ToResourceSqlServerKerberosAdOutputWithContext(context.Context) ResourceSqlServerKerberosAdOutput
}

type ResourceSqlServerKerberosAdArgs struct {
	// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
	AllowDeprecatedEncryption pulumi.BoolPtrInput `pulumi:"allowDeprecatedEncryption"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The keytab file in base64 format containing an entry with the principal name (username@realm) and key version number with which to authenticate.
	Keytab pulumi.StringPtrInput `pulumi:"keytab"`
	// The Kerberos 5 configuration file (krb5.conf) specifying the Active Directory server (KDC) for the configured realm.
	KrbConfig pulumi.StringPtrInput `pulumi:"krbConfig"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The Active Directory domain (realm) to which the configured username belongs.
	Realm pulumi.StringPtrInput `pulumi:"realm"`
	// The Schema to use to direct initial requests.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// The Service Principal Name of the Microsoft SQL Server instance in Active Directory.
	ServerSpn pulumi.StringPtrInput `pulumi:"serverSpn"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceSqlServerKerberosAdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSqlServerKerberosAd)(nil)).Elem()
}

func (i ResourceSqlServerKerberosAdArgs) ToResourceSqlServerKerberosAdOutput() ResourceSqlServerKerberosAdOutput {
	return i.ToResourceSqlServerKerberosAdOutputWithContext(context.Background())
}

func (i ResourceSqlServerKerberosAdArgs) ToResourceSqlServerKerberosAdOutputWithContext(ctx context.Context) ResourceSqlServerKerberosAdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSqlServerKerberosAdOutput)
}

func (i ResourceSqlServerKerberosAdArgs) ToResourceSqlServerKerberosAdPtrOutput() ResourceSqlServerKerberosAdPtrOutput {
	return i.ToResourceSqlServerKerberosAdPtrOutputWithContext(context.Background())
}

func (i ResourceSqlServerKerberosAdArgs) ToResourceSqlServerKerberosAdPtrOutputWithContext(ctx context.Context) ResourceSqlServerKerberosAdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSqlServerKerberosAdOutput).ToResourceSqlServerKerberosAdPtrOutputWithContext(ctx)
}

// ResourceSqlServerKerberosAdPtrInput is an input type that accepts ResourceSqlServerKerberosAdArgs, ResourceSqlServerKerberosAdPtr and ResourceSqlServerKerberosAdPtrOutput values.
// You can construct a concrete instance of `ResourceSqlServerKerberosAdPtrInput` via:
//
//	        ResourceSqlServerKerberosAdArgs{...}
//
//	or:
//
//	        nil
type ResourceSqlServerKerberosAdPtrInput interface {
	pulumi.Input

	ToResourceSqlServerKerberosAdPtrOutput() ResourceSqlServerKerberosAdPtrOutput
	ToResourceSqlServerKerberosAdPtrOutputWithContext(context.Context) ResourceSqlServerKerberosAdPtrOutput
}

type resourceSqlServerKerberosAdPtrType ResourceSqlServerKerberosAdArgs

func ResourceSqlServerKerberosAdPtr(v *ResourceSqlServerKerberosAdArgs) ResourceSqlServerKerberosAdPtrInput {
	return (*resourceSqlServerKerberosAdPtrType)(v)
}

func (*resourceSqlServerKerberosAdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSqlServerKerberosAd)(nil)).Elem()
}

func (i *resourceSqlServerKerberosAdPtrType) ToResourceSqlServerKerberosAdPtrOutput() ResourceSqlServerKerberosAdPtrOutput {
	return i.ToResourceSqlServerKerberosAdPtrOutputWithContext(context.Background())
}

func (i *resourceSqlServerKerberosAdPtrType) ToResourceSqlServerKerberosAdPtrOutputWithContext(ctx context.Context) ResourceSqlServerKerberosAdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSqlServerKerberosAdPtrOutput)
}

type ResourceSqlServerKerberosAdOutput struct{ *pulumi.OutputState }

func (ResourceSqlServerKerberosAdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSqlServerKerberosAd)(nil)).Elem()
}

func (o ResourceSqlServerKerberosAdOutput) ToResourceSqlServerKerberosAdOutput() ResourceSqlServerKerberosAdOutput {
	return o
}

func (o ResourceSqlServerKerberosAdOutput) ToResourceSqlServerKerberosAdOutputWithContext(ctx context.Context) ResourceSqlServerKerberosAdOutput {
	return o
}

func (o ResourceSqlServerKerberosAdOutput) ToResourceSqlServerKerberosAdPtrOutput() ResourceSqlServerKerberosAdPtrOutput {
	return o.ToResourceSqlServerKerberosAdPtrOutputWithContext(context.Background())
}

func (o ResourceSqlServerKerberosAdOutput) ToResourceSqlServerKerberosAdPtrOutputWithContext(ctx context.Context) ResourceSqlServerKerberosAdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSqlServerKerberosAd) *ResourceSqlServerKerberosAd {
		return &v
	}).(ResourceSqlServerKerberosAdPtrOutput)
}

// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
func (o ResourceSqlServerKerberosAdOutput) AllowDeprecatedEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) *bool { return v.AllowDeprecatedEncryption }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSqlServerKerberosAdOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceSqlServerKerberosAdOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSqlServerKerberosAdOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSqlServerKerberosAdOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) string { return v.Hostname }).(pulumi.StringOutput)
}

// The keytab file in base64 format containing an entry with the principal name (username@realm) and key version number with which to authenticate.
func (o ResourceSqlServerKerberosAdOutput) Keytab() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) *string { return v.Keytab }).(pulumi.StringPtrOutput)
}

// The Kerberos 5 configuration file (krb5.conf) specifying the Active Directory server (KDC) for the configured realm.
func (o ResourceSqlServerKerberosAdOutput) KrbConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) *string { return v.KrbConfig }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSqlServerKerberosAdOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) string { return v.Name }).(pulumi.StringOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceSqlServerKerberosAdOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSqlServerKerberosAdOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSqlServerKerberosAdOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSqlServerKerberosAdOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The Active Directory domain (realm) to which the configured username belongs.
func (o ResourceSqlServerKerberosAdOutput) Realm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) *string { return v.Realm }).(pulumi.StringPtrOutput)
}

// The Schema to use to direct initial requests.
func (o ResourceSqlServerKerberosAdOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSqlServerKerberosAdOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// The Service Principal Name of the Microsoft SQL Server instance in Active Directory.
func (o ResourceSqlServerKerberosAdOutput) ServerSpn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) *string { return v.ServerSpn }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSqlServerKerberosAdOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSqlServerKerberosAdOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSqlServerKerberosAdOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSqlServerKerberosAd) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceSqlServerKerberosAdPtrOutput struct{ *pulumi.OutputState }

func (ResourceSqlServerKerberosAdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSqlServerKerberosAd)(nil)).Elem()
}

func (o ResourceSqlServerKerberosAdPtrOutput) ToResourceSqlServerKerberosAdPtrOutput() ResourceSqlServerKerberosAdPtrOutput {
	return o
}

func (o ResourceSqlServerKerberosAdPtrOutput) ToResourceSqlServerKerberosAdPtrOutputWithContext(ctx context.Context) ResourceSqlServerKerberosAdPtrOutput {
	return o
}

func (o ResourceSqlServerKerberosAdPtrOutput) Elem() ResourceSqlServerKerberosAdOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) ResourceSqlServerKerberosAd {
		if v != nil {
			return *v
		}
		var ret ResourceSqlServerKerberosAd
		return ret
	}).(ResourceSqlServerKerberosAdOutput)
}

// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
func (o ResourceSqlServerKerberosAdPtrOutput) AllowDeprecatedEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *bool {
		if v == nil {
			return nil
		}
		return v.AllowDeprecatedEncryption
	}).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSqlServerKerberosAdPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceSqlServerKerberosAdPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSqlServerKerberosAdPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSqlServerKerberosAdPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The keytab file in base64 format containing an entry with the principal name (username@realm) and key version number with which to authenticate.
func (o ResourceSqlServerKerberosAdPtrOutput) Keytab() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *string {
		if v == nil {
			return nil
		}
		return v.Keytab
	}).(pulumi.StringPtrOutput)
}

// The Kerberos 5 configuration file (krb5.conf) specifying the Active Directory server (KDC) for the configured realm.
func (o ResourceSqlServerKerberosAdPtrOutput) KrbConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *string {
		if v == nil {
			return nil
		}
		return v.KrbConfig
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSqlServerKerberosAdPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o ResourceSqlServerKerberosAdPtrOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *bool {
		if v == nil {
			return nil
		}
		return v.OverrideDatabase
	}).(pulumi.BoolPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSqlServerKerberosAdPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSqlServerKerberosAdPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSqlServerKerberosAdPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The Active Directory domain (realm) to which the configured username belongs.
func (o ResourceSqlServerKerberosAdPtrOutput) Realm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *string {
		if v == nil {
			return nil
		}
		return v.Realm
	}).(pulumi.StringPtrOutput)
}

// The Schema to use to direct initial requests.
func (o ResourceSqlServerKerberosAdPtrOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *string {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSqlServerKerberosAdPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// The Service Principal Name of the Microsoft SQL Server instance in Active Directory.
func (o ResourceSqlServerKerberosAdPtrOutput) ServerSpn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *string {
		if v == nil {
			return nil
		}
		return v.ServerSpn
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSqlServerKerberosAdPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSqlServerKerberosAdPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSqlServerKerberosAdPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSqlServerKerberosAd) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceSsh struct {
	// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
	AllowDeprecatedKeyExchanges *bool `pulumi:"allowDeprecatedKeyExchanges"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// The key type to use e.g. rsa-2048 or ed25519
	KeyType *string `pulumi:"keyType"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port int `pulumi:"port"`
	// Whether port forwarding is allowed through this server.
	PortForwarding *bool `pulumi:"portForwarding"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The public key to append to a server's authorized keys. This will be generated after resource creation.
	PublicKey *string `pulumi:"publicKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceSshInput is an input type that accepts ResourceSshArgs and ResourceSshOutput values.
// You can construct a concrete instance of `ResourceSshInput` via:
//
//	ResourceSshArgs{...}
type ResourceSshInput interface {
	pulumi.Input

	ToResourceSshOutput() ResourceSshOutput
	ToResourceSshOutputWithContext(context.Context) ResourceSshOutput
}

type ResourceSshArgs struct {
	// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
	AllowDeprecatedKeyExchanges pulumi.BoolPtrInput `pulumi:"allowDeprecatedKeyExchanges"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The key type to use e.g. rsa-2048 or ed25519
	KeyType pulumi.StringPtrInput `pulumi:"keyType"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntInput `pulumi:"port"`
	// Whether port forwarding is allowed through this server.
	PortForwarding pulumi.BoolPtrInput `pulumi:"portForwarding"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The public key to append to a server's authorized keys. This will be generated after resource creation.
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSsh)(nil)).Elem()
}

func (i ResourceSshArgs) ToResourceSshOutput() ResourceSshOutput {
	return i.ToResourceSshOutputWithContext(context.Background())
}

func (i ResourceSshArgs) ToResourceSshOutputWithContext(ctx context.Context) ResourceSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSshOutput)
}

func (i ResourceSshArgs) ToResourceSshPtrOutput() ResourceSshPtrOutput {
	return i.ToResourceSshPtrOutputWithContext(context.Background())
}

func (i ResourceSshArgs) ToResourceSshPtrOutputWithContext(ctx context.Context) ResourceSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSshOutput).ToResourceSshPtrOutputWithContext(ctx)
}

// ResourceSshPtrInput is an input type that accepts ResourceSshArgs, ResourceSshPtr and ResourceSshPtrOutput values.
// You can construct a concrete instance of `ResourceSshPtrInput` via:
//
//	        ResourceSshArgs{...}
//
//	or:
//
//	        nil
type ResourceSshPtrInput interface {
	pulumi.Input

	ToResourceSshPtrOutput() ResourceSshPtrOutput
	ToResourceSshPtrOutputWithContext(context.Context) ResourceSshPtrOutput
}

type resourceSshPtrType ResourceSshArgs

func ResourceSshPtr(v *ResourceSshArgs) ResourceSshPtrInput {
	return (*resourceSshPtrType)(v)
}

func (*resourceSshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSsh)(nil)).Elem()
}

func (i *resourceSshPtrType) ToResourceSshPtrOutput() ResourceSshPtrOutput {
	return i.ToResourceSshPtrOutputWithContext(context.Background())
}

func (i *resourceSshPtrType) ToResourceSshPtrOutputWithContext(ctx context.Context) ResourceSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSshPtrOutput)
}

type ResourceSshOutput struct{ *pulumi.OutputState }

func (ResourceSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSsh)(nil)).Elem()
}

func (o ResourceSshOutput) ToResourceSshOutput() ResourceSshOutput {
	return o
}

func (o ResourceSshOutput) ToResourceSshOutputWithContext(ctx context.Context) ResourceSshOutput {
	return o
}

func (o ResourceSshOutput) ToResourceSshPtrOutput() ResourceSshPtrOutput {
	return o.ToResourceSshPtrOutputWithContext(context.Background())
}

func (o ResourceSshOutput) ToResourceSshPtrOutputWithContext(ctx context.Context) ResourceSshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSsh) *ResourceSsh {
		return &v
	}).(ResourceSshPtrOutput)
}

// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
func (o ResourceSshOutput) AllowDeprecatedKeyExchanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceSsh) *bool { return v.AllowDeprecatedKeyExchanges }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSshOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSsh) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSshOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSsh) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSshOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSsh) string { return v.Hostname }).(pulumi.StringOutput)
}

// The key type to use e.g. rsa-2048 or ed25519
func (o ResourceSshOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSsh) *string { return v.KeyType }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSshOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSsh) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSshOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceSsh) int { return v.Port }).(pulumi.IntOutput)
}

// Whether port forwarding is allowed through this server.
func (o ResourceSshOutput) PortForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceSsh) *bool { return v.PortForwarding }).(pulumi.BoolPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSshOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSsh) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSshOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSsh) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The public key to append to a server's authorized keys. This will be generated after resource creation.
func (o ResourceSshOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSsh) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSshOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSsh) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSshOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSsh) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSshOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceSsh) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSshOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSsh) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceSshPtrOutput struct{ *pulumi.OutputState }

func (ResourceSshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSsh)(nil)).Elem()
}

func (o ResourceSshPtrOutput) ToResourceSshPtrOutput() ResourceSshPtrOutput {
	return o
}

func (o ResourceSshPtrOutput) ToResourceSshPtrOutputWithContext(ctx context.Context) ResourceSshPtrOutput {
	return o
}

func (o ResourceSshPtrOutput) Elem() ResourceSshOutput {
	return o.ApplyT(func(v *ResourceSsh) ResourceSsh {
		if v != nil {
			return *v
		}
		var ret ResourceSsh
		return ret
	}).(ResourceSshOutput)
}

// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
func (o ResourceSshPtrOutput) AllowDeprecatedKeyExchanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSsh) *bool {
		if v == nil {
			return nil
		}
		return v.AllowDeprecatedKeyExchanges
	}).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSshPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSsh) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSshPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSsh) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSshPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSsh) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The key type to use e.g. rsa-2048 or ed25519
func (o ResourceSshPtrOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSsh) *string {
		if v == nil {
			return nil
		}
		return v.KeyType
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSshPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSsh) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSshPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSsh) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Whether port forwarding is allowed through this server.
func (o ResourceSshPtrOutput) PortForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSsh) *bool {
		if v == nil {
			return nil
		}
		return v.PortForwarding
	}).(pulumi.BoolPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSshPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSsh) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSshPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSsh) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// The public key to append to a server's authorized keys. This will be generated after resource creation.
func (o ResourceSshPtrOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSsh) *string {
		if v == nil {
			return nil
		}
		return v.PublicKey
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSshPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSsh) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSshPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSsh) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSshPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceSsh) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSshPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSsh) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceSshCert struct {
	// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
	AllowDeprecatedKeyExchanges *bool `pulumi:"allowDeprecatedKeyExchanges"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// The key type to use e.g. rsa-2048 or ed25519
	KeyType *string `pulumi:"keyType"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port int `pulumi:"port"`
	// Whether port forwarding is allowed through this server.
	PortForwarding *bool `pulumi:"portForwarding"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceSshCertInput is an input type that accepts ResourceSshCertArgs and ResourceSshCertOutput values.
// You can construct a concrete instance of `ResourceSshCertInput` via:
//
//	ResourceSshCertArgs{...}
type ResourceSshCertInput interface {
	pulumi.Input

	ToResourceSshCertOutput() ResourceSshCertOutput
	ToResourceSshCertOutputWithContext(context.Context) ResourceSshCertOutput
}

type ResourceSshCertArgs struct {
	// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
	AllowDeprecatedKeyExchanges pulumi.BoolPtrInput `pulumi:"allowDeprecatedKeyExchanges"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// The key type to use e.g. rsa-2048 or ed25519
	KeyType pulumi.StringPtrInput `pulumi:"keyType"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntInput `pulumi:"port"`
	// Whether port forwarding is allowed through this server.
	PortForwarding pulumi.BoolPtrInput `pulumi:"portForwarding"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceSshCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSshCert)(nil)).Elem()
}

func (i ResourceSshCertArgs) ToResourceSshCertOutput() ResourceSshCertOutput {
	return i.ToResourceSshCertOutputWithContext(context.Background())
}

func (i ResourceSshCertArgs) ToResourceSshCertOutputWithContext(ctx context.Context) ResourceSshCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSshCertOutput)
}

func (i ResourceSshCertArgs) ToResourceSshCertPtrOutput() ResourceSshCertPtrOutput {
	return i.ToResourceSshCertPtrOutputWithContext(context.Background())
}

func (i ResourceSshCertArgs) ToResourceSshCertPtrOutputWithContext(ctx context.Context) ResourceSshCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSshCertOutput).ToResourceSshCertPtrOutputWithContext(ctx)
}

// ResourceSshCertPtrInput is an input type that accepts ResourceSshCertArgs, ResourceSshCertPtr and ResourceSshCertPtrOutput values.
// You can construct a concrete instance of `ResourceSshCertPtrInput` via:
//
//	        ResourceSshCertArgs{...}
//
//	or:
//
//	        nil
type ResourceSshCertPtrInput interface {
	pulumi.Input

	ToResourceSshCertPtrOutput() ResourceSshCertPtrOutput
	ToResourceSshCertPtrOutputWithContext(context.Context) ResourceSshCertPtrOutput
}

type resourceSshCertPtrType ResourceSshCertArgs

func ResourceSshCertPtr(v *ResourceSshCertArgs) ResourceSshCertPtrInput {
	return (*resourceSshCertPtrType)(v)
}

func (*resourceSshCertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSshCert)(nil)).Elem()
}

func (i *resourceSshCertPtrType) ToResourceSshCertPtrOutput() ResourceSshCertPtrOutput {
	return i.ToResourceSshCertPtrOutputWithContext(context.Background())
}

func (i *resourceSshCertPtrType) ToResourceSshCertPtrOutputWithContext(ctx context.Context) ResourceSshCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSshCertPtrOutput)
}

type ResourceSshCertOutput struct{ *pulumi.OutputState }

func (ResourceSshCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSshCert)(nil)).Elem()
}

func (o ResourceSshCertOutput) ToResourceSshCertOutput() ResourceSshCertOutput {
	return o
}

func (o ResourceSshCertOutput) ToResourceSshCertOutputWithContext(ctx context.Context) ResourceSshCertOutput {
	return o
}

func (o ResourceSshCertOutput) ToResourceSshCertPtrOutput() ResourceSshCertPtrOutput {
	return o.ToResourceSshCertPtrOutputWithContext(context.Background())
}

func (o ResourceSshCertOutput) ToResourceSshCertPtrOutputWithContext(ctx context.Context) ResourceSshCertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSshCert) *ResourceSshCert {
		return &v
	}).(ResourceSshCertPtrOutput)
}

// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
func (o ResourceSshCertOutput) AllowDeprecatedKeyExchanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceSshCert) *bool { return v.AllowDeprecatedKeyExchanges }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSshCertOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshCert) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSshCertOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshCert) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSshCertOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSshCert) string { return v.Hostname }).(pulumi.StringOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceSshCertOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshCert) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceSshCertOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshCert) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// The key type to use e.g. rsa-2048 or ed25519
func (o ResourceSshCertOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshCert) *string { return v.KeyType }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSshCertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSshCert) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSshCertOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceSshCert) int { return v.Port }).(pulumi.IntOutput)
}

// Whether port forwarding is allowed through this server.
func (o ResourceSshCertOutput) PortForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceSshCert) *bool { return v.PortForwarding }).(pulumi.BoolPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSshCertOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSshCert) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSshCertOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshCert) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSshCertOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshCert) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSshCertOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshCert) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSshCertOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceSshCert) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSshCertOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshCert) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceSshCertPtrOutput struct{ *pulumi.OutputState }

func (ResourceSshCertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSshCert)(nil)).Elem()
}

func (o ResourceSshCertPtrOutput) ToResourceSshCertPtrOutput() ResourceSshCertPtrOutput {
	return o
}

func (o ResourceSshCertPtrOutput) ToResourceSshCertPtrOutputWithContext(ctx context.Context) ResourceSshCertPtrOutput {
	return o
}

func (o ResourceSshCertPtrOutput) Elem() ResourceSshCertOutput {
	return o.ApplyT(func(v *ResourceSshCert) ResourceSshCert {
		if v != nil {
			return *v
		}
		var ret ResourceSshCert
		return ret
	}).(ResourceSshCertOutput)
}

// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
func (o ResourceSshCertPtrOutput) AllowDeprecatedKeyExchanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSshCert) *bool {
		if v == nil {
			return nil
		}
		return v.AllowDeprecatedKeyExchanges
	}).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSshCertPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCert) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSshCertPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCert) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSshCertPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCert) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o ResourceSshCertPtrOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCert) *string {
		if v == nil {
			return nil
		}
		return v.IdentityAliasHealthcheckUsername
	}).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o ResourceSshCertPtrOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCert) *string {
		if v == nil {
			return nil
		}
		return v.IdentitySetId
	}).(pulumi.StringPtrOutput)
}

// The key type to use e.g. rsa-2048 or ed25519
func (o ResourceSshCertPtrOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCert) *string {
		if v == nil {
			return nil
		}
		return v.KeyType
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSshCertPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCert) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSshCertPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSshCert) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Whether port forwarding is allowed through this server.
func (o ResourceSshCertPtrOutput) PortForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSshCert) *bool {
		if v == nil {
			return nil
		}
		return v.PortForwarding
	}).(pulumi.BoolPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSshCertPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSshCert) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSshCertPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCert) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSshCertPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCert) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSshCertPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCert) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSshCertPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceSshCert) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSshCertPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCert) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceSshCustomerKey struct {
	// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
	AllowDeprecatedKeyExchanges *bool `pulumi:"allowDeprecatedKeyExchanges"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port int `pulumi:"port"`
	// Whether port forwarding is allowed through this server.
	PortForwarding *bool `pulumi:"portForwarding"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// The private key used to authenticate with the server.
	PrivateKey *string `pulumi:"privateKey"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceSshCustomerKeyInput is an input type that accepts ResourceSshCustomerKeyArgs and ResourceSshCustomerKeyOutput values.
// You can construct a concrete instance of `ResourceSshCustomerKeyInput` via:
//
//	ResourceSshCustomerKeyArgs{...}
type ResourceSshCustomerKeyInput interface {
	pulumi.Input

	ToResourceSshCustomerKeyOutput() ResourceSshCustomerKeyOutput
	ToResourceSshCustomerKeyOutputWithContext(context.Context) ResourceSshCustomerKeyOutput
}

type ResourceSshCustomerKeyArgs struct {
	// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
	AllowDeprecatedKeyExchanges pulumi.BoolPtrInput `pulumi:"allowDeprecatedKeyExchanges"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntInput `pulumi:"port"`
	// Whether port forwarding is allowed through this server.
	PortForwarding pulumi.BoolPtrInput `pulumi:"portForwarding"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// The private key used to authenticate with the server.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceSshCustomerKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSshCustomerKey)(nil)).Elem()
}

func (i ResourceSshCustomerKeyArgs) ToResourceSshCustomerKeyOutput() ResourceSshCustomerKeyOutput {
	return i.ToResourceSshCustomerKeyOutputWithContext(context.Background())
}

func (i ResourceSshCustomerKeyArgs) ToResourceSshCustomerKeyOutputWithContext(ctx context.Context) ResourceSshCustomerKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSshCustomerKeyOutput)
}

func (i ResourceSshCustomerKeyArgs) ToResourceSshCustomerKeyPtrOutput() ResourceSshCustomerKeyPtrOutput {
	return i.ToResourceSshCustomerKeyPtrOutputWithContext(context.Background())
}

func (i ResourceSshCustomerKeyArgs) ToResourceSshCustomerKeyPtrOutputWithContext(ctx context.Context) ResourceSshCustomerKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSshCustomerKeyOutput).ToResourceSshCustomerKeyPtrOutputWithContext(ctx)
}

// ResourceSshCustomerKeyPtrInput is an input type that accepts ResourceSshCustomerKeyArgs, ResourceSshCustomerKeyPtr and ResourceSshCustomerKeyPtrOutput values.
// You can construct a concrete instance of `ResourceSshCustomerKeyPtrInput` via:
//
//	        ResourceSshCustomerKeyArgs{...}
//
//	or:
//
//	        nil
type ResourceSshCustomerKeyPtrInput interface {
	pulumi.Input

	ToResourceSshCustomerKeyPtrOutput() ResourceSshCustomerKeyPtrOutput
	ToResourceSshCustomerKeyPtrOutputWithContext(context.Context) ResourceSshCustomerKeyPtrOutput
}

type resourceSshCustomerKeyPtrType ResourceSshCustomerKeyArgs

func ResourceSshCustomerKeyPtr(v *ResourceSshCustomerKeyArgs) ResourceSshCustomerKeyPtrInput {
	return (*resourceSshCustomerKeyPtrType)(v)
}

func (*resourceSshCustomerKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSshCustomerKey)(nil)).Elem()
}

func (i *resourceSshCustomerKeyPtrType) ToResourceSshCustomerKeyPtrOutput() ResourceSshCustomerKeyPtrOutput {
	return i.ToResourceSshCustomerKeyPtrOutputWithContext(context.Background())
}

func (i *resourceSshCustomerKeyPtrType) ToResourceSshCustomerKeyPtrOutputWithContext(ctx context.Context) ResourceSshCustomerKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSshCustomerKeyPtrOutput)
}

type ResourceSshCustomerKeyOutput struct{ *pulumi.OutputState }

func (ResourceSshCustomerKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSshCustomerKey)(nil)).Elem()
}

func (o ResourceSshCustomerKeyOutput) ToResourceSshCustomerKeyOutput() ResourceSshCustomerKeyOutput {
	return o
}

func (o ResourceSshCustomerKeyOutput) ToResourceSshCustomerKeyOutputWithContext(ctx context.Context) ResourceSshCustomerKeyOutput {
	return o
}

func (o ResourceSshCustomerKeyOutput) ToResourceSshCustomerKeyPtrOutput() ResourceSshCustomerKeyPtrOutput {
	return o.ToResourceSshCustomerKeyPtrOutputWithContext(context.Background())
}

func (o ResourceSshCustomerKeyOutput) ToResourceSshCustomerKeyPtrOutputWithContext(ctx context.Context) ResourceSshCustomerKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSshCustomerKey) *ResourceSshCustomerKey {
		return &v
	}).(ResourceSshCustomerKeyPtrOutput)
}

// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
func (o ResourceSshCustomerKeyOutput) AllowDeprecatedKeyExchanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceSshCustomerKey) *bool { return v.AllowDeprecatedKeyExchanges }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSshCustomerKeyOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshCustomerKey) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSshCustomerKeyOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshCustomerKey) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSshCustomerKeyOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSshCustomerKey) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSshCustomerKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSshCustomerKey) string { return v.Name }).(pulumi.StringOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSshCustomerKeyOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceSshCustomerKey) int { return v.Port }).(pulumi.IntOutput)
}

// Whether port forwarding is allowed through this server.
func (o ResourceSshCustomerKeyOutput) PortForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceSshCustomerKey) *bool { return v.PortForwarding }).(pulumi.BoolPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSshCustomerKeyOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSshCustomerKey) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// The private key used to authenticate with the server.
func (o ResourceSshCustomerKeyOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshCustomerKey) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSshCustomerKeyOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshCustomerKey) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSshCustomerKeyOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshCustomerKey) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSshCustomerKeyOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshCustomerKey) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSshCustomerKeyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceSshCustomerKey) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSshCustomerKeyOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshCustomerKey) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceSshCustomerKeyPtrOutput struct{ *pulumi.OutputState }

func (ResourceSshCustomerKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSshCustomerKey)(nil)).Elem()
}

func (o ResourceSshCustomerKeyPtrOutput) ToResourceSshCustomerKeyPtrOutput() ResourceSshCustomerKeyPtrOutput {
	return o
}

func (o ResourceSshCustomerKeyPtrOutput) ToResourceSshCustomerKeyPtrOutputWithContext(ctx context.Context) ResourceSshCustomerKeyPtrOutput {
	return o
}

func (o ResourceSshCustomerKeyPtrOutput) Elem() ResourceSshCustomerKeyOutput {
	return o.ApplyT(func(v *ResourceSshCustomerKey) ResourceSshCustomerKey {
		if v != nil {
			return *v
		}
		var ret ResourceSshCustomerKey
		return ret
	}).(ResourceSshCustomerKeyOutput)
}

// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
func (o ResourceSshCustomerKeyPtrOutput) AllowDeprecatedKeyExchanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSshCustomerKey) *bool {
		if v == nil {
			return nil
		}
		return v.AllowDeprecatedKeyExchanges
	}).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSshCustomerKeyPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCustomerKey) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSshCustomerKeyPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCustomerKey) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSshCustomerKeyPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCustomerKey) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSshCustomerKeyPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCustomerKey) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSshCustomerKeyPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSshCustomerKey) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Whether port forwarding is allowed through this server.
func (o ResourceSshCustomerKeyPtrOutput) PortForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSshCustomerKey) *bool {
		if v == nil {
			return nil
		}
		return v.PortForwarding
	}).(pulumi.BoolPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSshCustomerKeyPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSshCustomerKey) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// The private key used to authenticate with the server.
func (o ResourceSshCustomerKeyPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCustomerKey) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSshCustomerKeyPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCustomerKey) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSshCustomerKeyPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCustomerKey) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSshCustomerKeyPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCustomerKey) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSshCustomerKeyPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceSshCustomerKey) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSshCustomerKeyPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshCustomerKey) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceSshPassword struct {
	// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
	AllowDeprecatedKeyExchanges *bool `pulumi:"allowDeprecatedKeyExchanges"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port int `pulumi:"port"`
	// Whether port forwarding is allowed through this server.
	PortForwarding *bool `pulumi:"portForwarding"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceSshPasswordInput is an input type that accepts ResourceSshPasswordArgs and ResourceSshPasswordOutput values.
// You can construct a concrete instance of `ResourceSshPasswordInput` via:
//
//	ResourceSshPasswordArgs{...}
type ResourceSshPasswordInput interface {
	pulumi.Input

	ToResourceSshPasswordOutput() ResourceSshPasswordOutput
	ToResourceSshPasswordOutputWithContext(context.Context) ResourceSshPasswordOutput
}

type ResourceSshPasswordArgs struct {
	// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
	AllowDeprecatedKeyExchanges pulumi.BoolPtrInput `pulumi:"allowDeprecatedKeyExchanges"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntInput `pulumi:"port"`
	// Whether port forwarding is allowed through this server.
	PortForwarding pulumi.BoolPtrInput `pulumi:"portForwarding"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceSshPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSshPassword)(nil)).Elem()
}

func (i ResourceSshPasswordArgs) ToResourceSshPasswordOutput() ResourceSshPasswordOutput {
	return i.ToResourceSshPasswordOutputWithContext(context.Background())
}

func (i ResourceSshPasswordArgs) ToResourceSshPasswordOutputWithContext(ctx context.Context) ResourceSshPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSshPasswordOutput)
}

func (i ResourceSshPasswordArgs) ToResourceSshPasswordPtrOutput() ResourceSshPasswordPtrOutput {
	return i.ToResourceSshPasswordPtrOutputWithContext(context.Background())
}

func (i ResourceSshPasswordArgs) ToResourceSshPasswordPtrOutputWithContext(ctx context.Context) ResourceSshPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSshPasswordOutput).ToResourceSshPasswordPtrOutputWithContext(ctx)
}

// ResourceSshPasswordPtrInput is an input type that accepts ResourceSshPasswordArgs, ResourceSshPasswordPtr and ResourceSshPasswordPtrOutput values.
// You can construct a concrete instance of `ResourceSshPasswordPtrInput` via:
//
//	        ResourceSshPasswordArgs{...}
//
//	or:
//
//	        nil
type ResourceSshPasswordPtrInput interface {
	pulumi.Input

	ToResourceSshPasswordPtrOutput() ResourceSshPasswordPtrOutput
	ToResourceSshPasswordPtrOutputWithContext(context.Context) ResourceSshPasswordPtrOutput
}

type resourceSshPasswordPtrType ResourceSshPasswordArgs

func ResourceSshPasswordPtr(v *ResourceSshPasswordArgs) ResourceSshPasswordPtrInput {
	return (*resourceSshPasswordPtrType)(v)
}

func (*resourceSshPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSshPassword)(nil)).Elem()
}

func (i *resourceSshPasswordPtrType) ToResourceSshPasswordPtrOutput() ResourceSshPasswordPtrOutput {
	return i.ToResourceSshPasswordPtrOutputWithContext(context.Background())
}

func (i *resourceSshPasswordPtrType) ToResourceSshPasswordPtrOutputWithContext(ctx context.Context) ResourceSshPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSshPasswordPtrOutput)
}

type ResourceSshPasswordOutput struct{ *pulumi.OutputState }

func (ResourceSshPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSshPassword)(nil)).Elem()
}

func (o ResourceSshPasswordOutput) ToResourceSshPasswordOutput() ResourceSshPasswordOutput {
	return o
}

func (o ResourceSshPasswordOutput) ToResourceSshPasswordOutputWithContext(ctx context.Context) ResourceSshPasswordOutput {
	return o
}

func (o ResourceSshPasswordOutput) ToResourceSshPasswordPtrOutput() ResourceSshPasswordPtrOutput {
	return o.ToResourceSshPasswordPtrOutputWithContext(context.Background())
}

func (o ResourceSshPasswordOutput) ToResourceSshPasswordPtrOutputWithContext(ctx context.Context) ResourceSshPasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSshPassword) *ResourceSshPassword {
		return &v
	}).(ResourceSshPasswordPtrOutput)
}

// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
func (o ResourceSshPasswordOutput) AllowDeprecatedKeyExchanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceSshPassword) *bool { return v.AllowDeprecatedKeyExchanges }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSshPasswordOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshPassword) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSshPasswordOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshPassword) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSshPasswordOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSshPassword) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSshPasswordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSshPassword) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceSshPasswordOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshPassword) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSshPasswordOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResourceSshPassword) int { return v.Port }).(pulumi.IntOutput)
}

// Whether port forwarding is allowed through this server.
func (o ResourceSshPasswordOutput) PortForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceSshPassword) *bool { return v.PortForwarding }).(pulumi.BoolPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSshPasswordOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSshPassword) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSshPasswordOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshPassword) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSshPasswordOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshPassword) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSshPasswordOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshPassword) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSshPasswordOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceSshPassword) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSshPasswordOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSshPassword) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceSshPasswordPtrOutput struct{ *pulumi.OutputState }

func (ResourceSshPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSshPassword)(nil)).Elem()
}

func (o ResourceSshPasswordPtrOutput) ToResourceSshPasswordPtrOutput() ResourceSshPasswordPtrOutput {
	return o
}

func (o ResourceSshPasswordPtrOutput) ToResourceSshPasswordPtrOutputWithContext(ctx context.Context) ResourceSshPasswordPtrOutput {
	return o
}

func (o ResourceSshPasswordPtrOutput) Elem() ResourceSshPasswordOutput {
	return o.ApplyT(func(v *ResourceSshPassword) ResourceSshPassword {
		if v != nil {
			return *v
		}
		var ret ResourceSshPassword
		return ret
	}).(ResourceSshPasswordOutput)
}

// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
func (o ResourceSshPasswordPtrOutput) AllowDeprecatedKeyExchanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSshPassword) *bool {
		if v == nil {
			return nil
		}
		return v.AllowDeprecatedKeyExchanges
	}).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSshPasswordPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshPassword) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSshPasswordPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshPassword) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSshPasswordPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshPassword) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSshPasswordPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshPassword) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceSshPasswordPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshPassword) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSshPasswordPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSshPassword) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Whether port forwarding is allowed through this server.
func (o ResourceSshPasswordPtrOutput) PortForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceSshPassword) *bool {
		if v == nil {
			return nil
		}
		return v.PortForwarding
	}).(pulumi.BoolPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSshPasswordPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSshPassword) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSshPasswordPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshPassword) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSshPasswordPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshPassword) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSshPasswordPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshPassword) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSshPasswordPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceSshPassword) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSshPasswordPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSshPassword) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceSybase struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceSybaseInput is an input type that accepts ResourceSybaseArgs and ResourceSybaseOutput values.
// You can construct a concrete instance of `ResourceSybaseInput` via:
//
//	ResourceSybaseArgs{...}
type ResourceSybaseInput interface {
	pulumi.Input

	ToResourceSybaseOutput() ResourceSybaseOutput
	ToResourceSybaseOutputWithContext(context.Context) ResourceSybaseOutput
}

type ResourceSybaseArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceSybaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSybase)(nil)).Elem()
}

func (i ResourceSybaseArgs) ToResourceSybaseOutput() ResourceSybaseOutput {
	return i.ToResourceSybaseOutputWithContext(context.Background())
}

func (i ResourceSybaseArgs) ToResourceSybaseOutputWithContext(ctx context.Context) ResourceSybaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSybaseOutput)
}

func (i ResourceSybaseArgs) ToResourceSybasePtrOutput() ResourceSybasePtrOutput {
	return i.ToResourceSybasePtrOutputWithContext(context.Background())
}

func (i ResourceSybaseArgs) ToResourceSybasePtrOutputWithContext(ctx context.Context) ResourceSybasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSybaseOutput).ToResourceSybasePtrOutputWithContext(ctx)
}

// ResourceSybasePtrInput is an input type that accepts ResourceSybaseArgs, ResourceSybasePtr and ResourceSybasePtrOutput values.
// You can construct a concrete instance of `ResourceSybasePtrInput` via:
//
//	        ResourceSybaseArgs{...}
//
//	or:
//
//	        nil
type ResourceSybasePtrInput interface {
	pulumi.Input

	ToResourceSybasePtrOutput() ResourceSybasePtrOutput
	ToResourceSybasePtrOutputWithContext(context.Context) ResourceSybasePtrOutput
}

type resourceSybasePtrType ResourceSybaseArgs

func ResourceSybasePtr(v *ResourceSybaseArgs) ResourceSybasePtrInput {
	return (*resourceSybasePtrType)(v)
}

func (*resourceSybasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSybase)(nil)).Elem()
}

func (i *resourceSybasePtrType) ToResourceSybasePtrOutput() ResourceSybasePtrOutput {
	return i.ToResourceSybasePtrOutputWithContext(context.Background())
}

func (i *resourceSybasePtrType) ToResourceSybasePtrOutputWithContext(ctx context.Context) ResourceSybasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSybasePtrOutput)
}

type ResourceSybaseOutput struct{ *pulumi.OutputState }

func (ResourceSybaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSybase)(nil)).Elem()
}

func (o ResourceSybaseOutput) ToResourceSybaseOutput() ResourceSybaseOutput {
	return o
}

func (o ResourceSybaseOutput) ToResourceSybaseOutputWithContext(ctx context.Context) ResourceSybaseOutput {
	return o
}

func (o ResourceSybaseOutput) ToResourceSybasePtrOutput() ResourceSybasePtrOutput {
	return o.ToResourceSybasePtrOutputWithContext(context.Background())
}

func (o ResourceSybaseOutput) ToResourceSybasePtrOutputWithContext(ctx context.Context) ResourceSybasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSybase) *ResourceSybase {
		return &v
	}).(ResourceSybasePtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSybaseOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSybase) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSybaseOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSybase) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSybaseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSybase) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSybaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSybase) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceSybaseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSybase) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSybaseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSybase) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSybaseOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSybase) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSybaseOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSybase) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSybaseOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSybase) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSybaseOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSybase) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSybaseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceSybase) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSybaseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSybase) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceSybasePtrOutput struct{ *pulumi.OutputState }

func (ResourceSybasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSybase)(nil)).Elem()
}

func (o ResourceSybasePtrOutput) ToResourceSybasePtrOutput() ResourceSybasePtrOutput {
	return o
}

func (o ResourceSybasePtrOutput) ToResourceSybasePtrOutputWithContext(ctx context.Context) ResourceSybasePtrOutput {
	return o
}

func (o ResourceSybasePtrOutput) Elem() ResourceSybaseOutput {
	return o.ApplyT(func(v *ResourceSybase) ResourceSybase {
		if v != nil {
			return *v
		}
		var ret ResourceSybase
		return ret
	}).(ResourceSybaseOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSybasePtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybase) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSybasePtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybase) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSybasePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybase) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSybasePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybase) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceSybasePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybase) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSybasePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSybase) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSybasePtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSybase) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSybasePtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybase) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSybasePtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybase) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSybasePtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybase) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSybasePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceSybase) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSybasePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybase) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceSybaseIq struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceSybaseIqInput is an input type that accepts ResourceSybaseIqArgs and ResourceSybaseIqOutput values.
// You can construct a concrete instance of `ResourceSybaseIqInput` via:
//
//	ResourceSybaseIqArgs{...}
type ResourceSybaseIqInput interface {
	pulumi.Input

	ToResourceSybaseIqOutput() ResourceSybaseIqOutput
	ToResourceSybaseIqOutputWithContext(context.Context) ResourceSybaseIqOutput
}

type ResourceSybaseIqArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceSybaseIqArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSybaseIq)(nil)).Elem()
}

func (i ResourceSybaseIqArgs) ToResourceSybaseIqOutput() ResourceSybaseIqOutput {
	return i.ToResourceSybaseIqOutputWithContext(context.Background())
}

func (i ResourceSybaseIqArgs) ToResourceSybaseIqOutputWithContext(ctx context.Context) ResourceSybaseIqOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSybaseIqOutput)
}

func (i ResourceSybaseIqArgs) ToResourceSybaseIqPtrOutput() ResourceSybaseIqPtrOutput {
	return i.ToResourceSybaseIqPtrOutputWithContext(context.Background())
}

func (i ResourceSybaseIqArgs) ToResourceSybaseIqPtrOutputWithContext(ctx context.Context) ResourceSybaseIqPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSybaseIqOutput).ToResourceSybaseIqPtrOutputWithContext(ctx)
}

// ResourceSybaseIqPtrInput is an input type that accepts ResourceSybaseIqArgs, ResourceSybaseIqPtr and ResourceSybaseIqPtrOutput values.
// You can construct a concrete instance of `ResourceSybaseIqPtrInput` via:
//
//	        ResourceSybaseIqArgs{...}
//
//	or:
//
//	        nil
type ResourceSybaseIqPtrInput interface {
	pulumi.Input

	ToResourceSybaseIqPtrOutput() ResourceSybaseIqPtrOutput
	ToResourceSybaseIqPtrOutputWithContext(context.Context) ResourceSybaseIqPtrOutput
}

type resourceSybaseIqPtrType ResourceSybaseIqArgs

func ResourceSybaseIqPtr(v *ResourceSybaseIqArgs) ResourceSybaseIqPtrInput {
	return (*resourceSybaseIqPtrType)(v)
}

func (*resourceSybaseIqPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSybaseIq)(nil)).Elem()
}

func (i *resourceSybaseIqPtrType) ToResourceSybaseIqPtrOutput() ResourceSybaseIqPtrOutput {
	return i.ToResourceSybaseIqPtrOutputWithContext(context.Background())
}

func (i *resourceSybaseIqPtrType) ToResourceSybaseIqPtrOutputWithContext(ctx context.Context) ResourceSybaseIqPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSybaseIqPtrOutput)
}

type ResourceSybaseIqOutput struct{ *pulumi.OutputState }

func (ResourceSybaseIqOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSybaseIq)(nil)).Elem()
}

func (o ResourceSybaseIqOutput) ToResourceSybaseIqOutput() ResourceSybaseIqOutput {
	return o
}

func (o ResourceSybaseIqOutput) ToResourceSybaseIqOutputWithContext(ctx context.Context) ResourceSybaseIqOutput {
	return o
}

func (o ResourceSybaseIqOutput) ToResourceSybaseIqPtrOutput() ResourceSybaseIqPtrOutput {
	return o.ToResourceSybaseIqPtrOutputWithContext(context.Background())
}

func (o ResourceSybaseIqOutput) ToResourceSybaseIqPtrOutputWithContext(ctx context.Context) ResourceSybaseIqPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSybaseIq) *ResourceSybaseIq {
		return &v
	}).(ResourceSybaseIqPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSybaseIqOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSybaseIq) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSybaseIqOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSybaseIq) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSybaseIqOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSybaseIq) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSybaseIqOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSybaseIq) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceSybaseIqOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSybaseIq) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSybaseIqOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSybaseIq) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSybaseIqOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceSybaseIq) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSybaseIqOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSybaseIq) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSybaseIqOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSybaseIq) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSybaseIqOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSybaseIq) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSybaseIqOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceSybaseIq) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSybaseIqOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceSybaseIq) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceSybaseIqPtrOutput struct{ *pulumi.OutputState }

func (ResourceSybaseIqPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSybaseIq)(nil)).Elem()
}

func (o ResourceSybaseIqPtrOutput) ToResourceSybaseIqPtrOutput() ResourceSybaseIqPtrOutput {
	return o
}

func (o ResourceSybaseIqPtrOutput) ToResourceSybaseIqPtrOutputWithContext(ctx context.Context) ResourceSybaseIqPtrOutput {
	return o
}

func (o ResourceSybaseIqPtrOutput) Elem() ResourceSybaseIqOutput {
	return o.ApplyT(func(v *ResourceSybaseIq) ResourceSybaseIq {
		if v != nil {
			return *v
		}
		var ret ResourceSybaseIq
		return ret
	}).(ResourceSybaseIqOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceSybaseIqPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybaseIq) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceSybaseIqPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybaseIq) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceSybaseIqPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybaseIq) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceSybaseIqPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybaseIq) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceSybaseIqPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybaseIq) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceSybaseIqPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSybaseIq) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceSybaseIqPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceSybaseIq) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceSybaseIqPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybaseIq) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceSybaseIqPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybaseIq) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceSybaseIqPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybaseIq) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceSybaseIqPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceSybaseIq) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceSybaseIqPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSybaseIq) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceTeradata struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceTeradataInput is an input type that accepts ResourceTeradataArgs and ResourceTeradataOutput values.
// You can construct a concrete instance of `ResourceTeradataInput` via:
//
//	ResourceTeradataArgs{...}
type ResourceTeradataInput interface {
	pulumi.Input

	ToResourceTeradataOutput() ResourceTeradataOutput
	ToResourceTeradataOutputWithContext(context.Context) ResourceTeradataOutput
}

type ResourceTeradataArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceTeradataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceTeradata)(nil)).Elem()
}

func (i ResourceTeradataArgs) ToResourceTeradataOutput() ResourceTeradataOutput {
	return i.ToResourceTeradataOutputWithContext(context.Background())
}

func (i ResourceTeradataArgs) ToResourceTeradataOutputWithContext(ctx context.Context) ResourceTeradataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceTeradataOutput)
}

func (i ResourceTeradataArgs) ToResourceTeradataPtrOutput() ResourceTeradataPtrOutput {
	return i.ToResourceTeradataPtrOutputWithContext(context.Background())
}

func (i ResourceTeradataArgs) ToResourceTeradataPtrOutputWithContext(ctx context.Context) ResourceTeradataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceTeradataOutput).ToResourceTeradataPtrOutputWithContext(ctx)
}

// ResourceTeradataPtrInput is an input type that accepts ResourceTeradataArgs, ResourceTeradataPtr and ResourceTeradataPtrOutput values.
// You can construct a concrete instance of `ResourceTeradataPtrInput` via:
//
//	        ResourceTeradataArgs{...}
//
//	or:
//
//	        nil
type ResourceTeradataPtrInput interface {
	pulumi.Input

	ToResourceTeradataPtrOutput() ResourceTeradataPtrOutput
	ToResourceTeradataPtrOutputWithContext(context.Context) ResourceTeradataPtrOutput
}

type resourceTeradataPtrType ResourceTeradataArgs

func ResourceTeradataPtr(v *ResourceTeradataArgs) ResourceTeradataPtrInput {
	return (*resourceTeradataPtrType)(v)
}

func (*resourceTeradataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceTeradata)(nil)).Elem()
}

func (i *resourceTeradataPtrType) ToResourceTeradataPtrOutput() ResourceTeradataPtrOutput {
	return i.ToResourceTeradataPtrOutputWithContext(context.Background())
}

func (i *resourceTeradataPtrType) ToResourceTeradataPtrOutputWithContext(ctx context.Context) ResourceTeradataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceTeradataPtrOutput)
}

type ResourceTeradataOutput struct{ *pulumi.OutputState }

func (ResourceTeradataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceTeradata)(nil)).Elem()
}

func (o ResourceTeradataOutput) ToResourceTeradataOutput() ResourceTeradataOutput {
	return o
}

func (o ResourceTeradataOutput) ToResourceTeradataOutputWithContext(ctx context.Context) ResourceTeradataOutput {
	return o
}

func (o ResourceTeradataOutput) ToResourceTeradataPtrOutput() ResourceTeradataPtrOutput {
	return o.ToResourceTeradataPtrOutputWithContext(context.Background())
}

func (o ResourceTeradataOutput) ToResourceTeradataPtrOutputWithContext(ctx context.Context) ResourceTeradataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceTeradata) *ResourceTeradata {
		return &v
	}).(ResourceTeradataPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceTeradataOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceTeradata) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceTeradataOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceTeradata) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceTeradataOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceTeradata) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceTeradataOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceTeradata) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceTeradataOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceTeradata) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceTeradataOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceTeradata) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceTeradataOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceTeradata) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceTeradataOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceTeradata) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceTeradataOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceTeradata) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceTeradataOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceTeradata) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceTeradataOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceTeradata) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceTeradataOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceTeradata) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceTeradataPtrOutput struct{ *pulumi.OutputState }

func (ResourceTeradataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceTeradata)(nil)).Elem()
}

func (o ResourceTeradataPtrOutput) ToResourceTeradataPtrOutput() ResourceTeradataPtrOutput {
	return o
}

func (o ResourceTeradataPtrOutput) ToResourceTeradataPtrOutputWithContext(ctx context.Context) ResourceTeradataPtrOutput {
	return o
}

func (o ResourceTeradataPtrOutput) Elem() ResourceTeradataOutput {
	return o.ApplyT(func(v *ResourceTeradata) ResourceTeradata {
		if v != nil {
			return *v
		}
		var ret ResourceTeradata
		return ret
	}).(ResourceTeradataOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceTeradataPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTeradata) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceTeradataPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTeradata) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceTeradataPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTeradata) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceTeradataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTeradata) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceTeradataPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTeradata) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceTeradataPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceTeradata) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceTeradataPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceTeradata) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceTeradataPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTeradata) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceTeradataPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTeradata) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceTeradataPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTeradata) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceTeradataPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceTeradata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceTeradataPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTeradata) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ResourceTrino struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname string `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// ResourceTrinoInput is an input type that accepts ResourceTrinoArgs and ResourceTrinoOutput values.
// You can construct a concrete instance of `ResourceTrinoInput` via:
//
//	ResourceTrinoArgs{...}
type ResourceTrinoInput interface {
	pulumi.Input

	ToResourceTrinoOutput() ResourceTrinoOutput
	ToResourceTrinoOutputWithContext(context.Context) ResourceTrinoOutput
}

type ResourceTrinoArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ResourceTrinoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceTrino)(nil)).Elem()
}

func (i ResourceTrinoArgs) ToResourceTrinoOutput() ResourceTrinoOutput {
	return i.ToResourceTrinoOutputWithContext(context.Background())
}

func (i ResourceTrinoArgs) ToResourceTrinoOutputWithContext(ctx context.Context) ResourceTrinoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceTrinoOutput)
}

func (i ResourceTrinoArgs) ToResourceTrinoPtrOutput() ResourceTrinoPtrOutput {
	return i.ToResourceTrinoPtrOutputWithContext(context.Background())
}

func (i ResourceTrinoArgs) ToResourceTrinoPtrOutputWithContext(ctx context.Context) ResourceTrinoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceTrinoOutput).ToResourceTrinoPtrOutputWithContext(ctx)
}

// ResourceTrinoPtrInput is an input type that accepts ResourceTrinoArgs, ResourceTrinoPtr and ResourceTrinoPtrOutput values.
// You can construct a concrete instance of `ResourceTrinoPtrInput` via:
//
//	        ResourceTrinoArgs{...}
//
//	or:
//
//	        nil
type ResourceTrinoPtrInput interface {
	pulumi.Input

	ToResourceTrinoPtrOutput() ResourceTrinoPtrOutput
	ToResourceTrinoPtrOutputWithContext(context.Context) ResourceTrinoPtrOutput
}

type resourceTrinoPtrType ResourceTrinoArgs

func ResourceTrinoPtr(v *ResourceTrinoArgs) ResourceTrinoPtrInput {
	return (*resourceTrinoPtrType)(v)
}

func (*resourceTrinoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceTrino)(nil)).Elem()
}

func (i *resourceTrinoPtrType) ToResourceTrinoPtrOutput() ResourceTrinoPtrOutput {
	return i.ToResourceTrinoPtrOutputWithContext(context.Background())
}

func (i *resourceTrinoPtrType) ToResourceTrinoPtrOutputWithContext(ctx context.Context) ResourceTrinoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceTrinoPtrOutput)
}

type ResourceTrinoOutput struct{ *pulumi.OutputState }

func (ResourceTrinoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceTrino)(nil)).Elem()
}

func (o ResourceTrinoOutput) ToResourceTrinoOutput() ResourceTrinoOutput {
	return o
}

func (o ResourceTrinoOutput) ToResourceTrinoOutputWithContext(ctx context.Context) ResourceTrinoOutput {
	return o
}

func (o ResourceTrinoOutput) ToResourceTrinoPtrOutput() ResourceTrinoPtrOutput {
	return o.ToResourceTrinoPtrOutputWithContext(context.Background())
}

func (o ResourceTrinoOutput) ToResourceTrinoPtrOutputWithContext(ctx context.Context) ResourceTrinoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceTrino) *ResourceTrino {
		return &v
	}).(ResourceTrinoPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceTrinoOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceTrino) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceTrinoOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceTrino) string { return v.Database }).(pulumi.StringOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceTrinoOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceTrino) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceTrinoOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceTrino) string { return v.Hostname }).(pulumi.StringOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceTrinoOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceTrino) string { return v.Name }).(pulumi.StringOutput)
}

// The password to authenticate with.
func (o ResourceTrinoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceTrino) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceTrinoOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceTrino) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceTrinoOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceTrino) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceTrinoOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceTrino) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceTrinoOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceTrino) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceTrinoOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceTrino) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceTrinoOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceTrino) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceTrinoOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceTrino) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ResourceTrinoPtrOutput struct{ *pulumi.OutputState }

func (ResourceTrinoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceTrino)(nil)).Elem()
}

func (o ResourceTrinoPtrOutput) ToResourceTrinoPtrOutput() ResourceTrinoPtrOutput {
	return o
}

func (o ResourceTrinoPtrOutput) ToResourceTrinoPtrOutputWithContext(ctx context.Context) ResourceTrinoPtrOutput {
	return o
}

func (o ResourceTrinoPtrOutput) Elem() ResourceTrinoOutput {
	return o.ApplyT(func(v *ResourceTrino) ResourceTrino {
		if v != nil {
			return *v
		}
		var ret ResourceTrino
		return ret
	}).(ResourceTrinoOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o ResourceTrinoPtrOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTrino) *string {
		if v == nil {
			return nil
		}
		return v.BindInterface
	}).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o ResourceTrinoPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTrino) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o ResourceTrinoPtrOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTrino) *string {
		if v == nil {
			return nil
		}
		return v.EgressFilter
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o ResourceTrinoPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTrino) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o ResourceTrinoPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTrino) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o ResourceTrinoPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTrino) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o ResourceTrinoPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceTrino) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o ResourceTrinoPtrOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceTrino) *int {
		if v == nil {
			return nil
		}
		return v.PortOverride
	}).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o ResourceTrinoPtrOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTrino) *string {
		if v == nil {
			return nil
		}
		return v.ProxyClusterId
	}).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o ResourceTrinoPtrOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTrino) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreId
	}).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o ResourceTrinoPtrOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTrino) *string {
		if v == nil {
			return nil
		}
		return v.Subdomain
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o ResourceTrinoPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceTrino) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o ResourceTrinoPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTrino) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type SecretStoreActiveDirectoryStore struct {
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The URL of the Vault to target
	ServerAddress string `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreActiveDirectoryStoreInput is an input type that accepts SecretStoreActiveDirectoryStoreArgs and SecretStoreActiveDirectoryStoreOutput values.
// You can construct a concrete instance of `SecretStoreActiveDirectoryStoreInput` via:
//
//	SecretStoreActiveDirectoryStoreArgs{...}
type SecretStoreActiveDirectoryStoreInput interface {
	pulumi.Input

	ToSecretStoreActiveDirectoryStoreOutput() SecretStoreActiveDirectoryStoreOutput
	ToSecretStoreActiveDirectoryStoreOutputWithContext(context.Context) SecretStoreActiveDirectoryStoreOutput
}

type SecretStoreActiveDirectoryStoreArgs struct {
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringInput `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreActiveDirectoryStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreActiveDirectoryStore)(nil)).Elem()
}

func (i SecretStoreActiveDirectoryStoreArgs) ToSecretStoreActiveDirectoryStoreOutput() SecretStoreActiveDirectoryStoreOutput {
	return i.ToSecretStoreActiveDirectoryStoreOutputWithContext(context.Background())
}

func (i SecretStoreActiveDirectoryStoreArgs) ToSecretStoreActiveDirectoryStoreOutputWithContext(ctx context.Context) SecretStoreActiveDirectoryStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreActiveDirectoryStoreOutput)
}

func (i SecretStoreActiveDirectoryStoreArgs) ToSecretStoreActiveDirectoryStorePtrOutput() SecretStoreActiveDirectoryStorePtrOutput {
	return i.ToSecretStoreActiveDirectoryStorePtrOutputWithContext(context.Background())
}

func (i SecretStoreActiveDirectoryStoreArgs) ToSecretStoreActiveDirectoryStorePtrOutputWithContext(ctx context.Context) SecretStoreActiveDirectoryStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreActiveDirectoryStoreOutput).ToSecretStoreActiveDirectoryStorePtrOutputWithContext(ctx)
}

// SecretStoreActiveDirectoryStorePtrInput is an input type that accepts SecretStoreActiveDirectoryStoreArgs, SecretStoreActiveDirectoryStorePtr and SecretStoreActiveDirectoryStorePtrOutput values.
// You can construct a concrete instance of `SecretStoreActiveDirectoryStorePtrInput` via:
//
//	        SecretStoreActiveDirectoryStoreArgs{...}
//
//	or:
//
//	        nil
type SecretStoreActiveDirectoryStorePtrInput interface {
	pulumi.Input

	ToSecretStoreActiveDirectoryStorePtrOutput() SecretStoreActiveDirectoryStorePtrOutput
	ToSecretStoreActiveDirectoryStorePtrOutputWithContext(context.Context) SecretStoreActiveDirectoryStorePtrOutput
}

type secretStoreActiveDirectoryStorePtrType SecretStoreActiveDirectoryStoreArgs

func SecretStoreActiveDirectoryStorePtr(v *SecretStoreActiveDirectoryStoreArgs) SecretStoreActiveDirectoryStorePtrInput {
	return (*secretStoreActiveDirectoryStorePtrType)(v)
}

func (*secretStoreActiveDirectoryStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreActiveDirectoryStore)(nil)).Elem()
}

func (i *secretStoreActiveDirectoryStorePtrType) ToSecretStoreActiveDirectoryStorePtrOutput() SecretStoreActiveDirectoryStorePtrOutput {
	return i.ToSecretStoreActiveDirectoryStorePtrOutputWithContext(context.Background())
}

func (i *secretStoreActiveDirectoryStorePtrType) ToSecretStoreActiveDirectoryStorePtrOutputWithContext(ctx context.Context) SecretStoreActiveDirectoryStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreActiveDirectoryStorePtrOutput)
}

type SecretStoreActiveDirectoryStoreOutput struct{ *pulumi.OutputState }

func (SecretStoreActiveDirectoryStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreActiveDirectoryStore)(nil)).Elem()
}

func (o SecretStoreActiveDirectoryStoreOutput) ToSecretStoreActiveDirectoryStoreOutput() SecretStoreActiveDirectoryStoreOutput {
	return o
}

func (o SecretStoreActiveDirectoryStoreOutput) ToSecretStoreActiveDirectoryStoreOutputWithContext(ctx context.Context) SecretStoreActiveDirectoryStoreOutput {
	return o
}

func (o SecretStoreActiveDirectoryStoreOutput) ToSecretStoreActiveDirectoryStorePtrOutput() SecretStoreActiveDirectoryStorePtrOutput {
	return o.ToSecretStoreActiveDirectoryStorePtrOutputWithContext(context.Background())
}

func (o SecretStoreActiveDirectoryStoreOutput) ToSecretStoreActiveDirectoryStorePtrOutputWithContext(ctx context.Context) SecretStoreActiveDirectoryStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreActiveDirectoryStore) *SecretStoreActiveDirectoryStore {
		return &v
	}).(SecretStoreActiveDirectoryStorePtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreActiveDirectoryStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreActiveDirectoryStore) string { return v.Name }).(pulumi.StringOutput)
}

// The URL of the Vault to target
func (o SecretStoreActiveDirectoryStoreOutput) ServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreActiveDirectoryStore) string { return v.ServerAddress }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreActiveDirectoryStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreActiveDirectoryStore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreActiveDirectoryStorePtrOutput struct{ *pulumi.OutputState }

func (SecretStoreActiveDirectoryStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreActiveDirectoryStore)(nil)).Elem()
}

func (o SecretStoreActiveDirectoryStorePtrOutput) ToSecretStoreActiveDirectoryStorePtrOutput() SecretStoreActiveDirectoryStorePtrOutput {
	return o
}

func (o SecretStoreActiveDirectoryStorePtrOutput) ToSecretStoreActiveDirectoryStorePtrOutputWithContext(ctx context.Context) SecretStoreActiveDirectoryStorePtrOutput {
	return o
}

func (o SecretStoreActiveDirectoryStorePtrOutput) Elem() SecretStoreActiveDirectoryStoreOutput {
	return o.ApplyT(func(v *SecretStoreActiveDirectoryStore) SecretStoreActiveDirectoryStore {
		if v != nil {
			return *v
		}
		var ret SecretStoreActiveDirectoryStore
		return ret
	}).(SecretStoreActiveDirectoryStoreOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreActiveDirectoryStorePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreActiveDirectoryStore) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreActiveDirectoryStorePtrOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreActiveDirectoryStore) *string {
		if v == nil {
			return nil
		}
		return &v.ServerAddress
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreActiveDirectoryStorePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreActiveDirectoryStore) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreAws struct {
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The AWS region to target e.g. us-east-1
	Region string `pulumi:"region"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreAwsInput is an input type that accepts SecretStoreAwsArgs and SecretStoreAwsOutput values.
// You can construct a concrete instance of `SecretStoreAwsInput` via:
//
//	SecretStoreAwsArgs{...}
type SecretStoreAwsInput interface {
	pulumi.Input

	ToSecretStoreAwsOutput() SecretStoreAwsOutput
	ToSecretStoreAwsOutputWithContext(context.Context) SecretStoreAwsOutput
}

type SecretStoreAwsArgs struct {
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The AWS region to target e.g. us-east-1
	Region pulumi.StringInput `pulumi:"region"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreAwsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreAws)(nil)).Elem()
}

func (i SecretStoreAwsArgs) ToSecretStoreAwsOutput() SecretStoreAwsOutput {
	return i.ToSecretStoreAwsOutputWithContext(context.Background())
}

func (i SecretStoreAwsArgs) ToSecretStoreAwsOutputWithContext(ctx context.Context) SecretStoreAwsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreAwsOutput)
}

func (i SecretStoreAwsArgs) ToSecretStoreAwsPtrOutput() SecretStoreAwsPtrOutput {
	return i.ToSecretStoreAwsPtrOutputWithContext(context.Background())
}

func (i SecretStoreAwsArgs) ToSecretStoreAwsPtrOutputWithContext(ctx context.Context) SecretStoreAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreAwsOutput).ToSecretStoreAwsPtrOutputWithContext(ctx)
}

// SecretStoreAwsPtrInput is an input type that accepts SecretStoreAwsArgs, SecretStoreAwsPtr and SecretStoreAwsPtrOutput values.
// You can construct a concrete instance of `SecretStoreAwsPtrInput` via:
//
//	        SecretStoreAwsArgs{...}
//
//	or:
//
//	        nil
type SecretStoreAwsPtrInput interface {
	pulumi.Input

	ToSecretStoreAwsPtrOutput() SecretStoreAwsPtrOutput
	ToSecretStoreAwsPtrOutputWithContext(context.Context) SecretStoreAwsPtrOutput
}

type secretStoreAwsPtrType SecretStoreAwsArgs

func SecretStoreAwsPtr(v *SecretStoreAwsArgs) SecretStoreAwsPtrInput {
	return (*secretStoreAwsPtrType)(v)
}

func (*secretStoreAwsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreAws)(nil)).Elem()
}

func (i *secretStoreAwsPtrType) ToSecretStoreAwsPtrOutput() SecretStoreAwsPtrOutput {
	return i.ToSecretStoreAwsPtrOutputWithContext(context.Background())
}

func (i *secretStoreAwsPtrType) ToSecretStoreAwsPtrOutputWithContext(ctx context.Context) SecretStoreAwsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreAwsPtrOutput)
}

type SecretStoreAwsOutput struct{ *pulumi.OutputState }

func (SecretStoreAwsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreAws)(nil)).Elem()
}

func (o SecretStoreAwsOutput) ToSecretStoreAwsOutput() SecretStoreAwsOutput {
	return o
}

func (o SecretStoreAwsOutput) ToSecretStoreAwsOutputWithContext(ctx context.Context) SecretStoreAwsOutput {
	return o
}

func (o SecretStoreAwsOutput) ToSecretStoreAwsPtrOutput() SecretStoreAwsPtrOutput {
	return o.ToSecretStoreAwsPtrOutputWithContext(context.Background())
}

func (o SecretStoreAwsOutput) ToSecretStoreAwsPtrOutputWithContext(ctx context.Context) SecretStoreAwsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreAws) *SecretStoreAws {
		return &v
	}).(SecretStoreAwsPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreAwsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreAws) string { return v.Name }).(pulumi.StringOutput)
}

// The AWS region to target e.g. us-east-1
func (o SecretStoreAwsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreAws) string { return v.Region }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreAwsOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreAws) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreAwsPtrOutput struct{ *pulumi.OutputState }

func (SecretStoreAwsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreAws)(nil)).Elem()
}

func (o SecretStoreAwsPtrOutput) ToSecretStoreAwsPtrOutput() SecretStoreAwsPtrOutput {
	return o
}

func (o SecretStoreAwsPtrOutput) ToSecretStoreAwsPtrOutputWithContext(ctx context.Context) SecretStoreAwsPtrOutput {
	return o
}

func (o SecretStoreAwsPtrOutput) Elem() SecretStoreAwsOutput {
	return o.ApplyT(func(v *SecretStoreAws) SecretStoreAws {
		if v != nil {
			return *v
		}
		var ret SecretStoreAws
		return ret
	}).(SecretStoreAwsOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreAwsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreAws) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The AWS region to target e.g. us-east-1
func (o SecretStoreAwsPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreAws) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreAwsPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreAws) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreAwsCertX509 struct {
	// The ARN of the CA in AWS Private CA
	CaArn string `pulumi:"caArn"`
	// The ARN of the AWS certificate template for requested certificates. Must allow SAN, key usage, and ext key usage passthrough from CSR
	CertificateTemplateArn string `pulumi:"certificateTemplateArn"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes int `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The AWS region to target e.g. us-east-1
	Region string `pulumi:"region"`
	// The specified signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key. e.g. SHA256WITHRSA
	SigningAlgo string `pulumi:"signingAlgo"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreAwsCertX509Input is an input type that accepts SecretStoreAwsCertX509Args and SecretStoreAwsCertX509Output values.
// You can construct a concrete instance of `SecretStoreAwsCertX509Input` via:
//
//	SecretStoreAwsCertX509Args{...}
type SecretStoreAwsCertX509Input interface {
	pulumi.Input

	ToSecretStoreAwsCertX509Output() SecretStoreAwsCertX509Output
	ToSecretStoreAwsCertX509OutputWithContext(context.Context) SecretStoreAwsCertX509Output
}

type SecretStoreAwsCertX509Args struct {
	// The ARN of the CA in AWS Private CA
	CaArn pulumi.StringInput `pulumi:"caArn"`
	// The ARN of the AWS certificate template for requested certificates. Must allow SAN, key usage, and ext key usage passthrough from CSR
	CertificateTemplateArn pulumi.StringInput `pulumi:"certificateTemplateArn"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes pulumi.IntInput `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The AWS region to target e.g. us-east-1
	Region pulumi.StringInput `pulumi:"region"`
	// The specified signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key. e.g. SHA256WITHRSA
	SigningAlgo pulumi.StringInput `pulumi:"signingAlgo"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreAwsCertX509Args) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreAwsCertX509)(nil)).Elem()
}

func (i SecretStoreAwsCertX509Args) ToSecretStoreAwsCertX509Output() SecretStoreAwsCertX509Output {
	return i.ToSecretStoreAwsCertX509OutputWithContext(context.Background())
}

func (i SecretStoreAwsCertX509Args) ToSecretStoreAwsCertX509OutputWithContext(ctx context.Context) SecretStoreAwsCertX509Output {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreAwsCertX509Output)
}

func (i SecretStoreAwsCertX509Args) ToSecretStoreAwsCertX509PtrOutput() SecretStoreAwsCertX509PtrOutput {
	return i.ToSecretStoreAwsCertX509PtrOutputWithContext(context.Background())
}

func (i SecretStoreAwsCertX509Args) ToSecretStoreAwsCertX509PtrOutputWithContext(ctx context.Context) SecretStoreAwsCertX509PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreAwsCertX509Output).ToSecretStoreAwsCertX509PtrOutputWithContext(ctx)
}

// SecretStoreAwsCertX509PtrInput is an input type that accepts SecretStoreAwsCertX509Args, SecretStoreAwsCertX509Ptr and SecretStoreAwsCertX509PtrOutput values.
// You can construct a concrete instance of `SecretStoreAwsCertX509PtrInput` via:
//
//	        SecretStoreAwsCertX509Args{...}
//
//	or:
//
//	        nil
type SecretStoreAwsCertX509PtrInput interface {
	pulumi.Input

	ToSecretStoreAwsCertX509PtrOutput() SecretStoreAwsCertX509PtrOutput
	ToSecretStoreAwsCertX509PtrOutputWithContext(context.Context) SecretStoreAwsCertX509PtrOutput
}

type secretStoreAwsCertX509PtrType SecretStoreAwsCertX509Args

func SecretStoreAwsCertX509Ptr(v *SecretStoreAwsCertX509Args) SecretStoreAwsCertX509PtrInput {
	return (*secretStoreAwsCertX509PtrType)(v)
}

func (*secretStoreAwsCertX509PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreAwsCertX509)(nil)).Elem()
}

func (i *secretStoreAwsCertX509PtrType) ToSecretStoreAwsCertX509PtrOutput() SecretStoreAwsCertX509PtrOutput {
	return i.ToSecretStoreAwsCertX509PtrOutputWithContext(context.Background())
}

func (i *secretStoreAwsCertX509PtrType) ToSecretStoreAwsCertX509PtrOutputWithContext(ctx context.Context) SecretStoreAwsCertX509PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreAwsCertX509PtrOutput)
}

type SecretStoreAwsCertX509Output struct{ *pulumi.OutputState }

func (SecretStoreAwsCertX509Output) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreAwsCertX509)(nil)).Elem()
}

func (o SecretStoreAwsCertX509Output) ToSecretStoreAwsCertX509Output() SecretStoreAwsCertX509Output {
	return o
}

func (o SecretStoreAwsCertX509Output) ToSecretStoreAwsCertX509OutputWithContext(ctx context.Context) SecretStoreAwsCertX509Output {
	return o
}

func (o SecretStoreAwsCertX509Output) ToSecretStoreAwsCertX509PtrOutput() SecretStoreAwsCertX509PtrOutput {
	return o.ToSecretStoreAwsCertX509PtrOutputWithContext(context.Background())
}

func (o SecretStoreAwsCertX509Output) ToSecretStoreAwsCertX509PtrOutputWithContext(ctx context.Context) SecretStoreAwsCertX509PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreAwsCertX509) *SecretStoreAwsCertX509 {
		return &v
	}).(SecretStoreAwsCertX509PtrOutput)
}

// The ARN of the CA in AWS Private CA
func (o SecretStoreAwsCertX509Output) CaArn() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreAwsCertX509) string { return v.CaArn }).(pulumi.StringOutput)
}

// The ARN of the AWS certificate template for requested certificates. Must allow SAN, key usage, and ext key usage passthrough from CSR
func (o SecretStoreAwsCertX509Output) CertificateTemplateArn() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreAwsCertX509) string { return v.CertificateTemplateArn }).(pulumi.StringOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o SecretStoreAwsCertX509Output) IssuedCertTtlMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v SecretStoreAwsCertX509) int { return v.IssuedCertTtlMinutes }).(pulumi.IntOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreAwsCertX509Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreAwsCertX509) string { return v.Name }).(pulumi.StringOutput)
}

// The AWS region to target e.g. us-east-1
func (o SecretStoreAwsCertX509Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreAwsCertX509) string { return v.Region }).(pulumi.StringOutput)
}

// The specified signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key. e.g. SHA256WITHRSA
func (o SecretStoreAwsCertX509Output) SigningAlgo() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreAwsCertX509) string { return v.SigningAlgo }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreAwsCertX509Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreAwsCertX509) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreAwsCertX509PtrOutput struct{ *pulumi.OutputState }

func (SecretStoreAwsCertX509PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreAwsCertX509)(nil)).Elem()
}

func (o SecretStoreAwsCertX509PtrOutput) ToSecretStoreAwsCertX509PtrOutput() SecretStoreAwsCertX509PtrOutput {
	return o
}

func (o SecretStoreAwsCertX509PtrOutput) ToSecretStoreAwsCertX509PtrOutputWithContext(ctx context.Context) SecretStoreAwsCertX509PtrOutput {
	return o
}

func (o SecretStoreAwsCertX509PtrOutput) Elem() SecretStoreAwsCertX509Output {
	return o.ApplyT(func(v *SecretStoreAwsCertX509) SecretStoreAwsCertX509 {
		if v != nil {
			return *v
		}
		var ret SecretStoreAwsCertX509
		return ret
	}).(SecretStoreAwsCertX509Output)
}

// The ARN of the CA in AWS Private CA
func (o SecretStoreAwsCertX509PtrOutput) CaArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreAwsCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.CaArn
	}).(pulumi.StringPtrOutput)
}

// The ARN of the AWS certificate template for requested certificates. Must allow SAN, key usage, and ext key usage passthrough from CSR
func (o SecretStoreAwsCertX509PtrOutput) CertificateTemplateArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreAwsCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.CertificateTemplateArn
	}).(pulumi.StringPtrOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o SecretStoreAwsCertX509PtrOutput) IssuedCertTtlMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretStoreAwsCertX509) *int {
		if v == nil {
			return nil
		}
		return &v.IssuedCertTtlMinutes
	}).(pulumi.IntPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreAwsCertX509PtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreAwsCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The AWS region to target e.g. us-east-1
func (o SecretStoreAwsCertX509PtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreAwsCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// The specified signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key. e.g. SHA256WITHRSA
func (o SecretStoreAwsCertX509PtrOutput) SigningAlgo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreAwsCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.SigningAlgo
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreAwsCertX509PtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreAwsCertX509) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreAzureStore struct {
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The URI of the key vault to target e.g. https://myvault.vault.azure.net
	// * cyberark_conjur:
	VaultUri string `pulumi:"vaultUri"`
}

// SecretStoreAzureStoreInput is an input type that accepts SecretStoreAzureStoreArgs and SecretStoreAzureStoreOutput values.
// You can construct a concrete instance of `SecretStoreAzureStoreInput` via:
//
//	SecretStoreAzureStoreArgs{...}
type SecretStoreAzureStoreInput interface {
	pulumi.Input

	ToSecretStoreAzureStoreOutput() SecretStoreAzureStoreOutput
	ToSecretStoreAzureStoreOutputWithContext(context.Context) SecretStoreAzureStoreOutput
}

type SecretStoreAzureStoreArgs struct {
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The URI of the key vault to target e.g. https://myvault.vault.azure.net
	// * cyberark_conjur:
	VaultUri pulumi.StringInput `pulumi:"vaultUri"`
}

func (SecretStoreAzureStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreAzureStore)(nil)).Elem()
}

func (i SecretStoreAzureStoreArgs) ToSecretStoreAzureStoreOutput() SecretStoreAzureStoreOutput {
	return i.ToSecretStoreAzureStoreOutputWithContext(context.Background())
}

func (i SecretStoreAzureStoreArgs) ToSecretStoreAzureStoreOutputWithContext(ctx context.Context) SecretStoreAzureStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreAzureStoreOutput)
}

func (i SecretStoreAzureStoreArgs) ToSecretStoreAzureStorePtrOutput() SecretStoreAzureStorePtrOutput {
	return i.ToSecretStoreAzureStorePtrOutputWithContext(context.Background())
}

func (i SecretStoreAzureStoreArgs) ToSecretStoreAzureStorePtrOutputWithContext(ctx context.Context) SecretStoreAzureStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreAzureStoreOutput).ToSecretStoreAzureStorePtrOutputWithContext(ctx)
}

// SecretStoreAzureStorePtrInput is an input type that accepts SecretStoreAzureStoreArgs, SecretStoreAzureStorePtr and SecretStoreAzureStorePtrOutput values.
// You can construct a concrete instance of `SecretStoreAzureStorePtrInput` via:
//
//	        SecretStoreAzureStoreArgs{...}
//
//	or:
//
//	        nil
type SecretStoreAzureStorePtrInput interface {
	pulumi.Input

	ToSecretStoreAzureStorePtrOutput() SecretStoreAzureStorePtrOutput
	ToSecretStoreAzureStorePtrOutputWithContext(context.Context) SecretStoreAzureStorePtrOutput
}

type secretStoreAzureStorePtrType SecretStoreAzureStoreArgs

func SecretStoreAzureStorePtr(v *SecretStoreAzureStoreArgs) SecretStoreAzureStorePtrInput {
	return (*secretStoreAzureStorePtrType)(v)
}

func (*secretStoreAzureStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreAzureStore)(nil)).Elem()
}

func (i *secretStoreAzureStorePtrType) ToSecretStoreAzureStorePtrOutput() SecretStoreAzureStorePtrOutput {
	return i.ToSecretStoreAzureStorePtrOutputWithContext(context.Background())
}

func (i *secretStoreAzureStorePtrType) ToSecretStoreAzureStorePtrOutputWithContext(ctx context.Context) SecretStoreAzureStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreAzureStorePtrOutput)
}

type SecretStoreAzureStoreOutput struct{ *pulumi.OutputState }

func (SecretStoreAzureStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreAzureStore)(nil)).Elem()
}

func (o SecretStoreAzureStoreOutput) ToSecretStoreAzureStoreOutput() SecretStoreAzureStoreOutput {
	return o
}

func (o SecretStoreAzureStoreOutput) ToSecretStoreAzureStoreOutputWithContext(ctx context.Context) SecretStoreAzureStoreOutput {
	return o
}

func (o SecretStoreAzureStoreOutput) ToSecretStoreAzureStorePtrOutput() SecretStoreAzureStorePtrOutput {
	return o.ToSecretStoreAzureStorePtrOutputWithContext(context.Background())
}

func (o SecretStoreAzureStoreOutput) ToSecretStoreAzureStorePtrOutputWithContext(ctx context.Context) SecretStoreAzureStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreAzureStore) *SecretStoreAzureStore {
		return &v
	}).(SecretStoreAzureStorePtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreAzureStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreAzureStore) string { return v.Name }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreAzureStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreAzureStore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The URI of the key vault to target e.g. https://myvault.vault.azure.net
// * cyberark_conjur:
func (o SecretStoreAzureStoreOutput) VaultUri() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreAzureStore) string { return v.VaultUri }).(pulumi.StringOutput)
}

type SecretStoreAzureStorePtrOutput struct{ *pulumi.OutputState }

func (SecretStoreAzureStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreAzureStore)(nil)).Elem()
}

func (o SecretStoreAzureStorePtrOutput) ToSecretStoreAzureStorePtrOutput() SecretStoreAzureStorePtrOutput {
	return o
}

func (o SecretStoreAzureStorePtrOutput) ToSecretStoreAzureStorePtrOutputWithContext(ctx context.Context) SecretStoreAzureStorePtrOutput {
	return o
}

func (o SecretStoreAzureStorePtrOutput) Elem() SecretStoreAzureStoreOutput {
	return o.ApplyT(func(v *SecretStoreAzureStore) SecretStoreAzureStore {
		if v != nil {
			return *v
		}
		var ret SecretStoreAzureStore
		return ret
	}).(SecretStoreAzureStoreOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreAzureStorePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreAzureStore) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreAzureStorePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreAzureStore) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The URI of the key vault to target e.g. https://myvault.vault.azure.net
// * cyberark_conjur:
func (o SecretStoreAzureStorePtrOutput) VaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreAzureStore) *string {
		if v == nil {
			return nil
		}
		return &v.VaultUri
	}).(pulumi.StringPtrOutput)
}

type SecretStoreCyberarkConjur struct {
	// The URL of the Cyberark instance
	AppUrl string `pulumi:"appUrl"`
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreCyberarkConjurInput is an input type that accepts SecretStoreCyberarkConjurArgs and SecretStoreCyberarkConjurOutput values.
// You can construct a concrete instance of `SecretStoreCyberarkConjurInput` via:
//
//	SecretStoreCyberarkConjurArgs{...}
type SecretStoreCyberarkConjurInput interface {
	pulumi.Input

	ToSecretStoreCyberarkConjurOutput() SecretStoreCyberarkConjurOutput
	ToSecretStoreCyberarkConjurOutputWithContext(context.Context) SecretStoreCyberarkConjurOutput
}

type SecretStoreCyberarkConjurArgs struct {
	// The URL of the Cyberark instance
	AppUrl pulumi.StringInput `pulumi:"appUrl"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreCyberarkConjurArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreCyberarkConjur)(nil)).Elem()
}

func (i SecretStoreCyberarkConjurArgs) ToSecretStoreCyberarkConjurOutput() SecretStoreCyberarkConjurOutput {
	return i.ToSecretStoreCyberarkConjurOutputWithContext(context.Background())
}

func (i SecretStoreCyberarkConjurArgs) ToSecretStoreCyberarkConjurOutputWithContext(ctx context.Context) SecretStoreCyberarkConjurOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreCyberarkConjurOutput)
}

func (i SecretStoreCyberarkConjurArgs) ToSecretStoreCyberarkConjurPtrOutput() SecretStoreCyberarkConjurPtrOutput {
	return i.ToSecretStoreCyberarkConjurPtrOutputWithContext(context.Background())
}

func (i SecretStoreCyberarkConjurArgs) ToSecretStoreCyberarkConjurPtrOutputWithContext(ctx context.Context) SecretStoreCyberarkConjurPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreCyberarkConjurOutput).ToSecretStoreCyberarkConjurPtrOutputWithContext(ctx)
}

// SecretStoreCyberarkConjurPtrInput is an input type that accepts SecretStoreCyberarkConjurArgs, SecretStoreCyberarkConjurPtr and SecretStoreCyberarkConjurPtrOutput values.
// You can construct a concrete instance of `SecretStoreCyberarkConjurPtrInput` via:
//
//	        SecretStoreCyberarkConjurArgs{...}
//
//	or:
//
//	        nil
type SecretStoreCyberarkConjurPtrInput interface {
	pulumi.Input

	ToSecretStoreCyberarkConjurPtrOutput() SecretStoreCyberarkConjurPtrOutput
	ToSecretStoreCyberarkConjurPtrOutputWithContext(context.Context) SecretStoreCyberarkConjurPtrOutput
}

type secretStoreCyberarkConjurPtrType SecretStoreCyberarkConjurArgs

func SecretStoreCyberarkConjurPtr(v *SecretStoreCyberarkConjurArgs) SecretStoreCyberarkConjurPtrInput {
	return (*secretStoreCyberarkConjurPtrType)(v)
}

func (*secretStoreCyberarkConjurPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreCyberarkConjur)(nil)).Elem()
}

func (i *secretStoreCyberarkConjurPtrType) ToSecretStoreCyberarkConjurPtrOutput() SecretStoreCyberarkConjurPtrOutput {
	return i.ToSecretStoreCyberarkConjurPtrOutputWithContext(context.Background())
}

func (i *secretStoreCyberarkConjurPtrType) ToSecretStoreCyberarkConjurPtrOutputWithContext(ctx context.Context) SecretStoreCyberarkConjurPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreCyberarkConjurPtrOutput)
}

type SecretStoreCyberarkConjurOutput struct{ *pulumi.OutputState }

func (SecretStoreCyberarkConjurOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreCyberarkConjur)(nil)).Elem()
}

func (o SecretStoreCyberarkConjurOutput) ToSecretStoreCyberarkConjurOutput() SecretStoreCyberarkConjurOutput {
	return o
}

func (o SecretStoreCyberarkConjurOutput) ToSecretStoreCyberarkConjurOutputWithContext(ctx context.Context) SecretStoreCyberarkConjurOutput {
	return o
}

func (o SecretStoreCyberarkConjurOutput) ToSecretStoreCyberarkConjurPtrOutput() SecretStoreCyberarkConjurPtrOutput {
	return o.ToSecretStoreCyberarkConjurPtrOutputWithContext(context.Background())
}

func (o SecretStoreCyberarkConjurOutput) ToSecretStoreCyberarkConjurPtrOutputWithContext(ctx context.Context) SecretStoreCyberarkConjurPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreCyberarkConjur) *SecretStoreCyberarkConjur {
		return &v
	}).(SecretStoreCyberarkConjurPtrOutput)
}

// The URL of the Cyberark instance
func (o SecretStoreCyberarkConjurOutput) AppUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreCyberarkConjur) string { return v.AppUrl }).(pulumi.StringOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreCyberarkConjurOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreCyberarkConjur) string { return v.Name }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreCyberarkConjurOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreCyberarkConjur) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreCyberarkConjurPtrOutput struct{ *pulumi.OutputState }

func (SecretStoreCyberarkConjurPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreCyberarkConjur)(nil)).Elem()
}

func (o SecretStoreCyberarkConjurPtrOutput) ToSecretStoreCyberarkConjurPtrOutput() SecretStoreCyberarkConjurPtrOutput {
	return o
}

func (o SecretStoreCyberarkConjurPtrOutput) ToSecretStoreCyberarkConjurPtrOutputWithContext(ctx context.Context) SecretStoreCyberarkConjurPtrOutput {
	return o
}

func (o SecretStoreCyberarkConjurPtrOutput) Elem() SecretStoreCyberarkConjurOutput {
	return o.ApplyT(func(v *SecretStoreCyberarkConjur) SecretStoreCyberarkConjur {
		if v != nil {
			return *v
		}
		var ret SecretStoreCyberarkConjur
		return ret
	}).(SecretStoreCyberarkConjurOutput)
}

// The URL of the Cyberark instance
func (o SecretStoreCyberarkConjurPtrOutput) AppUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreCyberarkConjur) *string {
		if v == nil {
			return nil
		}
		return &v.AppUrl
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreCyberarkConjurPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreCyberarkConjur) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreCyberarkConjurPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreCyberarkConjur) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreCyberarkPam struct {
	// The URL of the Cyberark instance
	AppUrl string `pulumi:"appUrl"`
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreCyberarkPamInput is an input type that accepts SecretStoreCyberarkPamArgs and SecretStoreCyberarkPamOutput values.
// You can construct a concrete instance of `SecretStoreCyberarkPamInput` via:
//
//	SecretStoreCyberarkPamArgs{...}
type SecretStoreCyberarkPamInput interface {
	pulumi.Input

	ToSecretStoreCyberarkPamOutput() SecretStoreCyberarkPamOutput
	ToSecretStoreCyberarkPamOutputWithContext(context.Context) SecretStoreCyberarkPamOutput
}

type SecretStoreCyberarkPamArgs struct {
	// The URL of the Cyberark instance
	AppUrl pulumi.StringInput `pulumi:"appUrl"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreCyberarkPamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreCyberarkPam)(nil)).Elem()
}

func (i SecretStoreCyberarkPamArgs) ToSecretStoreCyberarkPamOutput() SecretStoreCyberarkPamOutput {
	return i.ToSecretStoreCyberarkPamOutputWithContext(context.Background())
}

func (i SecretStoreCyberarkPamArgs) ToSecretStoreCyberarkPamOutputWithContext(ctx context.Context) SecretStoreCyberarkPamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreCyberarkPamOutput)
}

func (i SecretStoreCyberarkPamArgs) ToSecretStoreCyberarkPamPtrOutput() SecretStoreCyberarkPamPtrOutput {
	return i.ToSecretStoreCyberarkPamPtrOutputWithContext(context.Background())
}

func (i SecretStoreCyberarkPamArgs) ToSecretStoreCyberarkPamPtrOutputWithContext(ctx context.Context) SecretStoreCyberarkPamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreCyberarkPamOutput).ToSecretStoreCyberarkPamPtrOutputWithContext(ctx)
}

// SecretStoreCyberarkPamPtrInput is an input type that accepts SecretStoreCyberarkPamArgs, SecretStoreCyberarkPamPtr and SecretStoreCyberarkPamPtrOutput values.
// You can construct a concrete instance of `SecretStoreCyberarkPamPtrInput` via:
//
//	        SecretStoreCyberarkPamArgs{...}
//
//	or:
//
//	        nil
type SecretStoreCyberarkPamPtrInput interface {
	pulumi.Input

	ToSecretStoreCyberarkPamPtrOutput() SecretStoreCyberarkPamPtrOutput
	ToSecretStoreCyberarkPamPtrOutputWithContext(context.Context) SecretStoreCyberarkPamPtrOutput
}

type secretStoreCyberarkPamPtrType SecretStoreCyberarkPamArgs

func SecretStoreCyberarkPamPtr(v *SecretStoreCyberarkPamArgs) SecretStoreCyberarkPamPtrInput {
	return (*secretStoreCyberarkPamPtrType)(v)
}

func (*secretStoreCyberarkPamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreCyberarkPam)(nil)).Elem()
}

func (i *secretStoreCyberarkPamPtrType) ToSecretStoreCyberarkPamPtrOutput() SecretStoreCyberarkPamPtrOutput {
	return i.ToSecretStoreCyberarkPamPtrOutputWithContext(context.Background())
}

func (i *secretStoreCyberarkPamPtrType) ToSecretStoreCyberarkPamPtrOutputWithContext(ctx context.Context) SecretStoreCyberarkPamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreCyberarkPamPtrOutput)
}

type SecretStoreCyberarkPamOutput struct{ *pulumi.OutputState }

func (SecretStoreCyberarkPamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreCyberarkPam)(nil)).Elem()
}

func (o SecretStoreCyberarkPamOutput) ToSecretStoreCyberarkPamOutput() SecretStoreCyberarkPamOutput {
	return o
}

func (o SecretStoreCyberarkPamOutput) ToSecretStoreCyberarkPamOutputWithContext(ctx context.Context) SecretStoreCyberarkPamOutput {
	return o
}

func (o SecretStoreCyberarkPamOutput) ToSecretStoreCyberarkPamPtrOutput() SecretStoreCyberarkPamPtrOutput {
	return o.ToSecretStoreCyberarkPamPtrOutputWithContext(context.Background())
}

func (o SecretStoreCyberarkPamOutput) ToSecretStoreCyberarkPamPtrOutputWithContext(ctx context.Context) SecretStoreCyberarkPamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreCyberarkPam) *SecretStoreCyberarkPam {
		return &v
	}).(SecretStoreCyberarkPamPtrOutput)
}

// The URL of the Cyberark instance
func (o SecretStoreCyberarkPamOutput) AppUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreCyberarkPam) string { return v.AppUrl }).(pulumi.StringOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreCyberarkPamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreCyberarkPam) string { return v.Name }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreCyberarkPamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreCyberarkPam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreCyberarkPamPtrOutput struct{ *pulumi.OutputState }

func (SecretStoreCyberarkPamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreCyberarkPam)(nil)).Elem()
}

func (o SecretStoreCyberarkPamPtrOutput) ToSecretStoreCyberarkPamPtrOutput() SecretStoreCyberarkPamPtrOutput {
	return o
}

func (o SecretStoreCyberarkPamPtrOutput) ToSecretStoreCyberarkPamPtrOutputWithContext(ctx context.Context) SecretStoreCyberarkPamPtrOutput {
	return o
}

func (o SecretStoreCyberarkPamPtrOutput) Elem() SecretStoreCyberarkPamOutput {
	return o.ApplyT(func(v *SecretStoreCyberarkPam) SecretStoreCyberarkPam {
		if v != nil {
			return *v
		}
		var ret SecretStoreCyberarkPam
		return ret
	}).(SecretStoreCyberarkPamOutput)
}

// The URL of the Cyberark instance
func (o SecretStoreCyberarkPamPtrOutput) AppUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreCyberarkPam) *string {
		if v == nil {
			return nil
		}
		return &v.AppUrl
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreCyberarkPamPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreCyberarkPam) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreCyberarkPamPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreCyberarkPam) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreCyberarkPamExperimental struct {
	// The URL of the Cyberark instance
	AppUrl string `pulumi:"appUrl"`
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreCyberarkPamExperimentalInput is an input type that accepts SecretStoreCyberarkPamExperimentalArgs and SecretStoreCyberarkPamExperimentalOutput values.
// You can construct a concrete instance of `SecretStoreCyberarkPamExperimentalInput` via:
//
//	SecretStoreCyberarkPamExperimentalArgs{...}
type SecretStoreCyberarkPamExperimentalInput interface {
	pulumi.Input

	ToSecretStoreCyberarkPamExperimentalOutput() SecretStoreCyberarkPamExperimentalOutput
	ToSecretStoreCyberarkPamExperimentalOutputWithContext(context.Context) SecretStoreCyberarkPamExperimentalOutput
}

type SecretStoreCyberarkPamExperimentalArgs struct {
	// The URL of the Cyberark instance
	AppUrl pulumi.StringInput `pulumi:"appUrl"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreCyberarkPamExperimentalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreCyberarkPamExperimental)(nil)).Elem()
}

func (i SecretStoreCyberarkPamExperimentalArgs) ToSecretStoreCyberarkPamExperimentalOutput() SecretStoreCyberarkPamExperimentalOutput {
	return i.ToSecretStoreCyberarkPamExperimentalOutputWithContext(context.Background())
}

func (i SecretStoreCyberarkPamExperimentalArgs) ToSecretStoreCyberarkPamExperimentalOutputWithContext(ctx context.Context) SecretStoreCyberarkPamExperimentalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreCyberarkPamExperimentalOutput)
}

func (i SecretStoreCyberarkPamExperimentalArgs) ToSecretStoreCyberarkPamExperimentalPtrOutput() SecretStoreCyberarkPamExperimentalPtrOutput {
	return i.ToSecretStoreCyberarkPamExperimentalPtrOutputWithContext(context.Background())
}

func (i SecretStoreCyberarkPamExperimentalArgs) ToSecretStoreCyberarkPamExperimentalPtrOutputWithContext(ctx context.Context) SecretStoreCyberarkPamExperimentalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreCyberarkPamExperimentalOutput).ToSecretStoreCyberarkPamExperimentalPtrOutputWithContext(ctx)
}

// SecretStoreCyberarkPamExperimentalPtrInput is an input type that accepts SecretStoreCyberarkPamExperimentalArgs, SecretStoreCyberarkPamExperimentalPtr and SecretStoreCyberarkPamExperimentalPtrOutput values.
// You can construct a concrete instance of `SecretStoreCyberarkPamExperimentalPtrInput` via:
//
//	        SecretStoreCyberarkPamExperimentalArgs{...}
//
//	or:
//
//	        nil
type SecretStoreCyberarkPamExperimentalPtrInput interface {
	pulumi.Input

	ToSecretStoreCyberarkPamExperimentalPtrOutput() SecretStoreCyberarkPamExperimentalPtrOutput
	ToSecretStoreCyberarkPamExperimentalPtrOutputWithContext(context.Context) SecretStoreCyberarkPamExperimentalPtrOutput
}

type secretStoreCyberarkPamExperimentalPtrType SecretStoreCyberarkPamExperimentalArgs

func SecretStoreCyberarkPamExperimentalPtr(v *SecretStoreCyberarkPamExperimentalArgs) SecretStoreCyberarkPamExperimentalPtrInput {
	return (*secretStoreCyberarkPamExperimentalPtrType)(v)
}

func (*secretStoreCyberarkPamExperimentalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreCyberarkPamExperimental)(nil)).Elem()
}

func (i *secretStoreCyberarkPamExperimentalPtrType) ToSecretStoreCyberarkPamExperimentalPtrOutput() SecretStoreCyberarkPamExperimentalPtrOutput {
	return i.ToSecretStoreCyberarkPamExperimentalPtrOutputWithContext(context.Background())
}

func (i *secretStoreCyberarkPamExperimentalPtrType) ToSecretStoreCyberarkPamExperimentalPtrOutputWithContext(ctx context.Context) SecretStoreCyberarkPamExperimentalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreCyberarkPamExperimentalPtrOutput)
}

type SecretStoreCyberarkPamExperimentalOutput struct{ *pulumi.OutputState }

func (SecretStoreCyberarkPamExperimentalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreCyberarkPamExperimental)(nil)).Elem()
}

func (o SecretStoreCyberarkPamExperimentalOutput) ToSecretStoreCyberarkPamExperimentalOutput() SecretStoreCyberarkPamExperimentalOutput {
	return o
}

func (o SecretStoreCyberarkPamExperimentalOutput) ToSecretStoreCyberarkPamExperimentalOutputWithContext(ctx context.Context) SecretStoreCyberarkPamExperimentalOutput {
	return o
}

func (o SecretStoreCyberarkPamExperimentalOutput) ToSecretStoreCyberarkPamExperimentalPtrOutput() SecretStoreCyberarkPamExperimentalPtrOutput {
	return o.ToSecretStoreCyberarkPamExperimentalPtrOutputWithContext(context.Background())
}

func (o SecretStoreCyberarkPamExperimentalOutput) ToSecretStoreCyberarkPamExperimentalPtrOutputWithContext(ctx context.Context) SecretStoreCyberarkPamExperimentalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreCyberarkPamExperimental) *SecretStoreCyberarkPamExperimental {
		return &v
	}).(SecretStoreCyberarkPamExperimentalPtrOutput)
}

// The URL of the Cyberark instance
func (o SecretStoreCyberarkPamExperimentalOutput) AppUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreCyberarkPamExperimental) string { return v.AppUrl }).(pulumi.StringOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreCyberarkPamExperimentalOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreCyberarkPamExperimental) string { return v.Name }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreCyberarkPamExperimentalOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreCyberarkPamExperimental) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreCyberarkPamExperimentalPtrOutput struct{ *pulumi.OutputState }

func (SecretStoreCyberarkPamExperimentalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreCyberarkPamExperimental)(nil)).Elem()
}

func (o SecretStoreCyberarkPamExperimentalPtrOutput) ToSecretStoreCyberarkPamExperimentalPtrOutput() SecretStoreCyberarkPamExperimentalPtrOutput {
	return o
}

func (o SecretStoreCyberarkPamExperimentalPtrOutput) ToSecretStoreCyberarkPamExperimentalPtrOutputWithContext(ctx context.Context) SecretStoreCyberarkPamExperimentalPtrOutput {
	return o
}

func (o SecretStoreCyberarkPamExperimentalPtrOutput) Elem() SecretStoreCyberarkPamExperimentalOutput {
	return o.ApplyT(func(v *SecretStoreCyberarkPamExperimental) SecretStoreCyberarkPamExperimental {
		if v != nil {
			return *v
		}
		var ret SecretStoreCyberarkPamExperimental
		return ret
	}).(SecretStoreCyberarkPamExperimentalOutput)
}

// The URL of the Cyberark instance
func (o SecretStoreCyberarkPamExperimentalPtrOutput) AppUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreCyberarkPamExperimental) *string {
		if v == nil {
			return nil
		}
		return &v.AppUrl
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreCyberarkPamExperimentalPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreCyberarkPamExperimental) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreCyberarkPamExperimentalPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreCyberarkPamExperimental) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreDelineaStore struct {
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The URL of the Delinea instance
	ServerUrl *string `pulumi:"serverUrl"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The tenant name to target
	// * gcp_store:
	TenantName *string `pulumi:"tenantName"`
}

// SecretStoreDelineaStoreInput is an input type that accepts SecretStoreDelineaStoreArgs and SecretStoreDelineaStoreOutput values.
// You can construct a concrete instance of `SecretStoreDelineaStoreInput` via:
//
//	SecretStoreDelineaStoreArgs{...}
type SecretStoreDelineaStoreInput interface {
	pulumi.Input

	ToSecretStoreDelineaStoreOutput() SecretStoreDelineaStoreOutput
	ToSecretStoreDelineaStoreOutputWithContext(context.Context) SecretStoreDelineaStoreOutput
}

type SecretStoreDelineaStoreArgs struct {
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The URL of the Delinea instance
	ServerUrl pulumi.StringPtrInput `pulumi:"serverUrl"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The tenant name to target
	// * gcp_store:
	TenantName pulumi.StringPtrInput `pulumi:"tenantName"`
}

func (SecretStoreDelineaStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreDelineaStore)(nil)).Elem()
}

func (i SecretStoreDelineaStoreArgs) ToSecretStoreDelineaStoreOutput() SecretStoreDelineaStoreOutput {
	return i.ToSecretStoreDelineaStoreOutputWithContext(context.Background())
}

func (i SecretStoreDelineaStoreArgs) ToSecretStoreDelineaStoreOutputWithContext(ctx context.Context) SecretStoreDelineaStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreDelineaStoreOutput)
}

func (i SecretStoreDelineaStoreArgs) ToSecretStoreDelineaStorePtrOutput() SecretStoreDelineaStorePtrOutput {
	return i.ToSecretStoreDelineaStorePtrOutputWithContext(context.Background())
}

func (i SecretStoreDelineaStoreArgs) ToSecretStoreDelineaStorePtrOutputWithContext(ctx context.Context) SecretStoreDelineaStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreDelineaStoreOutput).ToSecretStoreDelineaStorePtrOutputWithContext(ctx)
}

// SecretStoreDelineaStorePtrInput is an input type that accepts SecretStoreDelineaStoreArgs, SecretStoreDelineaStorePtr and SecretStoreDelineaStorePtrOutput values.
// You can construct a concrete instance of `SecretStoreDelineaStorePtrInput` via:
//
//	        SecretStoreDelineaStoreArgs{...}
//
//	or:
//
//	        nil
type SecretStoreDelineaStorePtrInput interface {
	pulumi.Input

	ToSecretStoreDelineaStorePtrOutput() SecretStoreDelineaStorePtrOutput
	ToSecretStoreDelineaStorePtrOutputWithContext(context.Context) SecretStoreDelineaStorePtrOutput
}

type secretStoreDelineaStorePtrType SecretStoreDelineaStoreArgs

func SecretStoreDelineaStorePtr(v *SecretStoreDelineaStoreArgs) SecretStoreDelineaStorePtrInput {
	return (*secretStoreDelineaStorePtrType)(v)
}

func (*secretStoreDelineaStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreDelineaStore)(nil)).Elem()
}

func (i *secretStoreDelineaStorePtrType) ToSecretStoreDelineaStorePtrOutput() SecretStoreDelineaStorePtrOutput {
	return i.ToSecretStoreDelineaStorePtrOutputWithContext(context.Background())
}

func (i *secretStoreDelineaStorePtrType) ToSecretStoreDelineaStorePtrOutputWithContext(ctx context.Context) SecretStoreDelineaStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreDelineaStorePtrOutput)
}

type SecretStoreDelineaStoreOutput struct{ *pulumi.OutputState }

func (SecretStoreDelineaStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreDelineaStore)(nil)).Elem()
}

func (o SecretStoreDelineaStoreOutput) ToSecretStoreDelineaStoreOutput() SecretStoreDelineaStoreOutput {
	return o
}

func (o SecretStoreDelineaStoreOutput) ToSecretStoreDelineaStoreOutputWithContext(ctx context.Context) SecretStoreDelineaStoreOutput {
	return o
}

func (o SecretStoreDelineaStoreOutput) ToSecretStoreDelineaStorePtrOutput() SecretStoreDelineaStorePtrOutput {
	return o.ToSecretStoreDelineaStorePtrOutputWithContext(context.Background())
}

func (o SecretStoreDelineaStoreOutput) ToSecretStoreDelineaStorePtrOutputWithContext(ctx context.Context) SecretStoreDelineaStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreDelineaStore) *SecretStoreDelineaStore {
		return &v
	}).(SecretStoreDelineaStorePtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreDelineaStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreDelineaStore) string { return v.Name }).(pulumi.StringOutput)
}

// The URL of the Delinea instance
func (o SecretStoreDelineaStoreOutput) ServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreDelineaStore) *string { return v.ServerUrl }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreDelineaStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreDelineaStore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The tenant name to target
// * gcp_store:
func (o SecretStoreDelineaStoreOutput) TenantName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreDelineaStore) *string { return v.TenantName }).(pulumi.StringPtrOutput)
}

type SecretStoreDelineaStorePtrOutput struct{ *pulumi.OutputState }

func (SecretStoreDelineaStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreDelineaStore)(nil)).Elem()
}

func (o SecretStoreDelineaStorePtrOutput) ToSecretStoreDelineaStorePtrOutput() SecretStoreDelineaStorePtrOutput {
	return o
}

func (o SecretStoreDelineaStorePtrOutput) ToSecretStoreDelineaStorePtrOutputWithContext(ctx context.Context) SecretStoreDelineaStorePtrOutput {
	return o
}

func (o SecretStoreDelineaStorePtrOutput) Elem() SecretStoreDelineaStoreOutput {
	return o.ApplyT(func(v *SecretStoreDelineaStore) SecretStoreDelineaStore {
		if v != nil {
			return *v
		}
		var ret SecretStoreDelineaStore
		return ret
	}).(SecretStoreDelineaStoreOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreDelineaStorePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreDelineaStore) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The URL of the Delinea instance
func (o SecretStoreDelineaStorePtrOutput) ServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreDelineaStore) *string {
		if v == nil {
			return nil
		}
		return v.ServerUrl
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreDelineaStorePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreDelineaStore) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// The tenant name to target
// * gcp_store:
func (o SecretStoreDelineaStorePtrOutput) TenantName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreDelineaStore) *string {
		if v == nil {
			return nil
		}
		return v.TenantName
	}).(pulumi.StringPtrOutput)
}

type SecretStoreGcpCertX509Store struct {
	// The ID of the target CA
	CaId *string `pulumi:"caId"`
	// The ID of the target CA pool
	CaPoolId string `pulumi:"caPoolId"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes int `pulumi:"issuedCertTtlMinutes"`
	// The Region for the CA in GCP format e.g. us-west1
	Location string `pulumi:"location"`
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The GCP project ID to target.
	ProjectId string `pulumi:"projectId"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreGcpCertX509StoreInput is an input type that accepts SecretStoreGcpCertX509StoreArgs and SecretStoreGcpCertX509StoreOutput values.
// You can construct a concrete instance of `SecretStoreGcpCertX509StoreInput` via:
//
//	SecretStoreGcpCertX509StoreArgs{...}
type SecretStoreGcpCertX509StoreInput interface {
	pulumi.Input

	ToSecretStoreGcpCertX509StoreOutput() SecretStoreGcpCertX509StoreOutput
	ToSecretStoreGcpCertX509StoreOutputWithContext(context.Context) SecretStoreGcpCertX509StoreOutput
}

type SecretStoreGcpCertX509StoreArgs struct {
	// The ID of the target CA
	CaId pulumi.StringPtrInput `pulumi:"caId"`
	// The ID of the target CA pool
	CaPoolId pulumi.StringInput `pulumi:"caPoolId"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes pulumi.IntInput `pulumi:"issuedCertTtlMinutes"`
	// The Region for the CA in GCP format e.g. us-west1
	Location pulumi.StringInput `pulumi:"location"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The GCP project ID to target.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreGcpCertX509StoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreGcpCertX509Store)(nil)).Elem()
}

func (i SecretStoreGcpCertX509StoreArgs) ToSecretStoreGcpCertX509StoreOutput() SecretStoreGcpCertX509StoreOutput {
	return i.ToSecretStoreGcpCertX509StoreOutputWithContext(context.Background())
}

func (i SecretStoreGcpCertX509StoreArgs) ToSecretStoreGcpCertX509StoreOutputWithContext(ctx context.Context) SecretStoreGcpCertX509StoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreGcpCertX509StoreOutput)
}

func (i SecretStoreGcpCertX509StoreArgs) ToSecretStoreGcpCertX509StorePtrOutput() SecretStoreGcpCertX509StorePtrOutput {
	return i.ToSecretStoreGcpCertX509StorePtrOutputWithContext(context.Background())
}

func (i SecretStoreGcpCertX509StoreArgs) ToSecretStoreGcpCertX509StorePtrOutputWithContext(ctx context.Context) SecretStoreGcpCertX509StorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreGcpCertX509StoreOutput).ToSecretStoreGcpCertX509StorePtrOutputWithContext(ctx)
}

// SecretStoreGcpCertX509StorePtrInput is an input type that accepts SecretStoreGcpCertX509StoreArgs, SecretStoreGcpCertX509StorePtr and SecretStoreGcpCertX509StorePtrOutput values.
// You can construct a concrete instance of `SecretStoreGcpCertX509StorePtrInput` via:
//
//	        SecretStoreGcpCertX509StoreArgs{...}
//
//	or:
//
//	        nil
type SecretStoreGcpCertX509StorePtrInput interface {
	pulumi.Input

	ToSecretStoreGcpCertX509StorePtrOutput() SecretStoreGcpCertX509StorePtrOutput
	ToSecretStoreGcpCertX509StorePtrOutputWithContext(context.Context) SecretStoreGcpCertX509StorePtrOutput
}

type secretStoreGcpCertX509StorePtrType SecretStoreGcpCertX509StoreArgs

func SecretStoreGcpCertX509StorePtr(v *SecretStoreGcpCertX509StoreArgs) SecretStoreGcpCertX509StorePtrInput {
	return (*secretStoreGcpCertX509StorePtrType)(v)
}

func (*secretStoreGcpCertX509StorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreGcpCertX509Store)(nil)).Elem()
}

func (i *secretStoreGcpCertX509StorePtrType) ToSecretStoreGcpCertX509StorePtrOutput() SecretStoreGcpCertX509StorePtrOutput {
	return i.ToSecretStoreGcpCertX509StorePtrOutputWithContext(context.Background())
}

func (i *secretStoreGcpCertX509StorePtrType) ToSecretStoreGcpCertX509StorePtrOutputWithContext(ctx context.Context) SecretStoreGcpCertX509StorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreGcpCertX509StorePtrOutput)
}

type SecretStoreGcpCertX509StoreOutput struct{ *pulumi.OutputState }

func (SecretStoreGcpCertX509StoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreGcpCertX509Store)(nil)).Elem()
}

func (o SecretStoreGcpCertX509StoreOutput) ToSecretStoreGcpCertX509StoreOutput() SecretStoreGcpCertX509StoreOutput {
	return o
}

func (o SecretStoreGcpCertX509StoreOutput) ToSecretStoreGcpCertX509StoreOutputWithContext(ctx context.Context) SecretStoreGcpCertX509StoreOutput {
	return o
}

func (o SecretStoreGcpCertX509StoreOutput) ToSecretStoreGcpCertX509StorePtrOutput() SecretStoreGcpCertX509StorePtrOutput {
	return o.ToSecretStoreGcpCertX509StorePtrOutputWithContext(context.Background())
}

func (o SecretStoreGcpCertX509StoreOutput) ToSecretStoreGcpCertX509StorePtrOutputWithContext(ctx context.Context) SecretStoreGcpCertX509StorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreGcpCertX509Store) *SecretStoreGcpCertX509Store {
		return &v
	}).(SecretStoreGcpCertX509StorePtrOutput)
}

// The ID of the target CA
func (o SecretStoreGcpCertX509StoreOutput) CaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreGcpCertX509Store) *string { return v.CaId }).(pulumi.StringPtrOutput)
}

// The ID of the target CA pool
func (o SecretStoreGcpCertX509StoreOutput) CaPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreGcpCertX509Store) string { return v.CaPoolId }).(pulumi.StringOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o SecretStoreGcpCertX509StoreOutput) IssuedCertTtlMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v SecretStoreGcpCertX509Store) int { return v.IssuedCertTtlMinutes }).(pulumi.IntOutput)
}

// The Region for the CA in GCP format e.g. us-west1
func (o SecretStoreGcpCertX509StoreOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreGcpCertX509Store) string { return v.Location }).(pulumi.StringOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreGcpCertX509StoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreGcpCertX509Store) string { return v.Name }).(pulumi.StringOutput)
}

// The GCP project ID to target.
func (o SecretStoreGcpCertX509StoreOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreGcpCertX509Store) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreGcpCertX509StoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreGcpCertX509Store) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreGcpCertX509StorePtrOutput struct{ *pulumi.OutputState }

func (SecretStoreGcpCertX509StorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreGcpCertX509Store)(nil)).Elem()
}

func (o SecretStoreGcpCertX509StorePtrOutput) ToSecretStoreGcpCertX509StorePtrOutput() SecretStoreGcpCertX509StorePtrOutput {
	return o
}

func (o SecretStoreGcpCertX509StorePtrOutput) ToSecretStoreGcpCertX509StorePtrOutputWithContext(ctx context.Context) SecretStoreGcpCertX509StorePtrOutput {
	return o
}

func (o SecretStoreGcpCertX509StorePtrOutput) Elem() SecretStoreGcpCertX509StoreOutput {
	return o.ApplyT(func(v *SecretStoreGcpCertX509Store) SecretStoreGcpCertX509Store {
		if v != nil {
			return *v
		}
		var ret SecretStoreGcpCertX509Store
		return ret
	}).(SecretStoreGcpCertX509StoreOutput)
}

// The ID of the target CA
func (o SecretStoreGcpCertX509StorePtrOutput) CaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreGcpCertX509Store) *string {
		if v == nil {
			return nil
		}
		return v.CaId
	}).(pulumi.StringPtrOutput)
}

// The ID of the target CA pool
func (o SecretStoreGcpCertX509StorePtrOutput) CaPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreGcpCertX509Store) *string {
		if v == nil {
			return nil
		}
		return &v.CaPoolId
	}).(pulumi.StringPtrOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o SecretStoreGcpCertX509StorePtrOutput) IssuedCertTtlMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretStoreGcpCertX509Store) *int {
		if v == nil {
			return nil
		}
		return &v.IssuedCertTtlMinutes
	}).(pulumi.IntPtrOutput)
}

// The Region for the CA in GCP format e.g. us-west1
func (o SecretStoreGcpCertX509StorePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreGcpCertX509Store) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreGcpCertX509StorePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreGcpCertX509Store) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The GCP project ID to target.
func (o SecretStoreGcpCertX509StorePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreGcpCertX509Store) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreGcpCertX509StorePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreGcpCertX509Store) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreGcpStore struct {
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The GCP project ID to target.
	ProjectId string `pulumi:"projectId"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreGcpStoreInput is an input type that accepts SecretStoreGcpStoreArgs and SecretStoreGcpStoreOutput values.
// You can construct a concrete instance of `SecretStoreGcpStoreInput` via:
//
//	SecretStoreGcpStoreArgs{...}
type SecretStoreGcpStoreInput interface {
	pulumi.Input

	ToSecretStoreGcpStoreOutput() SecretStoreGcpStoreOutput
	ToSecretStoreGcpStoreOutputWithContext(context.Context) SecretStoreGcpStoreOutput
}

type SecretStoreGcpStoreArgs struct {
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The GCP project ID to target.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreGcpStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreGcpStore)(nil)).Elem()
}

func (i SecretStoreGcpStoreArgs) ToSecretStoreGcpStoreOutput() SecretStoreGcpStoreOutput {
	return i.ToSecretStoreGcpStoreOutputWithContext(context.Background())
}

func (i SecretStoreGcpStoreArgs) ToSecretStoreGcpStoreOutputWithContext(ctx context.Context) SecretStoreGcpStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreGcpStoreOutput)
}

func (i SecretStoreGcpStoreArgs) ToSecretStoreGcpStorePtrOutput() SecretStoreGcpStorePtrOutput {
	return i.ToSecretStoreGcpStorePtrOutputWithContext(context.Background())
}

func (i SecretStoreGcpStoreArgs) ToSecretStoreGcpStorePtrOutputWithContext(ctx context.Context) SecretStoreGcpStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreGcpStoreOutput).ToSecretStoreGcpStorePtrOutputWithContext(ctx)
}

// SecretStoreGcpStorePtrInput is an input type that accepts SecretStoreGcpStoreArgs, SecretStoreGcpStorePtr and SecretStoreGcpStorePtrOutput values.
// You can construct a concrete instance of `SecretStoreGcpStorePtrInput` via:
//
//	        SecretStoreGcpStoreArgs{...}
//
//	or:
//
//	        nil
type SecretStoreGcpStorePtrInput interface {
	pulumi.Input

	ToSecretStoreGcpStorePtrOutput() SecretStoreGcpStorePtrOutput
	ToSecretStoreGcpStorePtrOutputWithContext(context.Context) SecretStoreGcpStorePtrOutput
}

type secretStoreGcpStorePtrType SecretStoreGcpStoreArgs

func SecretStoreGcpStorePtr(v *SecretStoreGcpStoreArgs) SecretStoreGcpStorePtrInput {
	return (*secretStoreGcpStorePtrType)(v)
}

func (*secretStoreGcpStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreGcpStore)(nil)).Elem()
}

func (i *secretStoreGcpStorePtrType) ToSecretStoreGcpStorePtrOutput() SecretStoreGcpStorePtrOutput {
	return i.ToSecretStoreGcpStorePtrOutputWithContext(context.Background())
}

func (i *secretStoreGcpStorePtrType) ToSecretStoreGcpStorePtrOutputWithContext(ctx context.Context) SecretStoreGcpStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreGcpStorePtrOutput)
}

type SecretStoreGcpStoreOutput struct{ *pulumi.OutputState }

func (SecretStoreGcpStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreGcpStore)(nil)).Elem()
}

func (o SecretStoreGcpStoreOutput) ToSecretStoreGcpStoreOutput() SecretStoreGcpStoreOutput {
	return o
}

func (o SecretStoreGcpStoreOutput) ToSecretStoreGcpStoreOutputWithContext(ctx context.Context) SecretStoreGcpStoreOutput {
	return o
}

func (o SecretStoreGcpStoreOutput) ToSecretStoreGcpStorePtrOutput() SecretStoreGcpStorePtrOutput {
	return o.ToSecretStoreGcpStorePtrOutputWithContext(context.Background())
}

func (o SecretStoreGcpStoreOutput) ToSecretStoreGcpStorePtrOutputWithContext(ctx context.Context) SecretStoreGcpStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreGcpStore) *SecretStoreGcpStore {
		return &v
	}).(SecretStoreGcpStorePtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreGcpStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreGcpStore) string { return v.Name }).(pulumi.StringOutput)
}

// The GCP project ID to target.
func (o SecretStoreGcpStoreOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreGcpStore) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreGcpStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreGcpStore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreGcpStorePtrOutput struct{ *pulumi.OutputState }

func (SecretStoreGcpStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreGcpStore)(nil)).Elem()
}

func (o SecretStoreGcpStorePtrOutput) ToSecretStoreGcpStorePtrOutput() SecretStoreGcpStorePtrOutput {
	return o
}

func (o SecretStoreGcpStorePtrOutput) ToSecretStoreGcpStorePtrOutputWithContext(ctx context.Context) SecretStoreGcpStorePtrOutput {
	return o
}

func (o SecretStoreGcpStorePtrOutput) Elem() SecretStoreGcpStoreOutput {
	return o.ApplyT(func(v *SecretStoreGcpStore) SecretStoreGcpStore {
		if v != nil {
			return *v
		}
		var ret SecretStoreGcpStore
		return ret
	}).(SecretStoreGcpStoreOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreGcpStorePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreGcpStore) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The GCP project ID to target.
func (o SecretStoreGcpStorePtrOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreGcpStore) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectId
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreGcpStorePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreGcpStore) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreKeyfactorSshStore struct {
	// Path to the root CA that signed the certificate passed to the client for HTTPS connection. This is not required if the CA is trusted by the host operating system. This should be a PEM formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
	CaFilePath *string `pulumi:"caFilePath"`
	// Path to client certificate in PEM format. This certificate must contain a client certificate that is recognized by the EJBCA instance represented by Hostname. This PEM file may also contain the private key associated with the certificate, but KeyFile can also be set to configure the private key.
	CertificateFilePath string `pulumi:"certificateFilePath"`
	// Name of EJBCA certificate authority that will enroll CSR.
	DefaultCertificateAuthorityName string `pulumi:"defaultCertificateAuthorityName"`
	// Certificate profile name that EJBCA will enroll the CSR with.
	DefaultCertificateProfileName string `pulumi:"defaultCertificateProfileName"`
	// End entity profile that EJBCA will enroll the CSR with.
	DefaultEndEntityProfileName string `pulumi:"defaultEndEntityProfileName"`
	// code used by EJBCA during enrollment. May be left blank if no code is required.
	EnrollmentCodeEnvVar *string `pulumi:"enrollmentCodeEnvVar"`
	// username that used by the EJBCA during enrollment. This can be left out.  If so, the username must be auto-generated on the Keyfactor side.
	EnrollmentUsernameEnvVar *string `pulumi:"enrollmentUsernameEnvVar"`
	// Path to private key in PEM format. This file should contain the private key associated with the client certificate configured in CertificateFile.
	KeyFilePath *string `pulumi:"keyFilePath"`
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The URL of the Vault to target
	ServerAddress string `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreKeyfactorSshStoreInput is an input type that accepts SecretStoreKeyfactorSshStoreArgs and SecretStoreKeyfactorSshStoreOutput values.
// You can construct a concrete instance of `SecretStoreKeyfactorSshStoreInput` via:
//
//	SecretStoreKeyfactorSshStoreArgs{...}
type SecretStoreKeyfactorSshStoreInput interface {
	pulumi.Input

	ToSecretStoreKeyfactorSshStoreOutput() SecretStoreKeyfactorSshStoreOutput
	ToSecretStoreKeyfactorSshStoreOutputWithContext(context.Context) SecretStoreKeyfactorSshStoreOutput
}

type SecretStoreKeyfactorSshStoreArgs struct {
	// Path to the root CA that signed the certificate passed to the client for HTTPS connection. This is not required if the CA is trusted by the host operating system. This should be a PEM formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
	CaFilePath pulumi.StringPtrInput `pulumi:"caFilePath"`
	// Path to client certificate in PEM format. This certificate must contain a client certificate that is recognized by the EJBCA instance represented by Hostname. This PEM file may also contain the private key associated with the certificate, but KeyFile can also be set to configure the private key.
	CertificateFilePath pulumi.StringInput `pulumi:"certificateFilePath"`
	// Name of EJBCA certificate authority that will enroll CSR.
	DefaultCertificateAuthorityName pulumi.StringInput `pulumi:"defaultCertificateAuthorityName"`
	// Certificate profile name that EJBCA will enroll the CSR with.
	DefaultCertificateProfileName pulumi.StringInput `pulumi:"defaultCertificateProfileName"`
	// End entity profile that EJBCA will enroll the CSR with.
	DefaultEndEntityProfileName pulumi.StringInput `pulumi:"defaultEndEntityProfileName"`
	// code used by EJBCA during enrollment. May be left blank if no code is required.
	EnrollmentCodeEnvVar pulumi.StringPtrInput `pulumi:"enrollmentCodeEnvVar"`
	// username that used by the EJBCA during enrollment. This can be left out.  If so, the username must be auto-generated on the Keyfactor side.
	EnrollmentUsernameEnvVar pulumi.StringPtrInput `pulumi:"enrollmentUsernameEnvVar"`
	// Path to private key in PEM format. This file should contain the private key associated with the client certificate configured in CertificateFile.
	KeyFilePath pulumi.StringPtrInput `pulumi:"keyFilePath"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringInput `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreKeyfactorSshStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreKeyfactorSshStore)(nil)).Elem()
}

func (i SecretStoreKeyfactorSshStoreArgs) ToSecretStoreKeyfactorSshStoreOutput() SecretStoreKeyfactorSshStoreOutput {
	return i.ToSecretStoreKeyfactorSshStoreOutputWithContext(context.Background())
}

func (i SecretStoreKeyfactorSshStoreArgs) ToSecretStoreKeyfactorSshStoreOutputWithContext(ctx context.Context) SecretStoreKeyfactorSshStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreKeyfactorSshStoreOutput)
}

func (i SecretStoreKeyfactorSshStoreArgs) ToSecretStoreKeyfactorSshStorePtrOutput() SecretStoreKeyfactorSshStorePtrOutput {
	return i.ToSecretStoreKeyfactorSshStorePtrOutputWithContext(context.Background())
}

func (i SecretStoreKeyfactorSshStoreArgs) ToSecretStoreKeyfactorSshStorePtrOutputWithContext(ctx context.Context) SecretStoreKeyfactorSshStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreKeyfactorSshStoreOutput).ToSecretStoreKeyfactorSshStorePtrOutputWithContext(ctx)
}

// SecretStoreKeyfactorSshStorePtrInput is an input type that accepts SecretStoreKeyfactorSshStoreArgs, SecretStoreKeyfactorSshStorePtr and SecretStoreKeyfactorSshStorePtrOutput values.
// You can construct a concrete instance of `SecretStoreKeyfactorSshStorePtrInput` via:
//
//	        SecretStoreKeyfactorSshStoreArgs{...}
//
//	or:
//
//	        nil
type SecretStoreKeyfactorSshStorePtrInput interface {
	pulumi.Input

	ToSecretStoreKeyfactorSshStorePtrOutput() SecretStoreKeyfactorSshStorePtrOutput
	ToSecretStoreKeyfactorSshStorePtrOutputWithContext(context.Context) SecretStoreKeyfactorSshStorePtrOutput
}

type secretStoreKeyfactorSshStorePtrType SecretStoreKeyfactorSshStoreArgs

func SecretStoreKeyfactorSshStorePtr(v *SecretStoreKeyfactorSshStoreArgs) SecretStoreKeyfactorSshStorePtrInput {
	return (*secretStoreKeyfactorSshStorePtrType)(v)
}

func (*secretStoreKeyfactorSshStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreKeyfactorSshStore)(nil)).Elem()
}

func (i *secretStoreKeyfactorSshStorePtrType) ToSecretStoreKeyfactorSshStorePtrOutput() SecretStoreKeyfactorSshStorePtrOutput {
	return i.ToSecretStoreKeyfactorSshStorePtrOutputWithContext(context.Background())
}

func (i *secretStoreKeyfactorSshStorePtrType) ToSecretStoreKeyfactorSshStorePtrOutputWithContext(ctx context.Context) SecretStoreKeyfactorSshStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreKeyfactorSshStorePtrOutput)
}

type SecretStoreKeyfactorSshStoreOutput struct{ *pulumi.OutputState }

func (SecretStoreKeyfactorSshStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreKeyfactorSshStore)(nil)).Elem()
}

func (o SecretStoreKeyfactorSshStoreOutput) ToSecretStoreKeyfactorSshStoreOutput() SecretStoreKeyfactorSshStoreOutput {
	return o
}

func (o SecretStoreKeyfactorSshStoreOutput) ToSecretStoreKeyfactorSshStoreOutputWithContext(ctx context.Context) SecretStoreKeyfactorSshStoreOutput {
	return o
}

func (o SecretStoreKeyfactorSshStoreOutput) ToSecretStoreKeyfactorSshStorePtrOutput() SecretStoreKeyfactorSshStorePtrOutput {
	return o.ToSecretStoreKeyfactorSshStorePtrOutputWithContext(context.Background())
}

func (o SecretStoreKeyfactorSshStoreOutput) ToSecretStoreKeyfactorSshStorePtrOutputWithContext(ctx context.Context) SecretStoreKeyfactorSshStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreKeyfactorSshStore) *SecretStoreKeyfactorSshStore {
		return &v
	}).(SecretStoreKeyfactorSshStorePtrOutput)
}

// Path to the root CA that signed the certificate passed to the client for HTTPS connection. This is not required if the CA is trusted by the host operating system. This should be a PEM formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
func (o SecretStoreKeyfactorSshStoreOutput) CaFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorSshStore) *string { return v.CaFilePath }).(pulumi.StringPtrOutput)
}

// Path to client certificate in PEM format. This certificate must contain a client certificate that is recognized by the EJBCA instance represented by Hostname. This PEM file may also contain the private key associated with the certificate, but KeyFile can also be set to configure the private key.
func (o SecretStoreKeyfactorSshStoreOutput) CertificateFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorSshStore) string { return v.CertificateFilePath }).(pulumi.StringOutput)
}

// Name of EJBCA certificate authority that will enroll CSR.
func (o SecretStoreKeyfactorSshStoreOutput) DefaultCertificateAuthorityName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorSshStore) string { return v.DefaultCertificateAuthorityName }).(pulumi.StringOutput)
}

// Certificate profile name that EJBCA will enroll the CSR with.
func (o SecretStoreKeyfactorSshStoreOutput) DefaultCertificateProfileName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorSshStore) string { return v.DefaultCertificateProfileName }).(pulumi.StringOutput)
}

// End entity profile that EJBCA will enroll the CSR with.
func (o SecretStoreKeyfactorSshStoreOutput) DefaultEndEntityProfileName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorSshStore) string { return v.DefaultEndEntityProfileName }).(pulumi.StringOutput)
}

// code used by EJBCA during enrollment. May be left blank if no code is required.
func (o SecretStoreKeyfactorSshStoreOutput) EnrollmentCodeEnvVar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorSshStore) *string { return v.EnrollmentCodeEnvVar }).(pulumi.StringPtrOutput)
}

// username that used by the EJBCA during enrollment. This can be left out.  If so, the username must be auto-generated on the Keyfactor side.
func (o SecretStoreKeyfactorSshStoreOutput) EnrollmentUsernameEnvVar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorSshStore) *string { return v.EnrollmentUsernameEnvVar }).(pulumi.StringPtrOutput)
}

// Path to private key in PEM format. This file should contain the private key associated with the client certificate configured in CertificateFile.
func (o SecretStoreKeyfactorSshStoreOutput) KeyFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorSshStore) *string { return v.KeyFilePath }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreKeyfactorSshStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorSshStore) string { return v.Name }).(pulumi.StringOutput)
}

// The URL of the Vault to target
func (o SecretStoreKeyfactorSshStoreOutput) ServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorSshStore) string { return v.ServerAddress }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreKeyfactorSshStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorSshStore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreKeyfactorSshStorePtrOutput struct{ *pulumi.OutputState }

func (SecretStoreKeyfactorSshStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreKeyfactorSshStore)(nil)).Elem()
}

func (o SecretStoreKeyfactorSshStorePtrOutput) ToSecretStoreKeyfactorSshStorePtrOutput() SecretStoreKeyfactorSshStorePtrOutput {
	return o
}

func (o SecretStoreKeyfactorSshStorePtrOutput) ToSecretStoreKeyfactorSshStorePtrOutputWithContext(ctx context.Context) SecretStoreKeyfactorSshStorePtrOutput {
	return o
}

func (o SecretStoreKeyfactorSshStorePtrOutput) Elem() SecretStoreKeyfactorSshStoreOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorSshStore) SecretStoreKeyfactorSshStore {
		if v != nil {
			return *v
		}
		var ret SecretStoreKeyfactorSshStore
		return ret
	}).(SecretStoreKeyfactorSshStoreOutput)
}

// Path to the root CA that signed the certificate passed to the client for HTTPS connection. This is not required if the CA is trusted by the host operating system. This should be a PEM formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
func (o SecretStoreKeyfactorSshStorePtrOutput) CaFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorSshStore) *string {
		if v == nil {
			return nil
		}
		return v.CaFilePath
	}).(pulumi.StringPtrOutput)
}

// Path to client certificate in PEM format. This certificate must contain a client certificate that is recognized by the EJBCA instance represented by Hostname. This PEM file may also contain the private key associated with the certificate, but KeyFile can also be set to configure the private key.
func (o SecretStoreKeyfactorSshStorePtrOutput) CertificateFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorSshStore) *string {
		if v == nil {
			return nil
		}
		return &v.CertificateFilePath
	}).(pulumi.StringPtrOutput)
}

// Name of EJBCA certificate authority that will enroll CSR.
func (o SecretStoreKeyfactorSshStorePtrOutput) DefaultCertificateAuthorityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorSshStore) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultCertificateAuthorityName
	}).(pulumi.StringPtrOutput)
}

// Certificate profile name that EJBCA will enroll the CSR with.
func (o SecretStoreKeyfactorSshStorePtrOutput) DefaultCertificateProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorSshStore) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultCertificateProfileName
	}).(pulumi.StringPtrOutput)
}

// End entity profile that EJBCA will enroll the CSR with.
func (o SecretStoreKeyfactorSshStorePtrOutput) DefaultEndEntityProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorSshStore) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultEndEntityProfileName
	}).(pulumi.StringPtrOutput)
}

// code used by EJBCA during enrollment. May be left blank if no code is required.
func (o SecretStoreKeyfactorSshStorePtrOutput) EnrollmentCodeEnvVar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorSshStore) *string {
		if v == nil {
			return nil
		}
		return v.EnrollmentCodeEnvVar
	}).(pulumi.StringPtrOutput)
}

// username that used by the EJBCA during enrollment. This can be left out.  If so, the username must be auto-generated on the Keyfactor side.
func (o SecretStoreKeyfactorSshStorePtrOutput) EnrollmentUsernameEnvVar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorSshStore) *string {
		if v == nil {
			return nil
		}
		return v.EnrollmentUsernameEnvVar
	}).(pulumi.StringPtrOutput)
}

// Path to private key in PEM format. This file should contain the private key associated with the client certificate configured in CertificateFile.
func (o SecretStoreKeyfactorSshStorePtrOutput) KeyFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorSshStore) *string {
		if v == nil {
			return nil
		}
		return v.KeyFilePath
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreKeyfactorSshStorePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorSshStore) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreKeyfactorSshStorePtrOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorSshStore) *string {
		if v == nil {
			return nil
		}
		return &v.ServerAddress
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreKeyfactorSshStorePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorSshStore) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreKeyfactorX509Store struct {
	// Path to the root CA that signed the certificate passed to the client for HTTPS connection. This is not required if the CA is trusted by the host operating system. This should be a PEM formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
	CaFilePath *string `pulumi:"caFilePath"`
	// Path to client certificate in PEM format. This certificate must contain a client certificate that is recognized by the EJBCA instance represented by Hostname. This PEM file may also contain the private key associated with the certificate, but KeyFile can also be set to configure the private key.
	CertificateFilePath string `pulumi:"certificateFilePath"`
	// Name of EJBCA certificate authority that will enroll CSR.
	DefaultCertificateAuthorityName string `pulumi:"defaultCertificateAuthorityName"`
	// Certificate profile name that EJBCA will enroll the CSR with.
	DefaultCertificateProfileName string `pulumi:"defaultCertificateProfileName"`
	// End entity profile that EJBCA will enroll the CSR with.
	DefaultEndEntityProfileName string `pulumi:"defaultEndEntityProfileName"`
	// code used by EJBCA during enrollment. May be left blank if no code is required.
	EnrollmentCodeEnvVar *string `pulumi:"enrollmentCodeEnvVar"`
	// username that used by the EJBCA during enrollment. This can be left out.  If so, the username must be auto-generated on the Keyfactor side.
	EnrollmentUsernameEnvVar *string `pulumi:"enrollmentUsernameEnvVar"`
	// Path to private key in PEM format. This file should contain the private key associated with the client certificate configured in CertificateFile.
	KeyFilePath *string `pulumi:"keyFilePath"`
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The URL of the Vault to target
	ServerAddress string `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreKeyfactorX509StoreInput is an input type that accepts SecretStoreKeyfactorX509StoreArgs and SecretStoreKeyfactorX509StoreOutput values.
// You can construct a concrete instance of `SecretStoreKeyfactorX509StoreInput` via:
//
//	SecretStoreKeyfactorX509StoreArgs{...}
type SecretStoreKeyfactorX509StoreInput interface {
	pulumi.Input

	ToSecretStoreKeyfactorX509StoreOutput() SecretStoreKeyfactorX509StoreOutput
	ToSecretStoreKeyfactorX509StoreOutputWithContext(context.Context) SecretStoreKeyfactorX509StoreOutput
}

type SecretStoreKeyfactorX509StoreArgs struct {
	// Path to the root CA that signed the certificate passed to the client for HTTPS connection. This is not required if the CA is trusted by the host operating system. This should be a PEM formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
	CaFilePath pulumi.StringPtrInput `pulumi:"caFilePath"`
	// Path to client certificate in PEM format. This certificate must contain a client certificate that is recognized by the EJBCA instance represented by Hostname. This PEM file may also contain the private key associated with the certificate, but KeyFile can also be set to configure the private key.
	CertificateFilePath pulumi.StringInput `pulumi:"certificateFilePath"`
	// Name of EJBCA certificate authority that will enroll CSR.
	DefaultCertificateAuthorityName pulumi.StringInput `pulumi:"defaultCertificateAuthorityName"`
	// Certificate profile name that EJBCA will enroll the CSR with.
	DefaultCertificateProfileName pulumi.StringInput `pulumi:"defaultCertificateProfileName"`
	// End entity profile that EJBCA will enroll the CSR with.
	DefaultEndEntityProfileName pulumi.StringInput `pulumi:"defaultEndEntityProfileName"`
	// code used by EJBCA during enrollment. May be left blank if no code is required.
	EnrollmentCodeEnvVar pulumi.StringPtrInput `pulumi:"enrollmentCodeEnvVar"`
	// username that used by the EJBCA during enrollment. This can be left out.  If so, the username must be auto-generated on the Keyfactor side.
	EnrollmentUsernameEnvVar pulumi.StringPtrInput `pulumi:"enrollmentUsernameEnvVar"`
	// Path to private key in PEM format. This file should contain the private key associated with the client certificate configured in CertificateFile.
	KeyFilePath pulumi.StringPtrInput `pulumi:"keyFilePath"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringInput `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreKeyfactorX509StoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreKeyfactorX509Store)(nil)).Elem()
}

func (i SecretStoreKeyfactorX509StoreArgs) ToSecretStoreKeyfactorX509StoreOutput() SecretStoreKeyfactorX509StoreOutput {
	return i.ToSecretStoreKeyfactorX509StoreOutputWithContext(context.Background())
}

func (i SecretStoreKeyfactorX509StoreArgs) ToSecretStoreKeyfactorX509StoreOutputWithContext(ctx context.Context) SecretStoreKeyfactorX509StoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreKeyfactorX509StoreOutput)
}

func (i SecretStoreKeyfactorX509StoreArgs) ToSecretStoreKeyfactorX509StorePtrOutput() SecretStoreKeyfactorX509StorePtrOutput {
	return i.ToSecretStoreKeyfactorX509StorePtrOutputWithContext(context.Background())
}

func (i SecretStoreKeyfactorX509StoreArgs) ToSecretStoreKeyfactorX509StorePtrOutputWithContext(ctx context.Context) SecretStoreKeyfactorX509StorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreKeyfactorX509StoreOutput).ToSecretStoreKeyfactorX509StorePtrOutputWithContext(ctx)
}

// SecretStoreKeyfactorX509StorePtrInput is an input type that accepts SecretStoreKeyfactorX509StoreArgs, SecretStoreKeyfactorX509StorePtr and SecretStoreKeyfactorX509StorePtrOutput values.
// You can construct a concrete instance of `SecretStoreKeyfactorX509StorePtrInput` via:
//
//	        SecretStoreKeyfactorX509StoreArgs{...}
//
//	or:
//
//	        nil
type SecretStoreKeyfactorX509StorePtrInput interface {
	pulumi.Input

	ToSecretStoreKeyfactorX509StorePtrOutput() SecretStoreKeyfactorX509StorePtrOutput
	ToSecretStoreKeyfactorX509StorePtrOutputWithContext(context.Context) SecretStoreKeyfactorX509StorePtrOutput
}

type secretStoreKeyfactorX509StorePtrType SecretStoreKeyfactorX509StoreArgs

func SecretStoreKeyfactorX509StorePtr(v *SecretStoreKeyfactorX509StoreArgs) SecretStoreKeyfactorX509StorePtrInput {
	return (*secretStoreKeyfactorX509StorePtrType)(v)
}

func (*secretStoreKeyfactorX509StorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreKeyfactorX509Store)(nil)).Elem()
}

func (i *secretStoreKeyfactorX509StorePtrType) ToSecretStoreKeyfactorX509StorePtrOutput() SecretStoreKeyfactorX509StorePtrOutput {
	return i.ToSecretStoreKeyfactorX509StorePtrOutputWithContext(context.Background())
}

func (i *secretStoreKeyfactorX509StorePtrType) ToSecretStoreKeyfactorX509StorePtrOutputWithContext(ctx context.Context) SecretStoreKeyfactorX509StorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreKeyfactorX509StorePtrOutput)
}

type SecretStoreKeyfactorX509StoreOutput struct{ *pulumi.OutputState }

func (SecretStoreKeyfactorX509StoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreKeyfactorX509Store)(nil)).Elem()
}

func (o SecretStoreKeyfactorX509StoreOutput) ToSecretStoreKeyfactorX509StoreOutput() SecretStoreKeyfactorX509StoreOutput {
	return o
}

func (o SecretStoreKeyfactorX509StoreOutput) ToSecretStoreKeyfactorX509StoreOutputWithContext(ctx context.Context) SecretStoreKeyfactorX509StoreOutput {
	return o
}

func (o SecretStoreKeyfactorX509StoreOutput) ToSecretStoreKeyfactorX509StorePtrOutput() SecretStoreKeyfactorX509StorePtrOutput {
	return o.ToSecretStoreKeyfactorX509StorePtrOutputWithContext(context.Background())
}

func (o SecretStoreKeyfactorX509StoreOutput) ToSecretStoreKeyfactorX509StorePtrOutputWithContext(ctx context.Context) SecretStoreKeyfactorX509StorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreKeyfactorX509Store) *SecretStoreKeyfactorX509Store {
		return &v
	}).(SecretStoreKeyfactorX509StorePtrOutput)
}

// Path to the root CA that signed the certificate passed to the client for HTTPS connection. This is not required if the CA is trusted by the host operating system. This should be a PEM formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
func (o SecretStoreKeyfactorX509StoreOutput) CaFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorX509Store) *string { return v.CaFilePath }).(pulumi.StringPtrOutput)
}

// Path to client certificate in PEM format. This certificate must contain a client certificate that is recognized by the EJBCA instance represented by Hostname. This PEM file may also contain the private key associated with the certificate, but KeyFile can also be set to configure the private key.
func (o SecretStoreKeyfactorX509StoreOutput) CertificateFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorX509Store) string { return v.CertificateFilePath }).(pulumi.StringOutput)
}

// Name of EJBCA certificate authority that will enroll CSR.
func (o SecretStoreKeyfactorX509StoreOutput) DefaultCertificateAuthorityName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorX509Store) string { return v.DefaultCertificateAuthorityName }).(pulumi.StringOutput)
}

// Certificate profile name that EJBCA will enroll the CSR with.
func (o SecretStoreKeyfactorX509StoreOutput) DefaultCertificateProfileName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorX509Store) string { return v.DefaultCertificateProfileName }).(pulumi.StringOutput)
}

// End entity profile that EJBCA will enroll the CSR with.
func (o SecretStoreKeyfactorX509StoreOutput) DefaultEndEntityProfileName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorX509Store) string { return v.DefaultEndEntityProfileName }).(pulumi.StringOutput)
}

// code used by EJBCA during enrollment. May be left blank if no code is required.
func (o SecretStoreKeyfactorX509StoreOutput) EnrollmentCodeEnvVar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorX509Store) *string { return v.EnrollmentCodeEnvVar }).(pulumi.StringPtrOutput)
}

// username that used by the EJBCA during enrollment. This can be left out.  If so, the username must be auto-generated on the Keyfactor side.
func (o SecretStoreKeyfactorX509StoreOutput) EnrollmentUsernameEnvVar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorX509Store) *string { return v.EnrollmentUsernameEnvVar }).(pulumi.StringPtrOutput)
}

// Path to private key in PEM format. This file should contain the private key associated with the client certificate configured in CertificateFile.
func (o SecretStoreKeyfactorX509StoreOutput) KeyFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorX509Store) *string { return v.KeyFilePath }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreKeyfactorX509StoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorX509Store) string { return v.Name }).(pulumi.StringOutput)
}

// The URL of the Vault to target
func (o SecretStoreKeyfactorX509StoreOutput) ServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorX509Store) string { return v.ServerAddress }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreKeyfactorX509StoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreKeyfactorX509Store) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreKeyfactorX509StorePtrOutput struct{ *pulumi.OutputState }

func (SecretStoreKeyfactorX509StorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreKeyfactorX509Store)(nil)).Elem()
}

func (o SecretStoreKeyfactorX509StorePtrOutput) ToSecretStoreKeyfactorX509StorePtrOutput() SecretStoreKeyfactorX509StorePtrOutput {
	return o
}

func (o SecretStoreKeyfactorX509StorePtrOutput) ToSecretStoreKeyfactorX509StorePtrOutputWithContext(ctx context.Context) SecretStoreKeyfactorX509StorePtrOutput {
	return o
}

func (o SecretStoreKeyfactorX509StorePtrOutput) Elem() SecretStoreKeyfactorX509StoreOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorX509Store) SecretStoreKeyfactorX509Store {
		if v != nil {
			return *v
		}
		var ret SecretStoreKeyfactorX509Store
		return ret
	}).(SecretStoreKeyfactorX509StoreOutput)
}

// Path to the root CA that signed the certificate passed to the client for HTTPS connection. This is not required if the CA is trusted by the host operating system. This should be a PEM formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
func (o SecretStoreKeyfactorX509StorePtrOutput) CaFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorX509Store) *string {
		if v == nil {
			return nil
		}
		return v.CaFilePath
	}).(pulumi.StringPtrOutput)
}

// Path to client certificate in PEM format. This certificate must contain a client certificate that is recognized by the EJBCA instance represented by Hostname. This PEM file may also contain the private key associated with the certificate, but KeyFile can also be set to configure the private key.
func (o SecretStoreKeyfactorX509StorePtrOutput) CertificateFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorX509Store) *string {
		if v == nil {
			return nil
		}
		return &v.CertificateFilePath
	}).(pulumi.StringPtrOutput)
}

// Name of EJBCA certificate authority that will enroll CSR.
func (o SecretStoreKeyfactorX509StorePtrOutput) DefaultCertificateAuthorityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorX509Store) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultCertificateAuthorityName
	}).(pulumi.StringPtrOutput)
}

// Certificate profile name that EJBCA will enroll the CSR with.
func (o SecretStoreKeyfactorX509StorePtrOutput) DefaultCertificateProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorX509Store) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultCertificateProfileName
	}).(pulumi.StringPtrOutput)
}

// End entity profile that EJBCA will enroll the CSR with.
func (o SecretStoreKeyfactorX509StorePtrOutput) DefaultEndEntityProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorX509Store) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultEndEntityProfileName
	}).(pulumi.StringPtrOutput)
}

// code used by EJBCA during enrollment. May be left blank if no code is required.
func (o SecretStoreKeyfactorX509StorePtrOutput) EnrollmentCodeEnvVar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorX509Store) *string {
		if v == nil {
			return nil
		}
		return v.EnrollmentCodeEnvVar
	}).(pulumi.StringPtrOutput)
}

// username that used by the EJBCA during enrollment. This can be left out.  If so, the username must be auto-generated on the Keyfactor side.
func (o SecretStoreKeyfactorX509StorePtrOutput) EnrollmentUsernameEnvVar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorX509Store) *string {
		if v == nil {
			return nil
		}
		return v.EnrollmentUsernameEnvVar
	}).(pulumi.StringPtrOutput)
}

// Path to private key in PEM format. This file should contain the private key associated with the client certificate configured in CertificateFile.
func (o SecretStoreKeyfactorX509StorePtrOutput) KeyFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorX509Store) *string {
		if v == nil {
			return nil
		}
		return v.KeyFilePath
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreKeyfactorX509StorePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorX509Store) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreKeyfactorX509StorePtrOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorX509Store) *string {
		if v == nil {
			return nil
		}
		return &v.ServerAddress
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreKeyfactorX509StorePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreKeyfactorX509Store) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreVaultApprole struct {
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress string `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreVaultApproleInput is an input type that accepts SecretStoreVaultApproleArgs and SecretStoreVaultApproleOutput values.
// You can construct a concrete instance of `SecretStoreVaultApproleInput` via:
//
//	SecretStoreVaultApproleArgs{...}
type SecretStoreVaultApproleInput interface {
	pulumi.Input

	ToSecretStoreVaultApproleOutput() SecretStoreVaultApproleOutput
	ToSecretStoreVaultApproleOutputWithContext(context.Context) SecretStoreVaultApproleOutput
}

type SecretStoreVaultApproleArgs struct {
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringInput `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreVaultApproleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultApprole)(nil)).Elem()
}

func (i SecretStoreVaultApproleArgs) ToSecretStoreVaultApproleOutput() SecretStoreVaultApproleOutput {
	return i.ToSecretStoreVaultApproleOutputWithContext(context.Background())
}

func (i SecretStoreVaultApproleArgs) ToSecretStoreVaultApproleOutputWithContext(ctx context.Context) SecretStoreVaultApproleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultApproleOutput)
}

func (i SecretStoreVaultApproleArgs) ToSecretStoreVaultApprolePtrOutput() SecretStoreVaultApprolePtrOutput {
	return i.ToSecretStoreVaultApprolePtrOutputWithContext(context.Background())
}

func (i SecretStoreVaultApproleArgs) ToSecretStoreVaultApprolePtrOutputWithContext(ctx context.Context) SecretStoreVaultApprolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultApproleOutput).ToSecretStoreVaultApprolePtrOutputWithContext(ctx)
}

// SecretStoreVaultApprolePtrInput is an input type that accepts SecretStoreVaultApproleArgs, SecretStoreVaultApprolePtr and SecretStoreVaultApprolePtrOutput values.
// You can construct a concrete instance of `SecretStoreVaultApprolePtrInput` via:
//
//	        SecretStoreVaultApproleArgs{...}
//
//	or:
//
//	        nil
type SecretStoreVaultApprolePtrInput interface {
	pulumi.Input

	ToSecretStoreVaultApprolePtrOutput() SecretStoreVaultApprolePtrOutput
	ToSecretStoreVaultApprolePtrOutputWithContext(context.Context) SecretStoreVaultApprolePtrOutput
}

type secretStoreVaultApprolePtrType SecretStoreVaultApproleArgs

func SecretStoreVaultApprolePtr(v *SecretStoreVaultApproleArgs) SecretStoreVaultApprolePtrInput {
	return (*secretStoreVaultApprolePtrType)(v)
}

func (*secretStoreVaultApprolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultApprole)(nil)).Elem()
}

func (i *secretStoreVaultApprolePtrType) ToSecretStoreVaultApprolePtrOutput() SecretStoreVaultApprolePtrOutput {
	return i.ToSecretStoreVaultApprolePtrOutputWithContext(context.Background())
}

func (i *secretStoreVaultApprolePtrType) ToSecretStoreVaultApprolePtrOutputWithContext(ctx context.Context) SecretStoreVaultApprolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultApprolePtrOutput)
}

type SecretStoreVaultApproleOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultApproleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultApprole)(nil)).Elem()
}

func (o SecretStoreVaultApproleOutput) ToSecretStoreVaultApproleOutput() SecretStoreVaultApproleOutput {
	return o
}

func (o SecretStoreVaultApproleOutput) ToSecretStoreVaultApproleOutputWithContext(ctx context.Context) SecretStoreVaultApproleOutput {
	return o
}

func (o SecretStoreVaultApproleOutput) ToSecretStoreVaultApprolePtrOutput() SecretStoreVaultApprolePtrOutput {
	return o.ToSecretStoreVaultApprolePtrOutputWithContext(context.Background())
}

func (o SecretStoreVaultApproleOutput) ToSecretStoreVaultApprolePtrOutputWithContext(ctx context.Context) SecretStoreVaultApprolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreVaultApprole) *SecretStoreVaultApprole {
		return &v
	}).(SecretStoreVaultApprolePtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultApproleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultApprole) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultApproleOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreVaultApprole) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultApproleOutput) ServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultApprole) string { return v.ServerAddress }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultApproleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreVaultApprole) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreVaultApprolePtrOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultApprolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultApprole)(nil)).Elem()
}

func (o SecretStoreVaultApprolePtrOutput) ToSecretStoreVaultApprolePtrOutput() SecretStoreVaultApprolePtrOutput {
	return o
}

func (o SecretStoreVaultApprolePtrOutput) ToSecretStoreVaultApprolePtrOutputWithContext(ctx context.Context) SecretStoreVaultApprolePtrOutput {
	return o
}

func (o SecretStoreVaultApprolePtrOutput) Elem() SecretStoreVaultApproleOutput {
	return o.ApplyT(func(v *SecretStoreVaultApprole) SecretStoreVaultApprole {
		if v != nil {
			return *v
		}
		var ret SecretStoreVaultApprole
		return ret
	}).(SecretStoreVaultApproleOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultApprolePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultApprole) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultApprolePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultApprole) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultApprolePtrOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultApprole) *string {
		if v == nil {
			return nil
		}
		return &v.ServerAddress
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultApprolePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreVaultApprole) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreVaultApproleCertSsh struct {
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes int `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress string `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole string `pulumi:"signingRole"`
	// The mount point of the SSH engine configured with the desired CA
	SshMountPoint string `pulumi:"sshMountPoint"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreVaultApproleCertSshInput is an input type that accepts SecretStoreVaultApproleCertSshArgs and SecretStoreVaultApproleCertSshOutput values.
// You can construct a concrete instance of `SecretStoreVaultApproleCertSshInput` via:
//
//	SecretStoreVaultApproleCertSshArgs{...}
type SecretStoreVaultApproleCertSshInput interface {
	pulumi.Input

	ToSecretStoreVaultApproleCertSshOutput() SecretStoreVaultApproleCertSshOutput
	ToSecretStoreVaultApproleCertSshOutputWithContext(context.Context) SecretStoreVaultApproleCertSshOutput
}

type SecretStoreVaultApproleCertSshArgs struct {
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes pulumi.IntInput `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringInput `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole pulumi.StringInput `pulumi:"signingRole"`
	// The mount point of the SSH engine configured with the desired CA
	SshMountPoint pulumi.StringInput `pulumi:"sshMountPoint"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreVaultApproleCertSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultApproleCertSsh)(nil)).Elem()
}

func (i SecretStoreVaultApproleCertSshArgs) ToSecretStoreVaultApproleCertSshOutput() SecretStoreVaultApproleCertSshOutput {
	return i.ToSecretStoreVaultApproleCertSshOutputWithContext(context.Background())
}

func (i SecretStoreVaultApproleCertSshArgs) ToSecretStoreVaultApproleCertSshOutputWithContext(ctx context.Context) SecretStoreVaultApproleCertSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultApproleCertSshOutput)
}

func (i SecretStoreVaultApproleCertSshArgs) ToSecretStoreVaultApproleCertSshPtrOutput() SecretStoreVaultApproleCertSshPtrOutput {
	return i.ToSecretStoreVaultApproleCertSshPtrOutputWithContext(context.Background())
}

func (i SecretStoreVaultApproleCertSshArgs) ToSecretStoreVaultApproleCertSshPtrOutputWithContext(ctx context.Context) SecretStoreVaultApproleCertSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultApproleCertSshOutput).ToSecretStoreVaultApproleCertSshPtrOutputWithContext(ctx)
}

// SecretStoreVaultApproleCertSshPtrInput is an input type that accepts SecretStoreVaultApproleCertSshArgs, SecretStoreVaultApproleCertSshPtr and SecretStoreVaultApproleCertSshPtrOutput values.
// You can construct a concrete instance of `SecretStoreVaultApproleCertSshPtrInput` via:
//
//	        SecretStoreVaultApproleCertSshArgs{...}
//
//	or:
//
//	        nil
type SecretStoreVaultApproleCertSshPtrInput interface {
	pulumi.Input

	ToSecretStoreVaultApproleCertSshPtrOutput() SecretStoreVaultApproleCertSshPtrOutput
	ToSecretStoreVaultApproleCertSshPtrOutputWithContext(context.Context) SecretStoreVaultApproleCertSshPtrOutput
}

type secretStoreVaultApproleCertSshPtrType SecretStoreVaultApproleCertSshArgs

func SecretStoreVaultApproleCertSshPtr(v *SecretStoreVaultApproleCertSshArgs) SecretStoreVaultApproleCertSshPtrInput {
	return (*secretStoreVaultApproleCertSshPtrType)(v)
}

func (*secretStoreVaultApproleCertSshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultApproleCertSsh)(nil)).Elem()
}

func (i *secretStoreVaultApproleCertSshPtrType) ToSecretStoreVaultApproleCertSshPtrOutput() SecretStoreVaultApproleCertSshPtrOutput {
	return i.ToSecretStoreVaultApproleCertSshPtrOutputWithContext(context.Background())
}

func (i *secretStoreVaultApproleCertSshPtrType) ToSecretStoreVaultApproleCertSshPtrOutputWithContext(ctx context.Context) SecretStoreVaultApproleCertSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultApproleCertSshPtrOutput)
}

type SecretStoreVaultApproleCertSshOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultApproleCertSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultApproleCertSsh)(nil)).Elem()
}

func (o SecretStoreVaultApproleCertSshOutput) ToSecretStoreVaultApproleCertSshOutput() SecretStoreVaultApproleCertSshOutput {
	return o
}

func (o SecretStoreVaultApproleCertSshOutput) ToSecretStoreVaultApproleCertSshOutputWithContext(ctx context.Context) SecretStoreVaultApproleCertSshOutput {
	return o
}

func (o SecretStoreVaultApproleCertSshOutput) ToSecretStoreVaultApproleCertSshPtrOutput() SecretStoreVaultApproleCertSshPtrOutput {
	return o.ToSecretStoreVaultApproleCertSshPtrOutputWithContext(context.Background())
}

func (o SecretStoreVaultApproleCertSshOutput) ToSecretStoreVaultApproleCertSshPtrOutputWithContext(ctx context.Context) SecretStoreVaultApproleCertSshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreVaultApproleCertSsh) *SecretStoreVaultApproleCertSsh {
		return &v
	}).(SecretStoreVaultApproleCertSshPtrOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o SecretStoreVaultApproleCertSshOutput) IssuedCertTtlMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v SecretStoreVaultApproleCertSsh) int { return v.IssuedCertTtlMinutes }).(pulumi.IntOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultApproleCertSshOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultApproleCertSsh) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultApproleCertSshOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreVaultApproleCertSsh) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultApproleCertSshOutput) ServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultApproleCertSsh) string { return v.ServerAddress }).(pulumi.StringOutput)
}

// The signing role to be used for signing certificates
func (o SecretStoreVaultApproleCertSshOutput) SigningRole() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultApproleCertSsh) string { return v.SigningRole }).(pulumi.StringOutput)
}

// The mount point of the SSH engine configured with the desired CA
func (o SecretStoreVaultApproleCertSshOutput) SshMountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultApproleCertSsh) string { return v.SshMountPoint }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultApproleCertSshOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreVaultApproleCertSsh) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreVaultApproleCertSshPtrOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultApproleCertSshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultApproleCertSsh)(nil)).Elem()
}

func (o SecretStoreVaultApproleCertSshPtrOutput) ToSecretStoreVaultApproleCertSshPtrOutput() SecretStoreVaultApproleCertSshPtrOutput {
	return o
}

func (o SecretStoreVaultApproleCertSshPtrOutput) ToSecretStoreVaultApproleCertSshPtrOutputWithContext(ctx context.Context) SecretStoreVaultApproleCertSshPtrOutput {
	return o
}

func (o SecretStoreVaultApproleCertSshPtrOutput) Elem() SecretStoreVaultApproleCertSshOutput {
	return o.ApplyT(func(v *SecretStoreVaultApproleCertSsh) SecretStoreVaultApproleCertSsh {
		if v != nil {
			return *v
		}
		var ret SecretStoreVaultApproleCertSsh
		return ret
	}).(SecretStoreVaultApproleCertSshOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o SecretStoreVaultApproleCertSshPtrOutput) IssuedCertTtlMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultApproleCertSsh) *int {
		if v == nil {
			return nil
		}
		return &v.IssuedCertTtlMinutes
	}).(pulumi.IntPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultApproleCertSshPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultApproleCertSsh) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultApproleCertSshPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultApproleCertSsh) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultApproleCertSshPtrOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultApproleCertSsh) *string {
		if v == nil {
			return nil
		}
		return &v.ServerAddress
	}).(pulumi.StringPtrOutput)
}

// The signing role to be used for signing certificates
func (o SecretStoreVaultApproleCertSshPtrOutput) SigningRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultApproleCertSsh) *string {
		if v == nil {
			return nil
		}
		return &v.SigningRole
	}).(pulumi.StringPtrOutput)
}

// The mount point of the SSH engine configured with the desired CA
func (o SecretStoreVaultApproleCertSshPtrOutput) SshMountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultApproleCertSsh) *string {
		if v == nil {
			return nil
		}
		return &v.SshMountPoint
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultApproleCertSshPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreVaultApproleCertSsh) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreVaultApproleCertX509 struct {
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes int `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The mount point of the PKI engine configured with the desired CA
	PkiMountPoint string `pulumi:"pkiMountPoint"`
	// The URL of the Vault to target
	ServerAddress string `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole string `pulumi:"signingRole"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreVaultApproleCertX509Input is an input type that accepts SecretStoreVaultApproleCertX509Args and SecretStoreVaultApproleCertX509Output values.
// You can construct a concrete instance of `SecretStoreVaultApproleCertX509Input` via:
//
//	SecretStoreVaultApproleCertX509Args{...}
type SecretStoreVaultApproleCertX509Input interface {
	pulumi.Input

	ToSecretStoreVaultApproleCertX509Output() SecretStoreVaultApproleCertX509Output
	ToSecretStoreVaultApproleCertX509OutputWithContext(context.Context) SecretStoreVaultApproleCertX509Output
}

type SecretStoreVaultApproleCertX509Args struct {
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes pulumi.IntInput `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The mount point of the PKI engine configured with the desired CA
	PkiMountPoint pulumi.StringInput `pulumi:"pkiMountPoint"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringInput `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole pulumi.StringInput `pulumi:"signingRole"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreVaultApproleCertX509Args) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultApproleCertX509)(nil)).Elem()
}

func (i SecretStoreVaultApproleCertX509Args) ToSecretStoreVaultApproleCertX509Output() SecretStoreVaultApproleCertX509Output {
	return i.ToSecretStoreVaultApproleCertX509OutputWithContext(context.Background())
}

func (i SecretStoreVaultApproleCertX509Args) ToSecretStoreVaultApproleCertX509OutputWithContext(ctx context.Context) SecretStoreVaultApproleCertX509Output {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultApproleCertX509Output)
}

func (i SecretStoreVaultApproleCertX509Args) ToSecretStoreVaultApproleCertX509PtrOutput() SecretStoreVaultApproleCertX509PtrOutput {
	return i.ToSecretStoreVaultApproleCertX509PtrOutputWithContext(context.Background())
}

func (i SecretStoreVaultApproleCertX509Args) ToSecretStoreVaultApproleCertX509PtrOutputWithContext(ctx context.Context) SecretStoreVaultApproleCertX509PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultApproleCertX509Output).ToSecretStoreVaultApproleCertX509PtrOutputWithContext(ctx)
}

// SecretStoreVaultApproleCertX509PtrInput is an input type that accepts SecretStoreVaultApproleCertX509Args, SecretStoreVaultApproleCertX509Ptr and SecretStoreVaultApproleCertX509PtrOutput values.
// You can construct a concrete instance of `SecretStoreVaultApproleCertX509PtrInput` via:
//
//	        SecretStoreVaultApproleCertX509Args{...}
//
//	or:
//
//	        nil
type SecretStoreVaultApproleCertX509PtrInput interface {
	pulumi.Input

	ToSecretStoreVaultApproleCertX509PtrOutput() SecretStoreVaultApproleCertX509PtrOutput
	ToSecretStoreVaultApproleCertX509PtrOutputWithContext(context.Context) SecretStoreVaultApproleCertX509PtrOutput
}

type secretStoreVaultApproleCertX509PtrType SecretStoreVaultApproleCertX509Args

func SecretStoreVaultApproleCertX509Ptr(v *SecretStoreVaultApproleCertX509Args) SecretStoreVaultApproleCertX509PtrInput {
	return (*secretStoreVaultApproleCertX509PtrType)(v)
}

func (*secretStoreVaultApproleCertX509PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultApproleCertX509)(nil)).Elem()
}

func (i *secretStoreVaultApproleCertX509PtrType) ToSecretStoreVaultApproleCertX509PtrOutput() SecretStoreVaultApproleCertX509PtrOutput {
	return i.ToSecretStoreVaultApproleCertX509PtrOutputWithContext(context.Background())
}

func (i *secretStoreVaultApproleCertX509PtrType) ToSecretStoreVaultApproleCertX509PtrOutputWithContext(ctx context.Context) SecretStoreVaultApproleCertX509PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultApproleCertX509PtrOutput)
}

type SecretStoreVaultApproleCertX509Output struct{ *pulumi.OutputState }

func (SecretStoreVaultApproleCertX509Output) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultApproleCertX509)(nil)).Elem()
}

func (o SecretStoreVaultApproleCertX509Output) ToSecretStoreVaultApproleCertX509Output() SecretStoreVaultApproleCertX509Output {
	return o
}

func (o SecretStoreVaultApproleCertX509Output) ToSecretStoreVaultApproleCertX509OutputWithContext(ctx context.Context) SecretStoreVaultApproleCertX509Output {
	return o
}

func (o SecretStoreVaultApproleCertX509Output) ToSecretStoreVaultApproleCertX509PtrOutput() SecretStoreVaultApproleCertX509PtrOutput {
	return o.ToSecretStoreVaultApproleCertX509PtrOutputWithContext(context.Background())
}

func (o SecretStoreVaultApproleCertX509Output) ToSecretStoreVaultApproleCertX509PtrOutputWithContext(ctx context.Context) SecretStoreVaultApproleCertX509PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreVaultApproleCertX509) *SecretStoreVaultApproleCertX509 {
		return &v
	}).(SecretStoreVaultApproleCertX509PtrOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o SecretStoreVaultApproleCertX509Output) IssuedCertTtlMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v SecretStoreVaultApproleCertX509) int { return v.IssuedCertTtlMinutes }).(pulumi.IntOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultApproleCertX509Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultApproleCertX509) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultApproleCertX509Output) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreVaultApproleCertX509) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The mount point of the PKI engine configured with the desired CA
func (o SecretStoreVaultApproleCertX509Output) PkiMountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultApproleCertX509) string { return v.PkiMountPoint }).(pulumi.StringOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultApproleCertX509Output) ServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultApproleCertX509) string { return v.ServerAddress }).(pulumi.StringOutput)
}

// The signing role to be used for signing certificates
func (o SecretStoreVaultApproleCertX509Output) SigningRole() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultApproleCertX509) string { return v.SigningRole }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultApproleCertX509Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreVaultApproleCertX509) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreVaultApproleCertX509PtrOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultApproleCertX509PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultApproleCertX509)(nil)).Elem()
}

func (o SecretStoreVaultApproleCertX509PtrOutput) ToSecretStoreVaultApproleCertX509PtrOutput() SecretStoreVaultApproleCertX509PtrOutput {
	return o
}

func (o SecretStoreVaultApproleCertX509PtrOutput) ToSecretStoreVaultApproleCertX509PtrOutputWithContext(ctx context.Context) SecretStoreVaultApproleCertX509PtrOutput {
	return o
}

func (o SecretStoreVaultApproleCertX509PtrOutput) Elem() SecretStoreVaultApproleCertX509Output {
	return o.ApplyT(func(v *SecretStoreVaultApproleCertX509) SecretStoreVaultApproleCertX509 {
		if v != nil {
			return *v
		}
		var ret SecretStoreVaultApproleCertX509
		return ret
	}).(SecretStoreVaultApproleCertX509Output)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o SecretStoreVaultApproleCertX509PtrOutput) IssuedCertTtlMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultApproleCertX509) *int {
		if v == nil {
			return nil
		}
		return &v.IssuedCertTtlMinutes
	}).(pulumi.IntPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultApproleCertX509PtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultApproleCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultApproleCertX509PtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultApproleCertX509) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The mount point of the PKI engine configured with the desired CA
func (o SecretStoreVaultApproleCertX509PtrOutput) PkiMountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultApproleCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.PkiMountPoint
	}).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultApproleCertX509PtrOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultApproleCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.ServerAddress
	}).(pulumi.StringPtrOutput)
}

// The signing role to be used for signing certificates
func (o SecretStoreVaultApproleCertX509PtrOutput) SigningRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultApproleCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.SigningRole
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultApproleCertX509PtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreVaultApproleCertX509) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreVaultAwsEc2 struct {
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress string `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreVaultAwsEc2Input is an input type that accepts SecretStoreVaultAwsEc2Args and SecretStoreVaultAwsEc2Output values.
// You can construct a concrete instance of `SecretStoreVaultAwsEc2Input` via:
//
//	SecretStoreVaultAwsEc2Args{...}
type SecretStoreVaultAwsEc2Input interface {
	pulumi.Input

	ToSecretStoreVaultAwsEc2Output() SecretStoreVaultAwsEc2Output
	ToSecretStoreVaultAwsEc2OutputWithContext(context.Context) SecretStoreVaultAwsEc2Output
}

type SecretStoreVaultAwsEc2Args struct {
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringInput `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreVaultAwsEc2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultAwsEc2)(nil)).Elem()
}

func (i SecretStoreVaultAwsEc2Args) ToSecretStoreVaultAwsEc2Output() SecretStoreVaultAwsEc2Output {
	return i.ToSecretStoreVaultAwsEc2OutputWithContext(context.Background())
}

func (i SecretStoreVaultAwsEc2Args) ToSecretStoreVaultAwsEc2OutputWithContext(ctx context.Context) SecretStoreVaultAwsEc2Output {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultAwsEc2Output)
}

func (i SecretStoreVaultAwsEc2Args) ToSecretStoreVaultAwsEc2PtrOutput() SecretStoreVaultAwsEc2PtrOutput {
	return i.ToSecretStoreVaultAwsEc2PtrOutputWithContext(context.Background())
}

func (i SecretStoreVaultAwsEc2Args) ToSecretStoreVaultAwsEc2PtrOutputWithContext(ctx context.Context) SecretStoreVaultAwsEc2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultAwsEc2Output).ToSecretStoreVaultAwsEc2PtrOutputWithContext(ctx)
}

// SecretStoreVaultAwsEc2PtrInput is an input type that accepts SecretStoreVaultAwsEc2Args, SecretStoreVaultAwsEc2Ptr and SecretStoreVaultAwsEc2PtrOutput values.
// You can construct a concrete instance of `SecretStoreVaultAwsEc2PtrInput` via:
//
//	        SecretStoreVaultAwsEc2Args{...}
//
//	or:
//
//	        nil
type SecretStoreVaultAwsEc2PtrInput interface {
	pulumi.Input

	ToSecretStoreVaultAwsEc2PtrOutput() SecretStoreVaultAwsEc2PtrOutput
	ToSecretStoreVaultAwsEc2PtrOutputWithContext(context.Context) SecretStoreVaultAwsEc2PtrOutput
}

type secretStoreVaultAwsEc2PtrType SecretStoreVaultAwsEc2Args

func SecretStoreVaultAwsEc2Ptr(v *SecretStoreVaultAwsEc2Args) SecretStoreVaultAwsEc2PtrInput {
	return (*secretStoreVaultAwsEc2PtrType)(v)
}

func (*secretStoreVaultAwsEc2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultAwsEc2)(nil)).Elem()
}

func (i *secretStoreVaultAwsEc2PtrType) ToSecretStoreVaultAwsEc2PtrOutput() SecretStoreVaultAwsEc2PtrOutput {
	return i.ToSecretStoreVaultAwsEc2PtrOutputWithContext(context.Background())
}

func (i *secretStoreVaultAwsEc2PtrType) ToSecretStoreVaultAwsEc2PtrOutputWithContext(ctx context.Context) SecretStoreVaultAwsEc2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultAwsEc2PtrOutput)
}

type SecretStoreVaultAwsEc2Output struct{ *pulumi.OutputState }

func (SecretStoreVaultAwsEc2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultAwsEc2)(nil)).Elem()
}

func (o SecretStoreVaultAwsEc2Output) ToSecretStoreVaultAwsEc2Output() SecretStoreVaultAwsEc2Output {
	return o
}

func (o SecretStoreVaultAwsEc2Output) ToSecretStoreVaultAwsEc2OutputWithContext(ctx context.Context) SecretStoreVaultAwsEc2Output {
	return o
}

func (o SecretStoreVaultAwsEc2Output) ToSecretStoreVaultAwsEc2PtrOutput() SecretStoreVaultAwsEc2PtrOutput {
	return o.ToSecretStoreVaultAwsEc2PtrOutputWithContext(context.Background())
}

func (o SecretStoreVaultAwsEc2Output) ToSecretStoreVaultAwsEc2PtrOutputWithContext(ctx context.Context) SecretStoreVaultAwsEc2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreVaultAwsEc2) *SecretStoreVaultAwsEc2 {
		return &v
	}).(SecretStoreVaultAwsEc2PtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultAwsEc2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultAwsEc2) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultAwsEc2Output) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreVaultAwsEc2) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultAwsEc2Output) ServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultAwsEc2) string { return v.ServerAddress }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultAwsEc2Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreVaultAwsEc2) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreVaultAwsEc2PtrOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultAwsEc2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultAwsEc2)(nil)).Elem()
}

func (o SecretStoreVaultAwsEc2PtrOutput) ToSecretStoreVaultAwsEc2PtrOutput() SecretStoreVaultAwsEc2PtrOutput {
	return o
}

func (o SecretStoreVaultAwsEc2PtrOutput) ToSecretStoreVaultAwsEc2PtrOutputWithContext(ctx context.Context) SecretStoreVaultAwsEc2PtrOutput {
	return o
}

func (o SecretStoreVaultAwsEc2PtrOutput) Elem() SecretStoreVaultAwsEc2Output {
	return o.ApplyT(func(v *SecretStoreVaultAwsEc2) SecretStoreVaultAwsEc2 {
		if v != nil {
			return *v
		}
		var ret SecretStoreVaultAwsEc2
		return ret
	}).(SecretStoreVaultAwsEc2Output)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultAwsEc2PtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultAwsEc2) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultAwsEc2PtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultAwsEc2) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultAwsEc2PtrOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultAwsEc2) *string {
		if v == nil {
			return nil
		}
		return &v.ServerAddress
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultAwsEc2PtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreVaultAwsEc2) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreVaultAwsIam struct {
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress string `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreVaultAwsIamInput is an input type that accepts SecretStoreVaultAwsIamArgs and SecretStoreVaultAwsIamOutput values.
// You can construct a concrete instance of `SecretStoreVaultAwsIamInput` via:
//
//	SecretStoreVaultAwsIamArgs{...}
type SecretStoreVaultAwsIamInput interface {
	pulumi.Input

	ToSecretStoreVaultAwsIamOutput() SecretStoreVaultAwsIamOutput
	ToSecretStoreVaultAwsIamOutputWithContext(context.Context) SecretStoreVaultAwsIamOutput
}

type SecretStoreVaultAwsIamArgs struct {
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringInput `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreVaultAwsIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultAwsIam)(nil)).Elem()
}

func (i SecretStoreVaultAwsIamArgs) ToSecretStoreVaultAwsIamOutput() SecretStoreVaultAwsIamOutput {
	return i.ToSecretStoreVaultAwsIamOutputWithContext(context.Background())
}

func (i SecretStoreVaultAwsIamArgs) ToSecretStoreVaultAwsIamOutputWithContext(ctx context.Context) SecretStoreVaultAwsIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultAwsIamOutput)
}

func (i SecretStoreVaultAwsIamArgs) ToSecretStoreVaultAwsIamPtrOutput() SecretStoreVaultAwsIamPtrOutput {
	return i.ToSecretStoreVaultAwsIamPtrOutputWithContext(context.Background())
}

func (i SecretStoreVaultAwsIamArgs) ToSecretStoreVaultAwsIamPtrOutputWithContext(ctx context.Context) SecretStoreVaultAwsIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultAwsIamOutput).ToSecretStoreVaultAwsIamPtrOutputWithContext(ctx)
}

// SecretStoreVaultAwsIamPtrInput is an input type that accepts SecretStoreVaultAwsIamArgs, SecretStoreVaultAwsIamPtr and SecretStoreVaultAwsIamPtrOutput values.
// You can construct a concrete instance of `SecretStoreVaultAwsIamPtrInput` via:
//
//	        SecretStoreVaultAwsIamArgs{...}
//
//	or:
//
//	        nil
type SecretStoreVaultAwsIamPtrInput interface {
	pulumi.Input

	ToSecretStoreVaultAwsIamPtrOutput() SecretStoreVaultAwsIamPtrOutput
	ToSecretStoreVaultAwsIamPtrOutputWithContext(context.Context) SecretStoreVaultAwsIamPtrOutput
}

type secretStoreVaultAwsIamPtrType SecretStoreVaultAwsIamArgs

func SecretStoreVaultAwsIamPtr(v *SecretStoreVaultAwsIamArgs) SecretStoreVaultAwsIamPtrInput {
	return (*secretStoreVaultAwsIamPtrType)(v)
}

func (*secretStoreVaultAwsIamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultAwsIam)(nil)).Elem()
}

func (i *secretStoreVaultAwsIamPtrType) ToSecretStoreVaultAwsIamPtrOutput() SecretStoreVaultAwsIamPtrOutput {
	return i.ToSecretStoreVaultAwsIamPtrOutputWithContext(context.Background())
}

func (i *secretStoreVaultAwsIamPtrType) ToSecretStoreVaultAwsIamPtrOutputWithContext(ctx context.Context) SecretStoreVaultAwsIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultAwsIamPtrOutput)
}

type SecretStoreVaultAwsIamOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultAwsIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultAwsIam)(nil)).Elem()
}

func (o SecretStoreVaultAwsIamOutput) ToSecretStoreVaultAwsIamOutput() SecretStoreVaultAwsIamOutput {
	return o
}

func (o SecretStoreVaultAwsIamOutput) ToSecretStoreVaultAwsIamOutputWithContext(ctx context.Context) SecretStoreVaultAwsIamOutput {
	return o
}

func (o SecretStoreVaultAwsIamOutput) ToSecretStoreVaultAwsIamPtrOutput() SecretStoreVaultAwsIamPtrOutput {
	return o.ToSecretStoreVaultAwsIamPtrOutputWithContext(context.Background())
}

func (o SecretStoreVaultAwsIamOutput) ToSecretStoreVaultAwsIamPtrOutputWithContext(ctx context.Context) SecretStoreVaultAwsIamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreVaultAwsIam) *SecretStoreVaultAwsIam {
		return &v
	}).(SecretStoreVaultAwsIamPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultAwsIamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultAwsIam) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultAwsIamOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreVaultAwsIam) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultAwsIamOutput) ServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultAwsIam) string { return v.ServerAddress }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultAwsIamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreVaultAwsIam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreVaultAwsIamPtrOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultAwsIamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultAwsIam)(nil)).Elem()
}

func (o SecretStoreVaultAwsIamPtrOutput) ToSecretStoreVaultAwsIamPtrOutput() SecretStoreVaultAwsIamPtrOutput {
	return o
}

func (o SecretStoreVaultAwsIamPtrOutput) ToSecretStoreVaultAwsIamPtrOutputWithContext(ctx context.Context) SecretStoreVaultAwsIamPtrOutput {
	return o
}

func (o SecretStoreVaultAwsIamPtrOutput) Elem() SecretStoreVaultAwsIamOutput {
	return o.ApplyT(func(v *SecretStoreVaultAwsIam) SecretStoreVaultAwsIam {
		if v != nil {
			return *v
		}
		var ret SecretStoreVaultAwsIam
		return ret
	}).(SecretStoreVaultAwsIamOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultAwsIamPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultAwsIam) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultAwsIamPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultAwsIam) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultAwsIamPtrOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultAwsIam) *string {
		if v == nil {
			return nil
		}
		return &v.ServerAddress
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultAwsIamPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreVaultAwsIam) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreVaultTls struct {
	// A path to a CA file accessible by a Node
	CaCertPath *string `pulumi:"caCertPath"`
	// A path to a client certificate file accessible by a Node
	ClientCertPath string `pulumi:"clientCertPath"`
	// A path to a client key file accessible by a Node
	ClientKeyPath string `pulumi:"clientKeyPath"`
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress string `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreVaultTlsInput is an input type that accepts SecretStoreVaultTlsArgs and SecretStoreVaultTlsOutput values.
// You can construct a concrete instance of `SecretStoreVaultTlsInput` via:
//
//	SecretStoreVaultTlsArgs{...}
type SecretStoreVaultTlsInput interface {
	pulumi.Input

	ToSecretStoreVaultTlsOutput() SecretStoreVaultTlsOutput
	ToSecretStoreVaultTlsOutputWithContext(context.Context) SecretStoreVaultTlsOutput
}

type SecretStoreVaultTlsArgs struct {
	// A path to a CA file accessible by a Node
	CaCertPath pulumi.StringPtrInput `pulumi:"caCertPath"`
	// A path to a client certificate file accessible by a Node
	ClientCertPath pulumi.StringInput `pulumi:"clientCertPath"`
	// A path to a client key file accessible by a Node
	ClientKeyPath pulumi.StringInput `pulumi:"clientKeyPath"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringInput `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreVaultTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultTls)(nil)).Elem()
}

func (i SecretStoreVaultTlsArgs) ToSecretStoreVaultTlsOutput() SecretStoreVaultTlsOutput {
	return i.ToSecretStoreVaultTlsOutputWithContext(context.Background())
}

func (i SecretStoreVaultTlsArgs) ToSecretStoreVaultTlsOutputWithContext(ctx context.Context) SecretStoreVaultTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTlsOutput)
}

func (i SecretStoreVaultTlsArgs) ToSecretStoreVaultTlsPtrOutput() SecretStoreVaultTlsPtrOutput {
	return i.ToSecretStoreVaultTlsPtrOutputWithContext(context.Background())
}

func (i SecretStoreVaultTlsArgs) ToSecretStoreVaultTlsPtrOutputWithContext(ctx context.Context) SecretStoreVaultTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTlsOutput).ToSecretStoreVaultTlsPtrOutputWithContext(ctx)
}

// SecretStoreVaultTlsPtrInput is an input type that accepts SecretStoreVaultTlsArgs, SecretStoreVaultTlsPtr and SecretStoreVaultTlsPtrOutput values.
// You can construct a concrete instance of `SecretStoreVaultTlsPtrInput` via:
//
//	        SecretStoreVaultTlsArgs{...}
//
//	or:
//
//	        nil
type SecretStoreVaultTlsPtrInput interface {
	pulumi.Input

	ToSecretStoreVaultTlsPtrOutput() SecretStoreVaultTlsPtrOutput
	ToSecretStoreVaultTlsPtrOutputWithContext(context.Context) SecretStoreVaultTlsPtrOutput
}

type secretStoreVaultTlsPtrType SecretStoreVaultTlsArgs

func SecretStoreVaultTlsPtr(v *SecretStoreVaultTlsArgs) SecretStoreVaultTlsPtrInput {
	return (*secretStoreVaultTlsPtrType)(v)
}

func (*secretStoreVaultTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultTls)(nil)).Elem()
}

func (i *secretStoreVaultTlsPtrType) ToSecretStoreVaultTlsPtrOutput() SecretStoreVaultTlsPtrOutput {
	return i.ToSecretStoreVaultTlsPtrOutputWithContext(context.Background())
}

func (i *secretStoreVaultTlsPtrType) ToSecretStoreVaultTlsPtrOutputWithContext(ctx context.Context) SecretStoreVaultTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTlsPtrOutput)
}

type SecretStoreVaultTlsOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultTls)(nil)).Elem()
}

func (o SecretStoreVaultTlsOutput) ToSecretStoreVaultTlsOutput() SecretStoreVaultTlsOutput {
	return o
}

func (o SecretStoreVaultTlsOutput) ToSecretStoreVaultTlsOutputWithContext(ctx context.Context) SecretStoreVaultTlsOutput {
	return o
}

func (o SecretStoreVaultTlsOutput) ToSecretStoreVaultTlsPtrOutput() SecretStoreVaultTlsPtrOutput {
	return o.ToSecretStoreVaultTlsPtrOutputWithContext(context.Background())
}

func (o SecretStoreVaultTlsOutput) ToSecretStoreVaultTlsPtrOutputWithContext(ctx context.Context) SecretStoreVaultTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreVaultTls) *SecretStoreVaultTls {
		return &v
	}).(SecretStoreVaultTlsPtrOutput)
}

// A path to a CA file accessible by a Node
func (o SecretStoreVaultTlsOutput) CaCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreVaultTls) *string { return v.CaCertPath }).(pulumi.StringPtrOutput)
}

// A path to a client certificate file accessible by a Node
func (o SecretStoreVaultTlsOutput) ClientCertPath() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTls) string { return v.ClientCertPath }).(pulumi.StringOutput)
}

// A path to a client key file accessible by a Node
func (o SecretStoreVaultTlsOutput) ClientKeyPath() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTls) string { return v.ClientKeyPath }).(pulumi.StringOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultTlsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTls) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultTlsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreVaultTls) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultTlsOutput) ServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTls) string { return v.ServerAddress }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultTlsOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreVaultTls) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreVaultTlsPtrOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultTls)(nil)).Elem()
}

func (o SecretStoreVaultTlsPtrOutput) ToSecretStoreVaultTlsPtrOutput() SecretStoreVaultTlsPtrOutput {
	return o
}

func (o SecretStoreVaultTlsPtrOutput) ToSecretStoreVaultTlsPtrOutputWithContext(ctx context.Context) SecretStoreVaultTlsPtrOutput {
	return o
}

func (o SecretStoreVaultTlsPtrOutput) Elem() SecretStoreVaultTlsOutput {
	return o.ApplyT(func(v *SecretStoreVaultTls) SecretStoreVaultTls {
		if v != nil {
			return *v
		}
		var ret SecretStoreVaultTls
		return ret
	}).(SecretStoreVaultTlsOutput)
}

// A path to a CA file accessible by a Node
func (o SecretStoreVaultTlsPtrOutput) CaCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCertPath
	}).(pulumi.StringPtrOutput)
}

// A path to a client certificate file accessible by a Node
func (o SecretStoreVaultTlsPtrOutput) ClientCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTls) *string {
		if v == nil {
			return nil
		}
		return &v.ClientCertPath
	}).(pulumi.StringPtrOutput)
}

// A path to a client key file accessible by a Node
func (o SecretStoreVaultTlsPtrOutput) ClientKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTls) *string {
		if v == nil {
			return nil
		}
		return &v.ClientKeyPath
	}).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultTlsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTls) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultTlsPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTls) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultTlsPtrOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTls) *string {
		if v == nil {
			return nil
		}
		return &v.ServerAddress
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultTlsPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreVaultTls) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreVaultTlsCertSsh struct {
	// A path to a CA file accessible by a Node
	CaCertPath *string `pulumi:"caCertPath"`
	// A path to a client certificate file accessible by a Node
	ClientCertPath string `pulumi:"clientCertPath"`
	// A path to a client key file accessible by a Node
	ClientKeyPath string `pulumi:"clientKeyPath"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes int `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress string `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole string `pulumi:"signingRole"`
	// The mount point of the SSH engine configured with the desired CA
	SshMountPoint string `pulumi:"sshMountPoint"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreVaultTlsCertSshInput is an input type that accepts SecretStoreVaultTlsCertSshArgs and SecretStoreVaultTlsCertSshOutput values.
// You can construct a concrete instance of `SecretStoreVaultTlsCertSshInput` via:
//
//	SecretStoreVaultTlsCertSshArgs{...}
type SecretStoreVaultTlsCertSshInput interface {
	pulumi.Input

	ToSecretStoreVaultTlsCertSshOutput() SecretStoreVaultTlsCertSshOutput
	ToSecretStoreVaultTlsCertSshOutputWithContext(context.Context) SecretStoreVaultTlsCertSshOutput
}

type SecretStoreVaultTlsCertSshArgs struct {
	// A path to a CA file accessible by a Node
	CaCertPath pulumi.StringPtrInput `pulumi:"caCertPath"`
	// A path to a client certificate file accessible by a Node
	ClientCertPath pulumi.StringInput `pulumi:"clientCertPath"`
	// A path to a client key file accessible by a Node
	ClientKeyPath pulumi.StringInput `pulumi:"clientKeyPath"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes pulumi.IntInput `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringInput `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole pulumi.StringInput `pulumi:"signingRole"`
	// The mount point of the SSH engine configured with the desired CA
	SshMountPoint pulumi.StringInput `pulumi:"sshMountPoint"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreVaultTlsCertSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultTlsCertSsh)(nil)).Elem()
}

func (i SecretStoreVaultTlsCertSshArgs) ToSecretStoreVaultTlsCertSshOutput() SecretStoreVaultTlsCertSshOutput {
	return i.ToSecretStoreVaultTlsCertSshOutputWithContext(context.Background())
}

func (i SecretStoreVaultTlsCertSshArgs) ToSecretStoreVaultTlsCertSshOutputWithContext(ctx context.Context) SecretStoreVaultTlsCertSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTlsCertSshOutput)
}

func (i SecretStoreVaultTlsCertSshArgs) ToSecretStoreVaultTlsCertSshPtrOutput() SecretStoreVaultTlsCertSshPtrOutput {
	return i.ToSecretStoreVaultTlsCertSshPtrOutputWithContext(context.Background())
}

func (i SecretStoreVaultTlsCertSshArgs) ToSecretStoreVaultTlsCertSshPtrOutputWithContext(ctx context.Context) SecretStoreVaultTlsCertSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTlsCertSshOutput).ToSecretStoreVaultTlsCertSshPtrOutputWithContext(ctx)
}

// SecretStoreVaultTlsCertSshPtrInput is an input type that accepts SecretStoreVaultTlsCertSshArgs, SecretStoreVaultTlsCertSshPtr and SecretStoreVaultTlsCertSshPtrOutput values.
// You can construct a concrete instance of `SecretStoreVaultTlsCertSshPtrInput` via:
//
//	        SecretStoreVaultTlsCertSshArgs{...}
//
//	or:
//
//	        nil
type SecretStoreVaultTlsCertSshPtrInput interface {
	pulumi.Input

	ToSecretStoreVaultTlsCertSshPtrOutput() SecretStoreVaultTlsCertSshPtrOutput
	ToSecretStoreVaultTlsCertSshPtrOutputWithContext(context.Context) SecretStoreVaultTlsCertSshPtrOutput
}

type secretStoreVaultTlsCertSshPtrType SecretStoreVaultTlsCertSshArgs

func SecretStoreVaultTlsCertSshPtr(v *SecretStoreVaultTlsCertSshArgs) SecretStoreVaultTlsCertSshPtrInput {
	return (*secretStoreVaultTlsCertSshPtrType)(v)
}

func (*secretStoreVaultTlsCertSshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultTlsCertSsh)(nil)).Elem()
}

func (i *secretStoreVaultTlsCertSshPtrType) ToSecretStoreVaultTlsCertSshPtrOutput() SecretStoreVaultTlsCertSshPtrOutput {
	return i.ToSecretStoreVaultTlsCertSshPtrOutputWithContext(context.Background())
}

func (i *secretStoreVaultTlsCertSshPtrType) ToSecretStoreVaultTlsCertSshPtrOutputWithContext(ctx context.Context) SecretStoreVaultTlsCertSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTlsCertSshPtrOutput)
}

type SecretStoreVaultTlsCertSshOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultTlsCertSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultTlsCertSsh)(nil)).Elem()
}

func (o SecretStoreVaultTlsCertSshOutput) ToSecretStoreVaultTlsCertSshOutput() SecretStoreVaultTlsCertSshOutput {
	return o
}

func (o SecretStoreVaultTlsCertSshOutput) ToSecretStoreVaultTlsCertSshOutputWithContext(ctx context.Context) SecretStoreVaultTlsCertSshOutput {
	return o
}

func (o SecretStoreVaultTlsCertSshOutput) ToSecretStoreVaultTlsCertSshPtrOutput() SecretStoreVaultTlsCertSshPtrOutput {
	return o.ToSecretStoreVaultTlsCertSshPtrOutputWithContext(context.Background())
}

func (o SecretStoreVaultTlsCertSshOutput) ToSecretStoreVaultTlsCertSshPtrOutputWithContext(ctx context.Context) SecretStoreVaultTlsCertSshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreVaultTlsCertSsh) *SecretStoreVaultTlsCertSsh {
		return &v
	}).(SecretStoreVaultTlsCertSshPtrOutput)
}

// A path to a CA file accessible by a Node
func (o SecretStoreVaultTlsCertSshOutput) CaCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertSsh) *string { return v.CaCertPath }).(pulumi.StringPtrOutput)
}

// A path to a client certificate file accessible by a Node
func (o SecretStoreVaultTlsCertSshOutput) ClientCertPath() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertSsh) string { return v.ClientCertPath }).(pulumi.StringOutput)
}

// A path to a client key file accessible by a Node
func (o SecretStoreVaultTlsCertSshOutput) ClientKeyPath() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertSsh) string { return v.ClientKeyPath }).(pulumi.StringOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o SecretStoreVaultTlsCertSshOutput) IssuedCertTtlMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertSsh) int { return v.IssuedCertTtlMinutes }).(pulumi.IntOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultTlsCertSshOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertSsh) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultTlsCertSshOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertSsh) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultTlsCertSshOutput) ServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertSsh) string { return v.ServerAddress }).(pulumi.StringOutput)
}

// The signing role to be used for signing certificates
func (o SecretStoreVaultTlsCertSshOutput) SigningRole() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertSsh) string { return v.SigningRole }).(pulumi.StringOutput)
}

// The mount point of the SSH engine configured with the desired CA
func (o SecretStoreVaultTlsCertSshOutput) SshMountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertSsh) string { return v.SshMountPoint }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultTlsCertSshOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertSsh) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreVaultTlsCertSshPtrOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultTlsCertSshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultTlsCertSsh)(nil)).Elem()
}

func (o SecretStoreVaultTlsCertSshPtrOutput) ToSecretStoreVaultTlsCertSshPtrOutput() SecretStoreVaultTlsCertSshPtrOutput {
	return o
}

func (o SecretStoreVaultTlsCertSshPtrOutput) ToSecretStoreVaultTlsCertSshPtrOutputWithContext(ctx context.Context) SecretStoreVaultTlsCertSshPtrOutput {
	return o
}

func (o SecretStoreVaultTlsCertSshPtrOutput) Elem() SecretStoreVaultTlsCertSshOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertSsh) SecretStoreVaultTlsCertSsh {
		if v != nil {
			return *v
		}
		var ret SecretStoreVaultTlsCertSsh
		return ret
	}).(SecretStoreVaultTlsCertSshOutput)
}

// A path to a CA file accessible by a Node
func (o SecretStoreVaultTlsCertSshPtrOutput) CaCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertSsh) *string {
		if v == nil {
			return nil
		}
		return v.CaCertPath
	}).(pulumi.StringPtrOutput)
}

// A path to a client certificate file accessible by a Node
func (o SecretStoreVaultTlsCertSshPtrOutput) ClientCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertSsh) *string {
		if v == nil {
			return nil
		}
		return &v.ClientCertPath
	}).(pulumi.StringPtrOutput)
}

// A path to a client key file accessible by a Node
func (o SecretStoreVaultTlsCertSshPtrOutput) ClientKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertSsh) *string {
		if v == nil {
			return nil
		}
		return &v.ClientKeyPath
	}).(pulumi.StringPtrOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o SecretStoreVaultTlsCertSshPtrOutput) IssuedCertTtlMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertSsh) *int {
		if v == nil {
			return nil
		}
		return &v.IssuedCertTtlMinutes
	}).(pulumi.IntPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultTlsCertSshPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertSsh) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultTlsCertSshPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertSsh) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultTlsCertSshPtrOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertSsh) *string {
		if v == nil {
			return nil
		}
		return &v.ServerAddress
	}).(pulumi.StringPtrOutput)
}

// The signing role to be used for signing certificates
func (o SecretStoreVaultTlsCertSshPtrOutput) SigningRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertSsh) *string {
		if v == nil {
			return nil
		}
		return &v.SigningRole
	}).(pulumi.StringPtrOutput)
}

// The mount point of the SSH engine configured with the desired CA
func (o SecretStoreVaultTlsCertSshPtrOutput) SshMountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertSsh) *string {
		if v == nil {
			return nil
		}
		return &v.SshMountPoint
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultTlsCertSshPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertSsh) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreVaultTlsCertX509 struct {
	// A path to a CA file accessible by a Node
	CaCertPath *string `pulumi:"caCertPath"`
	// A path to a client certificate file accessible by a Node
	ClientCertPath string `pulumi:"clientCertPath"`
	// A path to a client key file accessible by a Node
	ClientKeyPath string `pulumi:"clientKeyPath"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes int `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The mount point of the PKI engine configured with the desired CA
	PkiMountPoint string `pulumi:"pkiMountPoint"`
	// The URL of the Vault to target
	ServerAddress string `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole string `pulumi:"signingRole"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreVaultTlsCertX509Input is an input type that accepts SecretStoreVaultTlsCertX509Args and SecretStoreVaultTlsCertX509Output values.
// You can construct a concrete instance of `SecretStoreVaultTlsCertX509Input` via:
//
//	SecretStoreVaultTlsCertX509Args{...}
type SecretStoreVaultTlsCertX509Input interface {
	pulumi.Input

	ToSecretStoreVaultTlsCertX509Output() SecretStoreVaultTlsCertX509Output
	ToSecretStoreVaultTlsCertX509OutputWithContext(context.Context) SecretStoreVaultTlsCertX509Output
}

type SecretStoreVaultTlsCertX509Args struct {
	// A path to a CA file accessible by a Node
	CaCertPath pulumi.StringPtrInput `pulumi:"caCertPath"`
	// A path to a client certificate file accessible by a Node
	ClientCertPath pulumi.StringInput `pulumi:"clientCertPath"`
	// A path to a client key file accessible by a Node
	ClientKeyPath pulumi.StringInput `pulumi:"clientKeyPath"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes pulumi.IntInput `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The mount point of the PKI engine configured with the desired CA
	PkiMountPoint pulumi.StringInput `pulumi:"pkiMountPoint"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringInput `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole pulumi.StringInput `pulumi:"signingRole"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreVaultTlsCertX509Args) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultTlsCertX509)(nil)).Elem()
}

func (i SecretStoreVaultTlsCertX509Args) ToSecretStoreVaultTlsCertX509Output() SecretStoreVaultTlsCertX509Output {
	return i.ToSecretStoreVaultTlsCertX509OutputWithContext(context.Background())
}

func (i SecretStoreVaultTlsCertX509Args) ToSecretStoreVaultTlsCertX509OutputWithContext(ctx context.Context) SecretStoreVaultTlsCertX509Output {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTlsCertX509Output)
}

func (i SecretStoreVaultTlsCertX509Args) ToSecretStoreVaultTlsCertX509PtrOutput() SecretStoreVaultTlsCertX509PtrOutput {
	return i.ToSecretStoreVaultTlsCertX509PtrOutputWithContext(context.Background())
}

func (i SecretStoreVaultTlsCertX509Args) ToSecretStoreVaultTlsCertX509PtrOutputWithContext(ctx context.Context) SecretStoreVaultTlsCertX509PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTlsCertX509Output).ToSecretStoreVaultTlsCertX509PtrOutputWithContext(ctx)
}

// SecretStoreVaultTlsCertX509PtrInput is an input type that accepts SecretStoreVaultTlsCertX509Args, SecretStoreVaultTlsCertX509Ptr and SecretStoreVaultTlsCertX509PtrOutput values.
// You can construct a concrete instance of `SecretStoreVaultTlsCertX509PtrInput` via:
//
//	        SecretStoreVaultTlsCertX509Args{...}
//
//	or:
//
//	        nil
type SecretStoreVaultTlsCertX509PtrInput interface {
	pulumi.Input

	ToSecretStoreVaultTlsCertX509PtrOutput() SecretStoreVaultTlsCertX509PtrOutput
	ToSecretStoreVaultTlsCertX509PtrOutputWithContext(context.Context) SecretStoreVaultTlsCertX509PtrOutput
}

type secretStoreVaultTlsCertX509PtrType SecretStoreVaultTlsCertX509Args

func SecretStoreVaultTlsCertX509Ptr(v *SecretStoreVaultTlsCertX509Args) SecretStoreVaultTlsCertX509PtrInput {
	return (*secretStoreVaultTlsCertX509PtrType)(v)
}

func (*secretStoreVaultTlsCertX509PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultTlsCertX509)(nil)).Elem()
}

func (i *secretStoreVaultTlsCertX509PtrType) ToSecretStoreVaultTlsCertX509PtrOutput() SecretStoreVaultTlsCertX509PtrOutput {
	return i.ToSecretStoreVaultTlsCertX509PtrOutputWithContext(context.Background())
}

func (i *secretStoreVaultTlsCertX509PtrType) ToSecretStoreVaultTlsCertX509PtrOutputWithContext(ctx context.Context) SecretStoreVaultTlsCertX509PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTlsCertX509PtrOutput)
}

type SecretStoreVaultTlsCertX509Output struct{ *pulumi.OutputState }

func (SecretStoreVaultTlsCertX509Output) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultTlsCertX509)(nil)).Elem()
}

func (o SecretStoreVaultTlsCertX509Output) ToSecretStoreVaultTlsCertX509Output() SecretStoreVaultTlsCertX509Output {
	return o
}

func (o SecretStoreVaultTlsCertX509Output) ToSecretStoreVaultTlsCertX509OutputWithContext(ctx context.Context) SecretStoreVaultTlsCertX509Output {
	return o
}

func (o SecretStoreVaultTlsCertX509Output) ToSecretStoreVaultTlsCertX509PtrOutput() SecretStoreVaultTlsCertX509PtrOutput {
	return o.ToSecretStoreVaultTlsCertX509PtrOutputWithContext(context.Background())
}

func (o SecretStoreVaultTlsCertX509Output) ToSecretStoreVaultTlsCertX509PtrOutputWithContext(ctx context.Context) SecretStoreVaultTlsCertX509PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreVaultTlsCertX509) *SecretStoreVaultTlsCertX509 {
		return &v
	}).(SecretStoreVaultTlsCertX509PtrOutput)
}

// A path to a CA file accessible by a Node
func (o SecretStoreVaultTlsCertX509Output) CaCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertX509) *string { return v.CaCertPath }).(pulumi.StringPtrOutput)
}

// A path to a client certificate file accessible by a Node
func (o SecretStoreVaultTlsCertX509Output) ClientCertPath() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertX509) string { return v.ClientCertPath }).(pulumi.StringOutput)
}

// A path to a client key file accessible by a Node
func (o SecretStoreVaultTlsCertX509Output) ClientKeyPath() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertX509) string { return v.ClientKeyPath }).(pulumi.StringOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o SecretStoreVaultTlsCertX509Output) IssuedCertTtlMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertX509) int { return v.IssuedCertTtlMinutes }).(pulumi.IntOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultTlsCertX509Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertX509) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultTlsCertX509Output) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertX509) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The mount point of the PKI engine configured with the desired CA
func (o SecretStoreVaultTlsCertX509Output) PkiMountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertX509) string { return v.PkiMountPoint }).(pulumi.StringOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultTlsCertX509Output) ServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertX509) string { return v.ServerAddress }).(pulumi.StringOutput)
}

// The signing role to be used for signing certificates
func (o SecretStoreVaultTlsCertX509Output) SigningRole() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertX509) string { return v.SigningRole }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultTlsCertX509Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreVaultTlsCertX509) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreVaultTlsCertX509PtrOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultTlsCertX509PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultTlsCertX509)(nil)).Elem()
}

func (o SecretStoreVaultTlsCertX509PtrOutput) ToSecretStoreVaultTlsCertX509PtrOutput() SecretStoreVaultTlsCertX509PtrOutput {
	return o
}

func (o SecretStoreVaultTlsCertX509PtrOutput) ToSecretStoreVaultTlsCertX509PtrOutputWithContext(ctx context.Context) SecretStoreVaultTlsCertX509PtrOutput {
	return o
}

func (o SecretStoreVaultTlsCertX509PtrOutput) Elem() SecretStoreVaultTlsCertX509Output {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertX509) SecretStoreVaultTlsCertX509 {
		if v != nil {
			return *v
		}
		var ret SecretStoreVaultTlsCertX509
		return ret
	}).(SecretStoreVaultTlsCertX509Output)
}

// A path to a CA file accessible by a Node
func (o SecretStoreVaultTlsCertX509PtrOutput) CaCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertX509) *string {
		if v == nil {
			return nil
		}
		return v.CaCertPath
	}).(pulumi.StringPtrOutput)
}

// A path to a client certificate file accessible by a Node
func (o SecretStoreVaultTlsCertX509PtrOutput) ClientCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.ClientCertPath
	}).(pulumi.StringPtrOutput)
}

// A path to a client key file accessible by a Node
func (o SecretStoreVaultTlsCertX509PtrOutput) ClientKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.ClientKeyPath
	}).(pulumi.StringPtrOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o SecretStoreVaultTlsCertX509PtrOutput) IssuedCertTtlMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertX509) *int {
		if v == nil {
			return nil
		}
		return &v.IssuedCertTtlMinutes
	}).(pulumi.IntPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultTlsCertX509PtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultTlsCertX509PtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertX509) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The mount point of the PKI engine configured with the desired CA
func (o SecretStoreVaultTlsCertX509PtrOutput) PkiMountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.PkiMountPoint
	}).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultTlsCertX509PtrOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.ServerAddress
	}).(pulumi.StringPtrOutput)
}

// The signing role to be used for signing certificates
func (o SecretStoreVaultTlsCertX509PtrOutput) SigningRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.SigningRole
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultTlsCertX509PtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreVaultTlsCertX509) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreVaultToken struct {
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress string `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreVaultTokenInput is an input type that accepts SecretStoreVaultTokenArgs and SecretStoreVaultTokenOutput values.
// You can construct a concrete instance of `SecretStoreVaultTokenInput` via:
//
//	SecretStoreVaultTokenArgs{...}
type SecretStoreVaultTokenInput interface {
	pulumi.Input

	ToSecretStoreVaultTokenOutput() SecretStoreVaultTokenOutput
	ToSecretStoreVaultTokenOutputWithContext(context.Context) SecretStoreVaultTokenOutput
}

type SecretStoreVaultTokenArgs struct {
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringInput `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreVaultTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultToken)(nil)).Elem()
}

func (i SecretStoreVaultTokenArgs) ToSecretStoreVaultTokenOutput() SecretStoreVaultTokenOutput {
	return i.ToSecretStoreVaultTokenOutputWithContext(context.Background())
}

func (i SecretStoreVaultTokenArgs) ToSecretStoreVaultTokenOutputWithContext(ctx context.Context) SecretStoreVaultTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTokenOutput)
}

func (i SecretStoreVaultTokenArgs) ToSecretStoreVaultTokenPtrOutput() SecretStoreVaultTokenPtrOutput {
	return i.ToSecretStoreVaultTokenPtrOutputWithContext(context.Background())
}

func (i SecretStoreVaultTokenArgs) ToSecretStoreVaultTokenPtrOutputWithContext(ctx context.Context) SecretStoreVaultTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTokenOutput).ToSecretStoreVaultTokenPtrOutputWithContext(ctx)
}

// SecretStoreVaultTokenPtrInput is an input type that accepts SecretStoreVaultTokenArgs, SecretStoreVaultTokenPtr and SecretStoreVaultTokenPtrOutput values.
// You can construct a concrete instance of `SecretStoreVaultTokenPtrInput` via:
//
//	        SecretStoreVaultTokenArgs{...}
//
//	or:
//
//	        nil
type SecretStoreVaultTokenPtrInput interface {
	pulumi.Input

	ToSecretStoreVaultTokenPtrOutput() SecretStoreVaultTokenPtrOutput
	ToSecretStoreVaultTokenPtrOutputWithContext(context.Context) SecretStoreVaultTokenPtrOutput
}

type secretStoreVaultTokenPtrType SecretStoreVaultTokenArgs

func SecretStoreVaultTokenPtr(v *SecretStoreVaultTokenArgs) SecretStoreVaultTokenPtrInput {
	return (*secretStoreVaultTokenPtrType)(v)
}

func (*secretStoreVaultTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultToken)(nil)).Elem()
}

func (i *secretStoreVaultTokenPtrType) ToSecretStoreVaultTokenPtrOutput() SecretStoreVaultTokenPtrOutput {
	return i.ToSecretStoreVaultTokenPtrOutputWithContext(context.Background())
}

func (i *secretStoreVaultTokenPtrType) ToSecretStoreVaultTokenPtrOutputWithContext(ctx context.Context) SecretStoreVaultTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTokenPtrOutput)
}

type SecretStoreVaultTokenOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultToken)(nil)).Elem()
}

func (o SecretStoreVaultTokenOutput) ToSecretStoreVaultTokenOutput() SecretStoreVaultTokenOutput {
	return o
}

func (o SecretStoreVaultTokenOutput) ToSecretStoreVaultTokenOutputWithContext(ctx context.Context) SecretStoreVaultTokenOutput {
	return o
}

func (o SecretStoreVaultTokenOutput) ToSecretStoreVaultTokenPtrOutput() SecretStoreVaultTokenPtrOutput {
	return o.ToSecretStoreVaultTokenPtrOutputWithContext(context.Background())
}

func (o SecretStoreVaultTokenOutput) ToSecretStoreVaultTokenPtrOutputWithContext(ctx context.Context) SecretStoreVaultTokenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreVaultToken) *SecretStoreVaultToken {
		return &v
	}).(SecretStoreVaultTokenPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultToken) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultTokenOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreVaultToken) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultTokenOutput) ServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultToken) string { return v.ServerAddress }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultTokenOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreVaultToken) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreVaultTokenPtrOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultToken)(nil)).Elem()
}

func (o SecretStoreVaultTokenPtrOutput) ToSecretStoreVaultTokenPtrOutput() SecretStoreVaultTokenPtrOutput {
	return o
}

func (o SecretStoreVaultTokenPtrOutput) ToSecretStoreVaultTokenPtrOutputWithContext(ctx context.Context) SecretStoreVaultTokenPtrOutput {
	return o
}

func (o SecretStoreVaultTokenPtrOutput) Elem() SecretStoreVaultTokenOutput {
	return o.ApplyT(func(v *SecretStoreVaultToken) SecretStoreVaultToken {
		if v != nil {
			return *v
		}
		var ret SecretStoreVaultToken
		return ret
	}).(SecretStoreVaultTokenOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultTokenPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultToken) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultTokenPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultToken) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultTokenPtrOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultToken) *string {
		if v == nil {
			return nil
		}
		return &v.ServerAddress
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultTokenPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreVaultToken) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreVaultTokenCertSsh struct {
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes int `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress string `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole string `pulumi:"signingRole"`
	// The mount point of the SSH engine configured with the desired CA
	SshMountPoint string `pulumi:"sshMountPoint"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreVaultTokenCertSshInput is an input type that accepts SecretStoreVaultTokenCertSshArgs and SecretStoreVaultTokenCertSshOutput values.
// You can construct a concrete instance of `SecretStoreVaultTokenCertSshInput` via:
//
//	SecretStoreVaultTokenCertSshArgs{...}
type SecretStoreVaultTokenCertSshInput interface {
	pulumi.Input

	ToSecretStoreVaultTokenCertSshOutput() SecretStoreVaultTokenCertSshOutput
	ToSecretStoreVaultTokenCertSshOutputWithContext(context.Context) SecretStoreVaultTokenCertSshOutput
}

type SecretStoreVaultTokenCertSshArgs struct {
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes pulumi.IntInput `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringInput `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole pulumi.StringInput `pulumi:"signingRole"`
	// The mount point of the SSH engine configured with the desired CA
	SshMountPoint pulumi.StringInput `pulumi:"sshMountPoint"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreVaultTokenCertSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultTokenCertSsh)(nil)).Elem()
}

func (i SecretStoreVaultTokenCertSshArgs) ToSecretStoreVaultTokenCertSshOutput() SecretStoreVaultTokenCertSshOutput {
	return i.ToSecretStoreVaultTokenCertSshOutputWithContext(context.Background())
}

func (i SecretStoreVaultTokenCertSshArgs) ToSecretStoreVaultTokenCertSshOutputWithContext(ctx context.Context) SecretStoreVaultTokenCertSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTokenCertSshOutput)
}

func (i SecretStoreVaultTokenCertSshArgs) ToSecretStoreVaultTokenCertSshPtrOutput() SecretStoreVaultTokenCertSshPtrOutput {
	return i.ToSecretStoreVaultTokenCertSshPtrOutputWithContext(context.Background())
}

func (i SecretStoreVaultTokenCertSshArgs) ToSecretStoreVaultTokenCertSshPtrOutputWithContext(ctx context.Context) SecretStoreVaultTokenCertSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTokenCertSshOutput).ToSecretStoreVaultTokenCertSshPtrOutputWithContext(ctx)
}

// SecretStoreVaultTokenCertSshPtrInput is an input type that accepts SecretStoreVaultTokenCertSshArgs, SecretStoreVaultTokenCertSshPtr and SecretStoreVaultTokenCertSshPtrOutput values.
// You can construct a concrete instance of `SecretStoreVaultTokenCertSshPtrInput` via:
//
//	        SecretStoreVaultTokenCertSshArgs{...}
//
//	or:
//
//	        nil
type SecretStoreVaultTokenCertSshPtrInput interface {
	pulumi.Input

	ToSecretStoreVaultTokenCertSshPtrOutput() SecretStoreVaultTokenCertSshPtrOutput
	ToSecretStoreVaultTokenCertSshPtrOutputWithContext(context.Context) SecretStoreVaultTokenCertSshPtrOutput
}

type secretStoreVaultTokenCertSshPtrType SecretStoreVaultTokenCertSshArgs

func SecretStoreVaultTokenCertSshPtr(v *SecretStoreVaultTokenCertSshArgs) SecretStoreVaultTokenCertSshPtrInput {
	return (*secretStoreVaultTokenCertSshPtrType)(v)
}

func (*secretStoreVaultTokenCertSshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultTokenCertSsh)(nil)).Elem()
}

func (i *secretStoreVaultTokenCertSshPtrType) ToSecretStoreVaultTokenCertSshPtrOutput() SecretStoreVaultTokenCertSshPtrOutput {
	return i.ToSecretStoreVaultTokenCertSshPtrOutputWithContext(context.Background())
}

func (i *secretStoreVaultTokenCertSshPtrType) ToSecretStoreVaultTokenCertSshPtrOutputWithContext(ctx context.Context) SecretStoreVaultTokenCertSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTokenCertSshPtrOutput)
}

type SecretStoreVaultTokenCertSshOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultTokenCertSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultTokenCertSsh)(nil)).Elem()
}

func (o SecretStoreVaultTokenCertSshOutput) ToSecretStoreVaultTokenCertSshOutput() SecretStoreVaultTokenCertSshOutput {
	return o
}

func (o SecretStoreVaultTokenCertSshOutput) ToSecretStoreVaultTokenCertSshOutputWithContext(ctx context.Context) SecretStoreVaultTokenCertSshOutput {
	return o
}

func (o SecretStoreVaultTokenCertSshOutput) ToSecretStoreVaultTokenCertSshPtrOutput() SecretStoreVaultTokenCertSshPtrOutput {
	return o.ToSecretStoreVaultTokenCertSshPtrOutputWithContext(context.Background())
}

func (o SecretStoreVaultTokenCertSshOutput) ToSecretStoreVaultTokenCertSshPtrOutputWithContext(ctx context.Context) SecretStoreVaultTokenCertSshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreVaultTokenCertSsh) *SecretStoreVaultTokenCertSsh {
		return &v
	}).(SecretStoreVaultTokenCertSshPtrOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o SecretStoreVaultTokenCertSshOutput) IssuedCertTtlMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v SecretStoreVaultTokenCertSsh) int { return v.IssuedCertTtlMinutes }).(pulumi.IntOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultTokenCertSshOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTokenCertSsh) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultTokenCertSshOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreVaultTokenCertSsh) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultTokenCertSshOutput) ServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTokenCertSsh) string { return v.ServerAddress }).(pulumi.StringOutput)
}

// The signing role to be used for signing certificates
func (o SecretStoreVaultTokenCertSshOutput) SigningRole() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTokenCertSsh) string { return v.SigningRole }).(pulumi.StringOutput)
}

// The mount point of the SSH engine configured with the desired CA
func (o SecretStoreVaultTokenCertSshOutput) SshMountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTokenCertSsh) string { return v.SshMountPoint }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultTokenCertSshOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreVaultTokenCertSsh) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreVaultTokenCertSshPtrOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultTokenCertSshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultTokenCertSsh)(nil)).Elem()
}

func (o SecretStoreVaultTokenCertSshPtrOutput) ToSecretStoreVaultTokenCertSshPtrOutput() SecretStoreVaultTokenCertSshPtrOutput {
	return o
}

func (o SecretStoreVaultTokenCertSshPtrOutput) ToSecretStoreVaultTokenCertSshPtrOutputWithContext(ctx context.Context) SecretStoreVaultTokenCertSshPtrOutput {
	return o
}

func (o SecretStoreVaultTokenCertSshPtrOutput) Elem() SecretStoreVaultTokenCertSshOutput {
	return o.ApplyT(func(v *SecretStoreVaultTokenCertSsh) SecretStoreVaultTokenCertSsh {
		if v != nil {
			return *v
		}
		var ret SecretStoreVaultTokenCertSsh
		return ret
	}).(SecretStoreVaultTokenCertSshOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o SecretStoreVaultTokenCertSshPtrOutput) IssuedCertTtlMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTokenCertSsh) *int {
		if v == nil {
			return nil
		}
		return &v.IssuedCertTtlMinutes
	}).(pulumi.IntPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultTokenCertSshPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTokenCertSsh) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultTokenCertSshPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTokenCertSsh) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultTokenCertSshPtrOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTokenCertSsh) *string {
		if v == nil {
			return nil
		}
		return &v.ServerAddress
	}).(pulumi.StringPtrOutput)
}

// The signing role to be used for signing certificates
func (o SecretStoreVaultTokenCertSshPtrOutput) SigningRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTokenCertSsh) *string {
		if v == nil {
			return nil
		}
		return &v.SigningRole
	}).(pulumi.StringPtrOutput)
}

// The mount point of the SSH engine configured with the desired CA
func (o SecretStoreVaultTokenCertSshPtrOutput) SshMountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTokenCertSsh) *string {
		if v == nil {
			return nil
		}
		return &v.SshMountPoint
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultTokenCertSshPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreVaultTokenCertSsh) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type SecretStoreVaultTokenCertX509 struct {
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes int `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The mount point of the PKI engine configured with the desired CA
	PkiMountPoint string `pulumi:"pkiMountPoint"`
	// The URL of the Vault to target
	ServerAddress string `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole string `pulumi:"signingRole"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// SecretStoreVaultTokenCertX509Input is an input type that accepts SecretStoreVaultTokenCertX509Args and SecretStoreVaultTokenCertX509Output values.
// You can construct a concrete instance of `SecretStoreVaultTokenCertX509Input` via:
//
//	SecretStoreVaultTokenCertX509Args{...}
type SecretStoreVaultTokenCertX509Input interface {
	pulumi.Input

	ToSecretStoreVaultTokenCertX509Output() SecretStoreVaultTokenCertX509Output
	ToSecretStoreVaultTokenCertX509OutputWithContext(context.Context) SecretStoreVaultTokenCertX509Output
}

type SecretStoreVaultTokenCertX509Args struct {
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes pulumi.IntInput `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The mount point of the PKI engine configured with the desired CA
	PkiMountPoint pulumi.StringInput `pulumi:"pkiMountPoint"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringInput `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole pulumi.StringInput `pulumi:"signingRole"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (SecretStoreVaultTokenCertX509Args) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultTokenCertX509)(nil)).Elem()
}

func (i SecretStoreVaultTokenCertX509Args) ToSecretStoreVaultTokenCertX509Output() SecretStoreVaultTokenCertX509Output {
	return i.ToSecretStoreVaultTokenCertX509OutputWithContext(context.Background())
}

func (i SecretStoreVaultTokenCertX509Args) ToSecretStoreVaultTokenCertX509OutputWithContext(ctx context.Context) SecretStoreVaultTokenCertX509Output {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTokenCertX509Output)
}

func (i SecretStoreVaultTokenCertX509Args) ToSecretStoreVaultTokenCertX509PtrOutput() SecretStoreVaultTokenCertX509PtrOutput {
	return i.ToSecretStoreVaultTokenCertX509PtrOutputWithContext(context.Background())
}

func (i SecretStoreVaultTokenCertX509Args) ToSecretStoreVaultTokenCertX509PtrOutputWithContext(ctx context.Context) SecretStoreVaultTokenCertX509PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTokenCertX509Output).ToSecretStoreVaultTokenCertX509PtrOutputWithContext(ctx)
}

// SecretStoreVaultTokenCertX509PtrInput is an input type that accepts SecretStoreVaultTokenCertX509Args, SecretStoreVaultTokenCertX509Ptr and SecretStoreVaultTokenCertX509PtrOutput values.
// You can construct a concrete instance of `SecretStoreVaultTokenCertX509PtrInput` via:
//
//	        SecretStoreVaultTokenCertX509Args{...}
//
//	or:
//
//	        nil
type SecretStoreVaultTokenCertX509PtrInput interface {
	pulumi.Input

	ToSecretStoreVaultTokenCertX509PtrOutput() SecretStoreVaultTokenCertX509PtrOutput
	ToSecretStoreVaultTokenCertX509PtrOutputWithContext(context.Context) SecretStoreVaultTokenCertX509PtrOutput
}

type secretStoreVaultTokenCertX509PtrType SecretStoreVaultTokenCertX509Args

func SecretStoreVaultTokenCertX509Ptr(v *SecretStoreVaultTokenCertX509Args) SecretStoreVaultTokenCertX509PtrInput {
	return (*secretStoreVaultTokenCertX509PtrType)(v)
}

func (*secretStoreVaultTokenCertX509PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultTokenCertX509)(nil)).Elem()
}

func (i *secretStoreVaultTokenCertX509PtrType) ToSecretStoreVaultTokenCertX509PtrOutput() SecretStoreVaultTokenCertX509PtrOutput {
	return i.ToSecretStoreVaultTokenCertX509PtrOutputWithContext(context.Background())
}

func (i *secretStoreVaultTokenCertX509PtrType) ToSecretStoreVaultTokenCertX509PtrOutputWithContext(ctx context.Context) SecretStoreVaultTokenCertX509PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreVaultTokenCertX509PtrOutput)
}

type SecretStoreVaultTokenCertX509Output struct{ *pulumi.OutputState }

func (SecretStoreVaultTokenCertX509Output) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreVaultTokenCertX509)(nil)).Elem()
}

func (o SecretStoreVaultTokenCertX509Output) ToSecretStoreVaultTokenCertX509Output() SecretStoreVaultTokenCertX509Output {
	return o
}

func (o SecretStoreVaultTokenCertX509Output) ToSecretStoreVaultTokenCertX509OutputWithContext(ctx context.Context) SecretStoreVaultTokenCertX509Output {
	return o
}

func (o SecretStoreVaultTokenCertX509Output) ToSecretStoreVaultTokenCertX509PtrOutput() SecretStoreVaultTokenCertX509PtrOutput {
	return o.ToSecretStoreVaultTokenCertX509PtrOutputWithContext(context.Background())
}

func (o SecretStoreVaultTokenCertX509Output) ToSecretStoreVaultTokenCertX509PtrOutputWithContext(ctx context.Context) SecretStoreVaultTokenCertX509PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStoreVaultTokenCertX509) *SecretStoreVaultTokenCertX509 {
		return &v
	}).(SecretStoreVaultTokenCertX509PtrOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o SecretStoreVaultTokenCertX509Output) IssuedCertTtlMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v SecretStoreVaultTokenCertX509) int { return v.IssuedCertTtlMinutes }).(pulumi.IntOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultTokenCertX509Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTokenCertX509) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultTokenCertX509Output) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreVaultTokenCertX509) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The mount point of the PKI engine configured with the desired CA
func (o SecretStoreVaultTokenCertX509Output) PkiMountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTokenCertX509) string { return v.PkiMountPoint }).(pulumi.StringOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultTokenCertX509Output) ServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTokenCertX509) string { return v.ServerAddress }).(pulumi.StringOutput)
}

// The signing role to be used for signing certificates
func (o SecretStoreVaultTokenCertX509Output) SigningRole() pulumi.StringOutput {
	return o.ApplyT(func(v SecretStoreVaultTokenCertX509) string { return v.SigningRole }).(pulumi.StringOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultTokenCertX509Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretStoreVaultTokenCertX509) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SecretStoreVaultTokenCertX509PtrOutput struct{ *pulumi.OutputState }

func (SecretStoreVaultTokenCertX509PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreVaultTokenCertX509)(nil)).Elem()
}

func (o SecretStoreVaultTokenCertX509PtrOutput) ToSecretStoreVaultTokenCertX509PtrOutput() SecretStoreVaultTokenCertX509PtrOutput {
	return o
}

func (o SecretStoreVaultTokenCertX509PtrOutput) ToSecretStoreVaultTokenCertX509PtrOutputWithContext(ctx context.Context) SecretStoreVaultTokenCertX509PtrOutput {
	return o
}

func (o SecretStoreVaultTokenCertX509PtrOutput) Elem() SecretStoreVaultTokenCertX509Output {
	return o.ApplyT(func(v *SecretStoreVaultTokenCertX509) SecretStoreVaultTokenCertX509 {
		if v != nil {
			return *v
		}
		var ret SecretStoreVaultTokenCertX509
		return ret
	}).(SecretStoreVaultTokenCertX509Output)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o SecretStoreVaultTokenCertX509PtrOutput) IssuedCertTtlMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTokenCertX509) *int {
		if v == nil {
			return nil
		}
		return &v.IssuedCertTtlMinutes
	}).(pulumi.IntPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o SecretStoreVaultTokenCertX509PtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTokenCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o SecretStoreVaultTokenCertX509PtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTokenCertX509) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The mount point of the PKI engine configured with the desired CA
func (o SecretStoreVaultTokenCertX509PtrOutput) PkiMountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTokenCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.PkiMountPoint
	}).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o SecretStoreVaultTokenCertX509PtrOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTokenCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.ServerAddress
	}).(pulumi.StringPtrOutput)
}

// The signing role to be used for signing certificates
func (o SecretStoreVaultTokenCertX509PtrOutput) SigningRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreVaultTokenCertX509) *string {
		if v == nil {
			return nil
		}
		return &v.SigningRole
	}).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o SecretStoreVaultTokenCertX509PtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecretStoreVaultTokenCertX509) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

type GetAccountAccount struct {
	// A Service is a service account that can connect to resources they are granted directly, or granted via roles. Services are typically automated jobs.
	Services []GetAccountAccountService `pulumi:"services"`
	// A Token is an account providing tokenized access for automation or integration use. Tokens include admin tokens, API keys, and SCIM tokens.
	Tokens []GetAccountAccountToken `pulumi:"tokens"`
	// A User can connect to resources they are granted directly, or granted via roles.
	Users []GetAccountAccountUser `pulumi:"users"`
}

// GetAccountAccountInput is an input type that accepts GetAccountAccountArgs and GetAccountAccountOutput values.
// You can construct a concrete instance of `GetAccountAccountInput` via:
//
//	GetAccountAccountArgs{...}
type GetAccountAccountInput interface {
	pulumi.Input

	ToGetAccountAccountOutput() GetAccountAccountOutput
	ToGetAccountAccountOutputWithContext(context.Context) GetAccountAccountOutput
}

type GetAccountAccountArgs struct {
	// A Service is a service account that can connect to resources they are granted directly, or granted via roles. Services are typically automated jobs.
	Services GetAccountAccountServiceArrayInput `pulumi:"services"`
	// A Token is an account providing tokenized access for automation or integration use. Tokens include admin tokens, API keys, and SCIM tokens.
	Tokens GetAccountAccountTokenArrayInput `pulumi:"tokens"`
	// A User can connect to resources they are granted directly, or granted via roles.
	Users GetAccountAccountUserArrayInput `pulumi:"users"`
}

func (GetAccountAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountAccount)(nil)).Elem()
}

func (i GetAccountAccountArgs) ToGetAccountAccountOutput() GetAccountAccountOutput {
	return i.ToGetAccountAccountOutputWithContext(context.Background())
}

func (i GetAccountAccountArgs) ToGetAccountAccountOutputWithContext(ctx context.Context) GetAccountAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountAccountOutput)
}

// GetAccountAccountArrayInput is an input type that accepts GetAccountAccountArray and GetAccountAccountArrayOutput values.
// You can construct a concrete instance of `GetAccountAccountArrayInput` via:
//
//	GetAccountAccountArray{ GetAccountAccountArgs{...} }
type GetAccountAccountArrayInput interface {
	pulumi.Input

	ToGetAccountAccountArrayOutput() GetAccountAccountArrayOutput
	ToGetAccountAccountArrayOutputWithContext(context.Context) GetAccountAccountArrayOutput
}

type GetAccountAccountArray []GetAccountAccountInput

func (GetAccountAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountAccount)(nil)).Elem()
}

func (i GetAccountAccountArray) ToGetAccountAccountArrayOutput() GetAccountAccountArrayOutput {
	return i.ToGetAccountAccountArrayOutputWithContext(context.Background())
}

func (i GetAccountAccountArray) ToGetAccountAccountArrayOutputWithContext(ctx context.Context) GetAccountAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountAccountArrayOutput)
}

type GetAccountAccountOutput struct{ *pulumi.OutputState }

func (GetAccountAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountAccount)(nil)).Elem()
}

func (o GetAccountAccountOutput) ToGetAccountAccountOutput() GetAccountAccountOutput {
	return o
}

func (o GetAccountAccountOutput) ToGetAccountAccountOutputWithContext(ctx context.Context) GetAccountAccountOutput {
	return o
}

// A Service is a service account that can connect to resources they are granted directly, or granted via roles. Services are typically automated jobs.
func (o GetAccountAccountOutput) Services() GetAccountAccountServiceArrayOutput {
	return o.ApplyT(func(v GetAccountAccount) []GetAccountAccountService { return v.Services }).(GetAccountAccountServiceArrayOutput)
}

// A Token is an account providing tokenized access for automation or integration use. Tokens include admin tokens, API keys, and SCIM tokens.
func (o GetAccountAccountOutput) Tokens() GetAccountAccountTokenArrayOutput {
	return o.ApplyT(func(v GetAccountAccount) []GetAccountAccountToken { return v.Tokens }).(GetAccountAccountTokenArrayOutput)
}

// A User can connect to resources they are granted directly, or granted via roles.
func (o GetAccountAccountOutput) Users() GetAccountAccountUserArrayOutput {
	return o.ApplyT(func(v GetAccountAccount) []GetAccountAccountUser { return v.Users }).(GetAccountAccountUserArrayOutput)
}

type GetAccountAccountArrayOutput struct{ *pulumi.OutputState }

func (GetAccountAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountAccount)(nil)).Elem()
}

func (o GetAccountAccountArrayOutput) ToGetAccountAccountArrayOutput() GetAccountAccountArrayOutput {
	return o
}

func (o GetAccountAccountArrayOutput) ToGetAccountAccountArrayOutputWithContext(ctx context.Context) GetAccountAccountArrayOutput {
	return o
}

func (o GetAccountAccountArrayOutput) Index(i pulumi.IntInput) GetAccountAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAccountAccount {
		return vs[0].([]GetAccountAccount)[vs[1].(int)]
	}).(GetAccountAccountOutput)
}

type GetAccountAccountService struct {
	// Unique identifier of the User.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Token.
	Name *string `pulumi:"name"`
	// Reserved for future use.  Always false for tokens.
	Suspended *bool `pulumi:"suspended"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetAccountAccountServiceInput is an input type that accepts GetAccountAccountServiceArgs and GetAccountAccountServiceOutput values.
// You can construct a concrete instance of `GetAccountAccountServiceInput` via:
//
//	GetAccountAccountServiceArgs{...}
type GetAccountAccountServiceInput interface {
	pulumi.Input

	ToGetAccountAccountServiceOutput() GetAccountAccountServiceOutput
	ToGetAccountAccountServiceOutputWithContext(context.Context) GetAccountAccountServiceOutput
}

type GetAccountAccountServiceArgs struct {
	// Unique identifier of the User.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Token.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Reserved for future use.  Always false for tokens.
	Suspended pulumi.BoolPtrInput `pulumi:"suspended"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetAccountAccountServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountAccountService)(nil)).Elem()
}

func (i GetAccountAccountServiceArgs) ToGetAccountAccountServiceOutput() GetAccountAccountServiceOutput {
	return i.ToGetAccountAccountServiceOutputWithContext(context.Background())
}

func (i GetAccountAccountServiceArgs) ToGetAccountAccountServiceOutputWithContext(ctx context.Context) GetAccountAccountServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountAccountServiceOutput)
}

// GetAccountAccountServiceArrayInput is an input type that accepts GetAccountAccountServiceArray and GetAccountAccountServiceArrayOutput values.
// You can construct a concrete instance of `GetAccountAccountServiceArrayInput` via:
//
//	GetAccountAccountServiceArray{ GetAccountAccountServiceArgs{...} }
type GetAccountAccountServiceArrayInput interface {
	pulumi.Input

	ToGetAccountAccountServiceArrayOutput() GetAccountAccountServiceArrayOutput
	ToGetAccountAccountServiceArrayOutputWithContext(context.Context) GetAccountAccountServiceArrayOutput
}

type GetAccountAccountServiceArray []GetAccountAccountServiceInput

func (GetAccountAccountServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountAccountService)(nil)).Elem()
}

func (i GetAccountAccountServiceArray) ToGetAccountAccountServiceArrayOutput() GetAccountAccountServiceArrayOutput {
	return i.ToGetAccountAccountServiceArrayOutputWithContext(context.Background())
}

func (i GetAccountAccountServiceArray) ToGetAccountAccountServiceArrayOutputWithContext(ctx context.Context) GetAccountAccountServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountAccountServiceArrayOutput)
}

type GetAccountAccountServiceOutput struct{ *pulumi.OutputState }

func (GetAccountAccountServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountAccountService)(nil)).Elem()
}

func (o GetAccountAccountServiceOutput) ToGetAccountAccountServiceOutput() GetAccountAccountServiceOutput {
	return o
}

func (o GetAccountAccountServiceOutput) ToGetAccountAccountServiceOutputWithContext(ctx context.Context) GetAccountAccountServiceOutput {
	return o
}

// Unique identifier of the User.
func (o GetAccountAccountServiceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountAccountService) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Token.
func (o GetAccountAccountServiceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountAccountService) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Reserved for future use.  Always false for tokens.
func (o GetAccountAccountServiceOutput) Suspended() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAccountAccountService) *bool { return v.Suspended }).(pulumi.BoolPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetAccountAccountServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetAccountAccountService) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetAccountAccountServiceArrayOutput struct{ *pulumi.OutputState }

func (GetAccountAccountServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountAccountService)(nil)).Elem()
}

func (o GetAccountAccountServiceArrayOutput) ToGetAccountAccountServiceArrayOutput() GetAccountAccountServiceArrayOutput {
	return o
}

func (o GetAccountAccountServiceArrayOutput) ToGetAccountAccountServiceArrayOutputWithContext(ctx context.Context) GetAccountAccountServiceArrayOutput {
	return o
}

func (o GetAccountAccountServiceArrayOutput) Index(i pulumi.IntInput) GetAccountAccountServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAccountAccountService {
		return vs[0].([]GetAccountAccountService)[vs[1].(int)]
	}).(GetAccountAccountServiceOutput)
}

type GetAccountAccountToken struct {
	// Corresponds to the type of token, e.g. api or admin-token.
	AccountType *string `pulumi:"accountType"`
	// The timestamp when the Token will expire.
	Deadline *string `pulumi:"deadline"`
	// Duration from token creation to expiration.
	Duration *string `pulumi:"duration"`
	// Unique identifier of the User.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Token.
	Name *string `pulumi:"name"`
	// Permissions assigned to the token, e.g. role:create.
	Permissions []string `pulumi:"permissions"`
	// The timestamp when the Token was last rekeyed.
	Rekeyed *string `pulumi:"rekeyed"`
	// Reserved for future use.  Always false for tokens.
	Suspended *bool `pulumi:"suspended"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetAccountAccountTokenInput is an input type that accepts GetAccountAccountTokenArgs and GetAccountAccountTokenOutput values.
// You can construct a concrete instance of `GetAccountAccountTokenInput` via:
//
//	GetAccountAccountTokenArgs{...}
type GetAccountAccountTokenInput interface {
	pulumi.Input

	ToGetAccountAccountTokenOutput() GetAccountAccountTokenOutput
	ToGetAccountAccountTokenOutputWithContext(context.Context) GetAccountAccountTokenOutput
}

type GetAccountAccountTokenArgs struct {
	// Corresponds to the type of token, e.g. api or admin-token.
	AccountType pulumi.StringPtrInput `pulumi:"accountType"`
	// The timestamp when the Token will expire.
	Deadline pulumi.StringPtrInput `pulumi:"deadline"`
	// Duration from token creation to expiration.
	Duration pulumi.StringPtrInput `pulumi:"duration"`
	// Unique identifier of the User.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Token.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Permissions assigned to the token, e.g. role:create.
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
	// The timestamp when the Token was last rekeyed.
	Rekeyed pulumi.StringPtrInput `pulumi:"rekeyed"`
	// Reserved for future use.  Always false for tokens.
	Suspended pulumi.BoolPtrInput `pulumi:"suspended"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetAccountAccountTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountAccountToken)(nil)).Elem()
}

func (i GetAccountAccountTokenArgs) ToGetAccountAccountTokenOutput() GetAccountAccountTokenOutput {
	return i.ToGetAccountAccountTokenOutputWithContext(context.Background())
}

func (i GetAccountAccountTokenArgs) ToGetAccountAccountTokenOutputWithContext(ctx context.Context) GetAccountAccountTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountAccountTokenOutput)
}

// GetAccountAccountTokenArrayInput is an input type that accepts GetAccountAccountTokenArray and GetAccountAccountTokenArrayOutput values.
// You can construct a concrete instance of `GetAccountAccountTokenArrayInput` via:
//
//	GetAccountAccountTokenArray{ GetAccountAccountTokenArgs{...} }
type GetAccountAccountTokenArrayInput interface {
	pulumi.Input

	ToGetAccountAccountTokenArrayOutput() GetAccountAccountTokenArrayOutput
	ToGetAccountAccountTokenArrayOutputWithContext(context.Context) GetAccountAccountTokenArrayOutput
}

type GetAccountAccountTokenArray []GetAccountAccountTokenInput

func (GetAccountAccountTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountAccountToken)(nil)).Elem()
}

func (i GetAccountAccountTokenArray) ToGetAccountAccountTokenArrayOutput() GetAccountAccountTokenArrayOutput {
	return i.ToGetAccountAccountTokenArrayOutputWithContext(context.Background())
}

func (i GetAccountAccountTokenArray) ToGetAccountAccountTokenArrayOutputWithContext(ctx context.Context) GetAccountAccountTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountAccountTokenArrayOutput)
}

type GetAccountAccountTokenOutput struct{ *pulumi.OutputState }

func (GetAccountAccountTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountAccountToken)(nil)).Elem()
}

func (o GetAccountAccountTokenOutput) ToGetAccountAccountTokenOutput() GetAccountAccountTokenOutput {
	return o
}

func (o GetAccountAccountTokenOutput) ToGetAccountAccountTokenOutputWithContext(ctx context.Context) GetAccountAccountTokenOutput {
	return o
}

// Corresponds to the type of token, e.g. api or admin-token.
func (o GetAccountAccountTokenOutput) AccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountAccountToken) *string { return v.AccountType }).(pulumi.StringPtrOutput)
}

// The timestamp when the Token will expire.
func (o GetAccountAccountTokenOutput) Deadline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountAccountToken) *string { return v.Deadline }).(pulumi.StringPtrOutput)
}

// Duration from token creation to expiration.
func (o GetAccountAccountTokenOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountAccountToken) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// Unique identifier of the User.
func (o GetAccountAccountTokenOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountAccountToken) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Token.
func (o GetAccountAccountTokenOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountAccountToken) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Permissions assigned to the token, e.g. role:create.
func (o GetAccountAccountTokenOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAccountAccountToken) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

// The timestamp when the Token was last rekeyed.
func (o GetAccountAccountTokenOutput) Rekeyed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountAccountToken) *string { return v.Rekeyed }).(pulumi.StringPtrOutput)
}

// Reserved for future use.  Always false for tokens.
func (o GetAccountAccountTokenOutput) Suspended() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAccountAccountToken) *bool { return v.Suspended }).(pulumi.BoolPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetAccountAccountTokenOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetAccountAccountToken) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetAccountAccountTokenArrayOutput struct{ *pulumi.OutputState }

func (GetAccountAccountTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountAccountToken)(nil)).Elem()
}

func (o GetAccountAccountTokenArrayOutput) ToGetAccountAccountTokenArrayOutput() GetAccountAccountTokenArrayOutput {
	return o
}

func (o GetAccountAccountTokenArrayOutput) ToGetAccountAccountTokenArrayOutputWithContext(ctx context.Context) GetAccountAccountTokenArrayOutput {
	return o
}

func (o GetAccountAccountTokenArrayOutput) Index(i pulumi.IntInput) GetAccountAccountTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAccountAccountToken {
		return vs[0].([]GetAccountAccountToken)[vs[1].(int)]
	}).(GetAccountAccountTokenOutput)
}

type GetAccountAccountUser struct {
	// The User's email address. Must be unique.
	Email *string `pulumi:"email"`
	// External ID is an alternative unique ID this user is represented by within an external service.
	ExternalId *string `pulumi:"externalId"`
	// The User's first name.
	FirstName *string `pulumi:"firstName"`
	// Unique identifier of the User.
	Id *string `pulumi:"id"`
	// The User's last name.
	LastName *string `pulumi:"lastName"`
	// Managed By is a read only field for what service manages this user, e.g. StrongDM, Okta, Azure.
	ManagedBy string `pulumi:"managedBy"`
	// PermissionLevel is the user's permission level e.g. admin, DBA, user.
	PermissionLevel *string `pulumi:"permissionLevel"`
	// Reserved for future use.  Always false for tokens.
	Suspended bool `pulumi:"suspended"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetAccountAccountUserInput is an input type that accepts GetAccountAccountUserArgs and GetAccountAccountUserOutput values.
// You can construct a concrete instance of `GetAccountAccountUserInput` via:
//
//	GetAccountAccountUserArgs{...}
type GetAccountAccountUserInput interface {
	pulumi.Input

	ToGetAccountAccountUserOutput() GetAccountAccountUserOutput
	ToGetAccountAccountUserOutputWithContext(context.Context) GetAccountAccountUserOutput
}

type GetAccountAccountUserArgs struct {
	// The User's email address. Must be unique.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// External ID is an alternative unique ID this user is represented by within an external service.
	ExternalId pulumi.StringPtrInput `pulumi:"externalId"`
	// The User's first name.
	FirstName pulumi.StringPtrInput `pulumi:"firstName"`
	// Unique identifier of the User.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The User's last name.
	LastName pulumi.StringPtrInput `pulumi:"lastName"`
	// Managed By is a read only field for what service manages this user, e.g. StrongDM, Okta, Azure.
	ManagedBy pulumi.StringInput `pulumi:"managedBy"`
	// PermissionLevel is the user's permission level e.g. admin, DBA, user.
	PermissionLevel pulumi.StringPtrInput `pulumi:"permissionLevel"`
	// Reserved for future use.  Always false for tokens.
	Suspended pulumi.BoolInput `pulumi:"suspended"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetAccountAccountUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountAccountUser)(nil)).Elem()
}

func (i GetAccountAccountUserArgs) ToGetAccountAccountUserOutput() GetAccountAccountUserOutput {
	return i.ToGetAccountAccountUserOutputWithContext(context.Background())
}

func (i GetAccountAccountUserArgs) ToGetAccountAccountUserOutputWithContext(ctx context.Context) GetAccountAccountUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountAccountUserOutput)
}

// GetAccountAccountUserArrayInput is an input type that accepts GetAccountAccountUserArray and GetAccountAccountUserArrayOutput values.
// You can construct a concrete instance of `GetAccountAccountUserArrayInput` via:
//
//	GetAccountAccountUserArray{ GetAccountAccountUserArgs{...} }
type GetAccountAccountUserArrayInput interface {
	pulumi.Input

	ToGetAccountAccountUserArrayOutput() GetAccountAccountUserArrayOutput
	ToGetAccountAccountUserArrayOutputWithContext(context.Context) GetAccountAccountUserArrayOutput
}

type GetAccountAccountUserArray []GetAccountAccountUserInput

func (GetAccountAccountUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountAccountUser)(nil)).Elem()
}

func (i GetAccountAccountUserArray) ToGetAccountAccountUserArrayOutput() GetAccountAccountUserArrayOutput {
	return i.ToGetAccountAccountUserArrayOutputWithContext(context.Background())
}

func (i GetAccountAccountUserArray) ToGetAccountAccountUserArrayOutputWithContext(ctx context.Context) GetAccountAccountUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountAccountUserArrayOutput)
}

type GetAccountAccountUserOutput struct{ *pulumi.OutputState }

func (GetAccountAccountUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountAccountUser)(nil)).Elem()
}

func (o GetAccountAccountUserOutput) ToGetAccountAccountUserOutput() GetAccountAccountUserOutput {
	return o
}

func (o GetAccountAccountUserOutput) ToGetAccountAccountUserOutputWithContext(ctx context.Context) GetAccountAccountUserOutput {
	return o
}

// The User's email address. Must be unique.
func (o GetAccountAccountUserOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountAccountUser) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// External ID is an alternative unique ID this user is represented by within an external service.
func (o GetAccountAccountUserOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountAccountUser) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

// The User's first name.
func (o GetAccountAccountUserOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountAccountUser) *string { return v.FirstName }).(pulumi.StringPtrOutput)
}

// Unique identifier of the User.
func (o GetAccountAccountUserOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountAccountUser) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The User's last name.
func (o GetAccountAccountUserOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountAccountUser) *string { return v.LastName }).(pulumi.StringPtrOutput)
}

// Managed By is a read only field for what service manages this user, e.g. StrongDM, Okta, Azure.
func (o GetAccountAccountUserOutput) ManagedBy() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountAccountUser) string { return v.ManagedBy }).(pulumi.StringOutput)
}

// PermissionLevel is the user's permission level e.g. admin, DBA, user.
func (o GetAccountAccountUserOutput) PermissionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountAccountUser) *string { return v.PermissionLevel }).(pulumi.StringPtrOutput)
}

// Reserved for future use.  Always false for tokens.
func (o GetAccountAccountUserOutput) Suspended() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccountAccountUser) bool { return v.Suspended }).(pulumi.BoolOutput)
}

// Tags is a map of key, value pairs.
func (o GetAccountAccountUserOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetAccountAccountUser) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetAccountAccountUserArrayOutput struct{ *pulumi.OutputState }

func (GetAccountAccountUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountAccountUser)(nil)).Elem()
}

func (o GetAccountAccountUserArrayOutput) ToGetAccountAccountUserArrayOutput() GetAccountAccountUserArrayOutput {
	return o
}

func (o GetAccountAccountUserArrayOutput) ToGetAccountAccountUserArrayOutputWithContext(ctx context.Context) GetAccountAccountUserArrayOutput {
	return o
}

func (o GetAccountAccountUserArrayOutput) Index(i pulumi.IntInput) GetAccountAccountUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAccountAccountUser {
		return vs[0].([]GetAccountAccountUser)[vs[1].(int)]
	}).(GetAccountAccountUserOutput)
}

type GetAccountAttachmentAccountAttachment struct {
	// The id of the account of this AccountAttachment.
	AccountId *string `pulumi:"accountId"`
	// Unique identifier of the AccountAttachment.
	Id *string `pulumi:"id"`
	// The id of the attached role of this AccountAttachment.
	RoleId *string `pulumi:"roleId"`
}

// GetAccountAttachmentAccountAttachmentInput is an input type that accepts GetAccountAttachmentAccountAttachmentArgs and GetAccountAttachmentAccountAttachmentOutput values.
// You can construct a concrete instance of `GetAccountAttachmentAccountAttachmentInput` via:
//
//	GetAccountAttachmentAccountAttachmentArgs{...}
type GetAccountAttachmentAccountAttachmentInput interface {
	pulumi.Input

	ToGetAccountAttachmentAccountAttachmentOutput() GetAccountAttachmentAccountAttachmentOutput
	ToGetAccountAttachmentAccountAttachmentOutputWithContext(context.Context) GetAccountAttachmentAccountAttachmentOutput
}

type GetAccountAttachmentAccountAttachmentArgs struct {
	// The id of the account of this AccountAttachment.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// Unique identifier of the AccountAttachment.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The id of the attached role of this AccountAttachment.
	RoleId pulumi.StringPtrInput `pulumi:"roleId"`
}

func (GetAccountAttachmentAccountAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountAttachmentAccountAttachment)(nil)).Elem()
}

func (i GetAccountAttachmentAccountAttachmentArgs) ToGetAccountAttachmentAccountAttachmentOutput() GetAccountAttachmentAccountAttachmentOutput {
	return i.ToGetAccountAttachmentAccountAttachmentOutputWithContext(context.Background())
}

func (i GetAccountAttachmentAccountAttachmentArgs) ToGetAccountAttachmentAccountAttachmentOutputWithContext(ctx context.Context) GetAccountAttachmentAccountAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountAttachmentAccountAttachmentOutput)
}

// GetAccountAttachmentAccountAttachmentArrayInput is an input type that accepts GetAccountAttachmentAccountAttachmentArray and GetAccountAttachmentAccountAttachmentArrayOutput values.
// You can construct a concrete instance of `GetAccountAttachmentAccountAttachmentArrayInput` via:
//
//	GetAccountAttachmentAccountAttachmentArray{ GetAccountAttachmentAccountAttachmentArgs{...} }
type GetAccountAttachmentAccountAttachmentArrayInput interface {
	pulumi.Input

	ToGetAccountAttachmentAccountAttachmentArrayOutput() GetAccountAttachmentAccountAttachmentArrayOutput
	ToGetAccountAttachmentAccountAttachmentArrayOutputWithContext(context.Context) GetAccountAttachmentAccountAttachmentArrayOutput
}

type GetAccountAttachmentAccountAttachmentArray []GetAccountAttachmentAccountAttachmentInput

func (GetAccountAttachmentAccountAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountAttachmentAccountAttachment)(nil)).Elem()
}

func (i GetAccountAttachmentAccountAttachmentArray) ToGetAccountAttachmentAccountAttachmentArrayOutput() GetAccountAttachmentAccountAttachmentArrayOutput {
	return i.ToGetAccountAttachmentAccountAttachmentArrayOutputWithContext(context.Background())
}

func (i GetAccountAttachmentAccountAttachmentArray) ToGetAccountAttachmentAccountAttachmentArrayOutputWithContext(ctx context.Context) GetAccountAttachmentAccountAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountAttachmentAccountAttachmentArrayOutput)
}

type GetAccountAttachmentAccountAttachmentOutput struct{ *pulumi.OutputState }

func (GetAccountAttachmentAccountAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountAttachmentAccountAttachment)(nil)).Elem()
}

func (o GetAccountAttachmentAccountAttachmentOutput) ToGetAccountAttachmentAccountAttachmentOutput() GetAccountAttachmentAccountAttachmentOutput {
	return o
}

func (o GetAccountAttachmentAccountAttachmentOutput) ToGetAccountAttachmentAccountAttachmentOutputWithContext(ctx context.Context) GetAccountAttachmentAccountAttachmentOutput {
	return o
}

// The id of the account of this AccountAttachment.
func (o GetAccountAttachmentAccountAttachmentOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountAttachmentAccountAttachment) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the AccountAttachment.
func (o GetAccountAttachmentAccountAttachmentOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountAttachmentAccountAttachment) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The id of the attached role of this AccountAttachment.
func (o GetAccountAttachmentAccountAttachmentOutput) RoleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountAttachmentAccountAttachment) *string { return v.RoleId }).(pulumi.StringPtrOutput)
}

type GetAccountAttachmentAccountAttachmentArrayOutput struct{ *pulumi.OutputState }

func (GetAccountAttachmentAccountAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountAttachmentAccountAttachment)(nil)).Elem()
}

func (o GetAccountAttachmentAccountAttachmentArrayOutput) ToGetAccountAttachmentAccountAttachmentArrayOutput() GetAccountAttachmentAccountAttachmentArrayOutput {
	return o
}

func (o GetAccountAttachmentAccountAttachmentArrayOutput) ToGetAccountAttachmentAccountAttachmentArrayOutputWithContext(ctx context.Context) GetAccountAttachmentAccountAttachmentArrayOutput {
	return o
}

func (o GetAccountAttachmentAccountAttachmentArrayOutput) Index(i pulumi.IntInput) GetAccountAttachmentAccountAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAccountAttachmentAccountAttachment {
		return vs[0].([]GetAccountAttachmentAccountAttachment)[vs[1].(int)]
	}).(GetAccountAttachmentAccountAttachmentOutput)
}

type GetApprovalWorkflowApprovalWorkflow struct {
	// Approval mode of the ApprovalWorkflow
	ApprovalMode *string `pulumi:"approvalMode"`
	// Optional description of the ApprovalWorkflow.
	Description *string `pulumi:"description"`
	// Unique identifier of the ApprovalWorkflow.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the ApprovalWorkflow.
	Name *string `pulumi:"name"`
}

// GetApprovalWorkflowApprovalWorkflowInput is an input type that accepts GetApprovalWorkflowApprovalWorkflowArgs and GetApprovalWorkflowApprovalWorkflowOutput values.
// You can construct a concrete instance of `GetApprovalWorkflowApprovalWorkflowInput` via:
//
//	GetApprovalWorkflowApprovalWorkflowArgs{...}
type GetApprovalWorkflowApprovalWorkflowInput interface {
	pulumi.Input

	ToGetApprovalWorkflowApprovalWorkflowOutput() GetApprovalWorkflowApprovalWorkflowOutput
	ToGetApprovalWorkflowApprovalWorkflowOutputWithContext(context.Context) GetApprovalWorkflowApprovalWorkflowOutput
}

type GetApprovalWorkflowApprovalWorkflowArgs struct {
	// Approval mode of the ApprovalWorkflow
	ApprovalMode pulumi.StringPtrInput `pulumi:"approvalMode"`
	// Optional description of the ApprovalWorkflow.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Unique identifier of the ApprovalWorkflow.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the ApprovalWorkflow.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetApprovalWorkflowApprovalWorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApprovalWorkflowApprovalWorkflow)(nil)).Elem()
}

func (i GetApprovalWorkflowApprovalWorkflowArgs) ToGetApprovalWorkflowApprovalWorkflowOutput() GetApprovalWorkflowApprovalWorkflowOutput {
	return i.ToGetApprovalWorkflowApprovalWorkflowOutputWithContext(context.Background())
}

func (i GetApprovalWorkflowApprovalWorkflowArgs) ToGetApprovalWorkflowApprovalWorkflowOutputWithContext(ctx context.Context) GetApprovalWorkflowApprovalWorkflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApprovalWorkflowApprovalWorkflowOutput)
}

// GetApprovalWorkflowApprovalWorkflowArrayInput is an input type that accepts GetApprovalWorkflowApprovalWorkflowArray and GetApprovalWorkflowApprovalWorkflowArrayOutput values.
// You can construct a concrete instance of `GetApprovalWorkflowApprovalWorkflowArrayInput` via:
//
//	GetApprovalWorkflowApprovalWorkflowArray{ GetApprovalWorkflowApprovalWorkflowArgs{...} }
type GetApprovalWorkflowApprovalWorkflowArrayInput interface {
	pulumi.Input

	ToGetApprovalWorkflowApprovalWorkflowArrayOutput() GetApprovalWorkflowApprovalWorkflowArrayOutput
	ToGetApprovalWorkflowApprovalWorkflowArrayOutputWithContext(context.Context) GetApprovalWorkflowApprovalWorkflowArrayOutput
}

type GetApprovalWorkflowApprovalWorkflowArray []GetApprovalWorkflowApprovalWorkflowInput

func (GetApprovalWorkflowApprovalWorkflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApprovalWorkflowApprovalWorkflow)(nil)).Elem()
}

func (i GetApprovalWorkflowApprovalWorkflowArray) ToGetApprovalWorkflowApprovalWorkflowArrayOutput() GetApprovalWorkflowApprovalWorkflowArrayOutput {
	return i.ToGetApprovalWorkflowApprovalWorkflowArrayOutputWithContext(context.Background())
}

func (i GetApprovalWorkflowApprovalWorkflowArray) ToGetApprovalWorkflowApprovalWorkflowArrayOutputWithContext(ctx context.Context) GetApprovalWorkflowApprovalWorkflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApprovalWorkflowApprovalWorkflowArrayOutput)
}

type GetApprovalWorkflowApprovalWorkflowOutput struct{ *pulumi.OutputState }

func (GetApprovalWorkflowApprovalWorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApprovalWorkflowApprovalWorkflow)(nil)).Elem()
}

func (o GetApprovalWorkflowApprovalWorkflowOutput) ToGetApprovalWorkflowApprovalWorkflowOutput() GetApprovalWorkflowApprovalWorkflowOutput {
	return o
}

func (o GetApprovalWorkflowApprovalWorkflowOutput) ToGetApprovalWorkflowApprovalWorkflowOutputWithContext(ctx context.Context) GetApprovalWorkflowApprovalWorkflowOutput {
	return o
}

// Approval mode of the ApprovalWorkflow
func (o GetApprovalWorkflowApprovalWorkflowOutput) ApprovalMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetApprovalWorkflowApprovalWorkflow) *string { return v.ApprovalMode }).(pulumi.StringPtrOutput)
}

// Optional description of the ApprovalWorkflow.
func (o GetApprovalWorkflowApprovalWorkflowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetApprovalWorkflowApprovalWorkflow) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the ApprovalWorkflow.
func (o GetApprovalWorkflowApprovalWorkflowOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetApprovalWorkflowApprovalWorkflow) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the ApprovalWorkflow.
func (o GetApprovalWorkflowApprovalWorkflowOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetApprovalWorkflowApprovalWorkflow) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GetApprovalWorkflowApprovalWorkflowArrayOutput struct{ *pulumi.OutputState }

func (GetApprovalWorkflowApprovalWorkflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApprovalWorkflowApprovalWorkflow)(nil)).Elem()
}

func (o GetApprovalWorkflowApprovalWorkflowArrayOutput) ToGetApprovalWorkflowApprovalWorkflowArrayOutput() GetApprovalWorkflowApprovalWorkflowArrayOutput {
	return o
}

func (o GetApprovalWorkflowApprovalWorkflowArrayOutput) ToGetApprovalWorkflowApprovalWorkflowArrayOutputWithContext(ctx context.Context) GetApprovalWorkflowApprovalWorkflowArrayOutput {
	return o
}

func (o GetApprovalWorkflowApprovalWorkflowArrayOutput) Index(i pulumi.IntInput) GetApprovalWorkflowApprovalWorkflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApprovalWorkflowApprovalWorkflow {
		return vs[0].([]GetApprovalWorkflowApprovalWorkflow)[vs[1].(int)]
	}).(GetApprovalWorkflowApprovalWorkflowOutput)
}

type GetApprovalWorkflowApproverApprovalWorkflowApprover struct {
	// The approver account id.
	AccountId *string `pulumi:"accountId"`
	// The approval flow id specified the approval workflow that this approver belongs to
	ApprovalFlowId *string `pulumi:"approvalFlowId"`
	// The approval step id specified the approval flow step that this approver belongs to
	ApprovalStepId *string `pulumi:"approvalStepId"`
	// Unique identifier of the ApprovalWorkflowApprover.
	Id *string `pulumi:"id"`
	// The approver role id
	RoleId *string `pulumi:"roleId"`
}

// GetApprovalWorkflowApproverApprovalWorkflowApproverInput is an input type that accepts GetApprovalWorkflowApproverApprovalWorkflowApproverArgs and GetApprovalWorkflowApproverApprovalWorkflowApproverOutput values.
// You can construct a concrete instance of `GetApprovalWorkflowApproverApprovalWorkflowApproverInput` via:
//
//	GetApprovalWorkflowApproverApprovalWorkflowApproverArgs{...}
type GetApprovalWorkflowApproverApprovalWorkflowApproverInput interface {
	pulumi.Input

	ToGetApprovalWorkflowApproverApprovalWorkflowApproverOutput() GetApprovalWorkflowApproverApprovalWorkflowApproverOutput
	ToGetApprovalWorkflowApproverApprovalWorkflowApproverOutputWithContext(context.Context) GetApprovalWorkflowApproverApprovalWorkflowApproverOutput
}

type GetApprovalWorkflowApproverApprovalWorkflowApproverArgs struct {
	// The approver account id.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// The approval flow id specified the approval workflow that this approver belongs to
	ApprovalFlowId pulumi.StringPtrInput `pulumi:"approvalFlowId"`
	// The approval step id specified the approval flow step that this approver belongs to
	ApprovalStepId pulumi.StringPtrInput `pulumi:"approvalStepId"`
	// Unique identifier of the ApprovalWorkflowApprover.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The approver role id
	RoleId pulumi.StringPtrInput `pulumi:"roleId"`
}

func (GetApprovalWorkflowApproverApprovalWorkflowApproverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApprovalWorkflowApproverApprovalWorkflowApprover)(nil)).Elem()
}

func (i GetApprovalWorkflowApproverApprovalWorkflowApproverArgs) ToGetApprovalWorkflowApproverApprovalWorkflowApproverOutput() GetApprovalWorkflowApproverApprovalWorkflowApproverOutput {
	return i.ToGetApprovalWorkflowApproverApprovalWorkflowApproverOutputWithContext(context.Background())
}

func (i GetApprovalWorkflowApproverApprovalWorkflowApproverArgs) ToGetApprovalWorkflowApproverApprovalWorkflowApproverOutputWithContext(ctx context.Context) GetApprovalWorkflowApproverApprovalWorkflowApproverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApprovalWorkflowApproverApprovalWorkflowApproverOutput)
}

// GetApprovalWorkflowApproverApprovalWorkflowApproverArrayInput is an input type that accepts GetApprovalWorkflowApproverApprovalWorkflowApproverArray and GetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutput values.
// You can construct a concrete instance of `GetApprovalWorkflowApproverApprovalWorkflowApproverArrayInput` via:
//
//	GetApprovalWorkflowApproverApprovalWorkflowApproverArray{ GetApprovalWorkflowApproverApprovalWorkflowApproverArgs{...} }
type GetApprovalWorkflowApproverApprovalWorkflowApproverArrayInput interface {
	pulumi.Input

	ToGetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutput() GetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutput
	ToGetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutputWithContext(context.Context) GetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutput
}

type GetApprovalWorkflowApproverApprovalWorkflowApproverArray []GetApprovalWorkflowApproverApprovalWorkflowApproverInput

func (GetApprovalWorkflowApproverApprovalWorkflowApproverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApprovalWorkflowApproverApprovalWorkflowApprover)(nil)).Elem()
}

func (i GetApprovalWorkflowApproverApprovalWorkflowApproverArray) ToGetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutput() GetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutput {
	return i.ToGetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutputWithContext(context.Background())
}

func (i GetApprovalWorkflowApproverApprovalWorkflowApproverArray) ToGetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutputWithContext(ctx context.Context) GetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutput)
}

type GetApprovalWorkflowApproverApprovalWorkflowApproverOutput struct{ *pulumi.OutputState }

func (GetApprovalWorkflowApproverApprovalWorkflowApproverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApprovalWorkflowApproverApprovalWorkflowApprover)(nil)).Elem()
}

func (o GetApprovalWorkflowApproverApprovalWorkflowApproverOutput) ToGetApprovalWorkflowApproverApprovalWorkflowApproverOutput() GetApprovalWorkflowApproverApprovalWorkflowApproverOutput {
	return o
}

func (o GetApprovalWorkflowApproverApprovalWorkflowApproverOutput) ToGetApprovalWorkflowApproverApprovalWorkflowApproverOutputWithContext(ctx context.Context) GetApprovalWorkflowApproverApprovalWorkflowApproverOutput {
	return o
}

// The approver account id.
func (o GetApprovalWorkflowApproverApprovalWorkflowApproverOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetApprovalWorkflowApproverApprovalWorkflowApprover) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// The approval flow id specified the approval workflow that this approver belongs to
func (o GetApprovalWorkflowApproverApprovalWorkflowApproverOutput) ApprovalFlowId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetApprovalWorkflowApproverApprovalWorkflowApprover) *string { return v.ApprovalFlowId }).(pulumi.StringPtrOutput)
}

// The approval step id specified the approval flow step that this approver belongs to
func (o GetApprovalWorkflowApproverApprovalWorkflowApproverOutput) ApprovalStepId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetApprovalWorkflowApproverApprovalWorkflowApprover) *string { return v.ApprovalStepId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the ApprovalWorkflowApprover.
func (o GetApprovalWorkflowApproverApprovalWorkflowApproverOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetApprovalWorkflowApproverApprovalWorkflowApprover) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The approver role id
func (o GetApprovalWorkflowApproverApprovalWorkflowApproverOutput) RoleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetApprovalWorkflowApproverApprovalWorkflowApprover) *string { return v.RoleId }).(pulumi.StringPtrOutput)
}

type GetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutput struct{ *pulumi.OutputState }

func (GetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApprovalWorkflowApproverApprovalWorkflowApprover)(nil)).Elem()
}

func (o GetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutput) ToGetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutput() GetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutput {
	return o
}

func (o GetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutput) ToGetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutputWithContext(ctx context.Context) GetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutput {
	return o
}

func (o GetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutput) Index(i pulumi.IntInput) GetApprovalWorkflowApproverApprovalWorkflowApproverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApprovalWorkflowApproverApprovalWorkflowApprover {
		return vs[0].([]GetApprovalWorkflowApproverApprovalWorkflowApprover)[vs[1].(int)]
	}).(GetApprovalWorkflowApproverApprovalWorkflowApproverOutput)
}

type GetApprovalWorkflowStepApprovalWorkflowStep struct {
	// The approval flow id specified the approval workfflow that this step belongs to
	ApprovalFlowId *string `pulumi:"approvalFlowId"`
	// Unique identifier of the ApprovalWorkflowStep.
	Id *string `pulumi:"id"`
}

// GetApprovalWorkflowStepApprovalWorkflowStepInput is an input type that accepts GetApprovalWorkflowStepApprovalWorkflowStepArgs and GetApprovalWorkflowStepApprovalWorkflowStepOutput values.
// You can construct a concrete instance of `GetApprovalWorkflowStepApprovalWorkflowStepInput` via:
//
//	GetApprovalWorkflowStepApprovalWorkflowStepArgs{...}
type GetApprovalWorkflowStepApprovalWorkflowStepInput interface {
	pulumi.Input

	ToGetApprovalWorkflowStepApprovalWorkflowStepOutput() GetApprovalWorkflowStepApprovalWorkflowStepOutput
	ToGetApprovalWorkflowStepApprovalWorkflowStepOutputWithContext(context.Context) GetApprovalWorkflowStepApprovalWorkflowStepOutput
}

type GetApprovalWorkflowStepApprovalWorkflowStepArgs struct {
	// The approval flow id specified the approval workfflow that this step belongs to
	ApprovalFlowId pulumi.StringPtrInput `pulumi:"approvalFlowId"`
	// Unique identifier of the ApprovalWorkflowStep.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (GetApprovalWorkflowStepApprovalWorkflowStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApprovalWorkflowStepApprovalWorkflowStep)(nil)).Elem()
}

func (i GetApprovalWorkflowStepApprovalWorkflowStepArgs) ToGetApprovalWorkflowStepApprovalWorkflowStepOutput() GetApprovalWorkflowStepApprovalWorkflowStepOutput {
	return i.ToGetApprovalWorkflowStepApprovalWorkflowStepOutputWithContext(context.Background())
}

func (i GetApprovalWorkflowStepApprovalWorkflowStepArgs) ToGetApprovalWorkflowStepApprovalWorkflowStepOutputWithContext(ctx context.Context) GetApprovalWorkflowStepApprovalWorkflowStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApprovalWorkflowStepApprovalWorkflowStepOutput)
}

// GetApprovalWorkflowStepApprovalWorkflowStepArrayInput is an input type that accepts GetApprovalWorkflowStepApprovalWorkflowStepArray and GetApprovalWorkflowStepApprovalWorkflowStepArrayOutput values.
// You can construct a concrete instance of `GetApprovalWorkflowStepApprovalWorkflowStepArrayInput` via:
//
//	GetApprovalWorkflowStepApprovalWorkflowStepArray{ GetApprovalWorkflowStepApprovalWorkflowStepArgs{...} }
type GetApprovalWorkflowStepApprovalWorkflowStepArrayInput interface {
	pulumi.Input

	ToGetApprovalWorkflowStepApprovalWorkflowStepArrayOutput() GetApprovalWorkflowStepApprovalWorkflowStepArrayOutput
	ToGetApprovalWorkflowStepApprovalWorkflowStepArrayOutputWithContext(context.Context) GetApprovalWorkflowStepApprovalWorkflowStepArrayOutput
}

type GetApprovalWorkflowStepApprovalWorkflowStepArray []GetApprovalWorkflowStepApprovalWorkflowStepInput

func (GetApprovalWorkflowStepApprovalWorkflowStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApprovalWorkflowStepApprovalWorkflowStep)(nil)).Elem()
}

func (i GetApprovalWorkflowStepApprovalWorkflowStepArray) ToGetApprovalWorkflowStepApprovalWorkflowStepArrayOutput() GetApprovalWorkflowStepApprovalWorkflowStepArrayOutput {
	return i.ToGetApprovalWorkflowStepApprovalWorkflowStepArrayOutputWithContext(context.Background())
}

func (i GetApprovalWorkflowStepApprovalWorkflowStepArray) ToGetApprovalWorkflowStepApprovalWorkflowStepArrayOutputWithContext(ctx context.Context) GetApprovalWorkflowStepApprovalWorkflowStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetApprovalWorkflowStepApprovalWorkflowStepArrayOutput)
}

type GetApprovalWorkflowStepApprovalWorkflowStepOutput struct{ *pulumi.OutputState }

func (GetApprovalWorkflowStepApprovalWorkflowStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetApprovalWorkflowStepApprovalWorkflowStep)(nil)).Elem()
}

func (o GetApprovalWorkflowStepApprovalWorkflowStepOutput) ToGetApprovalWorkflowStepApprovalWorkflowStepOutput() GetApprovalWorkflowStepApprovalWorkflowStepOutput {
	return o
}

func (o GetApprovalWorkflowStepApprovalWorkflowStepOutput) ToGetApprovalWorkflowStepApprovalWorkflowStepOutputWithContext(ctx context.Context) GetApprovalWorkflowStepApprovalWorkflowStepOutput {
	return o
}

// The approval flow id specified the approval workfflow that this step belongs to
func (o GetApprovalWorkflowStepApprovalWorkflowStepOutput) ApprovalFlowId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetApprovalWorkflowStepApprovalWorkflowStep) *string { return v.ApprovalFlowId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the ApprovalWorkflowStep.
func (o GetApprovalWorkflowStepApprovalWorkflowStepOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetApprovalWorkflowStepApprovalWorkflowStep) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type GetApprovalWorkflowStepApprovalWorkflowStepArrayOutput struct{ *pulumi.OutputState }

func (GetApprovalWorkflowStepApprovalWorkflowStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetApprovalWorkflowStepApprovalWorkflowStep)(nil)).Elem()
}

func (o GetApprovalWorkflowStepApprovalWorkflowStepArrayOutput) ToGetApprovalWorkflowStepApprovalWorkflowStepArrayOutput() GetApprovalWorkflowStepApprovalWorkflowStepArrayOutput {
	return o
}

func (o GetApprovalWorkflowStepApprovalWorkflowStepArrayOutput) ToGetApprovalWorkflowStepApprovalWorkflowStepArrayOutputWithContext(ctx context.Context) GetApprovalWorkflowStepApprovalWorkflowStepArrayOutput {
	return o
}

func (o GetApprovalWorkflowStepApprovalWorkflowStepArrayOutput) Index(i pulumi.IntInput) GetApprovalWorkflowStepApprovalWorkflowStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetApprovalWorkflowStepApprovalWorkflowStep {
		return vs[0].([]GetApprovalWorkflowStepApprovalWorkflowStep)[vs[1].(int)]
	}).(GetApprovalWorkflowStepApprovalWorkflowStepOutput)
}

type GetIdentityAliasIdentityAlias struct {
	// The account for this identity alias.
	AccountId *string `pulumi:"accountId"`
	// Unique identifier of the IdentityAlias.
	Id *string `pulumi:"id"`
	// The identity set.
	IdentitySetId *string `pulumi:"identitySetId"`
	// The username to be used as the identity alias for this account.
	Username *string `pulumi:"username"`
}

// GetIdentityAliasIdentityAliasInput is an input type that accepts GetIdentityAliasIdentityAliasArgs and GetIdentityAliasIdentityAliasOutput values.
// You can construct a concrete instance of `GetIdentityAliasIdentityAliasInput` via:
//
//	GetIdentityAliasIdentityAliasArgs{...}
type GetIdentityAliasIdentityAliasInput interface {
	pulumi.Input

	ToGetIdentityAliasIdentityAliasOutput() GetIdentityAliasIdentityAliasOutput
	ToGetIdentityAliasIdentityAliasOutputWithContext(context.Context) GetIdentityAliasIdentityAliasOutput
}

type GetIdentityAliasIdentityAliasArgs struct {
	// The account for this identity alias.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// Unique identifier of the IdentityAlias.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The identity set.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// The username to be used as the identity alias for this account.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetIdentityAliasIdentityAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIdentityAliasIdentityAlias)(nil)).Elem()
}

func (i GetIdentityAliasIdentityAliasArgs) ToGetIdentityAliasIdentityAliasOutput() GetIdentityAliasIdentityAliasOutput {
	return i.ToGetIdentityAliasIdentityAliasOutputWithContext(context.Background())
}

func (i GetIdentityAliasIdentityAliasArgs) ToGetIdentityAliasIdentityAliasOutputWithContext(ctx context.Context) GetIdentityAliasIdentityAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIdentityAliasIdentityAliasOutput)
}

// GetIdentityAliasIdentityAliasArrayInput is an input type that accepts GetIdentityAliasIdentityAliasArray and GetIdentityAliasIdentityAliasArrayOutput values.
// You can construct a concrete instance of `GetIdentityAliasIdentityAliasArrayInput` via:
//
//	GetIdentityAliasIdentityAliasArray{ GetIdentityAliasIdentityAliasArgs{...} }
type GetIdentityAliasIdentityAliasArrayInput interface {
	pulumi.Input

	ToGetIdentityAliasIdentityAliasArrayOutput() GetIdentityAliasIdentityAliasArrayOutput
	ToGetIdentityAliasIdentityAliasArrayOutputWithContext(context.Context) GetIdentityAliasIdentityAliasArrayOutput
}

type GetIdentityAliasIdentityAliasArray []GetIdentityAliasIdentityAliasInput

func (GetIdentityAliasIdentityAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIdentityAliasIdentityAlias)(nil)).Elem()
}

func (i GetIdentityAliasIdentityAliasArray) ToGetIdentityAliasIdentityAliasArrayOutput() GetIdentityAliasIdentityAliasArrayOutput {
	return i.ToGetIdentityAliasIdentityAliasArrayOutputWithContext(context.Background())
}

func (i GetIdentityAliasIdentityAliasArray) ToGetIdentityAliasIdentityAliasArrayOutputWithContext(ctx context.Context) GetIdentityAliasIdentityAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIdentityAliasIdentityAliasArrayOutput)
}

type GetIdentityAliasIdentityAliasOutput struct{ *pulumi.OutputState }

func (GetIdentityAliasIdentityAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIdentityAliasIdentityAlias)(nil)).Elem()
}

func (o GetIdentityAliasIdentityAliasOutput) ToGetIdentityAliasIdentityAliasOutput() GetIdentityAliasIdentityAliasOutput {
	return o
}

func (o GetIdentityAliasIdentityAliasOutput) ToGetIdentityAliasIdentityAliasOutputWithContext(ctx context.Context) GetIdentityAliasIdentityAliasOutput {
	return o
}

// The account for this identity alias.
func (o GetIdentityAliasIdentityAliasOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIdentityAliasIdentityAlias) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the IdentityAlias.
func (o GetIdentityAliasIdentityAliasOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIdentityAliasIdentityAlias) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The identity set.
func (o GetIdentityAliasIdentityAliasOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIdentityAliasIdentityAlias) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// The username to be used as the identity alias for this account.
func (o GetIdentityAliasIdentityAliasOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIdentityAliasIdentityAlias) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetIdentityAliasIdentityAliasArrayOutput struct{ *pulumi.OutputState }

func (GetIdentityAliasIdentityAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIdentityAliasIdentityAlias)(nil)).Elem()
}

func (o GetIdentityAliasIdentityAliasArrayOutput) ToGetIdentityAliasIdentityAliasArrayOutput() GetIdentityAliasIdentityAliasArrayOutput {
	return o
}

func (o GetIdentityAliasIdentityAliasArrayOutput) ToGetIdentityAliasIdentityAliasArrayOutputWithContext(ctx context.Context) GetIdentityAliasIdentityAliasArrayOutput {
	return o
}

func (o GetIdentityAliasIdentityAliasArrayOutput) Index(i pulumi.IntInput) GetIdentityAliasIdentityAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIdentityAliasIdentityAlias {
		return vs[0].([]GetIdentityAliasIdentityAlias)[vs[1].(int)]
	}).(GetIdentityAliasIdentityAliasOutput)
}

type GetIdentitySetIdentitySet struct {
	// Unique identifier of the IdentitySet.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the IdentitySet.
	Name *string `pulumi:"name"`
}

// GetIdentitySetIdentitySetInput is an input type that accepts GetIdentitySetIdentitySetArgs and GetIdentitySetIdentitySetOutput values.
// You can construct a concrete instance of `GetIdentitySetIdentitySetInput` via:
//
//	GetIdentitySetIdentitySetArgs{...}
type GetIdentitySetIdentitySetInput interface {
	pulumi.Input

	ToGetIdentitySetIdentitySetOutput() GetIdentitySetIdentitySetOutput
	ToGetIdentitySetIdentitySetOutputWithContext(context.Context) GetIdentitySetIdentitySetOutput
}

type GetIdentitySetIdentitySetArgs struct {
	// Unique identifier of the IdentitySet.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the IdentitySet.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetIdentitySetIdentitySetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIdentitySetIdentitySet)(nil)).Elem()
}

func (i GetIdentitySetIdentitySetArgs) ToGetIdentitySetIdentitySetOutput() GetIdentitySetIdentitySetOutput {
	return i.ToGetIdentitySetIdentitySetOutputWithContext(context.Background())
}

func (i GetIdentitySetIdentitySetArgs) ToGetIdentitySetIdentitySetOutputWithContext(ctx context.Context) GetIdentitySetIdentitySetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIdentitySetIdentitySetOutput)
}

// GetIdentitySetIdentitySetArrayInput is an input type that accepts GetIdentitySetIdentitySetArray and GetIdentitySetIdentitySetArrayOutput values.
// You can construct a concrete instance of `GetIdentitySetIdentitySetArrayInput` via:
//
//	GetIdentitySetIdentitySetArray{ GetIdentitySetIdentitySetArgs{...} }
type GetIdentitySetIdentitySetArrayInput interface {
	pulumi.Input

	ToGetIdentitySetIdentitySetArrayOutput() GetIdentitySetIdentitySetArrayOutput
	ToGetIdentitySetIdentitySetArrayOutputWithContext(context.Context) GetIdentitySetIdentitySetArrayOutput
}

type GetIdentitySetIdentitySetArray []GetIdentitySetIdentitySetInput

func (GetIdentitySetIdentitySetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIdentitySetIdentitySet)(nil)).Elem()
}

func (i GetIdentitySetIdentitySetArray) ToGetIdentitySetIdentitySetArrayOutput() GetIdentitySetIdentitySetArrayOutput {
	return i.ToGetIdentitySetIdentitySetArrayOutputWithContext(context.Background())
}

func (i GetIdentitySetIdentitySetArray) ToGetIdentitySetIdentitySetArrayOutputWithContext(ctx context.Context) GetIdentitySetIdentitySetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIdentitySetIdentitySetArrayOutput)
}

type GetIdentitySetIdentitySetOutput struct{ *pulumi.OutputState }

func (GetIdentitySetIdentitySetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIdentitySetIdentitySet)(nil)).Elem()
}

func (o GetIdentitySetIdentitySetOutput) ToGetIdentitySetIdentitySetOutput() GetIdentitySetIdentitySetOutput {
	return o
}

func (o GetIdentitySetIdentitySetOutput) ToGetIdentitySetIdentitySetOutputWithContext(ctx context.Context) GetIdentitySetIdentitySetOutput {
	return o
}

// Unique identifier of the IdentitySet.
func (o GetIdentitySetIdentitySetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIdentitySetIdentitySet) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the IdentitySet.
func (o GetIdentitySetIdentitySetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIdentitySetIdentitySet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GetIdentitySetIdentitySetArrayOutput struct{ *pulumi.OutputState }

func (GetIdentitySetIdentitySetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIdentitySetIdentitySet)(nil)).Elem()
}

func (o GetIdentitySetIdentitySetArrayOutput) ToGetIdentitySetIdentitySetArrayOutput() GetIdentitySetIdentitySetArrayOutput {
	return o
}

func (o GetIdentitySetIdentitySetArrayOutput) ToGetIdentitySetIdentitySetArrayOutputWithContext(ctx context.Context) GetIdentitySetIdentitySetArrayOutput {
	return o
}

func (o GetIdentitySetIdentitySetArrayOutput) Index(i pulumi.IntInput) GetIdentitySetIdentitySetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIdentitySetIdentitySet {
		return vs[0].([]GetIdentitySetIdentitySet)[vs[1].(int)]
	}).(GetIdentitySetIdentitySetOutput)
}

type GetNodeNode struct {
	// Gateway represents a StrongDM CLI installation running in gateway mode.
	Gateways []GetNodeNodeGateway `pulumi:"gateways"`
	// ProxyCluster represents a cluster of StrongDM proxies.
	ProxyClusters []GetNodeNodeProxyCluster `pulumi:"proxyClusters"`
	// Relay represents a StrongDM CLI installation running in relay mode.
	Relays []GetNodeNodeRelay `pulumi:"relays"`
}

// GetNodeNodeInput is an input type that accepts GetNodeNodeArgs and GetNodeNodeOutput values.
// You can construct a concrete instance of `GetNodeNodeInput` via:
//
//	GetNodeNodeArgs{...}
type GetNodeNodeInput interface {
	pulumi.Input

	ToGetNodeNodeOutput() GetNodeNodeOutput
	ToGetNodeNodeOutputWithContext(context.Context) GetNodeNodeOutput
}

type GetNodeNodeArgs struct {
	// Gateway represents a StrongDM CLI installation running in gateway mode.
	Gateways GetNodeNodeGatewayArrayInput `pulumi:"gateways"`
	// ProxyCluster represents a cluster of StrongDM proxies.
	ProxyClusters GetNodeNodeProxyClusterArrayInput `pulumi:"proxyClusters"`
	// Relay represents a StrongDM CLI installation running in relay mode.
	Relays GetNodeNodeRelayArrayInput `pulumi:"relays"`
}

func (GetNodeNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeNode)(nil)).Elem()
}

func (i GetNodeNodeArgs) ToGetNodeNodeOutput() GetNodeNodeOutput {
	return i.ToGetNodeNodeOutputWithContext(context.Background())
}

func (i GetNodeNodeArgs) ToGetNodeNodeOutputWithContext(ctx context.Context) GetNodeNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeNodeOutput)
}

// GetNodeNodeArrayInput is an input type that accepts GetNodeNodeArray and GetNodeNodeArrayOutput values.
// You can construct a concrete instance of `GetNodeNodeArrayInput` via:
//
//	GetNodeNodeArray{ GetNodeNodeArgs{...} }
type GetNodeNodeArrayInput interface {
	pulumi.Input

	ToGetNodeNodeArrayOutput() GetNodeNodeArrayOutput
	ToGetNodeNodeArrayOutputWithContext(context.Context) GetNodeNodeArrayOutput
}

type GetNodeNodeArray []GetNodeNodeInput

func (GetNodeNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeNode)(nil)).Elem()
}

func (i GetNodeNodeArray) ToGetNodeNodeArrayOutput() GetNodeNodeArrayOutput {
	return i.ToGetNodeNodeArrayOutputWithContext(context.Background())
}

func (i GetNodeNodeArray) ToGetNodeNodeArrayOutputWithContext(ctx context.Context) GetNodeNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeNodeArrayOutput)
}

type GetNodeNodeOutput struct{ *pulumi.OutputState }

func (GetNodeNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeNode)(nil)).Elem()
}

func (o GetNodeNodeOutput) ToGetNodeNodeOutput() GetNodeNodeOutput {
	return o
}

func (o GetNodeNodeOutput) ToGetNodeNodeOutputWithContext(ctx context.Context) GetNodeNodeOutput {
	return o
}

// Gateway represents a StrongDM CLI installation running in gateway mode.
func (o GetNodeNodeOutput) Gateways() GetNodeNodeGatewayArrayOutput {
	return o.ApplyT(func(v GetNodeNode) []GetNodeNodeGateway { return v.Gateways }).(GetNodeNodeGatewayArrayOutput)
}

// ProxyCluster represents a cluster of StrongDM proxies.
func (o GetNodeNodeOutput) ProxyClusters() GetNodeNodeProxyClusterArrayOutput {
	return o.ApplyT(func(v GetNodeNode) []GetNodeNodeProxyCluster { return v.ProxyClusters }).(GetNodeNodeProxyClusterArrayOutput)
}

// Relay represents a StrongDM CLI installation running in relay mode.
func (o GetNodeNodeOutput) Relays() GetNodeNodeRelayArrayOutput {
	return o.ApplyT(func(v GetNodeNode) []GetNodeNodeRelay { return v.Relays }).(GetNodeNodeRelayArrayOutput)
}

type GetNodeNodeArrayOutput struct{ *pulumi.OutputState }

func (GetNodeNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeNode)(nil)).Elem()
}

func (o GetNodeNodeArrayOutput) ToGetNodeNodeArrayOutput() GetNodeNodeArrayOutput {
	return o
}

func (o GetNodeNodeArrayOutput) ToGetNodeNodeArrayOutputWithContext(ctx context.Context) GetNodeNodeArrayOutput {
	return o
}

func (o GetNodeNodeArrayOutput) Index(i pulumi.IntInput) GetNodeNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodeNode {
		return vs[0].([]GetNodeNode)[vs[1].(int)]
	}).(GetNodeNodeOutput)
}

type GetNodeNodeGateway struct {
	// The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to "0.0.0.0:listen_address_port".
	BindAddress *string `pulumi:"bindAddress"`
	// Device is a read only device name uploaded by the gateway process when it comes online.
	Device string `pulumi:"device"`
	// GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.
	GatewayFilter *string `pulumi:"gatewayFilter"`
	// Unique identifier of the Relay.
	Id *string `pulumi:"id"`
	// The public hostname/port tuple at which the gateway will be accessible to clients.
	ListenAddress *string `pulumi:"listenAddress"`
	// Location is a read only network location uploaded by the gateway process when it comes online.
	Location string `pulumi:"location"`
	// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
	MaintenanceWindows []GetNodeNodeGatewayMaintenanceWindow `pulumi:"maintenanceWindows"`
	// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
	Name *string `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// Version is a read only sdm binary version uploaded by the gateway process when it comes online.
	Version string `pulumi:"version"`
}

// GetNodeNodeGatewayInput is an input type that accepts GetNodeNodeGatewayArgs and GetNodeNodeGatewayOutput values.
// You can construct a concrete instance of `GetNodeNodeGatewayInput` via:
//
//	GetNodeNodeGatewayArgs{...}
type GetNodeNodeGatewayInput interface {
	pulumi.Input

	ToGetNodeNodeGatewayOutput() GetNodeNodeGatewayOutput
	ToGetNodeNodeGatewayOutputWithContext(context.Context) GetNodeNodeGatewayOutput
}

type GetNodeNodeGatewayArgs struct {
	// The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to "0.0.0.0:listen_address_port".
	BindAddress pulumi.StringPtrInput `pulumi:"bindAddress"`
	// Device is a read only device name uploaded by the gateway process when it comes online.
	Device pulumi.StringInput `pulumi:"device"`
	// GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.
	GatewayFilter pulumi.StringPtrInput `pulumi:"gatewayFilter"`
	// Unique identifier of the Relay.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The public hostname/port tuple at which the gateway will be accessible to clients.
	ListenAddress pulumi.StringPtrInput `pulumi:"listenAddress"`
	// Location is a read only network location uploaded by the gateway process when it comes online.
	Location pulumi.StringInput `pulumi:"location"`
	// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
	MaintenanceWindows GetNodeNodeGatewayMaintenanceWindowArrayInput `pulumi:"maintenanceWindows"`
	// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Version is a read only sdm binary version uploaded by the gateway process when it comes online.
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetNodeNodeGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeNodeGateway)(nil)).Elem()
}

func (i GetNodeNodeGatewayArgs) ToGetNodeNodeGatewayOutput() GetNodeNodeGatewayOutput {
	return i.ToGetNodeNodeGatewayOutputWithContext(context.Background())
}

func (i GetNodeNodeGatewayArgs) ToGetNodeNodeGatewayOutputWithContext(ctx context.Context) GetNodeNodeGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeNodeGatewayOutput)
}

// GetNodeNodeGatewayArrayInput is an input type that accepts GetNodeNodeGatewayArray and GetNodeNodeGatewayArrayOutput values.
// You can construct a concrete instance of `GetNodeNodeGatewayArrayInput` via:
//
//	GetNodeNodeGatewayArray{ GetNodeNodeGatewayArgs{...} }
type GetNodeNodeGatewayArrayInput interface {
	pulumi.Input

	ToGetNodeNodeGatewayArrayOutput() GetNodeNodeGatewayArrayOutput
	ToGetNodeNodeGatewayArrayOutputWithContext(context.Context) GetNodeNodeGatewayArrayOutput
}

type GetNodeNodeGatewayArray []GetNodeNodeGatewayInput

func (GetNodeNodeGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeNodeGateway)(nil)).Elem()
}

func (i GetNodeNodeGatewayArray) ToGetNodeNodeGatewayArrayOutput() GetNodeNodeGatewayArrayOutput {
	return i.ToGetNodeNodeGatewayArrayOutputWithContext(context.Background())
}

func (i GetNodeNodeGatewayArray) ToGetNodeNodeGatewayArrayOutputWithContext(ctx context.Context) GetNodeNodeGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeNodeGatewayArrayOutput)
}

type GetNodeNodeGatewayOutput struct{ *pulumi.OutputState }

func (GetNodeNodeGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeNodeGateway)(nil)).Elem()
}

func (o GetNodeNodeGatewayOutput) ToGetNodeNodeGatewayOutput() GetNodeNodeGatewayOutput {
	return o
}

func (o GetNodeNodeGatewayOutput) ToGetNodeNodeGatewayOutputWithContext(ctx context.Context) GetNodeNodeGatewayOutput {
	return o
}

// The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to "0.0.0.0:listen_address_port".
func (o GetNodeNodeGatewayOutput) BindAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodeNodeGateway) *string { return v.BindAddress }).(pulumi.StringPtrOutput)
}

// Device is a read only device name uploaded by the gateway process when it comes online.
func (o GetNodeNodeGatewayOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeNodeGateway) string { return v.Device }).(pulumi.StringOutput)
}

// GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.
func (o GetNodeNodeGatewayOutput) GatewayFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodeNodeGateway) *string { return v.GatewayFilter }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Relay.
func (o GetNodeNodeGatewayOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodeNodeGateway) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The public hostname/port tuple at which the gateway will be accessible to clients.
func (o GetNodeNodeGatewayOutput) ListenAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodeNodeGateway) *string { return v.ListenAddress }).(pulumi.StringPtrOutput)
}

// Location is a read only network location uploaded by the gateway process when it comes online.
func (o GetNodeNodeGatewayOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeNodeGateway) string { return v.Location }).(pulumi.StringOutput)
}

// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
func (o GetNodeNodeGatewayOutput) MaintenanceWindows() GetNodeNodeGatewayMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v GetNodeNodeGateway) []GetNodeNodeGatewayMaintenanceWindow { return v.MaintenanceWindows }).(GetNodeNodeGatewayMaintenanceWindowArrayOutput)
}

// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
func (o GetNodeNodeGatewayOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodeNodeGateway) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetNodeNodeGatewayOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodeNodeGateway) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Version is a read only sdm binary version uploaded by the gateway process when it comes online.
func (o GetNodeNodeGatewayOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeNodeGateway) string { return v.Version }).(pulumi.StringOutput)
}

type GetNodeNodeGatewayArrayOutput struct{ *pulumi.OutputState }

func (GetNodeNodeGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeNodeGateway)(nil)).Elem()
}

func (o GetNodeNodeGatewayArrayOutput) ToGetNodeNodeGatewayArrayOutput() GetNodeNodeGatewayArrayOutput {
	return o
}

func (o GetNodeNodeGatewayArrayOutput) ToGetNodeNodeGatewayArrayOutputWithContext(ctx context.Context) GetNodeNodeGatewayArrayOutput {
	return o
}

func (o GetNodeNodeGatewayArrayOutput) Index(i pulumi.IntInput) GetNodeNodeGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodeNodeGateway {
		return vs[0].([]GetNodeNodeGateway)[vs[1].(int)]
	}).(GetNodeNodeGatewayOutput)
}

type GetNodeNodeGatewayMaintenanceWindow struct {
	CronSchedule    string `pulumi:"cronSchedule"`
	RequireIdleness bool   `pulumi:"requireIdleness"`
}

// GetNodeNodeGatewayMaintenanceWindowInput is an input type that accepts GetNodeNodeGatewayMaintenanceWindowArgs and GetNodeNodeGatewayMaintenanceWindowOutput values.
// You can construct a concrete instance of `GetNodeNodeGatewayMaintenanceWindowInput` via:
//
//	GetNodeNodeGatewayMaintenanceWindowArgs{...}
type GetNodeNodeGatewayMaintenanceWindowInput interface {
	pulumi.Input

	ToGetNodeNodeGatewayMaintenanceWindowOutput() GetNodeNodeGatewayMaintenanceWindowOutput
	ToGetNodeNodeGatewayMaintenanceWindowOutputWithContext(context.Context) GetNodeNodeGatewayMaintenanceWindowOutput
}

type GetNodeNodeGatewayMaintenanceWindowArgs struct {
	CronSchedule    pulumi.StringInput `pulumi:"cronSchedule"`
	RequireIdleness pulumi.BoolInput   `pulumi:"requireIdleness"`
}

func (GetNodeNodeGatewayMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeNodeGatewayMaintenanceWindow)(nil)).Elem()
}

func (i GetNodeNodeGatewayMaintenanceWindowArgs) ToGetNodeNodeGatewayMaintenanceWindowOutput() GetNodeNodeGatewayMaintenanceWindowOutput {
	return i.ToGetNodeNodeGatewayMaintenanceWindowOutputWithContext(context.Background())
}

func (i GetNodeNodeGatewayMaintenanceWindowArgs) ToGetNodeNodeGatewayMaintenanceWindowOutputWithContext(ctx context.Context) GetNodeNodeGatewayMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeNodeGatewayMaintenanceWindowOutput)
}

// GetNodeNodeGatewayMaintenanceWindowArrayInput is an input type that accepts GetNodeNodeGatewayMaintenanceWindowArray and GetNodeNodeGatewayMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `GetNodeNodeGatewayMaintenanceWindowArrayInput` via:
//
//	GetNodeNodeGatewayMaintenanceWindowArray{ GetNodeNodeGatewayMaintenanceWindowArgs{...} }
type GetNodeNodeGatewayMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToGetNodeNodeGatewayMaintenanceWindowArrayOutput() GetNodeNodeGatewayMaintenanceWindowArrayOutput
	ToGetNodeNodeGatewayMaintenanceWindowArrayOutputWithContext(context.Context) GetNodeNodeGatewayMaintenanceWindowArrayOutput
}

type GetNodeNodeGatewayMaintenanceWindowArray []GetNodeNodeGatewayMaintenanceWindowInput

func (GetNodeNodeGatewayMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeNodeGatewayMaintenanceWindow)(nil)).Elem()
}

func (i GetNodeNodeGatewayMaintenanceWindowArray) ToGetNodeNodeGatewayMaintenanceWindowArrayOutput() GetNodeNodeGatewayMaintenanceWindowArrayOutput {
	return i.ToGetNodeNodeGatewayMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i GetNodeNodeGatewayMaintenanceWindowArray) ToGetNodeNodeGatewayMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetNodeNodeGatewayMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeNodeGatewayMaintenanceWindowArrayOutput)
}

type GetNodeNodeGatewayMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (GetNodeNodeGatewayMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeNodeGatewayMaintenanceWindow)(nil)).Elem()
}

func (o GetNodeNodeGatewayMaintenanceWindowOutput) ToGetNodeNodeGatewayMaintenanceWindowOutput() GetNodeNodeGatewayMaintenanceWindowOutput {
	return o
}

func (o GetNodeNodeGatewayMaintenanceWindowOutput) ToGetNodeNodeGatewayMaintenanceWindowOutputWithContext(ctx context.Context) GetNodeNodeGatewayMaintenanceWindowOutput {
	return o
}

func (o GetNodeNodeGatewayMaintenanceWindowOutput) CronSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeNodeGatewayMaintenanceWindow) string { return v.CronSchedule }).(pulumi.StringOutput)
}

func (o GetNodeNodeGatewayMaintenanceWindowOutput) RequireIdleness() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNodeNodeGatewayMaintenanceWindow) bool { return v.RequireIdleness }).(pulumi.BoolOutput)
}

type GetNodeNodeGatewayMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (GetNodeNodeGatewayMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeNodeGatewayMaintenanceWindow)(nil)).Elem()
}

func (o GetNodeNodeGatewayMaintenanceWindowArrayOutput) ToGetNodeNodeGatewayMaintenanceWindowArrayOutput() GetNodeNodeGatewayMaintenanceWindowArrayOutput {
	return o
}

func (o GetNodeNodeGatewayMaintenanceWindowArrayOutput) ToGetNodeNodeGatewayMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetNodeNodeGatewayMaintenanceWindowArrayOutput {
	return o
}

func (o GetNodeNodeGatewayMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) GetNodeNodeGatewayMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodeNodeGatewayMaintenanceWindow {
		return vs[0].([]GetNodeNodeGatewayMaintenanceWindow)[vs[1].(int)]
	}).(GetNodeNodeGatewayMaintenanceWindowOutput)
}

type GetNodeNodeProxyCluster struct {
	// The public hostname/port tuple at which the proxy cluster will be accessible to clients.
	Address *string `pulumi:"address"`
	// Unique identifier of the Relay.
	Id *string `pulumi:"id"`
	// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
	MaintenanceWindows []GetNodeNodeProxyClusterMaintenanceWindow `pulumi:"maintenanceWindows"`
	// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
	Name *string `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetNodeNodeProxyClusterInput is an input type that accepts GetNodeNodeProxyClusterArgs and GetNodeNodeProxyClusterOutput values.
// You can construct a concrete instance of `GetNodeNodeProxyClusterInput` via:
//
//	GetNodeNodeProxyClusterArgs{...}
type GetNodeNodeProxyClusterInput interface {
	pulumi.Input

	ToGetNodeNodeProxyClusterOutput() GetNodeNodeProxyClusterOutput
	ToGetNodeNodeProxyClusterOutputWithContext(context.Context) GetNodeNodeProxyClusterOutput
}

type GetNodeNodeProxyClusterArgs struct {
	// The public hostname/port tuple at which the proxy cluster will be accessible to clients.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// Unique identifier of the Relay.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
	MaintenanceWindows GetNodeNodeProxyClusterMaintenanceWindowArrayInput `pulumi:"maintenanceWindows"`
	// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetNodeNodeProxyClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeNodeProxyCluster)(nil)).Elem()
}

func (i GetNodeNodeProxyClusterArgs) ToGetNodeNodeProxyClusterOutput() GetNodeNodeProxyClusterOutput {
	return i.ToGetNodeNodeProxyClusterOutputWithContext(context.Background())
}

func (i GetNodeNodeProxyClusterArgs) ToGetNodeNodeProxyClusterOutputWithContext(ctx context.Context) GetNodeNodeProxyClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeNodeProxyClusterOutput)
}

// GetNodeNodeProxyClusterArrayInput is an input type that accepts GetNodeNodeProxyClusterArray and GetNodeNodeProxyClusterArrayOutput values.
// You can construct a concrete instance of `GetNodeNodeProxyClusterArrayInput` via:
//
//	GetNodeNodeProxyClusterArray{ GetNodeNodeProxyClusterArgs{...} }
type GetNodeNodeProxyClusterArrayInput interface {
	pulumi.Input

	ToGetNodeNodeProxyClusterArrayOutput() GetNodeNodeProxyClusterArrayOutput
	ToGetNodeNodeProxyClusterArrayOutputWithContext(context.Context) GetNodeNodeProxyClusterArrayOutput
}

type GetNodeNodeProxyClusterArray []GetNodeNodeProxyClusterInput

func (GetNodeNodeProxyClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeNodeProxyCluster)(nil)).Elem()
}

func (i GetNodeNodeProxyClusterArray) ToGetNodeNodeProxyClusterArrayOutput() GetNodeNodeProxyClusterArrayOutput {
	return i.ToGetNodeNodeProxyClusterArrayOutputWithContext(context.Background())
}

func (i GetNodeNodeProxyClusterArray) ToGetNodeNodeProxyClusterArrayOutputWithContext(ctx context.Context) GetNodeNodeProxyClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeNodeProxyClusterArrayOutput)
}

type GetNodeNodeProxyClusterOutput struct{ *pulumi.OutputState }

func (GetNodeNodeProxyClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeNodeProxyCluster)(nil)).Elem()
}

func (o GetNodeNodeProxyClusterOutput) ToGetNodeNodeProxyClusterOutput() GetNodeNodeProxyClusterOutput {
	return o
}

func (o GetNodeNodeProxyClusterOutput) ToGetNodeNodeProxyClusterOutputWithContext(ctx context.Context) GetNodeNodeProxyClusterOutput {
	return o
}

// The public hostname/port tuple at which the proxy cluster will be accessible to clients.
func (o GetNodeNodeProxyClusterOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodeNodeProxyCluster) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Relay.
func (o GetNodeNodeProxyClusterOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodeNodeProxyCluster) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
func (o GetNodeNodeProxyClusterOutput) MaintenanceWindows() GetNodeNodeProxyClusterMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v GetNodeNodeProxyCluster) []GetNodeNodeProxyClusterMaintenanceWindow {
		return v.MaintenanceWindows
	}).(GetNodeNodeProxyClusterMaintenanceWindowArrayOutput)
}

// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
func (o GetNodeNodeProxyClusterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodeNodeProxyCluster) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetNodeNodeProxyClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodeNodeProxyCluster) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetNodeNodeProxyClusterArrayOutput struct{ *pulumi.OutputState }

func (GetNodeNodeProxyClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeNodeProxyCluster)(nil)).Elem()
}

func (o GetNodeNodeProxyClusterArrayOutput) ToGetNodeNodeProxyClusterArrayOutput() GetNodeNodeProxyClusterArrayOutput {
	return o
}

func (o GetNodeNodeProxyClusterArrayOutput) ToGetNodeNodeProxyClusterArrayOutputWithContext(ctx context.Context) GetNodeNodeProxyClusterArrayOutput {
	return o
}

func (o GetNodeNodeProxyClusterArrayOutput) Index(i pulumi.IntInput) GetNodeNodeProxyClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodeNodeProxyCluster {
		return vs[0].([]GetNodeNodeProxyCluster)[vs[1].(int)]
	}).(GetNodeNodeProxyClusterOutput)
}

type GetNodeNodeProxyClusterMaintenanceWindow struct {
	CronSchedule    string `pulumi:"cronSchedule"`
	RequireIdleness bool   `pulumi:"requireIdleness"`
}

// GetNodeNodeProxyClusterMaintenanceWindowInput is an input type that accepts GetNodeNodeProxyClusterMaintenanceWindowArgs and GetNodeNodeProxyClusterMaintenanceWindowOutput values.
// You can construct a concrete instance of `GetNodeNodeProxyClusterMaintenanceWindowInput` via:
//
//	GetNodeNodeProxyClusterMaintenanceWindowArgs{...}
type GetNodeNodeProxyClusterMaintenanceWindowInput interface {
	pulumi.Input

	ToGetNodeNodeProxyClusterMaintenanceWindowOutput() GetNodeNodeProxyClusterMaintenanceWindowOutput
	ToGetNodeNodeProxyClusterMaintenanceWindowOutputWithContext(context.Context) GetNodeNodeProxyClusterMaintenanceWindowOutput
}

type GetNodeNodeProxyClusterMaintenanceWindowArgs struct {
	CronSchedule    pulumi.StringInput `pulumi:"cronSchedule"`
	RequireIdleness pulumi.BoolInput   `pulumi:"requireIdleness"`
}

func (GetNodeNodeProxyClusterMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeNodeProxyClusterMaintenanceWindow)(nil)).Elem()
}

func (i GetNodeNodeProxyClusterMaintenanceWindowArgs) ToGetNodeNodeProxyClusterMaintenanceWindowOutput() GetNodeNodeProxyClusterMaintenanceWindowOutput {
	return i.ToGetNodeNodeProxyClusterMaintenanceWindowOutputWithContext(context.Background())
}

func (i GetNodeNodeProxyClusterMaintenanceWindowArgs) ToGetNodeNodeProxyClusterMaintenanceWindowOutputWithContext(ctx context.Context) GetNodeNodeProxyClusterMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeNodeProxyClusterMaintenanceWindowOutput)
}

// GetNodeNodeProxyClusterMaintenanceWindowArrayInput is an input type that accepts GetNodeNodeProxyClusterMaintenanceWindowArray and GetNodeNodeProxyClusterMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `GetNodeNodeProxyClusterMaintenanceWindowArrayInput` via:
//
//	GetNodeNodeProxyClusterMaintenanceWindowArray{ GetNodeNodeProxyClusterMaintenanceWindowArgs{...} }
type GetNodeNodeProxyClusterMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToGetNodeNodeProxyClusterMaintenanceWindowArrayOutput() GetNodeNodeProxyClusterMaintenanceWindowArrayOutput
	ToGetNodeNodeProxyClusterMaintenanceWindowArrayOutputWithContext(context.Context) GetNodeNodeProxyClusterMaintenanceWindowArrayOutput
}

type GetNodeNodeProxyClusterMaintenanceWindowArray []GetNodeNodeProxyClusterMaintenanceWindowInput

func (GetNodeNodeProxyClusterMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeNodeProxyClusterMaintenanceWindow)(nil)).Elem()
}

func (i GetNodeNodeProxyClusterMaintenanceWindowArray) ToGetNodeNodeProxyClusterMaintenanceWindowArrayOutput() GetNodeNodeProxyClusterMaintenanceWindowArrayOutput {
	return i.ToGetNodeNodeProxyClusterMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i GetNodeNodeProxyClusterMaintenanceWindowArray) ToGetNodeNodeProxyClusterMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetNodeNodeProxyClusterMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeNodeProxyClusterMaintenanceWindowArrayOutput)
}

type GetNodeNodeProxyClusterMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (GetNodeNodeProxyClusterMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeNodeProxyClusterMaintenanceWindow)(nil)).Elem()
}

func (o GetNodeNodeProxyClusterMaintenanceWindowOutput) ToGetNodeNodeProxyClusterMaintenanceWindowOutput() GetNodeNodeProxyClusterMaintenanceWindowOutput {
	return o
}

func (o GetNodeNodeProxyClusterMaintenanceWindowOutput) ToGetNodeNodeProxyClusterMaintenanceWindowOutputWithContext(ctx context.Context) GetNodeNodeProxyClusterMaintenanceWindowOutput {
	return o
}

func (o GetNodeNodeProxyClusterMaintenanceWindowOutput) CronSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeNodeProxyClusterMaintenanceWindow) string { return v.CronSchedule }).(pulumi.StringOutput)
}

func (o GetNodeNodeProxyClusterMaintenanceWindowOutput) RequireIdleness() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNodeNodeProxyClusterMaintenanceWindow) bool { return v.RequireIdleness }).(pulumi.BoolOutput)
}

type GetNodeNodeProxyClusterMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (GetNodeNodeProxyClusterMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeNodeProxyClusterMaintenanceWindow)(nil)).Elem()
}

func (o GetNodeNodeProxyClusterMaintenanceWindowArrayOutput) ToGetNodeNodeProxyClusterMaintenanceWindowArrayOutput() GetNodeNodeProxyClusterMaintenanceWindowArrayOutput {
	return o
}

func (o GetNodeNodeProxyClusterMaintenanceWindowArrayOutput) ToGetNodeNodeProxyClusterMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetNodeNodeProxyClusterMaintenanceWindowArrayOutput {
	return o
}

func (o GetNodeNodeProxyClusterMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) GetNodeNodeProxyClusterMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodeNodeProxyClusterMaintenanceWindow {
		return vs[0].([]GetNodeNodeProxyClusterMaintenanceWindow)[vs[1].(int)]
	}).(GetNodeNodeProxyClusterMaintenanceWindowOutput)
}

type GetNodeNodeRelay struct {
	// Device is a read only device name uploaded by the gateway process when it comes online.
	Device string `pulumi:"device"`
	// GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.
	GatewayFilter *string `pulumi:"gatewayFilter"`
	// Unique identifier of the Relay.
	Id *string `pulumi:"id"`
	// Location is a read only network location uploaded by the gateway process when it comes online.
	Location string `pulumi:"location"`
	// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
	MaintenanceWindows []GetNodeNodeRelayMaintenanceWindow `pulumi:"maintenanceWindows"`
	// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
	Name *string `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// Version is a read only sdm binary version uploaded by the gateway process when it comes online.
	Version string `pulumi:"version"`
}

// GetNodeNodeRelayInput is an input type that accepts GetNodeNodeRelayArgs and GetNodeNodeRelayOutput values.
// You can construct a concrete instance of `GetNodeNodeRelayInput` via:
//
//	GetNodeNodeRelayArgs{...}
type GetNodeNodeRelayInput interface {
	pulumi.Input

	ToGetNodeNodeRelayOutput() GetNodeNodeRelayOutput
	ToGetNodeNodeRelayOutputWithContext(context.Context) GetNodeNodeRelayOutput
}

type GetNodeNodeRelayArgs struct {
	// Device is a read only device name uploaded by the gateway process when it comes online.
	Device pulumi.StringInput `pulumi:"device"`
	// GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.
	GatewayFilter pulumi.StringPtrInput `pulumi:"gatewayFilter"`
	// Unique identifier of the Relay.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Location is a read only network location uploaded by the gateway process when it comes online.
	Location pulumi.StringInput `pulumi:"location"`
	// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
	MaintenanceWindows GetNodeNodeRelayMaintenanceWindowArrayInput `pulumi:"maintenanceWindows"`
	// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Version is a read only sdm binary version uploaded by the gateway process when it comes online.
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetNodeNodeRelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeNodeRelay)(nil)).Elem()
}

func (i GetNodeNodeRelayArgs) ToGetNodeNodeRelayOutput() GetNodeNodeRelayOutput {
	return i.ToGetNodeNodeRelayOutputWithContext(context.Background())
}

func (i GetNodeNodeRelayArgs) ToGetNodeNodeRelayOutputWithContext(ctx context.Context) GetNodeNodeRelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeNodeRelayOutput)
}

// GetNodeNodeRelayArrayInput is an input type that accepts GetNodeNodeRelayArray and GetNodeNodeRelayArrayOutput values.
// You can construct a concrete instance of `GetNodeNodeRelayArrayInput` via:
//
//	GetNodeNodeRelayArray{ GetNodeNodeRelayArgs{...} }
type GetNodeNodeRelayArrayInput interface {
	pulumi.Input

	ToGetNodeNodeRelayArrayOutput() GetNodeNodeRelayArrayOutput
	ToGetNodeNodeRelayArrayOutputWithContext(context.Context) GetNodeNodeRelayArrayOutput
}

type GetNodeNodeRelayArray []GetNodeNodeRelayInput

func (GetNodeNodeRelayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeNodeRelay)(nil)).Elem()
}

func (i GetNodeNodeRelayArray) ToGetNodeNodeRelayArrayOutput() GetNodeNodeRelayArrayOutput {
	return i.ToGetNodeNodeRelayArrayOutputWithContext(context.Background())
}

func (i GetNodeNodeRelayArray) ToGetNodeNodeRelayArrayOutputWithContext(ctx context.Context) GetNodeNodeRelayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeNodeRelayArrayOutput)
}

type GetNodeNodeRelayOutput struct{ *pulumi.OutputState }

func (GetNodeNodeRelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeNodeRelay)(nil)).Elem()
}

func (o GetNodeNodeRelayOutput) ToGetNodeNodeRelayOutput() GetNodeNodeRelayOutput {
	return o
}

func (o GetNodeNodeRelayOutput) ToGetNodeNodeRelayOutputWithContext(ctx context.Context) GetNodeNodeRelayOutput {
	return o
}

// Device is a read only device name uploaded by the gateway process when it comes online.
func (o GetNodeNodeRelayOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeNodeRelay) string { return v.Device }).(pulumi.StringOutput)
}

// GatewayFilter can be used to restrict the peering between relays and gateways. Deprecated.
func (o GetNodeNodeRelayOutput) GatewayFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodeNodeRelay) *string { return v.GatewayFilter }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Relay.
func (o GetNodeNodeRelayOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodeNodeRelay) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Location is a read only network location uploaded by the gateway process when it comes online.
func (o GetNodeNodeRelayOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeNodeRelay) string { return v.Location }).(pulumi.StringOutput)
}

// Maintenance Windows define when this node is allowed to restart. If a node is requested to restart, it will check each window to determine if any of them permit it to restart, and if any do, it will. This check is repeated per window until the restart is successfully completed.  If not set here, may be set on the command line or via an environment variable on the process itself; any server setting will take precedence over local settings. This setting is ineffective for nodes below version 38.44.0.  If this setting is not applied via this remote configuration or via local configuration, the default setting is used: always allow restarts if serving no connections, and allow a restart even if serving connections between 7-8 UTC, any day.
func (o GetNodeNodeRelayOutput) MaintenanceWindows() GetNodeNodeRelayMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v GetNodeNodeRelay) []GetNodeNodeRelayMaintenanceWindow { return v.MaintenanceWindows }).(GetNodeNodeRelayMaintenanceWindowArrayOutput)
}

// Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
func (o GetNodeNodeRelayOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodeNodeRelay) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetNodeNodeRelayOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodeNodeRelay) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Version is a read only sdm binary version uploaded by the gateway process when it comes online.
func (o GetNodeNodeRelayOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeNodeRelay) string { return v.Version }).(pulumi.StringOutput)
}

type GetNodeNodeRelayArrayOutput struct{ *pulumi.OutputState }

func (GetNodeNodeRelayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeNodeRelay)(nil)).Elem()
}

func (o GetNodeNodeRelayArrayOutput) ToGetNodeNodeRelayArrayOutput() GetNodeNodeRelayArrayOutput {
	return o
}

func (o GetNodeNodeRelayArrayOutput) ToGetNodeNodeRelayArrayOutputWithContext(ctx context.Context) GetNodeNodeRelayArrayOutput {
	return o
}

func (o GetNodeNodeRelayArrayOutput) Index(i pulumi.IntInput) GetNodeNodeRelayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodeNodeRelay {
		return vs[0].([]GetNodeNodeRelay)[vs[1].(int)]
	}).(GetNodeNodeRelayOutput)
}

type GetNodeNodeRelayMaintenanceWindow struct {
	CronSchedule    string `pulumi:"cronSchedule"`
	RequireIdleness bool   `pulumi:"requireIdleness"`
}

// GetNodeNodeRelayMaintenanceWindowInput is an input type that accepts GetNodeNodeRelayMaintenanceWindowArgs and GetNodeNodeRelayMaintenanceWindowOutput values.
// You can construct a concrete instance of `GetNodeNodeRelayMaintenanceWindowInput` via:
//
//	GetNodeNodeRelayMaintenanceWindowArgs{...}
type GetNodeNodeRelayMaintenanceWindowInput interface {
	pulumi.Input

	ToGetNodeNodeRelayMaintenanceWindowOutput() GetNodeNodeRelayMaintenanceWindowOutput
	ToGetNodeNodeRelayMaintenanceWindowOutputWithContext(context.Context) GetNodeNodeRelayMaintenanceWindowOutput
}

type GetNodeNodeRelayMaintenanceWindowArgs struct {
	CronSchedule    pulumi.StringInput `pulumi:"cronSchedule"`
	RequireIdleness pulumi.BoolInput   `pulumi:"requireIdleness"`
}

func (GetNodeNodeRelayMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeNodeRelayMaintenanceWindow)(nil)).Elem()
}

func (i GetNodeNodeRelayMaintenanceWindowArgs) ToGetNodeNodeRelayMaintenanceWindowOutput() GetNodeNodeRelayMaintenanceWindowOutput {
	return i.ToGetNodeNodeRelayMaintenanceWindowOutputWithContext(context.Background())
}

func (i GetNodeNodeRelayMaintenanceWindowArgs) ToGetNodeNodeRelayMaintenanceWindowOutputWithContext(ctx context.Context) GetNodeNodeRelayMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeNodeRelayMaintenanceWindowOutput)
}

// GetNodeNodeRelayMaintenanceWindowArrayInput is an input type that accepts GetNodeNodeRelayMaintenanceWindowArray and GetNodeNodeRelayMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `GetNodeNodeRelayMaintenanceWindowArrayInput` via:
//
//	GetNodeNodeRelayMaintenanceWindowArray{ GetNodeNodeRelayMaintenanceWindowArgs{...} }
type GetNodeNodeRelayMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToGetNodeNodeRelayMaintenanceWindowArrayOutput() GetNodeNodeRelayMaintenanceWindowArrayOutput
	ToGetNodeNodeRelayMaintenanceWindowArrayOutputWithContext(context.Context) GetNodeNodeRelayMaintenanceWindowArrayOutput
}

type GetNodeNodeRelayMaintenanceWindowArray []GetNodeNodeRelayMaintenanceWindowInput

func (GetNodeNodeRelayMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeNodeRelayMaintenanceWindow)(nil)).Elem()
}

func (i GetNodeNodeRelayMaintenanceWindowArray) ToGetNodeNodeRelayMaintenanceWindowArrayOutput() GetNodeNodeRelayMaintenanceWindowArrayOutput {
	return i.ToGetNodeNodeRelayMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i GetNodeNodeRelayMaintenanceWindowArray) ToGetNodeNodeRelayMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetNodeNodeRelayMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeNodeRelayMaintenanceWindowArrayOutput)
}

type GetNodeNodeRelayMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (GetNodeNodeRelayMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeNodeRelayMaintenanceWindow)(nil)).Elem()
}

func (o GetNodeNodeRelayMaintenanceWindowOutput) ToGetNodeNodeRelayMaintenanceWindowOutput() GetNodeNodeRelayMaintenanceWindowOutput {
	return o
}

func (o GetNodeNodeRelayMaintenanceWindowOutput) ToGetNodeNodeRelayMaintenanceWindowOutputWithContext(ctx context.Context) GetNodeNodeRelayMaintenanceWindowOutput {
	return o
}

func (o GetNodeNodeRelayMaintenanceWindowOutput) CronSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeNodeRelayMaintenanceWindow) string { return v.CronSchedule }).(pulumi.StringOutput)
}

func (o GetNodeNodeRelayMaintenanceWindowOutput) RequireIdleness() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNodeNodeRelayMaintenanceWindow) bool { return v.RequireIdleness }).(pulumi.BoolOutput)
}

type GetNodeNodeRelayMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (GetNodeNodeRelayMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeNodeRelayMaintenanceWindow)(nil)).Elem()
}

func (o GetNodeNodeRelayMaintenanceWindowArrayOutput) ToGetNodeNodeRelayMaintenanceWindowArrayOutput() GetNodeNodeRelayMaintenanceWindowArrayOutput {
	return o
}

func (o GetNodeNodeRelayMaintenanceWindowArrayOutput) ToGetNodeNodeRelayMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetNodeNodeRelayMaintenanceWindowArrayOutput {
	return o
}

func (o GetNodeNodeRelayMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) GetNodeNodeRelayMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodeNodeRelayMaintenanceWindow {
		return vs[0].([]GetNodeNodeRelayMaintenanceWindow)[vs[1].(int)]
	}).(GetNodeNodeRelayMaintenanceWindowOutput)
}

type GetPeeringGroupNodePeeringGroupNode struct {
	// Peering Group ID to which the node will be attached to.
	GroupId *string `pulumi:"groupId"`
	// Unique identifier of the Attachment.
	Id *string `pulumi:"id"`
	// Node ID to be attached.
	NodeId *string `pulumi:"nodeId"`
}

// GetPeeringGroupNodePeeringGroupNodeInput is an input type that accepts GetPeeringGroupNodePeeringGroupNodeArgs and GetPeeringGroupNodePeeringGroupNodeOutput values.
// You can construct a concrete instance of `GetPeeringGroupNodePeeringGroupNodeInput` via:
//
//	GetPeeringGroupNodePeeringGroupNodeArgs{...}
type GetPeeringGroupNodePeeringGroupNodeInput interface {
	pulumi.Input

	ToGetPeeringGroupNodePeeringGroupNodeOutput() GetPeeringGroupNodePeeringGroupNodeOutput
	ToGetPeeringGroupNodePeeringGroupNodeOutputWithContext(context.Context) GetPeeringGroupNodePeeringGroupNodeOutput
}

type GetPeeringGroupNodePeeringGroupNodeArgs struct {
	// Peering Group ID to which the node will be attached to.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Unique identifier of the Attachment.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Node ID to be attached.
	NodeId pulumi.StringPtrInput `pulumi:"nodeId"`
}

func (GetPeeringGroupNodePeeringGroupNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringGroupNodePeeringGroupNode)(nil)).Elem()
}

func (i GetPeeringGroupNodePeeringGroupNodeArgs) ToGetPeeringGroupNodePeeringGroupNodeOutput() GetPeeringGroupNodePeeringGroupNodeOutput {
	return i.ToGetPeeringGroupNodePeeringGroupNodeOutputWithContext(context.Background())
}

func (i GetPeeringGroupNodePeeringGroupNodeArgs) ToGetPeeringGroupNodePeeringGroupNodeOutputWithContext(ctx context.Context) GetPeeringGroupNodePeeringGroupNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPeeringGroupNodePeeringGroupNodeOutput)
}

// GetPeeringGroupNodePeeringGroupNodeArrayInput is an input type that accepts GetPeeringGroupNodePeeringGroupNodeArray and GetPeeringGroupNodePeeringGroupNodeArrayOutput values.
// You can construct a concrete instance of `GetPeeringGroupNodePeeringGroupNodeArrayInput` via:
//
//	GetPeeringGroupNodePeeringGroupNodeArray{ GetPeeringGroupNodePeeringGroupNodeArgs{...} }
type GetPeeringGroupNodePeeringGroupNodeArrayInput interface {
	pulumi.Input

	ToGetPeeringGroupNodePeeringGroupNodeArrayOutput() GetPeeringGroupNodePeeringGroupNodeArrayOutput
	ToGetPeeringGroupNodePeeringGroupNodeArrayOutputWithContext(context.Context) GetPeeringGroupNodePeeringGroupNodeArrayOutput
}

type GetPeeringGroupNodePeeringGroupNodeArray []GetPeeringGroupNodePeeringGroupNodeInput

func (GetPeeringGroupNodePeeringGroupNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPeeringGroupNodePeeringGroupNode)(nil)).Elem()
}

func (i GetPeeringGroupNodePeeringGroupNodeArray) ToGetPeeringGroupNodePeeringGroupNodeArrayOutput() GetPeeringGroupNodePeeringGroupNodeArrayOutput {
	return i.ToGetPeeringGroupNodePeeringGroupNodeArrayOutputWithContext(context.Background())
}

func (i GetPeeringGroupNodePeeringGroupNodeArray) ToGetPeeringGroupNodePeeringGroupNodeArrayOutputWithContext(ctx context.Context) GetPeeringGroupNodePeeringGroupNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPeeringGroupNodePeeringGroupNodeArrayOutput)
}

type GetPeeringGroupNodePeeringGroupNodeOutput struct{ *pulumi.OutputState }

func (GetPeeringGroupNodePeeringGroupNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringGroupNodePeeringGroupNode)(nil)).Elem()
}

func (o GetPeeringGroupNodePeeringGroupNodeOutput) ToGetPeeringGroupNodePeeringGroupNodeOutput() GetPeeringGroupNodePeeringGroupNodeOutput {
	return o
}

func (o GetPeeringGroupNodePeeringGroupNodeOutput) ToGetPeeringGroupNodePeeringGroupNodeOutputWithContext(ctx context.Context) GetPeeringGroupNodePeeringGroupNodeOutput {
	return o
}

// Peering Group ID to which the node will be attached to.
func (o GetPeeringGroupNodePeeringGroupNodeOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPeeringGroupNodePeeringGroupNode) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Attachment.
func (o GetPeeringGroupNodePeeringGroupNodeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPeeringGroupNodePeeringGroupNode) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Node ID to be attached.
func (o GetPeeringGroupNodePeeringGroupNodeOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPeeringGroupNodePeeringGroupNode) *string { return v.NodeId }).(pulumi.StringPtrOutput)
}

type GetPeeringGroupNodePeeringGroupNodeArrayOutput struct{ *pulumi.OutputState }

func (GetPeeringGroupNodePeeringGroupNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPeeringGroupNodePeeringGroupNode)(nil)).Elem()
}

func (o GetPeeringGroupNodePeeringGroupNodeArrayOutput) ToGetPeeringGroupNodePeeringGroupNodeArrayOutput() GetPeeringGroupNodePeeringGroupNodeArrayOutput {
	return o
}

func (o GetPeeringGroupNodePeeringGroupNodeArrayOutput) ToGetPeeringGroupNodePeeringGroupNodeArrayOutputWithContext(ctx context.Context) GetPeeringGroupNodePeeringGroupNodeArrayOutput {
	return o
}

func (o GetPeeringGroupNodePeeringGroupNodeArrayOutput) Index(i pulumi.IntInput) GetPeeringGroupNodePeeringGroupNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPeeringGroupNodePeeringGroupNode {
		return vs[0].([]GetPeeringGroupNodePeeringGroupNode)[vs[1].(int)]
	}).(GetPeeringGroupNodePeeringGroupNodeOutput)
}

type GetPeeringGroupPeerPeeringGroupPeer struct {
	// Group ID from which the link will originate.
	GroupId *string `pulumi:"groupId"`
	// Unique identifier of the Attachment.
	Id *string `pulumi:"id"`
	// Peering Group ID to which Group ID will link.
	PeersWithGroupId *string `pulumi:"peersWithGroupId"`
}

// GetPeeringGroupPeerPeeringGroupPeerInput is an input type that accepts GetPeeringGroupPeerPeeringGroupPeerArgs and GetPeeringGroupPeerPeeringGroupPeerOutput values.
// You can construct a concrete instance of `GetPeeringGroupPeerPeeringGroupPeerInput` via:
//
//	GetPeeringGroupPeerPeeringGroupPeerArgs{...}
type GetPeeringGroupPeerPeeringGroupPeerInput interface {
	pulumi.Input

	ToGetPeeringGroupPeerPeeringGroupPeerOutput() GetPeeringGroupPeerPeeringGroupPeerOutput
	ToGetPeeringGroupPeerPeeringGroupPeerOutputWithContext(context.Context) GetPeeringGroupPeerPeeringGroupPeerOutput
}

type GetPeeringGroupPeerPeeringGroupPeerArgs struct {
	// Group ID from which the link will originate.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Unique identifier of the Attachment.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Peering Group ID to which Group ID will link.
	PeersWithGroupId pulumi.StringPtrInput `pulumi:"peersWithGroupId"`
}

func (GetPeeringGroupPeerPeeringGroupPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringGroupPeerPeeringGroupPeer)(nil)).Elem()
}

func (i GetPeeringGroupPeerPeeringGroupPeerArgs) ToGetPeeringGroupPeerPeeringGroupPeerOutput() GetPeeringGroupPeerPeeringGroupPeerOutput {
	return i.ToGetPeeringGroupPeerPeeringGroupPeerOutputWithContext(context.Background())
}

func (i GetPeeringGroupPeerPeeringGroupPeerArgs) ToGetPeeringGroupPeerPeeringGroupPeerOutputWithContext(ctx context.Context) GetPeeringGroupPeerPeeringGroupPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPeeringGroupPeerPeeringGroupPeerOutput)
}

// GetPeeringGroupPeerPeeringGroupPeerArrayInput is an input type that accepts GetPeeringGroupPeerPeeringGroupPeerArray and GetPeeringGroupPeerPeeringGroupPeerArrayOutput values.
// You can construct a concrete instance of `GetPeeringGroupPeerPeeringGroupPeerArrayInput` via:
//
//	GetPeeringGroupPeerPeeringGroupPeerArray{ GetPeeringGroupPeerPeeringGroupPeerArgs{...} }
type GetPeeringGroupPeerPeeringGroupPeerArrayInput interface {
	pulumi.Input

	ToGetPeeringGroupPeerPeeringGroupPeerArrayOutput() GetPeeringGroupPeerPeeringGroupPeerArrayOutput
	ToGetPeeringGroupPeerPeeringGroupPeerArrayOutputWithContext(context.Context) GetPeeringGroupPeerPeeringGroupPeerArrayOutput
}

type GetPeeringGroupPeerPeeringGroupPeerArray []GetPeeringGroupPeerPeeringGroupPeerInput

func (GetPeeringGroupPeerPeeringGroupPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPeeringGroupPeerPeeringGroupPeer)(nil)).Elem()
}

func (i GetPeeringGroupPeerPeeringGroupPeerArray) ToGetPeeringGroupPeerPeeringGroupPeerArrayOutput() GetPeeringGroupPeerPeeringGroupPeerArrayOutput {
	return i.ToGetPeeringGroupPeerPeeringGroupPeerArrayOutputWithContext(context.Background())
}

func (i GetPeeringGroupPeerPeeringGroupPeerArray) ToGetPeeringGroupPeerPeeringGroupPeerArrayOutputWithContext(ctx context.Context) GetPeeringGroupPeerPeeringGroupPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPeeringGroupPeerPeeringGroupPeerArrayOutput)
}

type GetPeeringGroupPeerPeeringGroupPeerOutput struct{ *pulumi.OutputState }

func (GetPeeringGroupPeerPeeringGroupPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringGroupPeerPeeringGroupPeer)(nil)).Elem()
}

func (o GetPeeringGroupPeerPeeringGroupPeerOutput) ToGetPeeringGroupPeerPeeringGroupPeerOutput() GetPeeringGroupPeerPeeringGroupPeerOutput {
	return o
}

func (o GetPeeringGroupPeerPeeringGroupPeerOutput) ToGetPeeringGroupPeerPeeringGroupPeerOutputWithContext(ctx context.Context) GetPeeringGroupPeerPeeringGroupPeerOutput {
	return o
}

// Group ID from which the link will originate.
func (o GetPeeringGroupPeerPeeringGroupPeerOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPeeringGroupPeerPeeringGroupPeer) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Attachment.
func (o GetPeeringGroupPeerPeeringGroupPeerOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPeeringGroupPeerPeeringGroupPeer) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Peering Group ID to which Group ID will link.
func (o GetPeeringGroupPeerPeeringGroupPeerOutput) PeersWithGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPeeringGroupPeerPeeringGroupPeer) *string { return v.PeersWithGroupId }).(pulumi.StringPtrOutput)
}

type GetPeeringGroupPeerPeeringGroupPeerArrayOutput struct{ *pulumi.OutputState }

func (GetPeeringGroupPeerPeeringGroupPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPeeringGroupPeerPeeringGroupPeer)(nil)).Elem()
}

func (o GetPeeringGroupPeerPeeringGroupPeerArrayOutput) ToGetPeeringGroupPeerPeeringGroupPeerArrayOutput() GetPeeringGroupPeerPeeringGroupPeerArrayOutput {
	return o
}

func (o GetPeeringGroupPeerPeeringGroupPeerArrayOutput) ToGetPeeringGroupPeerPeeringGroupPeerArrayOutputWithContext(ctx context.Context) GetPeeringGroupPeerPeeringGroupPeerArrayOutput {
	return o
}

func (o GetPeeringGroupPeerPeeringGroupPeerArrayOutput) Index(i pulumi.IntInput) GetPeeringGroupPeerPeeringGroupPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPeeringGroupPeerPeeringGroupPeer {
		return vs[0].([]GetPeeringGroupPeerPeeringGroupPeer)[vs[1].(int)]
	}).(GetPeeringGroupPeerPeeringGroupPeerOutput)
}

type GetPeeringGroupPeeringGroup struct {
	// Unique identifier of the PeeringGroup.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the PeeringGroup.
	Name *string `pulumi:"name"`
}

// GetPeeringGroupPeeringGroupInput is an input type that accepts GetPeeringGroupPeeringGroupArgs and GetPeeringGroupPeeringGroupOutput values.
// You can construct a concrete instance of `GetPeeringGroupPeeringGroupInput` via:
//
//	GetPeeringGroupPeeringGroupArgs{...}
type GetPeeringGroupPeeringGroupInput interface {
	pulumi.Input

	ToGetPeeringGroupPeeringGroupOutput() GetPeeringGroupPeeringGroupOutput
	ToGetPeeringGroupPeeringGroupOutputWithContext(context.Context) GetPeeringGroupPeeringGroupOutput
}

type GetPeeringGroupPeeringGroupArgs struct {
	// Unique identifier of the PeeringGroup.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the PeeringGroup.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetPeeringGroupPeeringGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringGroupPeeringGroup)(nil)).Elem()
}

func (i GetPeeringGroupPeeringGroupArgs) ToGetPeeringGroupPeeringGroupOutput() GetPeeringGroupPeeringGroupOutput {
	return i.ToGetPeeringGroupPeeringGroupOutputWithContext(context.Background())
}

func (i GetPeeringGroupPeeringGroupArgs) ToGetPeeringGroupPeeringGroupOutputWithContext(ctx context.Context) GetPeeringGroupPeeringGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPeeringGroupPeeringGroupOutput)
}

// GetPeeringGroupPeeringGroupArrayInput is an input type that accepts GetPeeringGroupPeeringGroupArray and GetPeeringGroupPeeringGroupArrayOutput values.
// You can construct a concrete instance of `GetPeeringGroupPeeringGroupArrayInput` via:
//
//	GetPeeringGroupPeeringGroupArray{ GetPeeringGroupPeeringGroupArgs{...} }
type GetPeeringGroupPeeringGroupArrayInput interface {
	pulumi.Input

	ToGetPeeringGroupPeeringGroupArrayOutput() GetPeeringGroupPeeringGroupArrayOutput
	ToGetPeeringGroupPeeringGroupArrayOutputWithContext(context.Context) GetPeeringGroupPeeringGroupArrayOutput
}

type GetPeeringGroupPeeringGroupArray []GetPeeringGroupPeeringGroupInput

func (GetPeeringGroupPeeringGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPeeringGroupPeeringGroup)(nil)).Elem()
}

func (i GetPeeringGroupPeeringGroupArray) ToGetPeeringGroupPeeringGroupArrayOutput() GetPeeringGroupPeeringGroupArrayOutput {
	return i.ToGetPeeringGroupPeeringGroupArrayOutputWithContext(context.Background())
}

func (i GetPeeringGroupPeeringGroupArray) ToGetPeeringGroupPeeringGroupArrayOutputWithContext(ctx context.Context) GetPeeringGroupPeeringGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPeeringGroupPeeringGroupArrayOutput)
}

type GetPeeringGroupPeeringGroupOutput struct{ *pulumi.OutputState }

func (GetPeeringGroupPeeringGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringGroupPeeringGroup)(nil)).Elem()
}

func (o GetPeeringGroupPeeringGroupOutput) ToGetPeeringGroupPeeringGroupOutput() GetPeeringGroupPeeringGroupOutput {
	return o
}

func (o GetPeeringGroupPeeringGroupOutput) ToGetPeeringGroupPeeringGroupOutputWithContext(ctx context.Context) GetPeeringGroupPeeringGroupOutput {
	return o
}

// Unique identifier of the PeeringGroup.
func (o GetPeeringGroupPeeringGroupOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPeeringGroupPeeringGroup) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the PeeringGroup.
func (o GetPeeringGroupPeeringGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPeeringGroupPeeringGroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GetPeeringGroupPeeringGroupArrayOutput struct{ *pulumi.OutputState }

func (GetPeeringGroupPeeringGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPeeringGroupPeeringGroup)(nil)).Elem()
}

func (o GetPeeringGroupPeeringGroupArrayOutput) ToGetPeeringGroupPeeringGroupArrayOutput() GetPeeringGroupPeeringGroupArrayOutput {
	return o
}

func (o GetPeeringGroupPeeringGroupArrayOutput) ToGetPeeringGroupPeeringGroupArrayOutputWithContext(ctx context.Context) GetPeeringGroupPeeringGroupArrayOutput {
	return o
}

func (o GetPeeringGroupPeeringGroupArrayOutput) Index(i pulumi.IntInput) GetPeeringGroupPeeringGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPeeringGroupPeeringGroup {
		return vs[0].([]GetPeeringGroupPeeringGroup)[vs[1].(int)]
	}).(GetPeeringGroupPeeringGroupOutput)
}

type GetPeeringGroupResourcePeeringGroupResource struct {
	// Peering Group ID to which the resource will be attached to.
	GroupId *string `pulumi:"groupId"`
	// Unique identifier of the Attachment.
	Id *string `pulumi:"id"`
	// Resource ID to be attached.
	ResourceId *string `pulumi:"resourceId"`
}

// GetPeeringGroupResourcePeeringGroupResourceInput is an input type that accepts GetPeeringGroupResourcePeeringGroupResourceArgs and GetPeeringGroupResourcePeeringGroupResourceOutput values.
// You can construct a concrete instance of `GetPeeringGroupResourcePeeringGroupResourceInput` via:
//
//	GetPeeringGroupResourcePeeringGroupResourceArgs{...}
type GetPeeringGroupResourcePeeringGroupResourceInput interface {
	pulumi.Input

	ToGetPeeringGroupResourcePeeringGroupResourceOutput() GetPeeringGroupResourcePeeringGroupResourceOutput
	ToGetPeeringGroupResourcePeeringGroupResourceOutputWithContext(context.Context) GetPeeringGroupResourcePeeringGroupResourceOutput
}

type GetPeeringGroupResourcePeeringGroupResourceArgs struct {
	// Peering Group ID to which the resource will be attached to.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Unique identifier of the Attachment.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Resource ID to be attached.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (GetPeeringGroupResourcePeeringGroupResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringGroupResourcePeeringGroupResource)(nil)).Elem()
}

func (i GetPeeringGroupResourcePeeringGroupResourceArgs) ToGetPeeringGroupResourcePeeringGroupResourceOutput() GetPeeringGroupResourcePeeringGroupResourceOutput {
	return i.ToGetPeeringGroupResourcePeeringGroupResourceOutputWithContext(context.Background())
}

func (i GetPeeringGroupResourcePeeringGroupResourceArgs) ToGetPeeringGroupResourcePeeringGroupResourceOutputWithContext(ctx context.Context) GetPeeringGroupResourcePeeringGroupResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPeeringGroupResourcePeeringGroupResourceOutput)
}

// GetPeeringGroupResourcePeeringGroupResourceArrayInput is an input type that accepts GetPeeringGroupResourcePeeringGroupResourceArray and GetPeeringGroupResourcePeeringGroupResourceArrayOutput values.
// You can construct a concrete instance of `GetPeeringGroupResourcePeeringGroupResourceArrayInput` via:
//
//	GetPeeringGroupResourcePeeringGroupResourceArray{ GetPeeringGroupResourcePeeringGroupResourceArgs{...} }
type GetPeeringGroupResourcePeeringGroupResourceArrayInput interface {
	pulumi.Input

	ToGetPeeringGroupResourcePeeringGroupResourceArrayOutput() GetPeeringGroupResourcePeeringGroupResourceArrayOutput
	ToGetPeeringGroupResourcePeeringGroupResourceArrayOutputWithContext(context.Context) GetPeeringGroupResourcePeeringGroupResourceArrayOutput
}

type GetPeeringGroupResourcePeeringGroupResourceArray []GetPeeringGroupResourcePeeringGroupResourceInput

func (GetPeeringGroupResourcePeeringGroupResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPeeringGroupResourcePeeringGroupResource)(nil)).Elem()
}

func (i GetPeeringGroupResourcePeeringGroupResourceArray) ToGetPeeringGroupResourcePeeringGroupResourceArrayOutput() GetPeeringGroupResourcePeeringGroupResourceArrayOutput {
	return i.ToGetPeeringGroupResourcePeeringGroupResourceArrayOutputWithContext(context.Background())
}

func (i GetPeeringGroupResourcePeeringGroupResourceArray) ToGetPeeringGroupResourcePeeringGroupResourceArrayOutputWithContext(ctx context.Context) GetPeeringGroupResourcePeeringGroupResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPeeringGroupResourcePeeringGroupResourceArrayOutput)
}

type GetPeeringGroupResourcePeeringGroupResourceOutput struct{ *pulumi.OutputState }

func (GetPeeringGroupResourcePeeringGroupResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPeeringGroupResourcePeeringGroupResource)(nil)).Elem()
}

func (o GetPeeringGroupResourcePeeringGroupResourceOutput) ToGetPeeringGroupResourcePeeringGroupResourceOutput() GetPeeringGroupResourcePeeringGroupResourceOutput {
	return o
}

func (o GetPeeringGroupResourcePeeringGroupResourceOutput) ToGetPeeringGroupResourcePeeringGroupResourceOutputWithContext(ctx context.Context) GetPeeringGroupResourcePeeringGroupResourceOutput {
	return o
}

// Peering Group ID to which the resource will be attached to.
func (o GetPeeringGroupResourcePeeringGroupResourceOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPeeringGroupResourcePeeringGroupResource) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Attachment.
func (o GetPeeringGroupResourcePeeringGroupResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPeeringGroupResourcePeeringGroupResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Resource ID to be attached.
func (o GetPeeringGroupResourcePeeringGroupResourceOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPeeringGroupResourcePeeringGroupResource) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type GetPeeringGroupResourcePeeringGroupResourceArrayOutput struct{ *pulumi.OutputState }

func (GetPeeringGroupResourcePeeringGroupResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPeeringGroupResourcePeeringGroupResource)(nil)).Elem()
}

func (o GetPeeringGroupResourcePeeringGroupResourceArrayOutput) ToGetPeeringGroupResourcePeeringGroupResourceArrayOutput() GetPeeringGroupResourcePeeringGroupResourceArrayOutput {
	return o
}

func (o GetPeeringGroupResourcePeeringGroupResourceArrayOutput) ToGetPeeringGroupResourcePeeringGroupResourceArrayOutputWithContext(ctx context.Context) GetPeeringGroupResourcePeeringGroupResourceArrayOutput {
	return o
}

func (o GetPeeringGroupResourcePeeringGroupResourceArrayOutput) Index(i pulumi.IntInput) GetPeeringGroupResourcePeeringGroupResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPeeringGroupResourcePeeringGroupResource {
		return vs[0].([]GetPeeringGroupResourcePeeringGroupResource)[vs[1].(int)]
	}).(GetPeeringGroupResourcePeeringGroupResourceOutput)
}

type GetPolicyPolicy struct {
	// Optional description of the Policy.
	Description *string `pulumi:"description"`
	// Unique identifier of the Policy.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Policy.
	Name *string `pulumi:"name"`
	// The content of the Policy, in Cedar policy language.
	Policy *string `pulumi:"policy"`
}

// GetPolicyPolicyInput is an input type that accepts GetPolicyPolicyArgs and GetPolicyPolicyOutput values.
// You can construct a concrete instance of `GetPolicyPolicyInput` via:
//
//	GetPolicyPolicyArgs{...}
type GetPolicyPolicyInput interface {
	pulumi.Input

	ToGetPolicyPolicyOutput() GetPolicyPolicyOutput
	ToGetPolicyPolicyOutputWithContext(context.Context) GetPolicyPolicyOutput
}

type GetPolicyPolicyArgs struct {
	// Optional description of the Policy.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Unique identifier of the Policy.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Policy.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The content of the Policy, in Cedar policy language.
	Policy pulumi.StringPtrInput `pulumi:"policy"`
}

func (GetPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyPolicy)(nil)).Elem()
}

func (i GetPolicyPolicyArgs) ToGetPolicyPolicyOutput() GetPolicyPolicyOutput {
	return i.ToGetPolicyPolicyOutputWithContext(context.Background())
}

func (i GetPolicyPolicyArgs) ToGetPolicyPolicyOutputWithContext(ctx context.Context) GetPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyPolicyOutput)
}

// GetPolicyPolicyArrayInput is an input type that accepts GetPolicyPolicyArray and GetPolicyPolicyArrayOutput values.
// You can construct a concrete instance of `GetPolicyPolicyArrayInput` via:
//
//	GetPolicyPolicyArray{ GetPolicyPolicyArgs{...} }
type GetPolicyPolicyArrayInput interface {
	pulumi.Input

	ToGetPolicyPolicyArrayOutput() GetPolicyPolicyArrayOutput
	ToGetPolicyPolicyArrayOutputWithContext(context.Context) GetPolicyPolicyArrayOutput
}

type GetPolicyPolicyArray []GetPolicyPolicyInput

func (GetPolicyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyPolicy)(nil)).Elem()
}

func (i GetPolicyPolicyArray) ToGetPolicyPolicyArrayOutput() GetPolicyPolicyArrayOutput {
	return i.ToGetPolicyPolicyArrayOutputWithContext(context.Background())
}

func (i GetPolicyPolicyArray) ToGetPolicyPolicyArrayOutputWithContext(ctx context.Context) GetPolicyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyPolicyArrayOutput)
}

type GetPolicyPolicyOutput struct{ *pulumi.OutputState }

func (GetPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyPolicy)(nil)).Elem()
}

func (o GetPolicyPolicyOutput) ToGetPolicyPolicyOutput() GetPolicyPolicyOutput {
	return o
}

func (o GetPolicyPolicyOutput) ToGetPolicyPolicyOutputWithContext(ctx context.Context) GetPolicyPolicyOutput {
	return o
}

// Optional description of the Policy.
func (o GetPolicyPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPolicyPolicy) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Policy.
func (o GetPolicyPolicyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPolicyPolicy) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Policy.
func (o GetPolicyPolicyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPolicyPolicy) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The content of the Policy, in Cedar policy language.
func (o GetPolicyPolicyOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPolicyPolicy) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

type GetPolicyPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyPolicy)(nil)).Elem()
}

func (o GetPolicyPolicyArrayOutput) ToGetPolicyPolicyArrayOutput() GetPolicyPolicyArrayOutput {
	return o
}

func (o GetPolicyPolicyArrayOutput) ToGetPolicyPolicyArrayOutputWithContext(ctx context.Context) GetPolicyPolicyArrayOutput {
	return o
}

func (o GetPolicyPolicyArrayOutput) Index(i pulumi.IntInput) GetPolicyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyPolicy {
		return vs[0].([]GetPolicyPolicy)[vs[1].(int)]
	}).(GetPolicyPolicyOutput)
}

type GetProxyClusterKeyProxyClusterKey struct {
	// Unique identifier of the Relay.
	Id *string `pulumi:"id"`
	// The ID of the proxy cluster which this key authenticates to.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
}

// GetProxyClusterKeyProxyClusterKeyInput is an input type that accepts GetProxyClusterKeyProxyClusterKeyArgs and GetProxyClusterKeyProxyClusterKeyOutput values.
// You can construct a concrete instance of `GetProxyClusterKeyProxyClusterKeyInput` via:
//
//	GetProxyClusterKeyProxyClusterKeyArgs{...}
type GetProxyClusterKeyProxyClusterKeyInput interface {
	pulumi.Input

	ToGetProxyClusterKeyProxyClusterKeyOutput() GetProxyClusterKeyProxyClusterKeyOutput
	ToGetProxyClusterKeyProxyClusterKeyOutputWithContext(context.Context) GetProxyClusterKeyProxyClusterKeyOutput
}

type GetProxyClusterKeyProxyClusterKeyArgs struct {
	// Unique identifier of the Relay.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The ID of the proxy cluster which this key authenticates to.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
}

func (GetProxyClusterKeyProxyClusterKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProxyClusterKeyProxyClusterKey)(nil)).Elem()
}

func (i GetProxyClusterKeyProxyClusterKeyArgs) ToGetProxyClusterKeyProxyClusterKeyOutput() GetProxyClusterKeyProxyClusterKeyOutput {
	return i.ToGetProxyClusterKeyProxyClusterKeyOutputWithContext(context.Background())
}

func (i GetProxyClusterKeyProxyClusterKeyArgs) ToGetProxyClusterKeyProxyClusterKeyOutputWithContext(ctx context.Context) GetProxyClusterKeyProxyClusterKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProxyClusterKeyProxyClusterKeyOutput)
}

// GetProxyClusterKeyProxyClusterKeyArrayInput is an input type that accepts GetProxyClusterKeyProxyClusterKeyArray and GetProxyClusterKeyProxyClusterKeyArrayOutput values.
// You can construct a concrete instance of `GetProxyClusterKeyProxyClusterKeyArrayInput` via:
//
//	GetProxyClusterKeyProxyClusterKeyArray{ GetProxyClusterKeyProxyClusterKeyArgs{...} }
type GetProxyClusterKeyProxyClusterKeyArrayInput interface {
	pulumi.Input

	ToGetProxyClusterKeyProxyClusterKeyArrayOutput() GetProxyClusterKeyProxyClusterKeyArrayOutput
	ToGetProxyClusterKeyProxyClusterKeyArrayOutputWithContext(context.Context) GetProxyClusterKeyProxyClusterKeyArrayOutput
}

type GetProxyClusterKeyProxyClusterKeyArray []GetProxyClusterKeyProxyClusterKeyInput

func (GetProxyClusterKeyProxyClusterKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProxyClusterKeyProxyClusterKey)(nil)).Elem()
}

func (i GetProxyClusterKeyProxyClusterKeyArray) ToGetProxyClusterKeyProxyClusterKeyArrayOutput() GetProxyClusterKeyProxyClusterKeyArrayOutput {
	return i.ToGetProxyClusterKeyProxyClusterKeyArrayOutputWithContext(context.Background())
}

func (i GetProxyClusterKeyProxyClusterKeyArray) ToGetProxyClusterKeyProxyClusterKeyArrayOutputWithContext(ctx context.Context) GetProxyClusterKeyProxyClusterKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProxyClusterKeyProxyClusterKeyArrayOutput)
}

type GetProxyClusterKeyProxyClusterKeyOutput struct{ *pulumi.OutputState }

func (GetProxyClusterKeyProxyClusterKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProxyClusterKeyProxyClusterKey)(nil)).Elem()
}

func (o GetProxyClusterKeyProxyClusterKeyOutput) ToGetProxyClusterKeyProxyClusterKeyOutput() GetProxyClusterKeyProxyClusterKeyOutput {
	return o
}

func (o GetProxyClusterKeyProxyClusterKeyOutput) ToGetProxyClusterKeyProxyClusterKeyOutputWithContext(ctx context.Context) GetProxyClusterKeyProxyClusterKeyOutput {
	return o
}

// Unique identifier of the Relay.
func (o GetProxyClusterKeyProxyClusterKeyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProxyClusterKeyProxyClusterKey) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The ID of the proxy cluster which this key authenticates to.
func (o GetProxyClusterKeyProxyClusterKeyOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProxyClusterKeyProxyClusterKey) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

type GetProxyClusterKeyProxyClusterKeyArrayOutput struct{ *pulumi.OutputState }

func (GetProxyClusterKeyProxyClusterKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProxyClusterKeyProxyClusterKey)(nil)).Elem()
}

func (o GetProxyClusterKeyProxyClusterKeyArrayOutput) ToGetProxyClusterKeyProxyClusterKeyArrayOutput() GetProxyClusterKeyProxyClusterKeyArrayOutput {
	return o
}

func (o GetProxyClusterKeyProxyClusterKeyArrayOutput) ToGetProxyClusterKeyProxyClusterKeyArrayOutputWithContext(ctx context.Context) GetProxyClusterKeyProxyClusterKeyArrayOutput {
	return o
}

func (o GetProxyClusterKeyProxyClusterKeyArrayOutput) Index(i pulumi.IntInput) GetProxyClusterKeyProxyClusterKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProxyClusterKeyProxyClusterKey {
		return vs[0].([]GetProxyClusterKeyProxyClusterKey)[vs[1].(int)]
	}).(GetProxyClusterKeyProxyClusterKeyOutput)
}

type GetRemoteIdentityGroupRemoteIdentityGroup struct {
	// Unique identifier of the RemoteIdentityGroup.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the RemoteIdentityGroup.
	Name *string `pulumi:"name"`
}

// GetRemoteIdentityGroupRemoteIdentityGroupInput is an input type that accepts GetRemoteIdentityGroupRemoteIdentityGroupArgs and GetRemoteIdentityGroupRemoteIdentityGroupOutput values.
// You can construct a concrete instance of `GetRemoteIdentityGroupRemoteIdentityGroupInput` via:
//
//	GetRemoteIdentityGroupRemoteIdentityGroupArgs{...}
type GetRemoteIdentityGroupRemoteIdentityGroupInput interface {
	pulumi.Input

	ToGetRemoteIdentityGroupRemoteIdentityGroupOutput() GetRemoteIdentityGroupRemoteIdentityGroupOutput
	ToGetRemoteIdentityGroupRemoteIdentityGroupOutputWithContext(context.Context) GetRemoteIdentityGroupRemoteIdentityGroupOutput
}

type GetRemoteIdentityGroupRemoteIdentityGroupArgs struct {
	// Unique identifier of the RemoteIdentityGroup.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the RemoteIdentityGroup.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetRemoteIdentityGroupRemoteIdentityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRemoteIdentityGroupRemoteIdentityGroup)(nil)).Elem()
}

func (i GetRemoteIdentityGroupRemoteIdentityGroupArgs) ToGetRemoteIdentityGroupRemoteIdentityGroupOutput() GetRemoteIdentityGroupRemoteIdentityGroupOutput {
	return i.ToGetRemoteIdentityGroupRemoteIdentityGroupOutputWithContext(context.Background())
}

func (i GetRemoteIdentityGroupRemoteIdentityGroupArgs) ToGetRemoteIdentityGroupRemoteIdentityGroupOutputWithContext(ctx context.Context) GetRemoteIdentityGroupRemoteIdentityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRemoteIdentityGroupRemoteIdentityGroupOutput)
}

// GetRemoteIdentityGroupRemoteIdentityGroupArrayInput is an input type that accepts GetRemoteIdentityGroupRemoteIdentityGroupArray and GetRemoteIdentityGroupRemoteIdentityGroupArrayOutput values.
// You can construct a concrete instance of `GetRemoteIdentityGroupRemoteIdentityGroupArrayInput` via:
//
//	GetRemoteIdentityGroupRemoteIdentityGroupArray{ GetRemoteIdentityGroupRemoteIdentityGroupArgs{...} }
type GetRemoteIdentityGroupRemoteIdentityGroupArrayInput interface {
	pulumi.Input

	ToGetRemoteIdentityGroupRemoteIdentityGroupArrayOutput() GetRemoteIdentityGroupRemoteIdentityGroupArrayOutput
	ToGetRemoteIdentityGroupRemoteIdentityGroupArrayOutputWithContext(context.Context) GetRemoteIdentityGroupRemoteIdentityGroupArrayOutput
}

type GetRemoteIdentityGroupRemoteIdentityGroupArray []GetRemoteIdentityGroupRemoteIdentityGroupInput

func (GetRemoteIdentityGroupRemoteIdentityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRemoteIdentityGroupRemoteIdentityGroup)(nil)).Elem()
}

func (i GetRemoteIdentityGroupRemoteIdentityGroupArray) ToGetRemoteIdentityGroupRemoteIdentityGroupArrayOutput() GetRemoteIdentityGroupRemoteIdentityGroupArrayOutput {
	return i.ToGetRemoteIdentityGroupRemoteIdentityGroupArrayOutputWithContext(context.Background())
}

func (i GetRemoteIdentityGroupRemoteIdentityGroupArray) ToGetRemoteIdentityGroupRemoteIdentityGroupArrayOutputWithContext(ctx context.Context) GetRemoteIdentityGroupRemoteIdentityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRemoteIdentityGroupRemoteIdentityGroupArrayOutput)
}

type GetRemoteIdentityGroupRemoteIdentityGroupOutput struct{ *pulumi.OutputState }

func (GetRemoteIdentityGroupRemoteIdentityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRemoteIdentityGroupRemoteIdentityGroup)(nil)).Elem()
}

func (o GetRemoteIdentityGroupRemoteIdentityGroupOutput) ToGetRemoteIdentityGroupRemoteIdentityGroupOutput() GetRemoteIdentityGroupRemoteIdentityGroupOutput {
	return o
}

func (o GetRemoteIdentityGroupRemoteIdentityGroupOutput) ToGetRemoteIdentityGroupRemoteIdentityGroupOutputWithContext(ctx context.Context) GetRemoteIdentityGroupRemoteIdentityGroupOutput {
	return o
}

// Unique identifier of the RemoteIdentityGroup.
func (o GetRemoteIdentityGroupRemoteIdentityGroupOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRemoteIdentityGroupRemoteIdentityGroup) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the RemoteIdentityGroup.
func (o GetRemoteIdentityGroupRemoteIdentityGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRemoteIdentityGroupRemoteIdentityGroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GetRemoteIdentityGroupRemoteIdentityGroupArrayOutput struct{ *pulumi.OutputState }

func (GetRemoteIdentityGroupRemoteIdentityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRemoteIdentityGroupRemoteIdentityGroup)(nil)).Elem()
}

func (o GetRemoteIdentityGroupRemoteIdentityGroupArrayOutput) ToGetRemoteIdentityGroupRemoteIdentityGroupArrayOutput() GetRemoteIdentityGroupRemoteIdentityGroupArrayOutput {
	return o
}

func (o GetRemoteIdentityGroupRemoteIdentityGroupArrayOutput) ToGetRemoteIdentityGroupRemoteIdentityGroupArrayOutputWithContext(ctx context.Context) GetRemoteIdentityGroupRemoteIdentityGroupArrayOutput {
	return o
}

func (o GetRemoteIdentityGroupRemoteIdentityGroupArrayOutput) Index(i pulumi.IntInput) GetRemoteIdentityGroupRemoteIdentityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRemoteIdentityGroupRemoteIdentityGroup {
		return vs[0].([]GetRemoteIdentityGroupRemoteIdentityGroup)[vs[1].(int)]
	}).(GetRemoteIdentityGroupRemoteIdentityGroupOutput)
}

type GetRemoteIdentityRemoteIdentity struct {
	// The account for this remote identity.
	AccountId *string `pulumi:"accountId"`
	// Unique identifier of the RemoteIdentity.
	Id *string `pulumi:"id"`
	// The remote identity group.
	RemoteIdentityGroupId *string `pulumi:"remoteIdentityGroupId"`
	// The username to be used as the remote identity for this account.
	Username *string `pulumi:"username"`
}

// GetRemoteIdentityRemoteIdentityInput is an input type that accepts GetRemoteIdentityRemoteIdentityArgs and GetRemoteIdentityRemoteIdentityOutput values.
// You can construct a concrete instance of `GetRemoteIdentityRemoteIdentityInput` via:
//
//	GetRemoteIdentityRemoteIdentityArgs{...}
type GetRemoteIdentityRemoteIdentityInput interface {
	pulumi.Input

	ToGetRemoteIdentityRemoteIdentityOutput() GetRemoteIdentityRemoteIdentityOutput
	ToGetRemoteIdentityRemoteIdentityOutputWithContext(context.Context) GetRemoteIdentityRemoteIdentityOutput
}

type GetRemoteIdentityRemoteIdentityArgs struct {
	// The account for this remote identity.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// Unique identifier of the RemoteIdentity.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The remote identity group.
	RemoteIdentityGroupId pulumi.StringPtrInput `pulumi:"remoteIdentityGroupId"`
	// The username to be used as the remote identity for this account.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetRemoteIdentityRemoteIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRemoteIdentityRemoteIdentity)(nil)).Elem()
}

func (i GetRemoteIdentityRemoteIdentityArgs) ToGetRemoteIdentityRemoteIdentityOutput() GetRemoteIdentityRemoteIdentityOutput {
	return i.ToGetRemoteIdentityRemoteIdentityOutputWithContext(context.Background())
}

func (i GetRemoteIdentityRemoteIdentityArgs) ToGetRemoteIdentityRemoteIdentityOutputWithContext(ctx context.Context) GetRemoteIdentityRemoteIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRemoteIdentityRemoteIdentityOutput)
}

// GetRemoteIdentityRemoteIdentityArrayInput is an input type that accepts GetRemoteIdentityRemoteIdentityArray and GetRemoteIdentityRemoteIdentityArrayOutput values.
// You can construct a concrete instance of `GetRemoteIdentityRemoteIdentityArrayInput` via:
//
//	GetRemoteIdentityRemoteIdentityArray{ GetRemoteIdentityRemoteIdentityArgs{...} }
type GetRemoteIdentityRemoteIdentityArrayInput interface {
	pulumi.Input

	ToGetRemoteIdentityRemoteIdentityArrayOutput() GetRemoteIdentityRemoteIdentityArrayOutput
	ToGetRemoteIdentityRemoteIdentityArrayOutputWithContext(context.Context) GetRemoteIdentityRemoteIdentityArrayOutput
}

type GetRemoteIdentityRemoteIdentityArray []GetRemoteIdentityRemoteIdentityInput

func (GetRemoteIdentityRemoteIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRemoteIdentityRemoteIdentity)(nil)).Elem()
}

func (i GetRemoteIdentityRemoteIdentityArray) ToGetRemoteIdentityRemoteIdentityArrayOutput() GetRemoteIdentityRemoteIdentityArrayOutput {
	return i.ToGetRemoteIdentityRemoteIdentityArrayOutputWithContext(context.Background())
}

func (i GetRemoteIdentityRemoteIdentityArray) ToGetRemoteIdentityRemoteIdentityArrayOutputWithContext(ctx context.Context) GetRemoteIdentityRemoteIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRemoteIdentityRemoteIdentityArrayOutput)
}

type GetRemoteIdentityRemoteIdentityOutput struct{ *pulumi.OutputState }

func (GetRemoteIdentityRemoteIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRemoteIdentityRemoteIdentity)(nil)).Elem()
}

func (o GetRemoteIdentityRemoteIdentityOutput) ToGetRemoteIdentityRemoteIdentityOutput() GetRemoteIdentityRemoteIdentityOutput {
	return o
}

func (o GetRemoteIdentityRemoteIdentityOutput) ToGetRemoteIdentityRemoteIdentityOutputWithContext(ctx context.Context) GetRemoteIdentityRemoteIdentityOutput {
	return o
}

// The account for this remote identity.
func (o GetRemoteIdentityRemoteIdentityOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRemoteIdentityRemoteIdentity) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the RemoteIdentity.
func (o GetRemoteIdentityRemoteIdentityOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRemoteIdentityRemoteIdentity) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The remote identity group.
func (o GetRemoteIdentityRemoteIdentityOutput) RemoteIdentityGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRemoteIdentityRemoteIdentity) *string { return v.RemoteIdentityGroupId }).(pulumi.StringPtrOutput)
}

// The username to be used as the remote identity for this account.
func (o GetRemoteIdentityRemoteIdentityOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRemoteIdentityRemoteIdentity) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetRemoteIdentityRemoteIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetRemoteIdentityRemoteIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRemoteIdentityRemoteIdentity)(nil)).Elem()
}

func (o GetRemoteIdentityRemoteIdentityArrayOutput) ToGetRemoteIdentityRemoteIdentityArrayOutput() GetRemoteIdentityRemoteIdentityArrayOutput {
	return o
}

func (o GetRemoteIdentityRemoteIdentityArrayOutput) ToGetRemoteIdentityRemoteIdentityArrayOutputWithContext(ctx context.Context) GetRemoteIdentityRemoteIdentityArrayOutput {
	return o
}

func (o GetRemoteIdentityRemoteIdentityArrayOutput) Index(i pulumi.IntInput) GetRemoteIdentityRemoteIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRemoteIdentityRemoteIdentity {
		return vs[0].([]GetRemoteIdentityRemoteIdentity)[vs[1].(int)]
	}).(GetRemoteIdentityRemoteIdentityOutput)
}

type GetResourceResource struct {
	Aks                                        []GetResourceResourceAk                                        `pulumi:"aks"`
	AksBasicAuths                              []GetResourceResourceAksBasicAuth                              `pulumi:"aksBasicAuths"`
	AksServiceAccountUserImpersonations        []GetResourceResourceAksServiceAccountUserImpersonation        `pulumi:"aksServiceAccountUserImpersonations"`
	AksServiceAccounts                         []GetResourceResourceAksServiceAccount                         `pulumi:"aksServiceAccounts"`
	AksUserImpersonations                      []GetResourceResourceAksUserImpersonation                      `pulumi:"aksUserImpersonations"`
	AmazonEks                                  []GetResourceResourceAmazonEk                                  `pulumi:"amazonEks"`
	AmazonEksInstanceProfileUserImpersonations []GetResourceResourceAmazonEksInstanceProfileUserImpersonation `pulumi:"amazonEksInstanceProfileUserImpersonations"`
	AmazonEksInstanceProfiles                  []GetResourceResourceAmazonEksInstanceProfile                  `pulumi:"amazonEksInstanceProfiles"`
	AmazonEksUserImpersonations                []GetResourceResourceAmazonEksUserImpersonation                `pulumi:"amazonEksUserImpersonations"`
	AmazonEs                                   []GetResourceResourceAmazonE                                   `pulumi:"amazonEs"`
	AmazonmqAmqp091s                           []GetResourceResourceAmazonmqAmqp091                           `pulumi:"amazonmqAmqp091s"`
	AthenaIams                                 []GetResourceResourceAthenaIam                                 `pulumi:"athenaIams"`
	Athenas                                    []GetResourceResourceAthena                                    `pulumi:"athenas"`
	AuroraMysqlIams                            []GetResourceResourceAuroraMysqlIam                            `pulumi:"auroraMysqlIams"`
	AuroraMysqls                               []GetResourceResourceAuroraMysql                               `pulumi:"auroraMysqls"`
	AuroraPostgres                             []GetResourceResourceAuroraPostgre                             `pulumi:"auroraPostgres"`
	AuroraPostgresIams                         []GetResourceResourceAuroraPostgresIam                         `pulumi:"auroraPostgresIams"`
	Aws                                        []GetResourceResourceAw                                        `pulumi:"aws"`
	AwsConsoleStaticKeyPairs                   []GetResourceResourceAwsConsoleStaticKeyPair                   `pulumi:"awsConsoleStaticKeyPairs"`
	AwsConsoles                                []GetResourceResourceAwsConsole                                `pulumi:"awsConsoles"`
	AwsInstanceProfiles                        []GetResourceResourceAwsInstanceProfile                        `pulumi:"awsInstanceProfiles"`
	AzureCertificates                          []GetResourceResourceAzureCertificate                          `pulumi:"azureCertificates"`
	AzureMysqls                                []GetResourceResourceAzureMysql                                `pulumi:"azureMysqls"`
	AzurePostgres                              []GetResourceResourceAzurePostgre                              `pulumi:"azurePostgres"`
	AzurePostgresManagedIdentities             []GetResourceResourceAzurePostgresManagedIdentity              `pulumi:"azurePostgresManagedIdentities"`
	Azures                                     []GetResourceResourceAzure                                     `pulumi:"azures"`
	BigQueries                                 []GetResourceResourceBigQuery                                  `pulumi:"bigQueries"`
	Cassandras                                 []GetResourceResourceCassandra                                 `pulumi:"cassandras"`
	Cituses                                    []GetResourceResourceCitus                                     `pulumi:"cituses"`
	ClickHouseHttps                            []GetResourceResourceClickHouseHttp                            `pulumi:"clickHouseHttps"`
	ClickHouseMySqls                           []GetResourceResourceClickHouseMySql                           `pulumi:"clickHouseMySqls"`
	ClickHouseTcps                             []GetResourceResourceClickHouseTcp                             `pulumi:"clickHouseTcps"`
	Clustrixes                                 []GetResourceResourceClustrix                                  `pulumi:"clustrixes"`
	Cockroaches                                []GetResourceResourceCockroach                                 `pulumi:"cockroaches"`
	CouchbaseDatabases                         []GetResourceResourceCouchbaseDatabase                         `pulumi:"couchbaseDatabases"`
	CouchbaseWebUis                            []GetResourceResourceCouchbaseWebUi                            `pulumi:"couchbaseWebUis"`
	Db2Is                                      []GetResourceResourceDb2I                                      `pulumi:"db2Is"`
	Db2Luws                                    []GetResourceResourceDb2Luw                                    `pulumi:"db2Luws"`
	DocumentDbHostIams                         []GetResourceResourceDocumentDbHostIam                         `pulumi:"documentDbHostIams"`
	DocumentDbHosts                            []GetResourceResourceDocumentDbHost                            `pulumi:"documentDbHosts"`
	DocumentDbReplicaSets                      []GetResourceResourceDocumentDbReplicaSet                      `pulumi:"documentDbReplicaSets"`
	Druids                                     []GetResourceResourceDruid                                     `pulumi:"druids"`
	DynamoDbiams                               []GetResourceResourceDynamoDbiam                               `pulumi:"dynamoDbiams"`
	DynamoDbs                                  []GetResourceResourceDynamoDb                                  `pulumi:"dynamoDbs"`
	ElasticacheRedis                           []GetResourceResourceElasticacheRedi                           `pulumi:"elasticacheRedis"`
	Elastics                                   []GetResourceResourceElastic                                   `pulumi:"elastics"`
	GcpConsoles                                []GetResourceResourceGcpConsole                                `pulumi:"gcpConsoles"`
	Gcps                                       []GetResourceResourceGcp                                       `pulumi:"gcps"`
	Gcpwifs                                    []GetResourceResourceGcpwif                                    `pulumi:"gcpwifs"`
	GoogleGkeUserImpersonations                []GetResourceResourceGoogleGkeUserImpersonation                `pulumi:"googleGkeUserImpersonations"`
	GoogleGkes                                 []GetResourceResourceGoogleGke                                 `pulumi:"googleGkes"`
	Greenplums                                 []GetResourceResourceGreenplum                                 `pulumi:"greenplums"`
	HttpAuths                                  []GetResourceResourceHttpAuth                                  `pulumi:"httpAuths"`
	HttpBasicAuths                             []GetResourceResourceHttpBasicAuth                             `pulumi:"httpBasicAuths"`
	HttpNoAuths                                []GetResourceResourceHttpNoAuth                                `pulumi:"httpNoAuths"`
	Kubernetes                                 []GetResourceResourceKubernete                                 `pulumi:"kubernetes"`
	KubernetesBasicAuths                       []GetResourceResourceKubernetesBasicAuth                       `pulumi:"kubernetesBasicAuths"`
	KubernetesServiceAccountUserImpersonations []GetResourceResourceKubernetesServiceAccountUserImpersonation `pulumi:"kubernetesServiceAccountUserImpersonations"`
	KubernetesServiceAccounts                  []GetResourceResourceKubernetesServiceAccount                  `pulumi:"kubernetesServiceAccounts"`
	KubernetesUserImpersonations               []GetResourceResourceKubernetesUserImpersonation               `pulumi:"kubernetesUserImpersonations"`
	Marias                                     []GetResourceResourceMaria                                     `pulumi:"marias"`
	Memcacheds                                 []GetResourceResourceMemcached                                 `pulumi:"memcacheds"`
	Memsqls                                    []GetResourceResourceMemsql                                    `pulumi:"memsqls"`
	MongoHosts                                 []GetResourceResourceMongoHost                                 `pulumi:"mongoHosts"`
	MongoLegacyHosts                           []GetResourceResourceMongoLegacyHost                           `pulumi:"mongoLegacyHosts"`
	MongoLegacyReplicasets                     []GetResourceResourceMongoLegacyReplicaset                     `pulumi:"mongoLegacyReplicasets"`
	MongoReplicaSets                           []GetResourceResourceMongoReplicaSet                           `pulumi:"mongoReplicaSets"`
	MongoShardedClusters                       []GetResourceResourceMongoShardedCluster                       `pulumi:"mongoShardedClusters"`
	MtlsMysqls                                 []GetResourceResourceMtlsMysql                                 `pulumi:"mtlsMysqls"`
	MtlsPostgres                               []GetResourceResourceMtlsPostgre                               `pulumi:"mtlsPostgres"`
	Mysqls                                     []GetResourceResourceMysql                                     `pulumi:"mysqls"`
	NeptuneIams                                []GetResourceResourceNeptuneIam                                `pulumi:"neptuneIams"`
	Neptunes                                   []GetResourceResourceNeptune                                   `pulumi:"neptunes"`
	Oracles                                    []GetResourceResourceOracle                                    `pulumi:"oracles"`
	Postgres                                   []GetResourceResourcePostgre                                   `pulumi:"postgres"`
	Prestos                                    []GetResourceResourcePresto                                    `pulumi:"prestos"`
	RabbitmqAmqp091s                           []GetResourceResourceRabbitmqAmqp091                           `pulumi:"rabbitmqAmqp091s"`
	RawTcps                                    []GetResourceResourceRawTcp                                    `pulumi:"rawTcps"`
	RdpCerts                                   []GetResourceResourceRdpCert                                   `pulumi:"rdpCerts"`
	Rdps                                       []GetResourceResourceRdp                                       `pulumi:"rdps"`
	RdsPostgresIams                            []GetResourceResourceRdsPostgresIam                            `pulumi:"rdsPostgresIams"`
	Redis                                      []GetResourceResourceRedi                                      `pulumi:"redis"`
	Redshifts                                  []GetResourceResourceRedshift                                  `pulumi:"redshifts"`
	SingleStores                               []GetResourceResourceSingleStore                               `pulumi:"singleStores"`
	Snowflakes                                 []GetResourceResourceSnowflake                                 `pulumi:"snowflakes"`
	Snowsights                                 []GetResourceResourceSnowsight                                 `pulumi:"snowsights"`
	SqlServerAzureAds                          []GetResourceResourceSqlServerAzureAd                          `pulumi:"sqlServerAzureAds"`
	SqlServerKerberosAds                       []GetResourceResourceSqlServerKerberosAd                       `pulumi:"sqlServerKerberosAds"`
	SqlServers                                 []GetResourceResourceSqlServer                                 `pulumi:"sqlServers"`
	SshCerts                                   []GetResourceResourceSshCert                                   `pulumi:"sshCerts"`
	SshCustomerKeys                            []GetResourceResourceSshCustomerKey                            `pulumi:"sshCustomerKeys"`
	SshPasswords                               []GetResourceResourceSshPassword                               `pulumi:"sshPasswords"`
	Sshes                                      []GetResourceResourceSsh                                       `pulumi:"sshes"`
	SybaseIqs                                  []GetResourceResourceSybaseIq                                  `pulumi:"sybaseIqs"`
	Sybases                                    []GetResourceResourceSybase                                    `pulumi:"sybases"`
	Teradatas                                  []GetResourceResourceTeradata                                  `pulumi:"teradatas"`
	Trinos                                     []GetResourceResourceTrino                                     `pulumi:"trinos"`
}

// GetResourceResourceInput is an input type that accepts GetResourceResourceArgs and GetResourceResourceOutput values.
// You can construct a concrete instance of `GetResourceResourceInput` via:
//
//	GetResourceResourceArgs{...}
type GetResourceResourceInput interface {
	pulumi.Input

	ToGetResourceResourceOutput() GetResourceResourceOutput
	ToGetResourceResourceOutputWithContext(context.Context) GetResourceResourceOutput
}

type GetResourceResourceArgs struct {
	Aks                                        GetResourceResourceAkArrayInput                                        `pulumi:"aks"`
	AksBasicAuths                              GetResourceResourceAksBasicAuthArrayInput                              `pulumi:"aksBasicAuths"`
	AksServiceAccountUserImpersonations        GetResourceResourceAksServiceAccountUserImpersonationArrayInput        `pulumi:"aksServiceAccountUserImpersonations"`
	AksServiceAccounts                         GetResourceResourceAksServiceAccountArrayInput                         `pulumi:"aksServiceAccounts"`
	AksUserImpersonations                      GetResourceResourceAksUserImpersonationArrayInput                      `pulumi:"aksUserImpersonations"`
	AmazonEks                                  GetResourceResourceAmazonEkArrayInput                                  `pulumi:"amazonEks"`
	AmazonEksInstanceProfileUserImpersonations GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayInput `pulumi:"amazonEksInstanceProfileUserImpersonations"`
	AmazonEksInstanceProfiles                  GetResourceResourceAmazonEksInstanceProfileArrayInput                  `pulumi:"amazonEksInstanceProfiles"`
	AmazonEksUserImpersonations                GetResourceResourceAmazonEksUserImpersonationArrayInput                `pulumi:"amazonEksUserImpersonations"`
	AmazonEs                                   GetResourceResourceAmazonEArrayInput                                   `pulumi:"amazonEs"`
	AmazonmqAmqp091s                           GetResourceResourceAmazonmqAmqp091ArrayInput                           `pulumi:"amazonmqAmqp091s"`
	AthenaIams                                 GetResourceResourceAthenaIamArrayInput                                 `pulumi:"athenaIams"`
	Athenas                                    GetResourceResourceAthenaArrayInput                                    `pulumi:"athenas"`
	AuroraMysqlIams                            GetResourceResourceAuroraMysqlIamArrayInput                            `pulumi:"auroraMysqlIams"`
	AuroraMysqls                               GetResourceResourceAuroraMysqlArrayInput                               `pulumi:"auroraMysqls"`
	AuroraPostgres                             GetResourceResourceAuroraPostgreArrayInput                             `pulumi:"auroraPostgres"`
	AuroraPostgresIams                         GetResourceResourceAuroraPostgresIamArrayInput                         `pulumi:"auroraPostgresIams"`
	Aws                                        GetResourceResourceAwArrayInput                                        `pulumi:"aws"`
	AwsConsoleStaticKeyPairs                   GetResourceResourceAwsConsoleStaticKeyPairArrayInput                   `pulumi:"awsConsoleStaticKeyPairs"`
	AwsConsoles                                GetResourceResourceAwsConsoleArrayInput                                `pulumi:"awsConsoles"`
	AwsInstanceProfiles                        GetResourceResourceAwsInstanceProfileArrayInput                        `pulumi:"awsInstanceProfiles"`
	AzureCertificates                          GetResourceResourceAzureCertificateArrayInput                          `pulumi:"azureCertificates"`
	AzureMysqls                                GetResourceResourceAzureMysqlArrayInput                                `pulumi:"azureMysqls"`
	AzurePostgres                              GetResourceResourceAzurePostgreArrayInput                              `pulumi:"azurePostgres"`
	AzurePostgresManagedIdentities             GetResourceResourceAzurePostgresManagedIdentityArrayInput              `pulumi:"azurePostgresManagedIdentities"`
	Azures                                     GetResourceResourceAzureArrayInput                                     `pulumi:"azures"`
	BigQueries                                 GetResourceResourceBigQueryArrayInput                                  `pulumi:"bigQueries"`
	Cassandras                                 GetResourceResourceCassandraArrayInput                                 `pulumi:"cassandras"`
	Cituses                                    GetResourceResourceCitusArrayInput                                     `pulumi:"cituses"`
	ClickHouseHttps                            GetResourceResourceClickHouseHttpArrayInput                            `pulumi:"clickHouseHttps"`
	ClickHouseMySqls                           GetResourceResourceClickHouseMySqlArrayInput                           `pulumi:"clickHouseMySqls"`
	ClickHouseTcps                             GetResourceResourceClickHouseTcpArrayInput                             `pulumi:"clickHouseTcps"`
	Clustrixes                                 GetResourceResourceClustrixArrayInput                                  `pulumi:"clustrixes"`
	Cockroaches                                GetResourceResourceCockroachArrayInput                                 `pulumi:"cockroaches"`
	CouchbaseDatabases                         GetResourceResourceCouchbaseDatabaseArrayInput                         `pulumi:"couchbaseDatabases"`
	CouchbaseWebUis                            GetResourceResourceCouchbaseWebUiArrayInput                            `pulumi:"couchbaseWebUis"`
	Db2Is                                      GetResourceResourceDb2IArrayInput                                      `pulumi:"db2Is"`
	Db2Luws                                    GetResourceResourceDb2LuwArrayInput                                    `pulumi:"db2Luws"`
	DocumentDbHostIams                         GetResourceResourceDocumentDbHostIamArrayInput                         `pulumi:"documentDbHostIams"`
	DocumentDbHosts                            GetResourceResourceDocumentDbHostArrayInput                            `pulumi:"documentDbHosts"`
	DocumentDbReplicaSets                      GetResourceResourceDocumentDbReplicaSetArrayInput                      `pulumi:"documentDbReplicaSets"`
	Druids                                     GetResourceResourceDruidArrayInput                                     `pulumi:"druids"`
	DynamoDbiams                               GetResourceResourceDynamoDbiamArrayInput                               `pulumi:"dynamoDbiams"`
	DynamoDbs                                  GetResourceResourceDynamoDbArrayInput                                  `pulumi:"dynamoDbs"`
	ElasticacheRedis                           GetResourceResourceElasticacheRediArrayInput                           `pulumi:"elasticacheRedis"`
	Elastics                                   GetResourceResourceElasticArrayInput                                   `pulumi:"elastics"`
	GcpConsoles                                GetResourceResourceGcpConsoleArrayInput                                `pulumi:"gcpConsoles"`
	Gcps                                       GetResourceResourceGcpArrayInput                                       `pulumi:"gcps"`
	Gcpwifs                                    GetResourceResourceGcpwifArrayInput                                    `pulumi:"gcpwifs"`
	GoogleGkeUserImpersonations                GetResourceResourceGoogleGkeUserImpersonationArrayInput                `pulumi:"googleGkeUserImpersonations"`
	GoogleGkes                                 GetResourceResourceGoogleGkeArrayInput                                 `pulumi:"googleGkes"`
	Greenplums                                 GetResourceResourceGreenplumArrayInput                                 `pulumi:"greenplums"`
	HttpAuths                                  GetResourceResourceHttpAuthArrayInput                                  `pulumi:"httpAuths"`
	HttpBasicAuths                             GetResourceResourceHttpBasicAuthArrayInput                             `pulumi:"httpBasicAuths"`
	HttpNoAuths                                GetResourceResourceHttpNoAuthArrayInput                                `pulumi:"httpNoAuths"`
	Kubernetes                                 GetResourceResourceKuberneteArrayInput                                 `pulumi:"kubernetes"`
	KubernetesBasicAuths                       GetResourceResourceKubernetesBasicAuthArrayInput                       `pulumi:"kubernetesBasicAuths"`
	KubernetesServiceAccountUserImpersonations GetResourceResourceKubernetesServiceAccountUserImpersonationArrayInput `pulumi:"kubernetesServiceAccountUserImpersonations"`
	KubernetesServiceAccounts                  GetResourceResourceKubernetesServiceAccountArrayInput                  `pulumi:"kubernetesServiceAccounts"`
	KubernetesUserImpersonations               GetResourceResourceKubernetesUserImpersonationArrayInput               `pulumi:"kubernetesUserImpersonations"`
	Marias                                     GetResourceResourceMariaArrayInput                                     `pulumi:"marias"`
	Memcacheds                                 GetResourceResourceMemcachedArrayInput                                 `pulumi:"memcacheds"`
	Memsqls                                    GetResourceResourceMemsqlArrayInput                                    `pulumi:"memsqls"`
	MongoHosts                                 GetResourceResourceMongoHostArrayInput                                 `pulumi:"mongoHosts"`
	MongoLegacyHosts                           GetResourceResourceMongoLegacyHostArrayInput                           `pulumi:"mongoLegacyHosts"`
	MongoLegacyReplicasets                     GetResourceResourceMongoLegacyReplicasetArrayInput                     `pulumi:"mongoLegacyReplicasets"`
	MongoReplicaSets                           GetResourceResourceMongoReplicaSetArrayInput                           `pulumi:"mongoReplicaSets"`
	MongoShardedClusters                       GetResourceResourceMongoShardedClusterArrayInput                       `pulumi:"mongoShardedClusters"`
	MtlsMysqls                                 GetResourceResourceMtlsMysqlArrayInput                                 `pulumi:"mtlsMysqls"`
	MtlsPostgres                               GetResourceResourceMtlsPostgreArrayInput                               `pulumi:"mtlsPostgres"`
	Mysqls                                     GetResourceResourceMysqlArrayInput                                     `pulumi:"mysqls"`
	NeptuneIams                                GetResourceResourceNeptuneIamArrayInput                                `pulumi:"neptuneIams"`
	Neptunes                                   GetResourceResourceNeptuneArrayInput                                   `pulumi:"neptunes"`
	Oracles                                    GetResourceResourceOracleArrayInput                                    `pulumi:"oracles"`
	Postgres                                   GetResourceResourcePostgreArrayInput                                   `pulumi:"postgres"`
	Prestos                                    GetResourceResourcePrestoArrayInput                                    `pulumi:"prestos"`
	RabbitmqAmqp091s                           GetResourceResourceRabbitmqAmqp091ArrayInput                           `pulumi:"rabbitmqAmqp091s"`
	RawTcps                                    GetResourceResourceRawTcpArrayInput                                    `pulumi:"rawTcps"`
	RdpCerts                                   GetResourceResourceRdpCertArrayInput                                   `pulumi:"rdpCerts"`
	Rdps                                       GetResourceResourceRdpArrayInput                                       `pulumi:"rdps"`
	RdsPostgresIams                            GetResourceResourceRdsPostgresIamArrayInput                            `pulumi:"rdsPostgresIams"`
	Redis                                      GetResourceResourceRediArrayInput                                      `pulumi:"redis"`
	Redshifts                                  GetResourceResourceRedshiftArrayInput                                  `pulumi:"redshifts"`
	SingleStores                               GetResourceResourceSingleStoreArrayInput                               `pulumi:"singleStores"`
	Snowflakes                                 GetResourceResourceSnowflakeArrayInput                                 `pulumi:"snowflakes"`
	Snowsights                                 GetResourceResourceSnowsightArrayInput                                 `pulumi:"snowsights"`
	SqlServerAzureAds                          GetResourceResourceSqlServerAzureAdArrayInput                          `pulumi:"sqlServerAzureAds"`
	SqlServerKerberosAds                       GetResourceResourceSqlServerKerberosAdArrayInput                       `pulumi:"sqlServerKerberosAds"`
	SqlServers                                 GetResourceResourceSqlServerArrayInput                                 `pulumi:"sqlServers"`
	SshCerts                                   GetResourceResourceSshCertArrayInput                                   `pulumi:"sshCerts"`
	SshCustomerKeys                            GetResourceResourceSshCustomerKeyArrayInput                            `pulumi:"sshCustomerKeys"`
	SshPasswords                               GetResourceResourceSshPasswordArrayInput                               `pulumi:"sshPasswords"`
	Sshes                                      GetResourceResourceSshArrayInput                                       `pulumi:"sshes"`
	SybaseIqs                                  GetResourceResourceSybaseIqArrayInput                                  `pulumi:"sybaseIqs"`
	Sybases                                    GetResourceResourceSybaseArrayInput                                    `pulumi:"sybases"`
	Teradatas                                  GetResourceResourceTeradataArrayInput                                  `pulumi:"teradatas"`
	Trinos                                     GetResourceResourceTrinoArrayInput                                     `pulumi:"trinos"`
}

func (GetResourceResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResource)(nil)).Elem()
}

func (i GetResourceResourceArgs) ToGetResourceResourceOutput() GetResourceResourceOutput {
	return i.ToGetResourceResourceOutputWithContext(context.Background())
}

func (i GetResourceResourceArgs) ToGetResourceResourceOutputWithContext(ctx context.Context) GetResourceResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceOutput)
}

// GetResourceResourceArrayInput is an input type that accepts GetResourceResourceArray and GetResourceResourceArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceArrayInput` via:
//
//	GetResourceResourceArray{ GetResourceResourceArgs{...} }
type GetResourceResourceArrayInput interface {
	pulumi.Input

	ToGetResourceResourceArrayOutput() GetResourceResourceArrayOutput
	ToGetResourceResourceArrayOutputWithContext(context.Context) GetResourceResourceArrayOutput
}

type GetResourceResourceArray []GetResourceResourceInput

func (GetResourceResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResource)(nil)).Elem()
}

func (i GetResourceResourceArray) ToGetResourceResourceArrayOutput() GetResourceResourceArrayOutput {
	return i.ToGetResourceResourceArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceArray) ToGetResourceResourceArrayOutputWithContext(ctx context.Context) GetResourceResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceArrayOutput)
}

type GetResourceResourceOutput struct{ *pulumi.OutputState }

func (GetResourceResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResource)(nil)).Elem()
}

func (o GetResourceResourceOutput) ToGetResourceResourceOutput() GetResourceResourceOutput {
	return o
}

func (o GetResourceResourceOutput) ToGetResourceResourceOutputWithContext(ctx context.Context) GetResourceResourceOutput {
	return o
}

func (o GetResourceResourceOutput) Aks() GetResourceResourceAkArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAk { return v.Aks }).(GetResourceResourceAkArrayOutput)
}

func (o GetResourceResourceOutput) AksBasicAuths() GetResourceResourceAksBasicAuthArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAksBasicAuth { return v.AksBasicAuths }).(GetResourceResourceAksBasicAuthArrayOutput)
}

func (o GetResourceResourceOutput) AksServiceAccountUserImpersonations() GetResourceResourceAksServiceAccountUserImpersonationArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAksServiceAccountUserImpersonation {
		return v.AksServiceAccountUserImpersonations
	}).(GetResourceResourceAksServiceAccountUserImpersonationArrayOutput)
}

func (o GetResourceResourceOutput) AksServiceAccounts() GetResourceResourceAksServiceAccountArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAksServiceAccount { return v.AksServiceAccounts }).(GetResourceResourceAksServiceAccountArrayOutput)
}

func (o GetResourceResourceOutput) AksUserImpersonations() GetResourceResourceAksUserImpersonationArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAksUserImpersonation { return v.AksUserImpersonations }).(GetResourceResourceAksUserImpersonationArrayOutput)
}

func (o GetResourceResourceOutput) AmazonEks() GetResourceResourceAmazonEkArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAmazonEk { return v.AmazonEks }).(GetResourceResourceAmazonEkArrayOutput)
}

func (o GetResourceResourceOutput) AmazonEksInstanceProfileUserImpersonations() GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAmazonEksInstanceProfileUserImpersonation {
		return v.AmazonEksInstanceProfileUserImpersonations
	}).(GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput)
}

func (o GetResourceResourceOutput) AmazonEksInstanceProfiles() GetResourceResourceAmazonEksInstanceProfileArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAmazonEksInstanceProfile {
		return v.AmazonEksInstanceProfiles
	}).(GetResourceResourceAmazonEksInstanceProfileArrayOutput)
}

func (o GetResourceResourceOutput) AmazonEksUserImpersonations() GetResourceResourceAmazonEksUserImpersonationArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAmazonEksUserImpersonation {
		return v.AmazonEksUserImpersonations
	}).(GetResourceResourceAmazonEksUserImpersonationArrayOutput)
}

func (o GetResourceResourceOutput) AmazonEs() GetResourceResourceAmazonEArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAmazonE { return v.AmazonEs }).(GetResourceResourceAmazonEArrayOutput)
}

func (o GetResourceResourceOutput) AmazonmqAmqp091s() GetResourceResourceAmazonmqAmqp091ArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAmazonmqAmqp091 { return v.AmazonmqAmqp091s }).(GetResourceResourceAmazonmqAmqp091ArrayOutput)
}

func (o GetResourceResourceOutput) AthenaIams() GetResourceResourceAthenaIamArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAthenaIam { return v.AthenaIams }).(GetResourceResourceAthenaIamArrayOutput)
}

func (o GetResourceResourceOutput) Athenas() GetResourceResourceAthenaArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAthena { return v.Athenas }).(GetResourceResourceAthenaArrayOutput)
}

func (o GetResourceResourceOutput) AuroraMysqlIams() GetResourceResourceAuroraMysqlIamArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAuroraMysqlIam { return v.AuroraMysqlIams }).(GetResourceResourceAuroraMysqlIamArrayOutput)
}

func (o GetResourceResourceOutput) AuroraMysqls() GetResourceResourceAuroraMysqlArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAuroraMysql { return v.AuroraMysqls }).(GetResourceResourceAuroraMysqlArrayOutput)
}

func (o GetResourceResourceOutput) AuroraPostgres() GetResourceResourceAuroraPostgreArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAuroraPostgre { return v.AuroraPostgres }).(GetResourceResourceAuroraPostgreArrayOutput)
}

func (o GetResourceResourceOutput) AuroraPostgresIams() GetResourceResourceAuroraPostgresIamArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAuroraPostgresIam { return v.AuroraPostgresIams }).(GetResourceResourceAuroraPostgresIamArrayOutput)
}

func (o GetResourceResourceOutput) Aws() GetResourceResourceAwArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAw { return v.Aws }).(GetResourceResourceAwArrayOutput)
}

func (o GetResourceResourceOutput) AwsConsoleStaticKeyPairs() GetResourceResourceAwsConsoleStaticKeyPairArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAwsConsoleStaticKeyPair {
		return v.AwsConsoleStaticKeyPairs
	}).(GetResourceResourceAwsConsoleStaticKeyPairArrayOutput)
}

func (o GetResourceResourceOutput) AwsConsoles() GetResourceResourceAwsConsoleArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAwsConsole { return v.AwsConsoles }).(GetResourceResourceAwsConsoleArrayOutput)
}

func (o GetResourceResourceOutput) AwsInstanceProfiles() GetResourceResourceAwsInstanceProfileArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAwsInstanceProfile { return v.AwsInstanceProfiles }).(GetResourceResourceAwsInstanceProfileArrayOutput)
}

func (o GetResourceResourceOutput) AzureCertificates() GetResourceResourceAzureCertificateArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAzureCertificate { return v.AzureCertificates }).(GetResourceResourceAzureCertificateArrayOutput)
}

func (o GetResourceResourceOutput) AzureMysqls() GetResourceResourceAzureMysqlArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAzureMysql { return v.AzureMysqls }).(GetResourceResourceAzureMysqlArrayOutput)
}

func (o GetResourceResourceOutput) AzurePostgres() GetResourceResourceAzurePostgreArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAzurePostgre { return v.AzurePostgres }).(GetResourceResourceAzurePostgreArrayOutput)
}

func (o GetResourceResourceOutput) AzurePostgresManagedIdentities() GetResourceResourceAzurePostgresManagedIdentityArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAzurePostgresManagedIdentity {
		return v.AzurePostgresManagedIdentities
	}).(GetResourceResourceAzurePostgresManagedIdentityArrayOutput)
}

func (o GetResourceResourceOutput) Azures() GetResourceResourceAzureArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceAzure { return v.Azures }).(GetResourceResourceAzureArrayOutput)
}

func (o GetResourceResourceOutput) BigQueries() GetResourceResourceBigQueryArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceBigQuery { return v.BigQueries }).(GetResourceResourceBigQueryArrayOutput)
}

func (o GetResourceResourceOutput) Cassandras() GetResourceResourceCassandraArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceCassandra { return v.Cassandras }).(GetResourceResourceCassandraArrayOutput)
}

func (o GetResourceResourceOutput) Cituses() GetResourceResourceCitusArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceCitus { return v.Cituses }).(GetResourceResourceCitusArrayOutput)
}

func (o GetResourceResourceOutput) ClickHouseHttps() GetResourceResourceClickHouseHttpArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceClickHouseHttp { return v.ClickHouseHttps }).(GetResourceResourceClickHouseHttpArrayOutput)
}

func (o GetResourceResourceOutput) ClickHouseMySqls() GetResourceResourceClickHouseMySqlArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceClickHouseMySql { return v.ClickHouseMySqls }).(GetResourceResourceClickHouseMySqlArrayOutput)
}

func (o GetResourceResourceOutput) ClickHouseTcps() GetResourceResourceClickHouseTcpArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceClickHouseTcp { return v.ClickHouseTcps }).(GetResourceResourceClickHouseTcpArrayOutput)
}

func (o GetResourceResourceOutput) Clustrixes() GetResourceResourceClustrixArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceClustrix { return v.Clustrixes }).(GetResourceResourceClustrixArrayOutput)
}

func (o GetResourceResourceOutput) Cockroaches() GetResourceResourceCockroachArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceCockroach { return v.Cockroaches }).(GetResourceResourceCockroachArrayOutput)
}

func (o GetResourceResourceOutput) CouchbaseDatabases() GetResourceResourceCouchbaseDatabaseArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceCouchbaseDatabase { return v.CouchbaseDatabases }).(GetResourceResourceCouchbaseDatabaseArrayOutput)
}

func (o GetResourceResourceOutput) CouchbaseWebUis() GetResourceResourceCouchbaseWebUiArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceCouchbaseWebUi { return v.CouchbaseWebUis }).(GetResourceResourceCouchbaseWebUiArrayOutput)
}

func (o GetResourceResourceOutput) Db2Is() GetResourceResourceDb2IArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceDb2I { return v.Db2Is }).(GetResourceResourceDb2IArrayOutput)
}

func (o GetResourceResourceOutput) Db2Luws() GetResourceResourceDb2LuwArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceDb2Luw { return v.Db2Luws }).(GetResourceResourceDb2LuwArrayOutput)
}

func (o GetResourceResourceOutput) DocumentDbHostIams() GetResourceResourceDocumentDbHostIamArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceDocumentDbHostIam { return v.DocumentDbHostIams }).(GetResourceResourceDocumentDbHostIamArrayOutput)
}

func (o GetResourceResourceOutput) DocumentDbHosts() GetResourceResourceDocumentDbHostArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceDocumentDbHost { return v.DocumentDbHosts }).(GetResourceResourceDocumentDbHostArrayOutput)
}

func (o GetResourceResourceOutput) DocumentDbReplicaSets() GetResourceResourceDocumentDbReplicaSetArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceDocumentDbReplicaSet { return v.DocumentDbReplicaSets }).(GetResourceResourceDocumentDbReplicaSetArrayOutput)
}

func (o GetResourceResourceOutput) Druids() GetResourceResourceDruidArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceDruid { return v.Druids }).(GetResourceResourceDruidArrayOutput)
}

func (o GetResourceResourceOutput) DynamoDbiams() GetResourceResourceDynamoDbiamArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceDynamoDbiam { return v.DynamoDbiams }).(GetResourceResourceDynamoDbiamArrayOutput)
}

func (o GetResourceResourceOutput) DynamoDbs() GetResourceResourceDynamoDbArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceDynamoDb { return v.DynamoDbs }).(GetResourceResourceDynamoDbArrayOutput)
}

func (o GetResourceResourceOutput) ElasticacheRedis() GetResourceResourceElasticacheRediArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceElasticacheRedi { return v.ElasticacheRedis }).(GetResourceResourceElasticacheRediArrayOutput)
}

func (o GetResourceResourceOutput) Elastics() GetResourceResourceElasticArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceElastic { return v.Elastics }).(GetResourceResourceElasticArrayOutput)
}

func (o GetResourceResourceOutput) GcpConsoles() GetResourceResourceGcpConsoleArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceGcpConsole { return v.GcpConsoles }).(GetResourceResourceGcpConsoleArrayOutput)
}

func (o GetResourceResourceOutput) Gcps() GetResourceResourceGcpArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceGcp { return v.Gcps }).(GetResourceResourceGcpArrayOutput)
}

func (o GetResourceResourceOutput) Gcpwifs() GetResourceResourceGcpwifArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceGcpwif { return v.Gcpwifs }).(GetResourceResourceGcpwifArrayOutput)
}

func (o GetResourceResourceOutput) GoogleGkeUserImpersonations() GetResourceResourceGoogleGkeUserImpersonationArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceGoogleGkeUserImpersonation {
		return v.GoogleGkeUserImpersonations
	}).(GetResourceResourceGoogleGkeUserImpersonationArrayOutput)
}

func (o GetResourceResourceOutput) GoogleGkes() GetResourceResourceGoogleGkeArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceGoogleGke { return v.GoogleGkes }).(GetResourceResourceGoogleGkeArrayOutput)
}

func (o GetResourceResourceOutput) Greenplums() GetResourceResourceGreenplumArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceGreenplum { return v.Greenplums }).(GetResourceResourceGreenplumArrayOutput)
}

func (o GetResourceResourceOutput) HttpAuths() GetResourceResourceHttpAuthArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceHttpAuth { return v.HttpAuths }).(GetResourceResourceHttpAuthArrayOutput)
}

func (o GetResourceResourceOutput) HttpBasicAuths() GetResourceResourceHttpBasicAuthArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceHttpBasicAuth { return v.HttpBasicAuths }).(GetResourceResourceHttpBasicAuthArrayOutput)
}

func (o GetResourceResourceOutput) HttpNoAuths() GetResourceResourceHttpNoAuthArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceHttpNoAuth { return v.HttpNoAuths }).(GetResourceResourceHttpNoAuthArrayOutput)
}

func (o GetResourceResourceOutput) Kubernetes() GetResourceResourceKuberneteArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceKubernete { return v.Kubernetes }).(GetResourceResourceKuberneteArrayOutput)
}

func (o GetResourceResourceOutput) KubernetesBasicAuths() GetResourceResourceKubernetesBasicAuthArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceKubernetesBasicAuth { return v.KubernetesBasicAuths }).(GetResourceResourceKubernetesBasicAuthArrayOutput)
}

func (o GetResourceResourceOutput) KubernetesServiceAccountUserImpersonations() GetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceKubernetesServiceAccountUserImpersonation {
		return v.KubernetesServiceAccountUserImpersonations
	}).(GetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput)
}

func (o GetResourceResourceOutput) KubernetesServiceAccounts() GetResourceResourceKubernetesServiceAccountArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceKubernetesServiceAccount {
		return v.KubernetesServiceAccounts
	}).(GetResourceResourceKubernetesServiceAccountArrayOutput)
}

func (o GetResourceResourceOutput) KubernetesUserImpersonations() GetResourceResourceKubernetesUserImpersonationArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceKubernetesUserImpersonation {
		return v.KubernetesUserImpersonations
	}).(GetResourceResourceKubernetesUserImpersonationArrayOutput)
}

func (o GetResourceResourceOutput) Marias() GetResourceResourceMariaArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceMaria { return v.Marias }).(GetResourceResourceMariaArrayOutput)
}

func (o GetResourceResourceOutput) Memcacheds() GetResourceResourceMemcachedArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceMemcached { return v.Memcacheds }).(GetResourceResourceMemcachedArrayOutput)
}

func (o GetResourceResourceOutput) Memsqls() GetResourceResourceMemsqlArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceMemsql { return v.Memsqls }).(GetResourceResourceMemsqlArrayOutput)
}

func (o GetResourceResourceOutput) MongoHosts() GetResourceResourceMongoHostArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceMongoHost { return v.MongoHosts }).(GetResourceResourceMongoHostArrayOutput)
}

func (o GetResourceResourceOutput) MongoLegacyHosts() GetResourceResourceMongoLegacyHostArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceMongoLegacyHost { return v.MongoLegacyHosts }).(GetResourceResourceMongoLegacyHostArrayOutput)
}

func (o GetResourceResourceOutput) MongoLegacyReplicasets() GetResourceResourceMongoLegacyReplicasetArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceMongoLegacyReplicaset {
		return v.MongoLegacyReplicasets
	}).(GetResourceResourceMongoLegacyReplicasetArrayOutput)
}

func (o GetResourceResourceOutput) MongoReplicaSets() GetResourceResourceMongoReplicaSetArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceMongoReplicaSet { return v.MongoReplicaSets }).(GetResourceResourceMongoReplicaSetArrayOutput)
}

func (o GetResourceResourceOutput) MongoShardedClusters() GetResourceResourceMongoShardedClusterArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceMongoShardedCluster { return v.MongoShardedClusters }).(GetResourceResourceMongoShardedClusterArrayOutput)
}

func (o GetResourceResourceOutput) MtlsMysqls() GetResourceResourceMtlsMysqlArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceMtlsMysql { return v.MtlsMysqls }).(GetResourceResourceMtlsMysqlArrayOutput)
}

func (o GetResourceResourceOutput) MtlsPostgres() GetResourceResourceMtlsPostgreArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceMtlsPostgre { return v.MtlsPostgres }).(GetResourceResourceMtlsPostgreArrayOutput)
}

func (o GetResourceResourceOutput) Mysqls() GetResourceResourceMysqlArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceMysql { return v.Mysqls }).(GetResourceResourceMysqlArrayOutput)
}

func (o GetResourceResourceOutput) NeptuneIams() GetResourceResourceNeptuneIamArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceNeptuneIam { return v.NeptuneIams }).(GetResourceResourceNeptuneIamArrayOutput)
}

func (o GetResourceResourceOutput) Neptunes() GetResourceResourceNeptuneArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceNeptune { return v.Neptunes }).(GetResourceResourceNeptuneArrayOutput)
}

func (o GetResourceResourceOutput) Oracles() GetResourceResourceOracleArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceOracle { return v.Oracles }).(GetResourceResourceOracleArrayOutput)
}

func (o GetResourceResourceOutput) Postgres() GetResourceResourcePostgreArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourcePostgre { return v.Postgres }).(GetResourceResourcePostgreArrayOutput)
}

func (o GetResourceResourceOutput) Prestos() GetResourceResourcePrestoArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourcePresto { return v.Prestos }).(GetResourceResourcePrestoArrayOutput)
}

func (o GetResourceResourceOutput) RabbitmqAmqp091s() GetResourceResourceRabbitmqAmqp091ArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceRabbitmqAmqp091 { return v.RabbitmqAmqp091s }).(GetResourceResourceRabbitmqAmqp091ArrayOutput)
}

func (o GetResourceResourceOutput) RawTcps() GetResourceResourceRawTcpArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceRawTcp { return v.RawTcps }).(GetResourceResourceRawTcpArrayOutput)
}

func (o GetResourceResourceOutput) RdpCerts() GetResourceResourceRdpCertArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceRdpCert { return v.RdpCerts }).(GetResourceResourceRdpCertArrayOutput)
}

func (o GetResourceResourceOutput) Rdps() GetResourceResourceRdpArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceRdp { return v.Rdps }).(GetResourceResourceRdpArrayOutput)
}

func (o GetResourceResourceOutput) RdsPostgresIams() GetResourceResourceRdsPostgresIamArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceRdsPostgresIam { return v.RdsPostgresIams }).(GetResourceResourceRdsPostgresIamArrayOutput)
}

func (o GetResourceResourceOutput) Redis() GetResourceResourceRediArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceRedi { return v.Redis }).(GetResourceResourceRediArrayOutput)
}

func (o GetResourceResourceOutput) Redshifts() GetResourceResourceRedshiftArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceRedshift { return v.Redshifts }).(GetResourceResourceRedshiftArrayOutput)
}

func (o GetResourceResourceOutput) SingleStores() GetResourceResourceSingleStoreArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceSingleStore { return v.SingleStores }).(GetResourceResourceSingleStoreArrayOutput)
}

func (o GetResourceResourceOutput) Snowflakes() GetResourceResourceSnowflakeArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceSnowflake { return v.Snowflakes }).(GetResourceResourceSnowflakeArrayOutput)
}

func (o GetResourceResourceOutput) Snowsights() GetResourceResourceSnowsightArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceSnowsight { return v.Snowsights }).(GetResourceResourceSnowsightArrayOutput)
}

func (o GetResourceResourceOutput) SqlServerAzureAds() GetResourceResourceSqlServerAzureAdArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceSqlServerAzureAd { return v.SqlServerAzureAds }).(GetResourceResourceSqlServerAzureAdArrayOutput)
}

func (o GetResourceResourceOutput) SqlServerKerberosAds() GetResourceResourceSqlServerKerberosAdArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceSqlServerKerberosAd { return v.SqlServerKerberosAds }).(GetResourceResourceSqlServerKerberosAdArrayOutput)
}

func (o GetResourceResourceOutput) SqlServers() GetResourceResourceSqlServerArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceSqlServer { return v.SqlServers }).(GetResourceResourceSqlServerArrayOutput)
}

func (o GetResourceResourceOutput) SshCerts() GetResourceResourceSshCertArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceSshCert { return v.SshCerts }).(GetResourceResourceSshCertArrayOutput)
}

func (o GetResourceResourceOutput) SshCustomerKeys() GetResourceResourceSshCustomerKeyArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceSshCustomerKey { return v.SshCustomerKeys }).(GetResourceResourceSshCustomerKeyArrayOutput)
}

func (o GetResourceResourceOutput) SshPasswords() GetResourceResourceSshPasswordArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceSshPassword { return v.SshPasswords }).(GetResourceResourceSshPasswordArrayOutput)
}

func (o GetResourceResourceOutput) Sshes() GetResourceResourceSshArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceSsh { return v.Sshes }).(GetResourceResourceSshArrayOutput)
}

func (o GetResourceResourceOutput) SybaseIqs() GetResourceResourceSybaseIqArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceSybaseIq { return v.SybaseIqs }).(GetResourceResourceSybaseIqArrayOutput)
}

func (o GetResourceResourceOutput) Sybases() GetResourceResourceSybaseArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceSybase { return v.Sybases }).(GetResourceResourceSybaseArrayOutput)
}

func (o GetResourceResourceOutput) Teradatas() GetResourceResourceTeradataArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceTeradata { return v.Teradatas }).(GetResourceResourceTeradataArrayOutput)
}

func (o GetResourceResourceOutput) Trinos() GetResourceResourceTrinoArrayOutput {
	return o.ApplyT(func(v GetResourceResource) []GetResourceResourceTrino { return v.Trinos }).(GetResourceResourceTrinoArrayOutput)
}

type GetResourceResourceArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResource)(nil)).Elem()
}

func (o GetResourceResourceArrayOutput) ToGetResourceResourceArrayOutput() GetResourceResourceArrayOutput {
	return o
}

func (o GetResourceResourceArrayOutput) ToGetResourceResourceArrayOutputWithContext(ctx context.Context) GetResourceResourceArrayOutput {
	return o
}

func (o GetResourceResourceArrayOutput) Index(i pulumi.IntInput) GetResourceResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResource {
		return vs[0].([]GetResourceResource)[vs[1].(int)]
	}).(GetResourceResourceOutput)
}

type GetResourceResourceAk struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass *bool `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey *string `pulumi:"clientKey"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled *bool `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername *string `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceAkInput is an input type that accepts GetResourceResourceAkArgs and GetResourceResourceAkOutput values.
// You can construct a concrete instance of `GetResourceResourceAkInput` via:
//
//	GetResourceResourceAkArgs{...}
type GetResourceResourceAkInput interface {
	pulumi.Input

	ToGetResourceResourceAkOutput() GetResourceResourceAkOutput
	ToGetResourceResourceAkOutputWithContext(context.Context) GetResourceResourceAkOutput
}

type GetResourceResourceAkArgs struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass pulumi.BoolPtrInput `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled pulumi.BoolPtrInput `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername pulumi.StringPtrInput `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceAkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAk)(nil)).Elem()
}

func (i GetResourceResourceAkArgs) ToGetResourceResourceAkOutput() GetResourceResourceAkOutput {
	return i.ToGetResourceResourceAkOutputWithContext(context.Background())
}

func (i GetResourceResourceAkArgs) ToGetResourceResourceAkOutputWithContext(ctx context.Context) GetResourceResourceAkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAkOutput)
}

// GetResourceResourceAkArrayInput is an input type that accepts GetResourceResourceAkArray and GetResourceResourceAkArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAkArrayInput` via:
//
//	GetResourceResourceAkArray{ GetResourceResourceAkArgs{...} }
type GetResourceResourceAkArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAkArrayOutput() GetResourceResourceAkArrayOutput
	ToGetResourceResourceAkArrayOutputWithContext(context.Context) GetResourceResourceAkArrayOutput
}

type GetResourceResourceAkArray []GetResourceResourceAkInput

func (GetResourceResourceAkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAk)(nil)).Elem()
}

func (i GetResourceResourceAkArray) ToGetResourceResourceAkArrayOutput() GetResourceResourceAkArrayOutput {
	return i.ToGetResourceResourceAkArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAkArray) ToGetResourceResourceAkArrayOutputWithContext(ctx context.Context) GetResourceResourceAkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAkArrayOutput)
}

type GetResourceResourceAkOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAk)(nil)).Elem()
}

func (o GetResourceResourceAkOutput) ToGetResourceResourceAkOutput() GetResourceResourceAkOutput {
	return o
}

func (o GetResourceResourceAkOutput) ToGetResourceResourceAkOutputWithContext(ctx context.Context) GetResourceResourceAkOutput {
	return o
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o GetResourceResourceAkOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *bool { return v.AllowResourceRoleBypass }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAkOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o GetResourceResourceAkOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o GetResourceResourceAkOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o GetResourceResourceAkOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o GetResourceResourceAkOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *bool { return v.DiscoveryEnabled }).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o GetResourceResourceAkOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *string { return v.DiscoveryUsername }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAkOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o GetResourceResourceAkOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAkOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAkOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o GetResourceResourceAkOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o GetResourceResourceAkOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAkOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAkOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAkOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAkOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAkOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAkOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAk) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAkOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAk) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceAkArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAk)(nil)).Elem()
}

func (o GetResourceResourceAkArrayOutput) ToGetResourceResourceAkArrayOutput() GetResourceResourceAkArrayOutput {
	return o
}

func (o GetResourceResourceAkArrayOutput) ToGetResourceResourceAkArrayOutputWithContext(ctx context.Context) GetResourceResourceAkArrayOutput {
	return o
}

func (o GetResourceResourceAkArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAk {
		return vs[0].([]GetResourceResourceAk)[vs[1].(int)]
	}).(GetResourceResourceAkOutput)
}

type GetResourceResourceAksBasicAuth struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceAksBasicAuthInput is an input type that accepts GetResourceResourceAksBasicAuthArgs and GetResourceResourceAksBasicAuthOutput values.
// You can construct a concrete instance of `GetResourceResourceAksBasicAuthInput` via:
//
//	GetResourceResourceAksBasicAuthArgs{...}
type GetResourceResourceAksBasicAuthInput interface {
	pulumi.Input

	ToGetResourceResourceAksBasicAuthOutput() GetResourceResourceAksBasicAuthOutput
	ToGetResourceResourceAksBasicAuthOutputWithContext(context.Context) GetResourceResourceAksBasicAuthOutput
}

type GetResourceResourceAksBasicAuthArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceAksBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAksBasicAuth)(nil)).Elem()
}

func (i GetResourceResourceAksBasicAuthArgs) ToGetResourceResourceAksBasicAuthOutput() GetResourceResourceAksBasicAuthOutput {
	return i.ToGetResourceResourceAksBasicAuthOutputWithContext(context.Background())
}

func (i GetResourceResourceAksBasicAuthArgs) ToGetResourceResourceAksBasicAuthOutputWithContext(ctx context.Context) GetResourceResourceAksBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAksBasicAuthOutput)
}

// GetResourceResourceAksBasicAuthArrayInput is an input type that accepts GetResourceResourceAksBasicAuthArray and GetResourceResourceAksBasicAuthArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAksBasicAuthArrayInput` via:
//
//	GetResourceResourceAksBasicAuthArray{ GetResourceResourceAksBasicAuthArgs{...} }
type GetResourceResourceAksBasicAuthArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAksBasicAuthArrayOutput() GetResourceResourceAksBasicAuthArrayOutput
	ToGetResourceResourceAksBasicAuthArrayOutputWithContext(context.Context) GetResourceResourceAksBasicAuthArrayOutput
}

type GetResourceResourceAksBasicAuthArray []GetResourceResourceAksBasicAuthInput

func (GetResourceResourceAksBasicAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAksBasicAuth)(nil)).Elem()
}

func (i GetResourceResourceAksBasicAuthArray) ToGetResourceResourceAksBasicAuthArrayOutput() GetResourceResourceAksBasicAuthArrayOutput {
	return i.ToGetResourceResourceAksBasicAuthArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAksBasicAuthArray) ToGetResourceResourceAksBasicAuthArrayOutputWithContext(ctx context.Context) GetResourceResourceAksBasicAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAksBasicAuthArrayOutput)
}

type GetResourceResourceAksBasicAuthOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAksBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAksBasicAuth)(nil)).Elem()
}

func (o GetResourceResourceAksBasicAuthOutput) ToGetResourceResourceAksBasicAuthOutput() GetResourceResourceAksBasicAuthOutput {
	return o
}

func (o GetResourceResourceAksBasicAuthOutput) ToGetResourceResourceAksBasicAuthOutputWithContext(ctx context.Context) GetResourceResourceAksBasicAuthOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAksBasicAuthOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksBasicAuth) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAksBasicAuthOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksBasicAuth) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o GetResourceResourceAksBasicAuthOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksBasicAuth) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAksBasicAuthOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksBasicAuth) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAksBasicAuthOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksBasicAuth) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAksBasicAuthOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksBasicAuth) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceAksBasicAuthOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksBasicAuth) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAksBasicAuthOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksBasicAuth) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAksBasicAuthOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksBasicAuth) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAksBasicAuthOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksBasicAuth) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAksBasicAuthOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksBasicAuth) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAksBasicAuthOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksBasicAuth) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAksBasicAuthOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAksBasicAuth) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceAksBasicAuthOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksBasicAuth) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceAksBasicAuthArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAksBasicAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAksBasicAuth)(nil)).Elem()
}

func (o GetResourceResourceAksBasicAuthArrayOutput) ToGetResourceResourceAksBasicAuthArrayOutput() GetResourceResourceAksBasicAuthArrayOutput {
	return o
}

func (o GetResourceResourceAksBasicAuthArrayOutput) ToGetResourceResourceAksBasicAuthArrayOutputWithContext(ctx context.Context) GetResourceResourceAksBasicAuthArrayOutput {
	return o
}

func (o GetResourceResourceAksBasicAuthArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAksBasicAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAksBasicAuth {
		return vs[0].([]GetResourceResourceAksBasicAuth)[vs[1].(int)]
	}).(GetResourceResourceAksBasicAuthOutput)
}

type GetResourceResourceAksServiceAccount struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass *bool `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled *bool `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername *string `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The API token to authenticate with.
	// * kubernetes_user_impersonation:
	Token *string `pulumi:"token"`
}

// GetResourceResourceAksServiceAccountInput is an input type that accepts GetResourceResourceAksServiceAccountArgs and GetResourceResourceAksServiceAccountOutput values.
// You can construct a concrete instance of `GetResourceResourceAksServiceAccountInput` via:
//
//	GetResourceResourceAksServiceAccountArgs{...}
type GetResourceResourceAksServiceAccountInput interface {
	pulumi.Input

	ToGetResourceResourceAksServiceAccountOutput() GetResourceResourceAksServiceAccountOutput
	ToGetResourceResourceAksServiceAccountOutputWithContext(context.Context) GetResourceResourceAksServiceAccountOutput
}

type GetResourceResourceAksServiceAccountArgs struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass pulumi.BoolPtrInput `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled pulumi.BoolPtrInput `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername pulumi.StringPtrInput `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The API token to authenticate with.
	// * kubernetes_user_impersonation:
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (GetResourceResourceAksServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAksServiceAccount)(nil)).Elem()
}

func (i GetResourceResourceAksServiceAccountArgs) ToGetResourceResourceAksServiceAccountOutput() GetResourceResourceAksServiceAccountOutput {
	return i.ToGetResourceResourceAksServiceAccountOutputWithContext(context.Background())
}

func (i GetResourceResourceAksServiceAccountArgs) ToGetResourceResourceAksServiceAccountOutputWithContext(ctx context.Context) GetResourceResourceAksServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAksServiceAccountOutput)
}

// GetResourceResourceAksServiceAccountArrayInput is an input type that accepts GetResourceResourceAksServiceAccountArray and GetResourceResourceAksServiceAccountArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAksServiceAccountArrayInput` via:
//
//	GetResourceResourceAksServiceAccountArray{ GetResourceResourceAksServiceAccountArgs{...} }
type GetResourceResourceAksServiceAccountArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAksServiceAccountArrayOutput() GetResourceResourceAksServiceAccountArrayOutput
	ToGetResourceResourceAksServiceAccountArrayOutputWithContext(context.Context) GetResourceResourceAksServiceAccountArrayOutput
}

type GetResourceResourceAksServiceAccountArray []GetResourceResourceAksServiceAccountInput

func (GetResourceResourceAksServiceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAksServiceAccount)(nil)).Elem()
}

func (i GetResourceResourceAksServiceAccountArray) ToGetResourceResourceAksServiceAccountArrayOutput() GetResourceResourceAksServiceAccountArrayOutput {
	return i.ToGetResourceResourceAksServiceAccountArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAksServiceAccountArray) ToGetResourceResourceAksServiceAccountArrayOutputWithContext(ctx context.Context) GetResourceResourceAksServiceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAksServiceAccountArrayOutput)
}

type GetResourceResourceAksServiceAccountOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAksServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAksServiceAccount)(nil)).Elem()
}

func (o GetResourceResourceAksServiceAccountOutput) ToGetResourceResourceAksServiceAccountOutput() GetResourceResourceAksServiceAccountOutput {
	return o
}

func (o GetResourceResourceAksServiceAccountOutput) ToGetResourceResourceAksServiceAccountOutputWithContext(ctx context.Context) GetResourceResourceAksServiceAccountOutput {
	return o
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o GetResourceResourceAksServiceAccountOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) *bool { return v.AllowResourceRoleBypass }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAksServiceAccountOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o GetResourceResourceAksServiceAccountOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) *bool { return v.DiscoveryEnabled }).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o GetResourceResourceAksServiceAccountOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) *string { return v.DiscoveryUsername }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAksServiceAccountOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o GetResourceResourceAksServiceAccountOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAksServiceAccountOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAksServiceAccountOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o GetResourceResourceAksServiceAccountOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o GetResourceResourceAksServiceAccountOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAksServiceAccountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAksServiceAccountOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAksServiceAccountOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAksServiceAccountOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAksServiceAccountOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAksServiceAccountOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAksServiceAccountOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The API token to authenticate with.
// * kubernetes_user_impersonation:
func (o GetResourceResourceAksServiceAccountOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccount) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type GetResourceResourceAksServiceAccountArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAksServiceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAksServiceAccount)(nil)).Elem()
}

func (o GetResourceResourceAksServiceAccountArrayOutput) ToGetResourceResourceAksServiceAccountArrayOutput() GetResourceResourceAksServiceAccountArrayOutput {
	return o
}

func (o GetResourceResourceAksServiceAccountArrayOutput) ToGetResourceResourceAksServiceAccountArrayOutputWithContext(ctx context.Context) GetResourceResourceAksServiceAccountArrayOutput {
	return o
}

func (o GetResourceResourceAksServiceAccountArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAksServiceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAksServiceAccount {
		return vs[0].([]GetResourceResourceAksServiceAccount)[vs[1].(int)]
	}).(GetResourceResourceAksServiceAccountOutput)
}

type GetResourceResourceAksServiceAccountUserImpersonation struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The API token to authenticate with.
	// * kubernetes_user_impersonation:
	Token *string `pulumi:"token"`
}

// GetResourceResourceAksServiceAccountUserImpersonationInput is an input type that accepts GetResourceResourceAksServiceAccountUserImpersonationArgs and GetResourceResourceAksServiceAccountUserImpersonationOutput values.
// You can construct a concrete instance of `GetResourceResourceAksServiceAccountUserImpersonationInput` via:
//
//	GetResourceResourceAksServiceAccountUserImpersonationArgs{...}
type GetResourceResourceAksServiceAccountUserImpersonationInput interface {
	pulumi.Input

	ToGetResourceResourceAksServiceAccountUserImpersonationOutput() GetResourceResourceAksServiceAccountUserImpersonationOutput
	ToGetResourceResourceAksServiceAccountUserImpersonationOutputWithContext(context.Context) GetResourceResourceAksServiceAccountUserImpersonationOutput
}

type GetResourceResourceAksServiceAccountUserImpersonationArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The API token to authenticate with.
	// * kubernetes_user_impersonation:
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (GetResourceResourceAksServiceAccountUserImpersonationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAksServiceAccountUserImpersonation)(nil)).Elem()
}

func (i GetResourceResourceAksServiceAccountUserImpersonationArgs) ToGetResourceResourceAksServiceAccountUserImpersonationOutput() GetResourceResourceAksServiceAccountUserImpersonationOutput {
	return i.ToGetResourceResourceAksServiceAccountUserImpersonationOutputWithContext(context.Background())
}

func (i GetResourceResourceAksServiceAccountUserImpersonationArgs) ToGetResourceResourceAksServiceAccountUserImpersonationOutputWithContext(ctx context.Context) GetResourceResourceAksServiceAccountUserImpersonationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAksServiceAccountUserImpersonationOutput)
}

// GetResourceResourceAksServiceAccountUserImpersonationArrayInput is an input type that accepts GetResourceResourceAksServiceAccountUserImpersonationArray and GetResourceResourceAksServiceAccountUserImpersonationArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAksServiceAccountUserImpersonationArrayInput` via:
//
//	GetResourceResourceAksServiceAccountUserImpersonationArray{ GetResourceResourceAksServiceAccountUserImpersonationArgs{...} }
type GetResourceResourceAksServiceAccountUserImpersonationArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAksServiceAccountUserImpersonationArrayOutput() GetResourceResourceAksServiceAccountUserImpersonationArrayOutput
	ToGetResourceResourceAksServiceAccountUserImpersonationArrayOutputWithContext(context.Context) GetResourceResourceAksServiceAccountUserImpersonationArrayOutput
}

type GetResourceResourceAksServiceAccountUserImpersonationArray []GetResourceResourceAksServiceAccountUserImpersonationInput

func (GetResourceResourceAksServiceAccountUserImpersonationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAksServiceAccountUserImpersonation)(nil)).Elem()
}

func (i GetResourceResourceAksServiceAccountUserImpersonationArray) ToGetResourceResourceAksServiceAccountUserImpersonationArrayOutput() GetResourceResourceAksServiceAccountUserImpersonationArrayOutput {
	return i.ToGetResourceResourceAksServiceAccountUserImpersonationArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAksServiceAccountUserImpersonationArray) ToGetResourceResourceAksServiceAccountUserImpersonationArrayOutputWithContext(ctx context.Context) GetResourceResourceAksServiceAccountUserImpersonationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAksServiceAccountUserImpersonationArrayOutput)
}

type GetResourceResourceAksServiceAccountUserImpersonationOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAksServiceAccountUserImpersonationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAksServiceAccountUserImpersonation)(nil)).Elem()
}

func (o GetResourceResourceAksServiceAccountUserImpersonationOutput) ToGetResourceResourceAksServiceAccountUserImpersonationOutput() GetResourceResourceAksServiceAccountUserImpersonationOutput {
	return o
}

func (o GetResourceResourceAksServiceAccountUserImpersonationOutput) ToGetResourceResourceAksServiceAccountUserImpersonationOutputWithContext(ctx context.Context) GetResourceResourceAksServiceAccountUserImpersonationOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAksServiceAccountUserImpersonationOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccountUserImpersonation) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAksServiceAccountUserImpersonationOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccountUserImpersonation) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o GetResourceResourceAksServiceAccountUserImpersonationOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccountUserImpersonation) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAksServiceAccountUserImpersonationOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccountUserImpersonation) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAksServiceAccountUserImpersonationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccountUserImpersonation) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAksServiceAccountUserImpersonationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccountUserImpersonation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAksServiceAccountUserImpersonationOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccountUserImpersonation) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAksServiceAccountUserImpersonationOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccountUserImpersonation) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAksServiceAccountUserImpersonationOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccountUserImpersonation) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAksServiceAccountUserImpersonationOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccountUserImpersonation) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAksServiceAccountUserImpersonationOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccountUserImpersonation) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAksServiceAccountUserImpersonationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccountUserImpersonation) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The API token to authenticate with.
// * kubernetes_user_impersonation:
func (o GetResourceResourceAksServiceAccountUserImpersonationOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksServiceAccountUserImpersonation) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type GetResourceResourceAksServiceAccountUserImpersonationArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAksServiceAccountUserImpersonationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAksServiceAccountUserImpersonation)(nil)).Elem()
}

func (o GetResourceResourceAksServiceAccountUserImpersonationArrayOutput) ToGetResourceResourceAksServiceAccountUserImpersonationArrayOutput() GetResourceResourceAksServiceAccountUserImpersonationArrayOutput {
	return o
}

func (o GetResourceResourceAksServiceAccountUserImpersonationArrayOutput) ToGetResourceResourceAksServiceAccountUserImpersonationArrayOutputWithContext(ctx context.Context) GetResourceResourceAksServiceAccountUserImpersonationArrayOutput {
	return o
}

func (o GetResourceResourceAksServiceAccountUserImpersonationArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAksServiceAccountUserImpersonationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAksServiceAccountUserImpersonation {
		return vs[0].([]GetResourceResourceAksServiceAccountUserImpersonation)[vs[1].(int)]
	}).(GetResourceResourceAksServiceAccountUserImpersonationOutput)
}

type GetResourceResourceAksUserImpersonation struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey *string `pulumi:"clientKey"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceAksUserImpersonationInput is an input type that accepts GetResourceResourceAksUserImpersonationArgs and GetResourceResourceAksUserImpersonationOutput values.
// You can construct a concrete instance of `GetResourceResourceAksUserImpersonationInput` via:
//
//	GetResourceResourceAksUserImpersonationArgs{...}
type GetResourceResourceAksUserImpersonationInput interface {
	pulumi.Input

	ToGetResourceResourceAksUserImpersonationOutput() GetResourceResourceAksUserImpersonationOutput
	ToGetResourceResourceAksUserImpersonationOutputWithContext(context.Context) GetResourceResourceAksUserImpersonationOutput
}

type GetResourceResourceAksUserImpersonationArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceAksUserImpersonationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAksUserImpersonation)(nil)).Elem()
}

func (i GetResourceResourceAksUserImpersonationArgs) ToGetResourceResourceAksUserImpersonationOutput() GetResourceResourceAksUserImpersonationOutput {
	return i.ToGetResourceResourceAksUserImpersonationOutputWithContext(context.Background())
}

func (i GetResourceResourceAksUserImpersonationArgs) ToGetResourceResourceAksUserImpersonationOutputWithContext(ctx context.Context) GetResourceResourceAksUserImpersonationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAksUserImpersonationOutput)
}

// GetResourceResourceAksUserImpersonationArrayInput is an input type that accepts GetResourceResourceAksUserImpersonationArray and GetResourceResourceAksUserImpersonationArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAksUserImpersonationArrayInput` via:
//
//	GetResourceResourceAksUserImpersonationArray{ GetResourceResourceAksUserImpersonationArgs{...} }
type GetResourceResourceAksUserImpersonationArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAksUserImpersonationArrayOutput() GetResourceResourceAksUserImpersonationArrayOutput
	ToGetResourceResourceAksUserImpersonationArrayOutputWithContext(context.Context) GetResourceResourceAksUserImpersonationArrayOutput
}

type GetResourceResourceAksUserImpersonationArray []GetResourceResourceAksUserImpersonationInput

func (GetResourceResourceAksUserImpersonationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAksUserImpersonation)(nil)).Elem()
}

func (i GetResourceResourceAksUserImpersonationArray) ToGetResourceResourceAksUserImpersonationArrayOutput() GetResourceResourceAksUserImpersonationArrayOutput {
	return i.ToGetResourceResourceAksUserImpersonationArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAksUserImpersonationArray) ToGetResourceResourceAksUserImpersonationArrayOutputWithContext(ctx context.Context) GetResourceResourceAksUserImpersonationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAksUserImpersonationArrayOutput)
}

type GetResourceResourceAksUserImpersonationOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAksUserImpersonationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAksUserImpersonation)(nil)).Elem()
}

func (o GetResourceResourceAksUserImpersonationOutput) ToGetResourceResourceAksUserImpersonationOutput() GetResourceResourceAksUserImpersonationOutput {
	return o
}

func (o GetResourceResourceAksUserImpersonationOutput) ToGetResourceResourceAksUserImpersonationOutputWithContext(ctx context.Context) GetResourceResourceAksUserImpersonationOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAksUserImpersonationOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksUserImpersonation) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o GetResourceResourceAksUserImpersonationOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksUserImpersonation) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o GetResourceResourceAksUserImpersonationOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksUserImpersonation) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o GetResourceResourceAksUserImpersonationOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksUserImpersonation) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAksUserImpersonationOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksUserImpersonation) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o GetResourceResourceAksUserImpersonationOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksUserImpersonation) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAksUserImpersonationOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksUserImpersonation) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAksUserImpersonationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksUserImpersonation) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAksUserImpersonationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksUserImpersonation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAksUserImpersonationOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksUserImpersonation) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAksUserImpersonationOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksUserImpersonation) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAksUserImpersonationOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksUserImpersonation) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAksUserImpersonationOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksUserImpersonation) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAksUserImpersonationOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAksUserImpersonation) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAksUserImpersonationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAksUserImpersonation) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceAksUserImpersonationArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAksUserImpersonationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAksUserImpersonation)(nil)).Elem()
}

func (o GetResourceResourceAksUserImpersonationArrayOutput) ToGetResourceResourceAksUserImpersonationArrayOutput() GetResourceResourceAksUserImpersonationArrayOutput {
	return o
}

func (o GetResourceResourceAksUserImpersonationArrayOutput) ToGetResourceResourceAksUserImpersonationArrayOutputWithContext(ctx context.Context) GetResourceResourceAksUserImpersonationArrayOutput {
	return o
}

func (o GetResourceResourceAksUserImpersonationArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAksUserImpersonationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAksUserImpersonation {
		return vs[0].([]GetResourceResourceAksUserImpersonation)[vs[1].(int)]
	}).(GetResourceResourceAksUserImpersonationOutput)
}

type GetResourceResourceAmazonE struct {
	// The Access Key ID to use to authenticate.
	AccessKey *string `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint *string `pulumi:"endpoint"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceAmazonEInput is an input type that accepts GetResourceResourceAmazonEArgs and GetResourceResourceAmazonEOutput values.
// You can construct a concrete instance of `GetResourceResourceAmazonEInput` via:
//
//	GetResourceResourceAmazonEArgs{...}
type GetResourceResourceAmazonEInput interface {
	pulumi.Input

	ToGetResourceResourceAmazonEOutput() GetResourceResourceAmazonEOutput
	ToGetResourceResourceAmazonEOutputWithContext(context.Context) GetResourceResourceAmazonEOutput
}

type GetResourceResourceAmazonEArgs struct {
	// The Access Key ID to use to authenticate.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceAmazonEArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAmazonE)(nil)).Elem()
}

func (i GetResourceResourceAmazonEArgs) ToGetResourceResourceAmazonEOutput() GetResourceResourceAmazonEOutput {
	return i.ToGetResourceResourceAmazonEOutputWithContext(context.Background())
}

func (i GetResourceResourceAmazonEArgs) ToGetResourceResourceAmazonEOutputWithContext(ctx context.Context) GetResourceResourceAmazonEOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAmazonEOutput)
}

// GetResourceResourceAmazonEArrayInput is an input type that accepts GetResourceResourceAmazonEArray and GetResourceResourceAmazonEArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAmazonEArrayInput` via:
//
//	GetResourceResourceAmazonEArray{ GetResourceResourceAmazonEArgs{...} }
type GetResourceResourceAmazonEArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAmazonEArrayOutput() GetResourceResourceAmazonEArrayOutput
	ToGetResourceResourceAmazonEArrayOutputWithContext(context.Context) GetResourceResourceAmazonEArrayOutput
}

type GetResourceResourceAmazonEArray []GetResourceResourceAmazonEInput

func (GetResourceResourceAmazonEArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAmazonE)(nil)).Elem()
}

func (i GetResourceResourceAmazonEArray) ToGetResourceResourceAmazonEArrayOutput() GetResourceResourceAmazonEArrayOutput {
	return i.ToGetResourceResourceAmazonEArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAmazonEArray) ToGetResourceResourceAmazonEArrayOutputWithContext(ctx context.Context) GetResourceResourceAmazonEArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAmazonEArrayOutput)
}

type GetResourceResourceAmazonEOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAmazonEOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAmazonE)(nil)).Elem()
}

func (o GetResourceResourceAmazonEOutput) ToGetResourceResourceAmazonEOutput() GetResourceResourceAmazonEOutput {
	return o
}

func (o GetResourceResourceAmazonEOutput) ToGetResourceResourceAmazonEOutputWithContext(ctx context.Context) GetResourceResourceAmazonEOutput {
	return o
}

// The Access Key ID to use to authenticate.
func (o GetResourceResourceAmazonEOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonE) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAmazonEOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonE) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAmazonEOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonE) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o GetResourceResourceAmazonEOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonE) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAmazonEOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonE) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAmazonEOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonE) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAmazonEOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonE) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAmazonEOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonE) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o GetResourceResourceAmazonEOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonE) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o GetResourceResourceAmazonEOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonE) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o GetResourceResourceAmazonEOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonE) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o GetResourceResourceAmazonEOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonE) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAmazonEOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonE) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAmazonEOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonE) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAmazonEOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonE) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceAmazonEArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAmazonEArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAmazonE)(nil)).Elem()
}

func (o GetResourceResourceAmazonEArrayOutput) ToGetResourceResourceAmazonEArrayOutput() GetResourceResourceAmazonEArrayOutput {
	return o
}

func (o GetResourceResourceAmazonEArrayOutput) ToGetResourceResourceAmazonEArrayOutputWithContext(ctx context.Context) GetResourceResourceAmazonEArrayOutput {
	return o
}

func (o GetResourceResourceAmazonEArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAmazonEOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAmazonE {
		return vs[0].([]GetResourceResourceAmazonE)[vs[1].(int)]
	}).(GetResourceResourceAmazonEOutput)
}

type GetResourceResourceAmazonEk struct {
	// The Access Key ID to use to authenticate.
	AccessKey *string `pulumi:"accessKey"`
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass *bool `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The name of the cluster to connect to.
	ClusterName *string `pulumi:"clusterName"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled *bool `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername *string `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint *string `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceAmazonEkInput is an input type that accepts GetResourceResourceAmazonEkArgs and GetResourceResourceAmazonEkOutput values.
// You can construct a concrete instance of `GetResourceResourceAmazonEkInput` via:
//
//	GetResourceResourceAmazonEkArgs{...}
type GetResourceResourceAmazonEkInput interface {
	pulumi.Input

	ToGetResourceResourceAmazonEkOutput() GetResourceResourceAmazonEkOutput
	ToGetResourceResourceAmazonEkOutputWithContext(context.Context) GetResourceResourceAmazonEkOutput
}

type GetResourceResourceAmazonEkArgs struct {
	// The Access Key ID to use to authenticate.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass pulumi.BoolPtrInput `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The name of the cluster to connect to.
	ClusterName pulumi.StringPtrInput `pulumi:"clusterName"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled pulumi.BoolPtrInput `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername pulumi.StringPtrInput `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceAmazonEkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAmazonEk)(nil)).Elem()
}

func (i GetResourceResourceAmazonEkArgs) ToGetResourceResourceAmazonEkOutput() GetResourceResourceAmazonEkOutput {
	return i.ToGetResourceResourceAmazonEkOutputWithContext(context.Background())
}

func (i GetResourceResourceAmazonEkArgs) ToGetResourceResourceAmazonEkOutputWithContext(ctx context.Context) GetResourceResourceAmazonEkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAmazonEkOutput)
}

// GetResourceResourceAmazonEkArrayInput is an input type that accepts GetResourceResourceAmazonEkArray and GetResourceResourceAmazonEkArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAmazonEkArrayInput` via:
//
//	GetResourceResourceAmazonEkArray{ GetResourceResourceAmazonEkArgs{...} }
type GetResourceResourceAmazonEkArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAmazonEkArrayOutput() GetResourceResourceAmazonEkArrayOutput
	ToGetResourceResourceAmazonEkArrayOutputWithContext(context.Context) GetResourceResourceAmazonEkArrayOutput
}

type GetResourceResourceAmazonEkArray []GetResourceResourceAmazonEkInput

func (GetResourceResourceAmazonEkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAmazonEk)(nil)).Elem()
}

func (i GetResourceResourceAmazonEkArray) ToGetResourceResourceAmazonEkArrayOutput() GetResourceResourceAmazonEkArrayOutput {
	return i.ToGetResourceResourceAmazonEkArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAmazonEkArray) ToGetResourceResourceAmazonEkArrayOutputWithContext(ctx context.Context) GetResourceResourceAmazonEkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAmazonEkArrayOutput)
}

type GetResourceResourceAmazonEkOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAmazonEkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAmazonEk)(nil)).Elem()
}

func (o GetResourceResourceAmazonEkOutput) ToGetResourceResourceAmazonEkOutput() GetResourceResourceAmazonEkOutput {
	return o
}

func (o GetResourceResourceAmazonEkOutput) ToGetResourceResourceAmazonEkOutputWithContext(ctx context.Context) GetResourceResourceAmazonEkOutput {
	return o
}

// The Access Key ID to use to authenticate.
func (o GetResourceResourceAmazonEkOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o GetResourceResourceAmazonEkOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *bool { return v.AllowResourceRoleBypass }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAmazonEkOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o GetResourceResourceAmazonEkOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The name of the cluster to connect to.
func (o GetResourceResourceAmazonEkOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o GetResourceResourceAmazonEkOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *bool { return v.DiscoveryEnabled }).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o GetResourceResourceAmazonEkOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.DiscoveryUsername }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAmazonEkOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o GetResourceResourceAmazonEkOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o GetResourceResourceAmazonEkOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAmazonEkOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o GetResourceResourceAmazonEkOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o GetResourceResourceAmazonEkOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAmazonEkOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAmazonEkOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAmazonEkOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o GetResourceResourceAmazonEkOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o GetResourceResourceAmazonEkOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o GetResourceResourceAmazonEkOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o GetResourceResourceAmazonEkOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAmazonEkOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAmazonEkOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAmazonEkOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEk) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceAmazonEkArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAmazonEkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAmazonEk)(nil)).Elem()
}

func (o GetResourceResourceAmazonEkArrayOutput) ToGetResourceResourceAmazonEkArrayOutput() GetResourceResourceAmazonEkArrayOutput {
	return o
}

func (o GetResourceResourceAmazonEkArrayOutput) ToGetResourceResourceAmazonEkArrayOutputWithContext(ctx context.Context) GetResourceResourceAmazonEkArrayOutput {
	return o
}

func (o GetResourceResourceAmazonEkArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAmazonEkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAmazonEk {
		return vs[0].([]GetResourceResourceAmazonEk)[vs[1].(int)]
	}).(GetResourceResourceAmazonEkOutput)
}

type GetResourceResourceAmazonEksInstanceProfile struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass *bool `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The name of the cluster to connect to.
	ClusterName *string `pulumi:"clusterName"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled *bool `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername *string `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint *string `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceAmazonEksInstanceProfileInput is an input type that accepts GetResourceResourceAmazonEksInstanceProfileArgs and GetResourceResourceAmazonEksInstanceProfileOutput values.
// You can construct a concrete instance of `GetResourceResourceAmazonEksInstanceProfileInput` via:
//
//	GetResourceResourceAmazonEksInstanceProfileArgs{...}
type GetResourceResourceAmazonEksInstanceProfileInput interface {
	pulumi.Input

	ToGetResourceResourceAmazonEksInstanceProfileOutput() GetResourceResourceAmazonEksInstanceProfileOutput
	ToGetResourceResourceAmazonEksInstanceProfileOutputWithContext(context.Context) GetResourceResourceAmazonEksInstanceProfileOutput
}

type GetResourceResourceAmazonEksInstanceProfileArgs struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass pulumi.BoolPtrInput `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The name of the cluster to connect to.
	ClusterName pulumi.StringPtrInput `pulumi:"clusterName"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled pulumi.BoolPtrInput `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername pulumi.StringPtrInput `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceAmazonEksInstanceProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAmazonEksInstanceProfile)(nil)).Elem()
}

func (i GetResourceResourceAmazonEksInstanceProfileArgs) ToGetResourceResourceAmazonEksInstanceProfileOutput() GetResourceResourceAmazonEksInstanceProfileOutput {
	return i.ToGetResourceResourceAmazonEksInstanceProfileOutputWithContext(context.Background())
}

func (i GetResourceResourceAmazonEksInstanceProfileArgs) ToGetResourceResourceAmazonEksInstanceProfileOutputWithContext(ctx context.Context) GetResourceResourceAmazonEksInstanceProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAmazonEksInstanceProfileOutput)
}

// GetResourceResourceAmazonEksInstanceProfileArrayInput is an input type that accepts GetResourceResourceAmazonEksInstanceProfileArray and GetResourceResourceAmazonEksInstanceProfileArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAmazonEksInstanceProfileArrayInput` via:
//
//	GetResourceResourceAmazonEksInstanceProfileArray{ GetResourceResourceAmazonEksInstanceProfileArgs{...} }
type GetResourceResourceAmazonEksInstanceProfileArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAmazonEksInstanceProfileArrayOutput() GetResourceResourceAmazonEksInstanceProfileArrayOutput
	ToGetResourceResourceAmazonEksInstanceProfileArrayOutputWithContext(context.Context) GetResourceResourceAmazonEksInstanceProfileArrayOutput
}

type GetResourceResourceAmazonEksInstanceProfileArray []GetResourceResourceAmazonEksInstanceProfileInput

func (GetResourceResourceAmazonEksInstanceProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAmazonEksInstanceProfile)(nil)).Elem()
}

func (i GetResourceResourceAmazonEksInstanceProfileArray) ToGetResourceResourceAmazonEksInstanceProfileArrayOutput() GetResourceResourceAmazonEksInstanceProfileArrayOutput {
	return i.ToGetResourceResourceAmazonEksInstanceProfileArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAmazonEksInstanceProfileArray) ToGetResourceResourceAmazonEksInstanceProfileArrayOutputWithContext(ctx context.Context) GetResourceResourceAmazonEksInstanceProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAmazonEksInstanceProfileArrayOutput)
}

type GetResourceResourceAmazonEksInstanceProfileOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAmazonEksInstanceProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAmazonEksInstanceProfile)(nil)).Elem()
}

func (o GetResourceResourceAmazonEksInstanceProfileOutput) ToGetResourceResourceAmazonEksInstanceProfileOutput() GetResourceResourceAmazonEksInstanceProfileOutput {
	return o
}

func (o GetResourceResourceAmazonEksInstanceProfileOutput) ToGetResourceResourceAmazonEksInstanceProfileOutputWithContext(ctx context.Context) GetResourceResourceAmazonEksInstanceProfileOutput {
	return o
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *bool { return v.AllowResourceRoleBypass }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The name of the cluster to connect to.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *bool { return v.DiscoveryEnabled }).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *string { return v.DiscoveryUsername }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o GetResourceResourceAmazonEksInstanceProfileOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAmazonEksInstanceProfileOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAmazonEksInstanceProfileOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfile) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceAmazonEksInstanceProfileArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAmazonEksInstanceProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAmazonEksInstanceProfile)(nil)).Elem()
}

func (o GetResourceResourceAmazonEksInstanceProfileArrayOutput) ToGetResourceResourceAmazonEksInstanceProfileArrayOutput() GetResourceResourceAmazonEksInstanceProfileArrayOutput {
	return o
}

func (o GetResourceResourceAmazonEksInstanceProfileArrayOutput) ToGetResourceResourceAmazonEksInstanceProfileArrayOutputWithContext(ctx context.Context) GetResourceResourceAmazonEksInstanceProfileArrayOutput {
	return o
}

func (o GetResourceResourceAmazonEksInstanceProfileArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAmazonEksInstanceProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAmazonEksInstanceProfile {
		return vs[0].([]GetResourceResourceAmazonEksInstanceProfile)[vs[1].(int)]
	}).(GetResourceResourceAmazonEksInstanceProfileOutput)
}

type GetResourceResourceAmazonEksInstanceProfileUserImpersonation struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The name of the cluster to connect to.
	ClusterName *string `pulumi:"clusterName"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint *string `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceAmazonEksInstanceProfileUserImpersonationInput is an input type that accepts GetResourceResourceAmazonEksInstanceProfileUserImpersonationArgs and GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput values.
// You can construct a concrete instance of `GetResourceResourceAmazonEksInstanceProfileUserImpersonationInput` via:
//
//	GetResourceResourceAmazonEksInstanceProfileUserImpersonationArgs{...}
type GetResourceResourceAmazonEksInstanceProfileUserImpersonationInput interface {
	pulumi.Input

	ToGetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput() GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput
	ToGetResourceResourceAmazonEksInstanceProfileUserImpersonationOutputWithContext(context.Context) GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput
}

type GetResourceResourceAmazonEksInstanceProfileUserImpersonationArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The name of the cluster to connect to.
	ClusterName pulumi.StringPtrInput `pulumi:"clusterName"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceAmazonEksInstanceProfileUserImpersonationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAmazonEksInstanceProfileUserImpersonation)(nil)).Elem()
}

func (i GetResourceResourceAmazonEksInstanceProfileUserImpersonationArgs) ToGetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput() GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput {
	return i.ToGetResourceResourceAmazonEksInstanceProfileUserImpersonationOutputWithContext(context.Background())
}

func (i GetResourceResourceAmazonEksInstanceProfileUserImpersonationArgs) ToGetResourceResourceAmazonEksInstanceProfileUserImpersonationOutputWithContext(ctx context.Context) GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput)
}

// GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayInput is an input type that accepts GetResourceResourceAmazonEksInstanceProfileUserImpersonationArray and GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayInput` via:
//
//	GetResourceResourceAmazonEksInstanceProfileUserImpersonationArray{ GetResourceResourceAmazonEksInstanceProfileUserImpersonationArgs{...} }
type GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput() GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput
	ToGetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutputWithContext(context.Context) GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput
}

type GetResourceResourceAmazonEksInstanceProfileUserImpersonationArray []GetResourceResourceAmazonEksInstanceProfileUserImpersonationInput

func (GetResourceResourceAmazonEksInstanceProfileUserImpersonationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAmazonEksInstanceProfileUserImpersonation)(nil)).Elem()
}

func (i GetResourceResourceAmazonEksInstanceProfileUserImpersonationArray) ToGetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput() GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput {
	return i.ToGetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAmazonEksInstanceProfileUserImpersonationArray) ToGetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutputWithContext(ctx context.Context) GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput)
}

type GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAmazonEksInstanceProfileUserImpersonation)(nil)).Elem()
}

func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) ToGetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput() GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput {
	return o
}

func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) ToGetResourceResourceAmazonEksInstanceProfileUserImpersonationOutputWithContext(ctx context.Context) GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfileUserImpersonation) *string {
		return v.CertificateAuthority
	}).(pulumi.StringPtrOutput)
}

// The name of the cluster to connect to.
func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfileUserImpersonation) *string {
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfileUserImpersonation) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfileUserImpersonation) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksInstanceProfileUserImpersonation) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAmazonEksInstanceProfileUserImpersonation)(nil)).Elem()
}

func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput) ToGetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput() GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput {
	return o
}

func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput) ToGetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutputWithContext(ctx context.Context) GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput {
	return o
}

func (o GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAmazonEksInstanceProfileUserImpersonation {
		return vs[0].([]GetResourceResourceAmazonEksInstanceProfileUserImpersonation)[vs[1].(int)]
	}).(GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput)
}

type GetResourceResourceAmazonEksUserImpersonation struct {
	// The Access Key ID to use to authenticate.
	AccessKey *string `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The name of the cluster to connect to.
	ClusterName *string `pulumi:"clusterName"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint *string `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceAmazonEksUserImpersonationInput is an input type that accepts GetResourceResourceAmazonEksUserImpersonationArgs and GetResourceResourceAmazonEksUserImpersonationOutput values.
// You can construct a concrete instance of `GetResourceResourceAmazonEksUserImpersonationInput` via:
//
//	GetResourceResourceAmazonEksUserImpersonationArgs{...}
type GetResourceResourceAmazonEksUserImpersonationInput interface {
	pulumi.Input

	ToGetResourceResourceAmazonEksUserImpersonationOutput() GetResourceResourceAmazonEksUserImpersonationOutput
	ToGetResourceResourceAmazonEksUserImpersonationOutputWithContext(context.Context) GetResourceResourceAmazonEksUserImpersonationOutput
}

type GetResourceResourceAmazonEksUserImpersonationArgs struct {
	// The Access Key ID to use to authenticate.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The name of the cluster to connect to.
	ClusterName pulumi.StringPtrInput `pulumi:"clusterName"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceAmazonEksUserImpersonationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAmazonEksUserImpersonation)(nil)).Elem()
}

func (i GetResourceResourceAmazonEksUserImpersonationArgs) ToGetResourceResourceAmazonEksUserImpersonationOutput() GetResourceResourceAmazonEksUserImpersonationOutput {
	return i.ToGetResourceResourceAmazonEksUserImpersonationOutputWithContext(context.Background())
}

func (i GetResourceResourceAmazonEksUserImpersonationArgs) ToGetResourceResourceAmazonEksUserImpersonationOutputWithContext(ctx context.Context) GetResourceResourceAmazonEksUserImpersonationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAmazonEksUserImpersonationOutput)
}

// GetResourceResourceAmazonEksUserImpersonationArrayInput is an input type that accepts GetResourceResourceAmazonEksUserImpersonationArray and GetResourceResourceAmazonEksUserImpersonationArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAmazonEksUserImpersonationArrayInput` via:
//
//	GetResourceResourceAmazonEksUserImpersonationArray{ GetResourceResourceAmazonEksUserImpersonationArgs{...} }
type GetResourceResourceAmazonEksUserImpersonationArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAmazonEksUserImpersonationArrayOutput() GetResourceResourceAmazonEksUserImpersonationArrayOutput
	ToGetResourceResourceAmazonEksUserImpersonationArrayOutputWithContext(context.Context) GetResourceResourceAmazonEksUserImpersonationArrayOutput
}

type GetResourceResourceAmazonEksUserImpersonationArray []GetResourceResourceAmazonEksUserImpersonationInput

func (GetResourceResourceAmazonEksUserImpersonationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAmazonEksUserImpersonation)(nil)).Elem()
}

func (i GetResourceResourceAmazonEksUserImpersonationArray) ToGetResourceResourceAmazonEksUserImpersonationArrayOutput() GetResourceResourceAmazonEksUserImpersonationArrayOutput {
	return i.ToGetResourceResourceAmazonEksUserImpersonationArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAmazonEksUserImpersonationArray) ToGetResourceResourceAmazonEksUserImpersonationArrayOutputWithContext(ctx context.Context) GetResourceResourceAmazonEksUserImpersonationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAmazonEksUserImpersonationArrayOutput)
}

type GetResourceResourceAmazonEksUserImpersonationOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAmazonEksUserImpersonationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAmazonEksUserImpersonation)(nil)).Elem()
}

func (o GetResourceResourceAmazonEksUserImpersonationOutput) ToGetResourceResourceAmazonEksUserImpersonationOutput() GetResourceResourceAmazonEksUserImpersonationOutput {
	return o
}

func (o GetResourceResourceAmazonEksUserImpersonationOutput) ToGetResourceResourceAmazonEksUserImpersonationOutputWithContext(ctx context.Context) GetResourceResourceAmazonEksUserImpersonationOutput {
	return o
}

// The Access Key ID to use to authenticate.
func (o GetResourceResourceAmazonEksUserImpersonationOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAmazonEksUserImpersonationOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o GetResourceResourceAmazonEksUserImpersonationOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The name of the cluster to connect to.
func (o GetResourceResourceAmazonEksUserImpersonationOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAmazonEksUserImpersonationOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o GetResourceResourceAmazonEksUserImpersonationOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o GetResourceResourceAmazonEksUserImpersonationOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAmazonEksUserImpersonationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAmazonEksUserImpersonationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAmazonEksUserImpersonationOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAmazonEksUserImpersonationOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o GetResourceResourceAmazonEksUserImpersonationOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o GetResourceResourceAmazonEksUserImpersonationOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o GetResourceResourceAmazonEksUserImpersonationOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o GetResourceResourceAmazonEksUserImpersonationOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAmazonEksUserImpersonationOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAmazonEksUserImpersonationOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAmazonEksUserImpersonationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonEksUserImpersonation) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceAmazonEksUserImpersonationArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAmazonEksUserImpersonationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAmazonEksUserImpersonation)(nil)).Elem()
}

func (o GetResourceResourceAmazonEksUserImpersonationArrayOutput) ToGetResourceResourceAmazonEksUserImpersonationArrayOutput() GetResourceResourceAmazonEksUserImpersonationArrayOutput {
	return o
}

func (o GetResourceResourceAmazonEksUserImpersonationArrayOutput) ToGetResourceResourceAmazonEksUserImpersonationArrayOutputWithContext(ctx context.Context) GetResourceResourceAmazonEksUserImpersonationArrayOutput {
	return o
}

func (o GetResourceResourceAmazonEksUserImpersonationArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAmazonEksUserImpersonationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAmazonEksUserImpersonation {
		return vs[0].([]GetResourceResourceAmazonEksUserImpersonation)[vs[1].(int)]
	}).(GetResourceResourceAmazonEksUserImpersonationOutput)
}

type GetResourceResourceAmazonmqAmqp091 struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceAmazonmqAmqp091Input is an input type that accepts GetResourceResourceAmazonmqAmqp091Args and GetResourceResourceAmazonmqAmqp091Output values.
// You can construct a concrete instance of `GetResourceResourceAmazonmqAmqp091Input` via:
//
//	GetResourceResourceAmazonmqAmqp091Args{...}
type GetResourceResourceAmazonmqAmqp091Input interface {
	pulumi.Input

	ToGetResourceResourceAmazonmqAmqp091Output() GetResourceResourceAmazonmqAmqp091Output
	ToGetResourceResourceAmazonmqAmqp091OutputWithContext(context.Context) GetResourceResourceAmazonmqAmqp091Output
}

type GetResourceResourceAmazonmqAmqp091Args struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceAmazonmqAmqp091Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAmazonmqAmqp091)(nil)).Elem()
}

func (i GetResourceResourceAmazonmqAmqp091Args) ToGetResourceResourceAmazonmqAmqp091Output() GetResourceResourceAmazonmqAmqp091Output {
	return i.ToGetResourceResourceAmazonmqAmqp091OutputWithContext(context.Background())
}

func (i GetResourceResourceAmazonmqAmqp091Args) ToGetResourceResourceAmazonmqAmqp091OutputWithContext(ctx context.Context) GetResourceResourceAmazonmqAmqp091Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAmazonmqAmqp091Output)
}

// GetResourceResourceAmazonmqAmqp091ArrayInput is an input type that accepts GetResourceResourceAmazonmqAmqp091Array and GetResourceResourceAmazonmqAmqp091ArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAmazonmqAmqp091ArrayInput` via:
//
//	GetResourceResourceAmazonmqAmqp091Array{ GetResourceResourceAmazonmqAmqp091Args{...} }
type GetResourceResourceAmazonmqAmqp091ArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAmazonmqAmqp091ArrayOutput() GetResourceResourceAmazonmqAmqp091ArrayOutput
	ToGetResourceResourceAmazonmqAmqp091ArrayOutputWithContext(context.Context) GetResourceResourceAmazonmqAmqp091ArrayOutput
}

type GetResourceResourceAmazonmqAmqp091Array []GetResourceResourceAmazonmqAmqp091Input

func (GetResourceResourceAmazonmqAmqp091Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAmazonmqAmqp091)(nil)).Elem()
}

func (i GetResourceResourceAmazonmqAmqp091Array) ToGetResourceResourceAmazonmqAmqp091ArrayOutput() GetResourceResourceAmazonmqAmqp091ArrayOutput {
	return i.ToGetResourceResourceAmazonmqAmqp091ArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAmazonmqAmqp091Array) ToGetResourceResourceAmazonmqAmqp091ArrayOutputWithContext(ctx context.Context) GetResourceResourceAmazonmqAmqp091ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAmazonmqAmqp091ArrayOutput)
}

type GetResourceResourceAmazonmqAmqp091Output struct{ *pulumi.OutputState }

func (GetResourceResourceAmazonmqAmqp091Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAmazonmqAmqp091)(nil)).Elem()
}

func (o GetResourceResourceAmazonmqAmqp091Output) ToGetResourceResourceAmazonmqAmqp091Output() GetResourceResourceAmazonmqAmqp091Output {
	return o
}

func (o GetResourceResourceAmazonmqAmqp091Output) ToGetResourceResourceAmazonmqAmqp091OutputWithContext(ctx context.Context) GetResourceResourceAmazonmqAmqp091Output {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAmazonmqAmqp091Output) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonmqAmqp091) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAmazonmqAmqp091Output) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonmqAmqp091) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAmazonmqAmqp091Output) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonmqAmqp091) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAmazonmqAmqp091Output) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonmqAmqp091) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAmazonmqAmqp091Output) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonmqAmqp091) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceAmazonmqAmqp091Output) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonmqAmqp091) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAmazonmqAmqp091Output) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonmqAmqp091) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAmazonmqAmqp091Output) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonmqAmqp091) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAmazonmqAmqp091Output) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonmqAmqp091) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAmazonmqAmqp091Output) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonmqAmqp091) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAmazonmqAmqp091Output) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonmqAmqp091) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAmazonmqAmqp091Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonmqAmqp091) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o GetResourceResourceAmazonmqAmqp091Output) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonmqAmqp091) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceAmazonmqAmqp091Output) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAmazonmqAmqp091) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceAmazonmqAmqp091ArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAmazonmqAmqp091ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAmazonmqAmqp091)(nil)).Elem()
}

func (o GetResourceResourceAmazonmqAmqp091ArrayOutput) ToGetResourceResourceAmazonmqAmqp091ArrayOutput() GetResourceResourceAmazonmqAmqp091ArrayOutput {
	return o
}

func (o GetResourceResourceAmazonmqAmqp091ArrayOutput) ToGetResourceResourceAmazonmqAmqp091ArrayOutputWithContext(ctx context.Context) GetResourceResourceAmazonmqAmqp091ArrayOutput {
	return o
}

func (o GetResourceResourceAmazonmqAmqp091ArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAmazonmqAmqp091Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAmazonmqAmqp091 {
		return vs[0].([]GetResourceResourceAmazonmqAmqp091)[vs[1].(int)]
	}).(GetResourceResourceAmazonmqAmqp091Output)
}

type GetResourceResourceAthena struct {
	// The Access Key ID to use to authenticate.
	AccessKey *string `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The AWS S3 output location.
	Output *string `pulumi:"output"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceAthenaInput is an input type that accepts GetResourceResourceAthenaArgs and GetResourceResourceAthenaOutput values.
// You can construct a concrete instance of `GetResourceResourceAthenaInput` via:
//
//	GetResourceResourceAthenaArgs{...}
type GetResourceResourceAthenaInput interface {
	pulumi.Input

	ToGetResourceResourceAthenaOutput() GetResourceResourceAthenaOutput
	ToGetResourceResourceAthenaOutputWithContext(context.Context) GetResourceResourceAthenaOutput
}

type GetResourceResourceAthenaArgs struct {
	// The Access Key ID to use to authenticate.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The AWS S3 output location.
	Output pulumi.StringPtrInput `pulumi:"output"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceAthenaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAthena)(nil)).Elem()
}

func (i GetResourceResourceAthenaArgs) ToGetResourceResourceAthenaOutput() GetResourceResourceAthenaOutput {
	return i.ToGetResourceResourceAthenaOutputWithContext(context.Background())
}

func (i GetResourceResourceAthenaArgs) ToGetResourceResourceAthenaOutputWithContext(ctx context.Context) GetResourceResourceAthenaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAthenaOutput)
}

// GetResourceResourceAthenaArrayInput is an input type that accepts GetResourceResourceAthenaArray and GetResourceResourceAthenaArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAthenaArrayInput` via:
//
//	GetResourceResourceAthenaArray{ GetResourceResourceAthenaArgs{...} }
type GetResourceResourceAthenaArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAthenaArrayOutput() GetResourceResourceAthenaArrayOutput
	ToGetResourceResourceAthenaArrayOutputWithContext(context.Context) GetResourceResourceAthenaArrayOutput
}

type GetResourceResourceAthenaArray []GetResourceResourceAthenaInput

func (GetResourceResourceAthenaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAthena)(nil)).Elem()
}

func (i GetResourceResourceAthenaArray) ToGetResourceResourceAthenaArrayOutput() GetResourceResourceAthenaArrayOutput {
	return i.ToGetResourceResourceAthenaArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAthenaArray) ToGetResourceResourceAthenaArrayOutputWithContext(ctx context.Context) GetResourceResourceAthenaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAthenaArrayOutput)
}

type GetResourceResourceAthenaOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAthenaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAthena)(nil)).Elem()
}

func (o GetResourceResourceAthenaOutput) ToGetResourceResourceAthenaOutput() GetResourceResourceAthenaOutput {
	return o
}

func (o GetResourceResourceAthenaOutput) ToGetResourceResourceAthenaOutputWithContext(ctx context.Context) GetResourceResourceAthenaOutput {
	return o
}

// The Access Key ID to use to authenticate.
func (o GetResourceResourceAthenaOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthena) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAthenaOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthena) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAthenaOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthena) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAthenaOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthena) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAthenaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthena) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The AWS S3 output location.
func (o GetResourceResourceAthenaOutput) Output() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthena) *string { return v.Output }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAthenaOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthena) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAthenaOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthena) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o GetResourceResourceAthenaOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthena) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o GetResourceResourceAthenaOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthena) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o GetResourceResourceAthenaOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthena) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o GetResourceResourceAthenaOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthena) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAthenaOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthena) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAthenaOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthena) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAthenaOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAthena) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceAthenaArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAthenaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAthena)(nil)).Elem()
}

func (o GetResourceResourceAthenaArrayOutput) ToGetResourceResourceAthenaArrayOutput() GetResourceResourceAthenaArrayOutput {
	return o
}

func (o GetResourceResourceAthenaArrayOutput) ToGetResourceResourceAthenaArrayOutputWithContext(ctx context.Context) GetResourceResourceAthenaArrayOutput {
	return o
}

func (o GetResourceResourceAthenaArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAthenaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAthena {
		return vs[0].([]GetResourceResourceAthena)[vs[1].(int)]
	}).(GetResourceResourceAthenaOutput)
}

type GetResourceResourceAthenaIam struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The AWS S3 output location.
	Output *string `pulumi:"output"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceAthenaIamInput is an input type that accepts GetResourceResourceAthenaIamArgs and GetResourceResourceAthenaIamOutput values.
// You can construct a concrete instance of `GetResourceResourceAthenaIamInput` via:
//
//	GetResourceResourceAthenaIamArgs{...}
type GetResourceResourceAthenaIamInput interface {
	pulumi.Input

	ToGetResourceResourceAthenaIamOutput() GetResourceResourceAthenaIamOutput
	ToGetResourceResourceAthenaIamOutputWithContext(context.Context) GetResourceResourceAthenaIamOutput
}

type GetResourceResourceAthenaIamArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The AWS S3 output location.
	Output pulumi.StringPtrInput `pulumi:"output"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceAthenaIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAthenaIam)(nil)).Elem()
}

func (i GetResourceResourceAthenaIamArgs) ToGetResourceResourceAthenaIamOutput() GetResourceResourceAthenaIamOutput {
	return i.ToGetResourceResourceAthenaIamOutputWithContext(context.Background())
}

func (i GetResourceResourceAthenaIamArgs) ToGetResourceResourceAthenaIamOutputWithContext(ctx context.Context) GetResourceResourceAthenaIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAthenaIamOutput)
}

// GetResourceResourceAthenaIamArrayInput is an input type that accepts GetResourceResourceAthenaIamArray and GetResourceResourceAthenaIamArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAthenaIamArrayInput` via:
//
//	GetResourceResourceAthenaIamArray{ GetResourceResourceAthenaIamArgs{...} }
type GetResourceResourceAthenaIamArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAthenaIamArrayOutput() GetResourceResourceAthenaIamArrayOutput
	ToGetResourceResourceAthenaIamArrayOutputWithContext(context.Context) GetResourceResourceAthenaIamArrayOutput
}

type GetResourceResourceAthenaIamArray []GetResourceResourceAthenaIamInput

func (GetResourceResourceAthenaIamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAthenaIam)(nil)).Elem()
}

func (i GetResourceResourceAthenaIamArray) ToGetResourceResourceAthenaIamArrayOutput() GetResourceResourceAthenaIamArrayOutput {
	return i.ToGetResourceResourceAthenaIamArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAthenaIamArray) ToGetResourceResourceAthenaIamArrayOutputWithContext(ctx context.Context) GetResourceResourceAthenaIamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAthenaIamArrayOutput)
}

type GetResourceResourceAthenaIamOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAthenaIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAthenaIam)(nil)).Elem()
}

func (o GetResourceResourceAthenaIamOutput) ToGetResourceResourceAthenaIamOutput() GetResourceResourceAthenaIamOutput {
	return o
}

func (o GetResourceResourceAthenaIamOutput) ToGetResourceResourceAthenaIamOutputWithContext(ctx context.Context) GetResourceResourceAthenaIamOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAthenaIamOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthenaIam) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAthenaIamOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthenaIam) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAthenaIamOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthenaIam) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAthenaIamOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthenaIam) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The AWS S3 output location.
func (o GetResourceResourceAthenaIamOutput) Output() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthenaIam) *string { return v.Output }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAthenaIamOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthenaIam) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAthenaIamOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthenaIam) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o GetResourceResourceAthenaIamOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthenaIam) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o GetResourceResourceAthenaIamOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthenaIam) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o GetResourceResourceAthenaIamOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthenaIam) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAthenaIamOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthenaIam) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAthenaIamOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAthenaIam) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAthenaIamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAthenaIam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceAthenaIamArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAthenaIamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAthenaIam)(nil)).Elem()
}

func (o GetResourceResourceAthenaIamArrayOutput) ToGetResourceResourceAthenaIamArrayOutput() GetResourceResourceAthenaIamArrayOutput {
	return o
}

func (o GetResourceResourceAthenaIamArrayOutput) ToGetResourceResourceAthenaIamArrayOutputWithContext(ctx context.Context) GetResourceResourceAthenaIamArrayOutput {
	return o
}

func (o GetResourceResourceAthenaIamArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAthenaIamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAthenaIam {
		return vs[0].([]GetResourceResourceAthenaIam)[vs[1].(int)]
	}).(GetResourceResourceAthenaIamOutput)
}

type GetResourceResourceAuroraMysql struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceAuroraMysqlInput is an input type that accepts GetResourceResourceAuroraMysqlArgs and GetResourceResourceAuroraMysqlOutput values.
// You can construct a concrete instance of `GetResourceResourceAuroraMysqlInput` via:
//
//	GetResourceResourceAuroraMysqlArgs{...}
type GetResourceResourceAuroraMysqlInput interface {
	pulumi.Input

	ToGetResourceResourceAuroraMysqlOutput() GetResourceResourceAuroraMysqlOutput
	ToGetResourceResourceAuroraMysqlOutputWithContext(context.Context) GetResourceResourceAuroraMysqlOutput
}

type GetResourceResourceAuroraMysqlArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceAuroraMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAuroraMysql)(nil)).Elem()
}

func (i GetResourceResourceAuroraMysqlArgs) ToGetResourceResourceAuroraMysqlOutput() GetResourceResourceAuroraMysqlOutput {
	return i.ToGetResourceResourceAuroraMysqlOutputWithContext(context.Background())
}

func (i GetResourceResourceAuroraMysqlArgs) ToGetResourceResourceAuroraMysqlOutputWithContext(ctx context.Context) GetResourceResourceAuroraMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAuroraMysqlOutput)
}

// GetResourceResourceAuroraMysqlArrayInput is an input type that accepts GetResourceResourceAuroraMysqlArray and GetResourceResourceAuroraMysqlArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAuroraMysqlArrayInput` via:
//
//	GetResourceResourceAuroraMysqlArray{ GetResourceResourceAuroraMysqlArgs{...} }
type GetResourceResourceAuroraMysqlArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAuroraMysqlArrayOutput() GetResourceResourceAuroraMysqlArrayOutput
	ToGetResourceResourceAuroraMysqlArrayOutputWithContext(context.Context) GetResourceResourceAuroraMysqlArrayOutput
}

type GetResourceResourceAuroraMysqlArray []GetResourceResourceAuroraMysqlInput

func (GetResourceResourceAuroraMysqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAuroraMysql)(nil)).Elem()
}

func (i GetResourceResourceAuroraMysqlArray) ToGetResourceResourceAuroraMysqlArrayOutput() GetResourceResourceAuroraMysqlArrayOutput {
	return i.ToGetResourceResourceAuroraMysqlArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAuroraMysqlArray) ToGetResourceResourceAuroraMysqlArrayOutputWithContext(ctx context.Context) GetResourceResourceAuroraMysqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAuroraMysqlArrayOutput)
}

type GetResourceResourceAuroraMysqlOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAuroraMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAuroraMysql)(nil)).Elem()
}

func (o GetResourceResourceAuroraMysqlOutput) ToGetResourceResourceAuroraMysqlOutput() GetResourceResourceAuroraMysqlOutput {
	return o
}

func (o GetResourceResourceAuroraMysqlOutput) ToGetResourceResourceAuroraMysqlOutputWithContext(ctx context.Context) GetResourceResourceAuroraMysqlOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAuroraMysqlOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysql) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceAuroraMysqlOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysql) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAuroraMysqlOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysql) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAuroraMysqlOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysql) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAuroraMysqlOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysql) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAuroraMysqlOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysql) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceAuroraMysqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAuroraMysqlOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysql) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAuroraMysqlOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysql) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAuroraMysqlOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysql) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o GetResourceResourceAuroraMysqlOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysql) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAuroraMysqlOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysql) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAuroraMysqlOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysql) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAuroraMysqlOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysql) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o GetResourceResourceAuroraMysqlOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysql) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceAuroraMysqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceAuroraMysqlArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAuroraMysqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAuroraMysql)(nil)).Elem()
}

func (o GetResourceResourceAuroraMysqlArrayOutput) ToGetResourceResourceAuroraMysqlArrayOutput() GetResourceResourceAuroraMysqlArrayOutput {
	return o
}

func (o GetResourceResourceAuroraMysqlArrayOutput) ToGetResourceResourceAuroraMysqlArrayOutputWithContext(ctx context.Context) GetResourceResourceAuroraMysqlArrayOutput {
	return o
}

func (o GetResourceResourceAuroraMysqlArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAuroraMysqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAuroraMysql {
		return vs[0].([]GetResourceResourceAuroraMysql)[vs[1].(int)]
	}).(GetResourceResourceAuroraMysqlOutput)
}

type GetResourceResourceAuroraMysqlIam struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
	RoleAssumptionArn *string `pulumi:"roleAssumptionArn"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceAuroraMysqlIamInput is an input type that accepts GetResourceResourceAuroraMysqlIamArgs and GetResourceResourceAuroraMysqlIamOutput values.
// You can construct a concrete instance of `GetResourceResourceAuroraMysqlIamInput` via:
//
//	GetResourceResourceAuroraMysqlIamArgs{...}
type GetResourceResourceAuroraMysqlIamInput interface {
	pulumi.Input

	ToGetResourceResourceAuroraMysqlIamOutput() GetResourceResourceAuroraMysqlIamOutput
	ToGetResourceResourceAuroraMysqlIamOutputWithContext(context.Context) GetResourceResourceAuroraMysqlIamOutput
}

type GetResourceResourceAuroraMysqlIamArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
	RoleAssumptionArn pulumi.StringPtrInput `pulumi:"roleAssumptionArn"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceAuroraMysqlIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAuroraMysqlIam)(nil)).Elem()
}

func (i GetResourceResourceAuroraMysqlIamArgs) ToGetResourceResourceAuroraMysqlIamOutput() GetResourceResourceAuroraMysqlIamOutput {
	return i.ToGetResourceResourceAuroraMysqlIamOutputWithContext(context.Background())
}

func (i GetResourceResourceAuroraMysqlIamArgs) ToGetResourceResourceAuroraMysqlIamOutputWithContext(ctx context.Context) GetResourceResourceAuroraMysqlIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAuroraMysqlIamOutput)
}

// GetResourceResourceAuroraMysqlIamArrayInput is an input type that accepts GetResourceResourceAuroraMysqlIamArray and GetResourceResourceAuroraMysqlIamArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAuroraMysqlIamArrayInput` via:
//
//	GetResourceResourceAuroraMysqlIamArray{ GetResourceResourceAuroraMysqlIamArgs{...} }
type GetResourceResourceAuroraMysqlIamArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAuroraMysqlIamArrayOutput() GetResourceResourceAuroraMysqlIamArrayOutput
	ToGetResourceResourceAuroraMysqlIamArrayOutputWithContext(context.Context) GetResourceResourceAuroraMysqlIamArrayOutput
}

type GetResourceResourceAuroraMysqlIamArray []GetResourceResourceAuroraMysqlIamInput

func (GetResourceResourceAuroraMysqlIamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAuroraMysqlIam)(nil)).Elem()
}

func (i GetResourceResourceAuroraMysqlIamArray) ToGetResourceResourceAuroraMysqlIamArrayOutput() GetResourceResourceAuroraMysqlIamArrayOutput {
	return i.ToGetResourceResourceAuroraMysqlIamArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAuroraMysqlIamArray) ToGetResourceResourceAuroraMysqlIamArrayOutputWithContext(ctx context.Context) GetResourceResourceAuroraMysqlIamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAuroraMysqlIamArrayOutput)
}

type GetResourceResourceAuroraMysqlIamOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAuroraMysqlIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAuroraMysqlIam)(nil)).Elem()
}

func (o GetResourceResourceAuroraMysqlIamOutput) ToGetResourceResourceAuroraMysqlIamOutput() GetResourceResourceAuroraMysqlIamOutput {
	return o
}

func (o GetResourceResourceAuroraMysqlIamOutput) ToGetResourceResourceAuroraMysqlIamOutputWithContext(ctx context.Context) GetResourceResourceAuroraMysqlIamOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAuroraMysqlIamOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysqlIam) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceAuroraMysqlIamOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysqlIam) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAuroraMysqlIamOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysqlIam) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAuroraMysqlIamOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysqlIam) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAuroraMysqlIamOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysqlIam) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAuroraMysqlIamOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysqlIam) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAuroraMysqlIamOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysqlIam) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAuroraMysqlIamOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysqlIam) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAuroraMysqlIamOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysqlIam) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o GetResourceResourceAuroraMysqlIamOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysqlIam) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
func (o GetResourceResourceAuroraMysqlIamOutput) RoleAssumptionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysqlIam) *string { return v.RoleAssumptionArn }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAuroraMysqlIamOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysqlIam) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAuroraMysqlIamOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysqlIam) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAuroraMysqlIamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysqlIam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceAuroraMysqlIamOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraMysqlIam) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceAuroraMysqlIamArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAuroraMysqlIamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAuroraMysqlIam)(nil)).Elem()
}

func (o GetResourceResourceAuroraMysqlIamArrayOutput) ToGetResourceResourceAuroraMysqlIamArrayOutput() GetResourceResourceAuroraMysqlIamArrayOutput {
	return o
}

func (o GetResourceResourceAuroraMysqlIamArrayOutput) ToGetResourceResourceAuroraMysqlIamArrayOutputWithContext(ctx context.Context) GetResourceResourceAuroraMysqlIamArrayOutput {
	return o
}

func (o GetResourceResourceAuroraMysqlIamArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAuroraMysqlIamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAuroraMysqlIam {
		return vs[0].([]GetResourceResourceAuroraMysqlIam)[vs[1].(int)]
	}).(GetResourceResourceAuroraMysqlIamOutput)
}

type GetResourceResourceAuroraPostgre struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceAuroraPostgreInput is an input type that accepts GetResourceResourceAuroraPostgreArgs and GetResourceResourceAuroraPostgreOutput values.
// You can construct a concrete instance of `GetResourceResourceAuroraPostgreInput` via:
//
//	GetResourceResourceAuroraPostgreArgs{...}
type GetResourceResourceAuroraPostgreInput interface {
	pulumi.Input

	ToGetResourceResourceAuroraPostgreOutput() GetResourceResourceAuroraPostgreOutput
	ToGetResourceResourceAuroraPostgreOutputWithContext(context.Context) GetResourceResourceAuroraPostgreOutput
}

type GetResourceResourceAuroraPostgreArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceAuroraPostgreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAuroraPostgre)(nil)).Elem()
}

func (i GetResourceResourceAuroraPostgreArgs) ToGetResourceResourceAuroraPostgreOutput() GetResourceResourceAuroraPostgreOutput {
	return i.ToGetResourceResourceAuroraPostgreOutputWithContext(context.Background())
}

func (i GetResourceResourceAuroraPostgreArgs) ToGetResourceResourceAuroraPostgreOutputWithContext(ctx context.Context) GetResourceResourceAuroraPostgreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAuroraPostgreOutput)
}

// GetResourceResourceAuroraPostgreArrayInput is an input type that accepts GetResourceResourceAuroraPostgreArray and GetResourceResourceAuroraPostgreArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAuroraPostgreArrayInput` via:
//
//	GetResourceResourceAuroraPostgreArray{ GetResourceResourceAuroraPostgreArgs{...} }
type GetResourceResourceAuroraPostgreArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAuroraPostgreArrayOutput() GetResourceResourceAuroraPostgreArrayOutput
	ToGetResourceResourceAuroraPostgreArrayOutputWithContext(context.Context) GetResourceResourceAuroraPostgreArrayOutput
}

type GetResourceResourceAuroraPostgreArray []GetResourceResourceAuroraPostgreInput

func (GetResourceResourceAuroraPostgreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAuroraPostgre)(nil)).Elem()
}

func (i GetResourceResourceAuroraPostgreArray) ToGetResourceResourceAuroraPostgreArrayOutput() GetResourceResourceAuroraPostgreArrayOutput {
	return i.ToGetResourceResourceAuroraPostgreArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAuroraPostgreArray) ToGetResourceResourceAuroraPostgreArrayOutputWithContext(ctx context.Context) GetResourceResourceAuroraPostgreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAuroraPostgreArrayOutput)
}

type GetResourceResourceAuroraPostgreOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAuroraPostgreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAuroraPostgre)(nil)).Elem()
}

func (o GetResourceResourceAuroraPostgreOutput) ToGetResourceResourceAuroraPostgreOutput() GetResourceResourceAuroraPostgreOutput {
	return o
}

func (o GetResourceResourceAuroraPostgreOutput) ToGetResourceResourceAuroraPostgreOutputWithContext(ctx context.Context) GetResourceResourceAuroraPostgreOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAuroraPostgreOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgre) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceAuroraPostgreOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgre) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAuroraPostgreOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgre) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAuroraPostgreOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgre) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAuroraPostgreOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgre) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAuroraPostgreOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgre) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o GetResourceResourceAuroraPostgreOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgre) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceAuroraPostgreOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgre) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAuroraPostgreOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgre) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAuroraPostgreOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgre) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAuroraPostgreOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgre) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAuroraPostgreOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgre) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAuroraPostgreOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgre) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAuroraPostgreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgre) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceAuroraPostgreOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgre) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceAuroraPostgreArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAuroraPostgreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAuroraPostgre)(nil)).Elem()
}

func (o GetResourceResourceAuroraPostgreArrayOutput) ToGetResourceResourceAuroraPostgreArrayOutput() GetResourceResourceAuroraPostgreArrayOutput {
	return o
}

func (o GetResourceResourceAuroraPostgreArrayOutput) ToGetResourceResourceAuroraPostgreArrayOutputWithContext(ctx context.Context) GetResourceResourceAuroraPostgreArrayOutput {
	return o
}

func (o GetResourceResourceAuroraPostgreArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAuroraPostgreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAuroraPostgre {
		return vs[0].([]GetResourceResourceAuroraPostgre)[vs[1].(int)]
	}).(GetResourceResourceAuroraPostgreOutput)
}

type GetResourceResourceAuroraPostgresIam struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
	RoleAssumptionArn *string `pulumi:"roleAssumptionArn"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceAuroraPostgresIamInput is an input type that accepts GetResourceResourceAuroraPostgresIamArgs and GetResourceResourceAuroraPostgresIamOutput values.
// You can construct a concrete instance of `GetResourceResourceAuroraPostgresIamInput` via:
//
//	GetResourceResourceAuroraPostgresIamArgs{...}
type GetResourceResourceAuroraPostgresIamInput interface {
	pulumi.Input

	ToGetResourceResourceAuroraPostgresIamOutput() GetResourceResourceAuroraPostgresIamOutput
	ToGetResourceResourceAuroraPostgresIamOutputWithContext(context.Context) GetResourceResourceAuroraPostgresIamOutput
}

type GetResourceResourceAuroraPostgresIamArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
	RoleAssumptionArn pulumi.StringPtrInput `pulumi:"roleAssumptionArn"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceAuroraPostgresIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAuroraPostgresIam)(nil)).Elem()
}

func (i GetResourceResourceAuroraPostgresIamArgs) ToGetResourceResourceAuroraPostgresIamOutput() GetResourceResourceAuroraPostgresIamOutput {
	return i.ToGetResourceResourceAuroraPostgresIamOutputWithContext(context.Background())
}

func (i GetResourceResourceAuroraPostgresIamArgs) ToGetResourceResourceAuroraPostgresIamOutputWithContext(ctx context.Context) GetResourceResourceAuroraPostgresIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAuroraPostgresIamOutput)
}

// GetResourceResourceAuroraPostgresIamArrayInput is an input type that accepts GetResourceResourceAuroraPostgresIamArray and GetResourceResourceAuroraPostgresIamArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAuroraPostgresIamArrayInput` via:
//
//	GetResourceResourceAuroraPostgresIamArray{ GetResourceResourceAuroraPostgresIamArgs{...} }
type GetResourceResourceAuroraPostgresIamArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAuroraPostgresIamArrayOutput() GetResourceResourceAuroraPostgresIamArrayOutput
	ToGetResourceResourceAuroraPostgresIamArrayOutputWithContext(context.Context) GetResourceResourceAuroraPostgresIamArrayOutput
}

type GetResourceResourceAuroraPostgresIamArray []GetResourceResourceAuroraPostgresIamInput

func (GetResourceResourceAuroraPostgresIamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAuroraPostgresIam)(nil)).Elem()
}

func (i GetResourceResourceAuroraPostgresIamArray) ToGetResourceResourceAuroraPostgresIamArrayOutput() GetResourceResourceAuroraPostgresIamArrayOutput {
	return i.ToGetResourceResourceAuroraPostgresIamArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAuroraPostgresIamArray) ToGetResourceResourceAuroraPostgresIamArrayOutputWithContext(ctx context.Context) GetResourceResourceAuroraPostgresIamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAuroraPostgresIamArrayOutput)
}

type GetResourceResourceAuroraPostgresIamOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAuroraPostgresIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAuroraPostgresIam)(nil)).Elem()
}

func (o GetResourceResourceAuroraPostgresIamOutput) ToGetResourceResourceAuroraPostgresIamOutput() GetResourceResourceAuroraPostgresIamOutput {
	return o
}

func (o GetResourceResourceAuroraPostgresIamOutput) ToGetResourceResourceAuroraPostgresIamOutputWithContext(ctx context.Context) GetResourceResourceAuroraPostgresIamOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAuroraPostgresIamOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgresIam) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceAuroraPostgresIamOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgresIam) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAuroraPostgresIamOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgresIam) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAuroraPostgresIamOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgresIam) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAuroraPostgresIamOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgresIam) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAuroraPostgresIamOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgresIam) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o GetResourceResourceAuroraPostgresIamOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgresIam) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAuroraPostgresIamOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgresIam) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAuroraPostgresIamOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgresIam) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAuroraPostgresIamOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgresIam) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o GetResourceResourceAuroraPostgresIamOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgresIam) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
func (o GetResourceResourceAuroraPostgresIamOutput) RoleAssumptionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgresIam) *string { return v.RoleAssumptionArn }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAuroraPostgresIamOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgresIam) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAuroraPostgresIamOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgresIam) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAuroraPostgresIamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgresIam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceAuroraPostgresIamOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAuroraPostgresIam) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceAuroraPostgresIamArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAuroraPostgresIamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAuroraPostgresIam)(nil)).Elem()
}

func (o GetResourceResourceAuroraPostgresIamArrayOutput) ToGetResourceResourceAuroraPostgresIamArrayOutput() GetResourceResourceAuroraPostgresIamArrayOutput {
	return o
}

func (o GetResourceResourceAuroraPostgresIamArrayOutput) ToGetResourceResourceAuroraPostgresIamArrayOutputWithContext(ctx context.Context) GetResourceResourceAuroraPostgresIamArrayOutput {
	return o
}

func (o GetResourceResourceAuroraPostgresIamArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAuroraPostgresIamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAuroraPostgresIam {
		return vs[0].([]GetResourceResourceAuroraPostgresIam)[vs[1].(int)]
	}).(GetResourceResourceAuroraPostgresIamOutput)
}

type GetResourceResourceAw struct {
	// The Access Key ID to use to authenticate.
	AccessKey *string `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The AWS region healthcheck requests should attempt to connect to.
	HealthcheckRegion *string `pulumi:"healthcheckRegion"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceAwInput is an input type that accepts GetResourceResourceAwArgs and GetResourceResourceAwOutput values.
// You can construct a concrete instance of `GetResourceResourceAwInput` via:
//
//	GetResourceResourceAwArgs{...}
type GetResourceResourceAwInput interface {
	pulumi.Input

	ToGetResourceResourceAwOutput() GetResourceResourceAwOutput
	ToGetResourceResourceAwOutputWithContext(context.Context) GetResourceResourceAwOutput
}

type GetResourceResourceAwArgs struct {
	// The Access Key ID to use to authenticate.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The AWS region healthcheck requests should attempt to connect to.
	HealthcheckRegion pulumi.StringPtrInput `pulumi:"healthcheckRegion"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceAwArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAw)(nil)).Elem()
}

func (i GetResourceResourceAwArgs) ToGetResourceResourceAwOutput() GetResourceResourceAwOutput {
	return i.ToGetResourceResourceAwOutputWithContext(context.Background())
}

func (i GetResourceResourceAwArgs) ToGetResourceResourceAwOutputWithContext(ctx context.Context) GetResourceResourceAwOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAwOutput)
}

// GetResourceResourceAwArrayInput is an input type that accepts GetResourceResourceAwArray and GetResourceResourceAwArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAwArrayInput` via:
//
//	GetResourceResourceAwArray{ GetResourceResourceAwArgs{...} }
type GetResourceResourceAwArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAwArrayOutput() GetResourceResourceAwArrayOutput
	ToGetResourceResourceAwArrayOutputWithContext(context.Context) GetResourceResourceAwArrayOutput
}

type GetResourceResourceAwArray []GetResourceResourceAwInput

func (GetResourceResourceAwArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAw)(nil)).Elem()
}

func (i GetResourceResourceAwArray) ToGetResourceResourceAwArrayOutput() GetResourceResourceAwArrayOutput {
	return i.ToGetResourceResourceAwArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAwArray) ToGetResourceResourceAwArrayOutputWithContext(ctx context.Context) GetResourceResourceAwArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAwArrayOutput)
}

type GetResourceResourceAwOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAwOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAw)(nil)).Elem()
}

func (o GetResourceResourceAwOutput) ToGetResourceResourceAwOutput() GetResourceResourceAwOutput {
	return o
}

func (o GetResourceResourceAwOutput) ToGetResourceResourceAwOutputWithContext(ctx context.Context) GetResourceResourceAwOutput {
	return o
}

// The Access Key ID to use to authenticate.
func (o GetResourceResourceAwOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAw) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAwOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAw) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAwOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAw) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The AWS region healthcheck requests should attempt to connect to.
func (o GetResourceResourceAwOutput) HealthcheckRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAw) *string { return v.HealthcheckRegion }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAwOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAw) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAwOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAw) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAwOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAw) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAwOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAw) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o GetResourceResourceAwOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAw) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o GetResourceResourceAwOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAw) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o GetResourceResourceAwOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAw) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAwOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAw) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAwOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAw) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAwOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAw) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceAwArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAwArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAw)(nil)).Elem()
}

func (o GetResourceResourceAwArrayOutput) ToGetResourceResourceAwArrayOutput() GetResourceResourceAwArrayOutput {
	return o
}

func (o GetResourceResourceAwArrayOutput) ToGetResourceResourceAwArrayOutputWithContext(ctx context.Context) GetResourceResourceAwArrayOutput {
	return o
}

func (o GetResourceResourceAwArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAwOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAw {
		return vs[0].([]GetResourceResourceAw)[vs[1].(int)]
	}).(GetResourceResourceAwOutput)
}

type GetResourceResourceAwsConsole struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// If true, prefer environment variables to authenticate connection even if EC2 roles are configured.
	EnableEnvVariables *bool `pulumi:"enableEnvVariables"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// The length of time in seconds console sessions will live before needing to reauthenticate.
	SessionExpiry *int `pulumi:"sessionExpiry"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceAwsConsoleInput is an input type that accepts GetResourceResourceAwsConsoleArgs and GetResourceResourceAwsConsoleOutput values.
// You can construct a concrete instance of `GetResourceResourceAwsConsoleInput` via:
//
//	GetResourceResourceAwsConsoleArgs{...}
type GetResourceResourceAwsConsoleInput interface {
	pulumi.Input

	ToGetResourceResourceAwsConsoleOutput() GetResourceResourceAwsConsoleOutput
	ToGetResourceResourceAwsConsoleOutputWithContext(context.Context) GetResourceResourceAwsConsoleOutput
}

type GetResourceResourceAwsConsoleArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// If true, prefer environment variables to authenticate connection even if EC2 roles are configured.
	EnableEnvVariables pulumi.BoolPtrInput `pulumi:"enableEnvVariables"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// The length of time in seconds console sessions will live before needing to reauthenticate.
	SessionExpiry pulumi.IntPtrInput `pulumi:"sessionExpiry"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceAwsConsoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAwsConsole)(nil)).Elem()
}

func (i GetResourceResourceAwsConsoleArgs) ToGetResourceResourceAwsConsoleOutput() GetResourceResourceAwsConsoleOutput {
	return i.ToGetResourceResourceAwsConsoleOutputWithContext(context.Background())
}

func (i GetResourceResourceAwsConsoleArgs) ToGetResourceResourceAwsConsoleOutputWithContext(ctx context.Context) GetResourceResourceAwsConsoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAwsConsoleOutput)
}

// GetResourceResourceAwsConsoleArrayInput is an input type that accepts GetResourceResourceAwsConsoleArray and GetResourceResourceAwsConsoleArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAwsConsoleArrayInput` via:
//
//	GetResourceResourceAwsConsoleArray{ GetResourceResourceAwsConsoleArgs{...} }
type GetResourceResourceAwsConsoleArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAwsConsoleArrayOutput() GetResourceResourceAwsConsoleArrayOutput
	ToGetResourceResourceAwsConsoleArrayOutputWithContext(context.Context) GetResourceResourceAwsConsoleArrayOutput
}

type GetResourceResourceAwsConsoleArray []GetResourceResourceAwsConsoleInput

func (GetResourceResourceAwsConsoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAwsConsole)(nil)).Elem()
}

func (i GetResourceResourceAwsConsoleArray) ToGetResourceResourceAwsConsoleArrayOutput() GetResourceResourceAwsConsoleArrayOutput {
	return i.ToGetResourceResourceAwsConsoleArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAwsConsoleArray) ToGetResourceResourceAwsConsoleArrayOutputWithContext(ctx context.Context) GetResourceResourceAwsConsoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAwsConsoleArrayOutput)
}

type GetResourceResourceAwsConsoleOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAwsConsoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAwsConsole)(nil)).Elem()
}

func (o GetResourceResourceAwsConsoleOutput) ToGetResourceResourceAwsConsoleOutput() GetResourceResourceAwsConsoleOutput {
	return o
}

func (o GetResourceResourceAwsConsoleOutput) ToGetResourceResourceAwsConsoleOutputWithContext(ctx context.Context) GetResourceResourceAwsConsoleOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAwsConsoleOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsole) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAwsConsoleOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsole) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// If true, prefer environment variables to authenticate connection even if EC2 roles are configured.
func (o GetResourceResourceAwsConsoleOutput) EnableEnvVariables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsole) *bool { return v.EnableEnvVariables }).(pulumi.BoolPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAwsConsoleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsole) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o GetResourceResourceAwsConsoleOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsole) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o GetResourceResourceAwsConsoleOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsole) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAwsConsoleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsole) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAwsConsoleOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsole) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAwsConsoleOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsole) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o GetResourceResourceAwsConsoleOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsole) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o GetResourceResourceAwsConsoleOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsole) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o GetResourceResourceAwsConsoleOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsole) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAwsConsoleOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsole) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// The length of time in seconds console sessions will live before needing to reauthenticate.
func (o GetResourceResourceAwsConsoleOutput) SessionExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsole) *int { return v.SessionExpiry }).(pulumi.IntPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAwsConsoleOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsole) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAwsConsoleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsole) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceAwsConsoleArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAwsConsoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAwsConsole)(nil)).Elem()
}

func (o GetResourceResourceAwsConsoleArrayOutput) ToGetResourceResourceAwsConsoleArrayOutput() GetResourceResourceAwsConsoleArrayOutput {
	return o
}

func (o GetResourceResourceAwsConsoleArrayOutput) ToGetResourceResourceAwsConsoleArrayOutputWithContext(ctx context.Context) GetResourceResourceAwsConsoleArrayOutput {
	return o
}

func (o GetResourceResourceAwsConsoleArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAwsConsoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAwsConsole {
		return vs[0].([]GetResourceResourceAwsConsole)[vs[1].(int)]
	}).(GetResourceResourceAwsConsoleOutput)
}

type GetResourceResourceAwsConsoleStaticKeyPair struct {
	// The Access Key ID to use to authenticate.
	AccessKey *string `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// The length of time in seconds console sessions will live before needing to reauthenticate.
	SessionExpiry *int `pulumi:"sessionExpiry"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceAwsConsoleStaticKeyPairInput is an input type that accepts GetResourceResourceAwsConsoleStaticKeyPairArgs and GetResourceResourceAwsConsoleStaticKeyPairOutput values.
// You can construct a concrete instance of `GetResourceResourceAwsConsoleStaticKeyPairInput` via:
//
//	GetResourceResourceAwsConsoleStaticKeyPairArgs{...}
type GetResourceResourceAwsConsoleStaticKeyPairInput interface {
	pulumi.Input

	ToGetResourceResourceAwsConsoleStaticKeyPairOutput() GetResourceResourceAwsConsoleStaticKeyPairOutput
	ToGetResourceResourceAwsConsoleStaticKeyPairOutputWithContext(context.Context) GetResourceResourceAwsConsoleStaticKeyPairOutput
}

type GetResourceResourceAwsConsoleStaticKeyPairArgs struct {
	// The Access Key ID to use to authenticate.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// The length of time in seconds console sessions will live before needing to reauthenticate.
	SessionExpiry pulumi.IntPtrInput `pulumi:"sessionExpiry"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceAwsConsoleStaticKeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAwsConsoleStaticKeyPair)(nil)).Elem()
}

func (i GetResourceResourceAwsConsoleStaticKeyPairArgs) ToGetResourceResourceAwsConsoleStaticKeyPairOutput() GetResourceResourceAwsConsoleStaticKeyPairOutput {
	return i.ToGetResourceResourceAwsConsoleStaticKeyPairOutputWithContext(context.Background())
}

func (i GetResourceResourceAwsConsoleStaticKeyPairArgs) ToGetResourceResourceAwsConsoleStaticKeyPairOutputWithContext(ctx context.Context) GetResourceResourceAwsConsoleStaticKeyPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAwsConsoleStaticKeyPairOutput)
}

// GetResourceResourceAwsConsoleStaticKeyPairArrayInput is an input type that accepts GetResourceResourceAwsConsoleStaticKeyPairArray and GetResourceResourceAwsConsoleStaticKeyPairArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAwsConsoleStaticKeyPairArrayInput` via:
//
//	GetResourceResourceAwsConsoleStaticKeyPairArray{ GetResourceResourceAwsConsoleStaticKeyPairArgs{...} }
type GetResourceResourceAwsConsoleStaticKeyPairArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAwsConsoleStaticKeyPairArrayOutput() GetResourceResourceAwsConsoleStaticKeyPairArrayOutput
	ToGetResourceResourceAwsConsoleStaticKeyPairArrayOutputWithContext(context.Context) GetResourceResourceAwsConsoleStaticKeyPairArrayOutput
}

type GetResourceResourceAwsConsoleStaticKeyPairArray []GetResourceResourceAwsConsoleStaticKeyPairInput

func (GetResourceResourceAwsConsoleStaticKeyPairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAwsConsoleStaticKeyPair)(nil)).Elem()
}

func (i GetResourceResourceAwsConsoleStaticKeyPairArray) ToGetResourceResourceAwsConsoleStaticKeyPairArrayOutput() GetResourceResourceAwsConsoleStaticKeyPairArrayOutput {
	return i.ToGetResourceResourceAwsConsoleStaticKeyPairArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAwsConsoleStaticKeyPairArray) ToGetResourceResourceAwsConsoleStaticKeyPairArrayOutputWithContext(ctx context.Context) GetResourceResourceAwsConsoleStaticKeyPairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAwsConsoleStaticKeyPairArrayOutput)
}

type GetResourceResourceAwsConsoleStaticKeyPairOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAwsConsoleStaticKeyPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAwsConsoleStaticKeyPair)(nil)).Elem()
}

func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) ToGetResourceResourceAwsConsoleStaticKeyPairOutput() GetResourceResourceAwsConsoleStaticKeyPairOutput {
	return o
}

func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) ToGetResourceResourceAwsConsoleStaticKeyPairOutputWithContext(ctx context.Context) GetResourceResourceAwsConsoleStaticKeyPairOutput {
	return o
}

// The Access Key ID to use to authenticate.
func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsoleStaticKeyPair) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsoleStaticKeyPair) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsoleStaticKeyPair) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsoleStaticKeyPair) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsoleStaticKeyPair) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsoleStaticKeyPair) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsoleStaticKeyPair) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsoleStaticKeyPair) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsoleStaticKeyPair) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsoleStaticKeyPair) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsoleStaticKeyPair) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsoleStaticKeyPair) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsoleStaticKeyPair) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsoleStaticKeyPair) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// The length of time in seconds console sessions will live before needing to reauthenticate.
func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) SessionExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsoleStaticKeyPair) *int { return v.SessionExpiry }).(pulumi.IntPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsoleStaticKeyPair) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAwsConsoleStaticKeyPairOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAwsConsoleStaticKeyPair) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceAwsConsoleStaticKeyPairArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAwsConsoleStaticKeyPairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAwsConsoleStaticKeyPair)(nil)).Elem()
}

func (o GetResourceResourceAwsConsoleStaticKeyPairArrayOutput) ToGetResourceResourceAwsConsoleStaticKeyPairArrayOutput() GetResourceResourceAwsConsoleStaticKeyPairArrayOutput {
	return o
}

func (o GetResourceResourceAwsConsoleStaticKeyPairArrayOutput) ToGetResourceResourceAwsConsoleStaticKeyPairArrayOutputWithContext(ctx context.Context) GetResourceResourceAwsConsoleStaticKeyPairArrayOutput {
	return o
}

func (o GetResourceResourceAwsConsoleStaticKeyPairArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAwsConsoleStaticKeyPairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAwsConsoleStaticKeyPair {
		return vs[0].([]GetResourceResourceAwsConsoleStaticKeyPair)[vs[1].(int)]
	}).(GetResourceResourceAwsConsoleStaticKeyPairOutput)
}

type GetResourceResourceAwsInstanceProfile struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// If true, prefer environment variables to authenticate connection even if EC2 roles are configured.
	EnableEnvVariables *bool `pulumi:"enableEnvVariables"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceAwsInstanceProfileInput is an input type that accepts GetResourceResourceAwsInstanceProfileArgs and GetResourceResourceAwsInstanceProfileOutput values.
// You can construct a concrete instance of `GetResourceResourceAwsInstanceProfileInput` via:
//
//	GetResourceResourceAwsInstanceProfileArgs{...}
type GetResourceResourceAwsInstanceProfileInput interface {
	pulumi.Input

	ToGetResourceResourceAwsInstanceProfileOutput() GetResourceResourceAwsInstanceProfileOutput
	ToGetResourceResourceAwsInstanceProfileOutputWithContext(context.Context) GetResourceResourceAwsInstanceProfileOutput
}

type GetResourceResourceAwsInstanceProfileArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// If true, prefer environment variables to authenticate connection even if EC2 roles are configured.
	EnableEnvVariables pulumi.BoolPtrInput `pulumi:"enableEnvVariables"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceAwsInstanceProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAwsInstanceProfile)(nil)).Elem()
}

func (i GetResourceResourceAwsInstanceProfileArgs) ToGetResourceResourceAwsInstanceProfileOutput() GetResourceResourceAwsInstanceProfileOutput {
	return i.ToGetResourceResourceAwsInstanceProfileOutputWithContext(context.Background())
}

func (i GetResourceResourceAwsInstanceProfileArgs) ToGetResourceResourceAwsInstanceProfileOutputWithContext(ctx context.Context) GetResourceResourceAwsInstanceProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAwsInstanceProfileOutput)
}

// GetResourceResourceAwsInstanceProfileArrayInput is an input type that accepts GetResourceResourceAwsInstanceProfileArray and GetResourceResourceAwsInstanceProfileArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAwsInstanceProfileArrayInput` via:
//
//	GetResourceResourceAwsInstanceProfileArray{ GetResourceResourceAwsInstanceProfileArgs{...} }
type GetResourceResourceAwsInstanceProfileArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAwsInstanceProfileArrayOutput() GetResourceResourceAwsInstanceProfileArrayOutput
	ToGetResourceResourceAwsInstanceProfileArrayOutputWithContext(context.Context) GetResourceResourceAwsInstanceProfileArrayOutput
}

type GetResourceResourceAwsInstanceProfileArray []GetResourceResourceAwsInstanceProfileInput

func (GetResourceResourceAwsInstanceProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAwsInstanceProfile)(nil)).Elem()
}

func (i GetResourceResourceAwsInstanceProfileArray) ToGetResourceResourceAwsInstanceProfileArrayOutput() GetResourceResourceAwsInstanceProfileArrayOutput {
	return i.ToGetResourceResourceAwsInstanceProfileArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAwsInstanceProfileArray) ToGetResourceResourceAwsInstanceProfileArrayOutputWithContext(ctx context.Context) GetResourceResourceAwsInstanceProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAwsInstanceProfileArrayOutput)
}

type GetResourceResourceAwsInstanceProfileOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAwsInstanceProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAwsInstanceProfile)(nil)).Elem()
}

func (o GetResourceResourceAwsInstanceProfileOutput) ToGetResourceResourceAwsInstanceProfileOutput() GetResourceResourceAwsInstanceProfileOutput {
	return o
}

func (o GetResourceResourceAwsInstanceProfileOutput) ToGetResourceResourceAwsInstanceProfileOutputWithContext(ctx context.Context) GetResourceResourceAwsInstanceProfileOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAwsInstanceProfileOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsInstanceProfile) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAwsInstanceProfileOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsInstanceProfile) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// If true, prefer environment variables to authenticate connection even if EC2 roles are configured.
func (o GetResourceResourceAwsInstanceProfileOutput) EnableEnvVariables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsInstanceProfile) *bool { return v.EnableEnvVariables }).(pulumi.BoolPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAwsInstanceProfileOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsInstanceProfile) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAwsInstanceProfileOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsInstanceProfile) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAwsInstanceProfileOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsInstanceProfile) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAwsInstanceProfileOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsInstanceProfile) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o GetResourceResourceAwsInstanceProfileOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsInstanceProfile) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o GetResourceResourceAwsInstanceProfileOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsInstanceProfile) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o GetResourceResourceAwsInstanceProfileOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsInstanceProfile) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAwsInstanceProfileOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsInstanceProfile) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAwsInstanceProfileOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAwsInstanceProfile) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAwsInstanceProfileOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAwsInstanceProfile) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceAwsInstanceProfileArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAwsInstanceProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAwsInstanceProfile)(nil)).Elem()
}

func (o GetResourceResourceAwsInstanceProfileArrayOutput) ToGetResourceResourceAwsInstanceProfileArrayOutput() GetResourceResourceAwsInstanceProfileArrayOutput {
	return o
}

func (o GetResourceResourceAwsInstanceProfileArrayOutput) ToGetResourceResourceAwsInstanceProfileArrayOutputWithContext(ctx context.Context) GetResourceResourceAwsInstanceProfileArrayOutput {
	return o
}

func (o GetResourceResourceAwsInstanceProfileArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAwsInstanceProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAwsInstanceProfile {
		return vs[0].([]GetResourceResourceAwsInstanceProfile)[vs[1].(int)]
	}).(GetResourceResourceAwsInstanceProfileOutput)
}

type GetResourceResourceAzure struct {
	// The application ID to authenticate with.
	AppId *string `pulumi:"appId"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The Azure AD directory (tenant) ID with which to authenticate.
	// * sql_server_kerberos_ad:
	TenantId *string `pulumi:"tenantId"`
}

// GetResourceResourceAzureInput is an input type that accepts GetResourceResourceAzureArgs and GetResourceResourceAzureOutput values.
// You can construct a concrete instance of `GetResourceResourceAzureInput` via:
//
//	GetResourceResourceAzureArgs{...}
type GetResourceResourceAzureInput interface {
	pulumi.Input

	ToGetResourceResourceAzureOutput() GetResourceResourceAzureOutput
	ToGetResourceResourceAzureOutputWithContext(context.Context) GetResourceResourceAzureOutput
}

type GetResourceResourceAzureArgs struct {
	// The application ID to authenticate with.
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The Azure AD directory (tenant) ID with which to authenticate.
	// * sql_server_kerberos_ad:
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (GetResourceResourceAzureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAzure)(nil)).Elem()
}

func (i GetResourceResourceAzureArgs) ToGetResourceResourceAzureOutput() GetResourceResourceAzureOutput {
	return i.ToGetResourceResourceAzureOutputWithContext(context.Background())
}

func (i GetResourceResourceAzureArgs) ToGetResourceResourceAzureOutputWithContext(ctx context.Context) GetResourceResourceAzureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAzureOutput)
}

// GetResourceResourceAzureArrayInput is an input type that accepts GetResourceResourceAzureArray and GetResourceResourceAzureArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAzureArrayInput` via:
//
//	GetResourceResourceAzureArray{ GetResourceResourceAzureArgs{...} }
type GetResourceResourceAzureArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAzureArrayOutput() GetResourceResourceAzureArrayOutput
	ToGetResourceResourceAzureArrayOutputWithContext(context.Context) GetResourceResourceAzureArrayOutput
}

type GetResourceResourceAzureArray []GetResourceResourceAzureInput

func (GetResourceResourceAzureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAzure)(nil)).Elem()
}

func (i GetResourceResourceAzureArray) ToGetResourceResourceAzureArrayOutput() GetResourceResourceAzureArrayOutput {
	return i.ToGetResourceResourceAzureArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAzureArray) ToGetResourceResourceAzureArrayOutputWithContext(ctx context.Context) GetResourceResourceAzureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAzureArrayOutput)
}

type GetResourceResourceAzureOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAzureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAzure)(nil)).Elem()
}

func (o GetResourceResourceAzureOutput) ToGetResourceResourceAzureOutput() GetResourceResourceAzureOutput {
	return o
}

func (o GetResourceResourceAzureOutput) ToGetResourceResourceAzureOutputWithContext(ctx context.Context) GetResourceResourceAzureOutput {
	return o
}

// The application ID to authenticate with.
func (o GetResourceResourceAzureOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzure) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAzureOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzure) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAzureOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzure) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAzureOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzure) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAzureOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzure) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceAzureOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzure) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAzureOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzure) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAzureOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzure) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAzureOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzure) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAzureOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzure) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAzureOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAzure) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The Azure AD directory (tenant) ID with which to authenticate.
// * sql_server_kerberos_ad:
func (o GetResourceResourceAzureOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzure) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type GetResourceResourceAzureArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAzureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAzure)(nil)).Elem()
}

func (o GetResourceResourceAzureArrayOutput) ToGetResourceResourceAzureArrayOutput() GetResourceResourceAzureArrayOutput {
	return o
}

func (o GetResourceResourceAzureArrayOutput) ToGetResourceResourceAzureArrayOutputWithContext(ctx context.Context) GetResourceResourceAzureArrayOutput {
	return o
}

func (o GetResourceResourceAzureArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAzureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAzure {
		return vs[0].([]GetResourceResourceAzure)[vs[1].(int)]
	}).(GetResourceResourceAzureOutput)
}

type GetResourceResourceAzureCertificate struct {
	// The application ID to authenticate with.
	AppId *string `pulumi:"appId"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The Azure AD directory (tenant) ID with which to authenticate.
	// * sql_server_kerberos_ad:
	TenantId *string `pulumi:"tenantId"`
}

// GetResourceResourceAzureCertificateInput is an input type that accepts GetResourceResourceAzureCertificateArgs and GetResourceResourceAzureCertificateOutput values.
// You can construct a concrete instance of `GetResourceResourceAzureCertificateInput` via:
//
//	GetResourceResourceAzureCertificateArgs{...}
type GetResourceResourceAzureCertificateInput interface {
	pulumi.Input

	ToGetResourceResourceAzureCertificateOutput() GetResourceResourceAzureCertificateOutput
	ToGetResourceResourceAzureCertificateOutputWithContext(context.Context) GetResourceResourceAzureCertificateOutput
}

type GetResourceResourceAzureCertificateArgs struct {
	// The application ID to authenticate with.
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The Azure AD directory (tenant) ID with which to authenticate.
	// * sql_server_kerberos_ad:
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (GetResourceResourceAzureCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAzureCertificate)(nil)).Elem()
}

func (i GetResourceResourceAzureCertificateArgs) ToGetResourceResourceAzureCertificateOutput() GetResourceResourceAzureCertificateOutput {
	return i.ToGetResourceResourceAzureCertificateOutputWithContext(context.Background())
}

func (i GetResourceResourceAzureCertificateArgs) ToGetResourceResourceAzureCertificateOutputWithContext(ctx context.Context) GetResourceResourceAzureCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAzureCertificateOutput)
}

// GetResourceResourceAzureCertificateArrayInput is an input type that accepts GetResourceResourceAzureCertificateArray and GetResourceResourceAzureCertificateArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAzureCertificateArrayInput` via:
//
//	GetResourceResourceAzureCertificateArray{ GetResourceResourceAzureCertificateArgs{...} }
type GetResourceResourceAzureCertificateArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAzureCertificateArrayOutput() GetResourceResourceAzureCertificateArrayOutput
	ToGetResourceResourceAzureCertificateArrayOutputWithContext(context.Context) GetResourceResourceAzureCertificateArrayOutput
}

type GetResourceResourceAzureCertificateArray []GetResourceResourceAzureCertificateInput

func (GetResourceResourceAzureCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAzureCertificate)(nil)).Elem()
}

func (i GetResourceResourceAzureCertificateArray) ToGetResourceResourceAzureCertificateArrayOutput() GetResourceResourceAzureCertificateArrayOutput {
	return i.ToGetResourceResourceAzureCertificateArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAzureCertificateArray) ToGetResourceResourceAzureCertificateArrayOutputWithContext(ctx context.Context) GetResourceResourceAzureCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAzureCertificateArrayOutput)
}

type GetResourceResourceAzureCertificateOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAzureCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAzureCertificate)(nil)).Elem()
}

func (o GetResourceResourceAzureCertificateOutput) ToGetResourceResourceAzureCertificateOutput() GetResourceResourceAzureCertificateOutput {
	return o
}

func (o GetResourceResourceAzureCertificateOutput) ToGetResourceResourceAzureCertificateOutputWithContext(ctx context.Context) GetResourceResourceAzureCertificateOutput {
	return o
}

// The application ID to authenticate with.
func (o GetResourceResourceAzureCertificateOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureCertificate) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAzureCertificateOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureCertificate) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o GetResourceResourceAzureCertificateOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureCertificate) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAzureCertificateOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureCertificate) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAzureCertificateOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureCertificate) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAzureCertificateOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureCertificate) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAzureCertificateOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureCertificate) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAzureCertificateOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureCertificate) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAzureCertificateOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureCertificate) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAzureCertificateOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureCertificate) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAzureCertificateOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAzureCertificate) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The Azure AD directory (tenant) ID with which to authenticate.
// * sql_server_kerberos_ad:
func (o GetResourceResourceAzureCertificateOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureCertificate) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type GetResourceResourceAzureCertificateArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAzureCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAzureCertificate)(nil)).Elem()
}

func (o GetResourceResourceAzureCertificateArrayOutput) ToGetResourceResourceAzureCertificateArrayOutput() GetResourceResourceAzureCertificateArrayOutput {
	return o
}

func (o GetResourceResourceAzureCertificateArrayOutput) ToGetResourceResourceAzureCertificateArrayOutputWithContext(ctx context.Context) GetResourceResourceAzureCertificateArrayOutput {
	return o
}

func (o GetResourceResourceAzureCertificateArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAzureCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAzureCertificate {
		return vs[0].([]GetResourceResourceAzureCertificate)[vs[1].(int)]
	}).(GetResourceResourceAzureCertificateOutput)
}

type GetResourceResourceAzureMysql struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceAzureMysqlInput is an input type that accepts GetResourceResourceAzureMysqlArgs and GetResourceResourceAzureMysqlOutput values.
// You can construct a concrete instance of `GetResourceResourceAzureMysqlInput` via:
//
//	GetResourceResourceAzureMysqlArgs{...}
type GetResourceResourceAzureMysqlInput interface {
	pulumi.Input

	ToGetResourceResourceAzureMysqlOutput() GetResourceResourceAzureMysqlOutput
	ToGetResourceResourceAzureMysqlOutputWithContext(context.Context) GetResourceResourceAzureMysqlOutput
}

type GetResourceResourceAzureMysqlArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceAzureMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAzureMysql)(nil)).Elem()
}

func (i GetResourceResourceAzureMysqlArgs) ToGetResourceResourceAzureMysqlOutput() GetResourceResourceAzureMysqlOutput {
	return i.ToGetResourceResourceAzureMysqlOutputWithContext(context.Background())
}

func (i GetResourceResourceAzureMysqlArgs) ToGetResourceResourceAzureMysqlOutputWithContext(ctx context.Context) GetResourceResourceAzureMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAzureMysqlOutput)
}

// GetResourceResourceAzureMysqlArrayInput is an input type that accepts GetResourceResourceAzureMysqlArray and GetResourceResourceAzureMysqlArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAzureMysqlArrayInput` via:
//
//	GetResourceResourceAzureMysqlArray{ GetResourceResourceAzureMysqlArgs{...} }
type GetResourceResourceAzureMysqlArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAzureMysqlArrayOutput() GetResourceResourceAzureMysqlArrayOutput
	ToGetResourceResourceAzureMysqlArrayOutputWithContext(context.Context) GetResourceResourceAzureMysqlArrayOutput
}

type GetResourceResourceAzureMysqlArray []GetResourceResourceAzureMysqlInput

func (GetResourceResourceAzureMysqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAzureMysql)(nil)).Elem()
}

func (i GetResourceResourceAzureMysqlArray) ToGetResourceResourceAzureMysqlArrayOutput() GetResourceResourceAzureMysqlArrayOutput {
	return i.ToGetResourceResourceAzureMysqlArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAzureMysqlArray) ToGetResourceResourceAzureMysqlArrayOutputWithContext(ctx context.Context) GetResourceResourceAzureMysqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAzureMysqlArrayOutput)
}

type GetResourceResourceAzureMysqlOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAzureMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAzureMysql)(nil)).Elem()
}

func (o GetResourceResourceAzureMysqlOutput) ToGetResourceResourceAzureMysqlOutput() GetResourceResourceAzureMysqlOutput {
	return o
}

func (o GetResourceResourceAzureMysqlOutput) ToGetResourceResourceAzureMysqlOutputWithContext(ctx context.Context) GetResourceResourceAzureMysqlOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAzureMysqlOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureMysql) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceAzureMysqlOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureMysql) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAzureMysqlOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureMysql) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAzureMysqlOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureMysql) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAzureMysqlOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureMysql) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAzureMysqlOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureMysql) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceAzureMysqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureMysql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAzureMysqlOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureMysql) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAzureMysqlOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureMysql) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAzureMysqlOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureMysql) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o GetResourceResourceAzureMysqlOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureMysql) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAzureMysqlOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureMysql) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAzureMysqlOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureMysql) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAzureMysqlOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAzureMysql) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o GetResourceResourceAzureMysqlOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureMysql) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceAzureMysqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzureMysql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceAzureMysqlArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAzureMysqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAzureMysql)(nil)).Elem()
}

func (o GetResourceResourceAzureMysqlArrayOutput) ToGetResourceResourceAzureMysqlArrayOutput() GetResourceResourceAzureMysqlArrayOutput {
	return o
}

func (o GetResourceResourceAzureMysqlArrayOutput) ToGetResourceResourceAzureMysqlArrayOutputWithContext(ctx context.Context) GetResourceResourceAzureMysqlArrayOutput {
	return o
}

func (o GetResourceResourceAzureMysqlArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAzureMysqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAzureMysql {
		return vs[0].([]GetResourceResourceAzureMysql)[vs[1].(int)]
	}).(GetResourceResourceAzureMysqlOutput)
}

type GetResourceResourceAzurePostgre struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceAzurePostgreInput is an input type that accepts GetResourceResourceAzurePostgreArgs and GetResourceResourceAzurePostgreOutput values.
// You can construct a concrete instance of `GetResourceResourceAzurePostgreInput` via:
//
//	GetResourceResourceAzurePostgreArgs{...}
type GetResourceResourceAzurePostgreInput interface {
	pulumi.Input

	ToGetResourceResourceAzurePostgreOutput() GetResourceResourceAzurePostgreOutput
	ToGetResourceResourceAzurePostgreOutputWithContext(context.Context) GetResourceResourceAzurePostgreOutput
}

type GetResourceResourceAzurePostgreArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceAzurePostgreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAzurePostgre)(nil)).Elem()
}

func (i GetResourceResourceAzurePostgreArgs) ToGetResourceResourceAzurePostgreOutput() GetResourceResourceAzurePostgreOutput {
	return i.ToGetResourceResourceAzurePostgreOutputWithContext(context.Background())
}

func (i GetResourceResourceAzurePostgreArgs) ToGetResourceResourceAzurePostgreOutputWithContext(ctx context.Context) GetResourceResourceAzurePostgreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAzurePostgreOutput)
}

// GetResourceResourceAzurePostgreArrayInput is an input type that accepts GetResourceResourceAzurePostgreArray and GetResourceResourceAzurePostgreArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAzurePostgreArrayInput` via:
//
//	GetResourceResourceAzurePostgreArray{ GetResourceResourceAzurePostgreArgs{...} }
type GetResourceResourceAzurePostgreArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAzurePostgreArrayOutput() GetResourceResourceAzurePostgreArrayOutput
	ToGetResourceResourceAzurePostgreArrayOutputWithContext(context.Context) GetResourceResourceAzurePostgreArrayOutput
}

type GetResourceResourceAzurePostgreArray []GetResourceResourceAzurePostgreInput

func (GetResourceResourceAzurePostgreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAzurePostgre)(nil)).Elem()
}

func (i GetResourceResourceAzurePostgreArray) ToGetResourceResourceAzurePostgreArrayOutput() GetResourceResourceAzurePostgreArrayOutput {
	return i.ToGetResourceResourceAzurePostgreArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAzurePostgreArray) ToGetResourceResourceAzurePostgreArrayOutputWithContext(ctx context.Context) GetResourceResourceAzurePostgreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAzurePostgreArrayOutput)
}

type GetResourceResourceAzurePostgreOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAzurePostgreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAzurePostgre)(nil)).Elem()
}

func (o GetResourceResourceAzurePostgreOutput) ToGetResourceResourceAzurePostgreOutput() GetResourceResourceAzurePostgreOutput {
	return o
}

func (o GetResourceResourceAzurePostgreOutput) ToGetResourceResourceAzurePostgreOutputWithContext(ctx context.Context) GetResourceResourceAzurePostgreOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAzurePostgreOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgre) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceAzurePostgreOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgre) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAzurePostgreOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgre) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAzurePostgreOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgre) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAzurePostgreOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgre) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAzurePostgreOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgre) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o GetResourceResourceAzurePostgreOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgre) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceAzurePostgreOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgre) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAzurePostgreOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgre) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAzurePostgreOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgre) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAzurePostgreOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgre) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAzurePostgreOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgre) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAzurePostgreOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgre) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAzurePostgreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgre) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceAzurePostgreOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgre) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceAzurePostgreArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAzurePostgreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAzurePostgre)(nil)).Elem()
}

func (o GetResourceResourceAzurePostgreArrayOutput) ToGetResourceResourceAzurePostgreArrayOutput() GetResourceResourceAzurePostgreArrayOutput {
	return o
}

func (o GetResourceResourceAzurePostgreArrayOutput) ToGetResourceResourceAzurePostgreArrayOutputWithContext(ctx context.Context) GetResourceResourceAzurePostgreArrayOutput {
	return o
}

func (o GetResourceResourceAzurePostgreArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAzurePostgreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAzurePostgre {
		return vs[0].([]GetResourceResourceAzurePostgre)[vs[1].(int)]
	}).(GetResourceResourceAzurePostgreOutput)
}

type GetResourceResourceAzurePostgresManagedIdentity struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceAzurePostgresManagedIdentityInput is an input type that accepts GetResourceResourceAzurePostgresManagedIdentityArgs and GetResourceResourceAzurePostgresManagedIdentityOutput values.
// You can construct a concrete instance of `GetResourceResourceAzurePostgresManagedIdentityInput` via:
//
//	GetResourceResourceAzurePostgresManagedIdentityArgs{...}
type GetResourceResourceAzurePostgresManagedIdentityInput interface {
	pulumi.Input

	ToGetResourceResourceAzurePostgresManagedIdentityOutput() GetResourceResourceAzurePostgresManagedIdentityOutput
	ToGetResourceResourceAzurePostgresManagedIdentityOutputWithContext(context.Context) GetResourceResourceAzurePostgresManagedIdentityOutput
}

type GetResourceResourceAzurePostgresManagedIdentityArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceAzurePostgresManagedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAzurePostgresManagedIdentity)(nil)).Elem()
}

func (i GetResourceResourceAzurePostgresManagedIdentityArgs) ToGetResourceResourceAzurePostgresManagedIdentityOutput() GetResourceResourceAzurePostgresManagedIdentityOutput {
	return i.ToGetResourceResourceAzurePostgresManagedIdentityOutputWithContext(context.Background())
}

func (i GetResourceResourceAzurePostgresManagedIdentityArgs) ToGetResourceResourceAzurePostgresManagedIdentityOutputWithContext(ctx context.Context) GetResourceResourceAzurePostgresManagedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAzurePostgresManagedIdentityOutput)
}

// GetResourceResourceAzurePostgresManagedIdentityArrayInput is an input type that accepts GetResourceResourceAzurePostgresManagedIdentityArray and GetResourceResourceAzurePostgresManagedIdentityArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceAzurePostgresManagedIdentityArrayInput` via:
//
//	GetResourceResourceAzurePostgresManagedIdentityArray{ GetResourceResourceAzurePostgresManagedIdentityArgs{...} }
type GetResourceResourceAzurePostgresManagedIdentityArrayInput interface {
	pulumi.Input

	ToGetResourceResourceAzurePostgresManagedIdentityArrayOutput() GetResourceResourceAzurePostgresManagedIdentityArrayOutput
	ToGetResourceResourceAzurePostgresManagedIdentityArrayOutputWithContext(context.Context) GetResourceResourceAzurePostgresManagedIdentityArrayOutput
}

type GetResourceResourceAzurePostgresManagedIdentityArray []GetResourceResourceAzurePostgresManagedIdentityInput

func (GetResourceResourceAzurePostgresManagedIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAzurePostgresManagedIdentity)(nil)).Elem()
}

func (i GetResourceResourceAzurePostgresManagedIdentityArray) ToGetResourceResourceAzurePostgresManagedIdentityArrayOutput() GetResourceResourceAzurePostgresManagedIdentityArrayOutput {
	return i.ToGetResourceResourceAzurePostgresManagedIdentityArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceAzurePostgresManagedIdentityArray) ToGetResourceResourceAzurePostgresManagedIdentityArrayOutputWithContext(ctx context.Context) GetResourceResourceAzurePostgresManagedIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceAzurePostgresManagedIdentityArrayOutput)
}

type GetResourceResourceAzurePostgresManagedIdentityOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAzurePostgresManagedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceAzurePostgresManagedIdentity)(nil)).Elem()
}

func (o GetResourceResourceAzurePostgresManagedIdentityOutput) ToGetResourceResourceAzurePostgresManagedIdentityOutput() GetResourceResourceAzurePostgresManagedIdentityOutput {
	return o
}

func (o GetResourceResourceAzurePostgresManagedIdentityOutput) ToGetResourceResourceAzurePostgresManagedIdentityOutputWithContext(ctx context.Context) GetResourceResourceAzurePostgresManagedIdentityOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceAzurePostgresManagedIdentityOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgresManagedIdentity) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceAzurePostgresManagedIdentityOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgresManagedIdentity) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceAzurePostgresManagedIdentityOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgresManagedIdentity) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAzurePostgresManagedIdentityOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgresManagedIdentity) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceAzurePostgresManagedIdentityOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgresManagedIdentity) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceAzurePostgresManagedIdentityOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgresManagedIdentity) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o GetResourceResourceAzurePostgresManagedIdentityOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgresManagedIdentity) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceAzurePostgresManagedIdentityOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgresManagedIdentity) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceAzurePostgresManagedIdentityOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgresManagedIdentity) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceAzurePostgresManagedIdentityOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgresManagedIdentity) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceAzurePostgresManagedIdentityOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgresManagedIdentity) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceAzurePostgresManagedIdentityOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgresManagedIdentity) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceAzurePostgresManagedIdentityOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgresManagedIdentity) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceAzurePostgresManagedIdentityOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgresManagedIdentity) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o GetResourceResourceAzurePostgresManagedIdentityOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgresManagedIdentity) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceAzurePostgresManagedIdentityOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceAzurePostgresManagedIdentity) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceAzurePostgresManagedIdentityArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceAzurePostgresManagedIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceAzurePostgresManagedIdentity)(nil)).Elem()
}

func (o GetResourceResourceAzurePostgresManagedIdentityArrayOutput) ToGetResourceResourceAzurePostgresManagedIdentityArrayOutput() GetResourceResourceAzurePostgresManagedIdentityArrayOutput {
	return o
}

func (o GetResourceResourceAzurePostgresManagedIdentityArrayOutput) ToGetResourceResourceAzurePostgresManagedIdentityArrayOutputWithContext(ctx context.Context) GetResourceResourceAzurePostgresManagedIdentityArrayOutput {
	return o
}

func (o GetResourceResourceAzurePostgresManagedIdentityArrayOutput) Index(i pulumi.IntInput) GetResourceResourceAzurePostgresManagedIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceAzurePostgresManagedIdentity {
		return vs[0].([]GetResourceResourceAzurePostgresManagedIdentity)[vs[1].(int)]
	}).(GetResourceResourceAzurePostgresManagedIdentityOutput)
}

type GetResourceResourceBigQuery struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint *string `pulumi:"endpoint"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// The private key used to authenticate with the server.
	PrivateKey *string `pulumi:"privateKey"`
	// The project to connect to.
	Project *string `pulumi:"project"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceBigQueryInput is an input type that accepts GetResourceResourceBigQueryArgs and GetResourceResourceBigQueryOutput values.
// You can construct a concrete instance of `GetResourceResourceBigQueryInput` via:
//
//	GetResourceResourceBigQueryArgs{...}
type GetResourceResourceBigQueryInput interface {
	pulumi.Input

	ToGetResourceResourceBigQueryOutput() GetResourceResourceBigQueryOutput
	ToGetResourceResourceBigQueryOutputWithContext(context.Context) GetResourceResourceBigQueryOutput
}

type GetResourceResourceBigQueryArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// The private key used to authenticate with the server.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// The project to connect to.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceBigQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceBigQuery)(nil)).Elem()
}

func (i GetResourceResourceBigQueryArgs) ToGetResourceResourceBigQueryOutput() GetResourceResourceBigQueryOutput {
	return i.ToGetResourceResourceBigQueryOutputWithContext(context.Background())
}

func (i GetResourceResourceBigQueryArgs) ToGetResourceResourceBigQueryOutputWithContext(ctx context.Context) GetResourceResourceBigQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceBigQueryOutput)
}

// GetResourceResourceBigQueryArrayInput is an input type that accepts GetResourceResourceBigQueryArray and GetResourceResourceBigQueryArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceBigQueryArrayInput` via:
//
//	GetResourceResourceBigQueryArray{ GetResourceResourceBigQueryArgs{...} }
type GetResourceResourceBigQueryArrayInput interface {
	pulumi.Input

	ToGetResourceResourceBigQueryArrayOutput() GetResourceResourceBigQueryArrayOutput
	ToGetResourceResourceBigQueryArrayOutputWithContext(context.Context) GetResourceResourceBigQueryArrayOutput
}

type GetResourceResourceBigQueryArray []GetResourceResourceBigQueryInput

func (GetResourceResourceBigQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceBigQuery)(nil)).Elem()
}

func (i GetResourceResourceBigQueryArray) ToGetResourceResourceBigQueryArrayOutput() GetResourceResourceBigQueryArrayOutput {
	return i.ToGetResourceResourceBigQueryArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceBigQueryArray) ToGetResourceResourceBigQueryArrayOutputWithContext(ctx context.Context) GetResourceResourceBigQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceBigQueryArrayOutput)
}

type GetResourceResourceBigQueryOutput struct{ *pulumi.OutputState }

func (GetResourceResourceBigQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceBigQuery)(nil)).Elem()
}

func (o GetResourceResourceBigQueryOutput) ToGetResourceResourceBigQueryOutput() GetResourceResourceBigQueryOutput {
	return o
}

func (o GetResourceResourceBigQueryOutput) ToGetResourceResourceBigQueryOutputWithContext(ctx context.Context) GetResourceResourceBigQueryOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceBigQueryOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceBigQuery) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceBigQueryOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceBigQuery) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o GetResourceResourceBigQueryOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceBigQuery) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceBigQueryOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceBigQuery) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceBigQueryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceBigQuery) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceBigQueryOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceBigQuery) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// The private key used to authenticate with the server.
func (o GetResourceResourceBigQueryOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceBigQuery) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// The project to connect to.
func (o GetResourceResourceBigQueryOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceBigQuery) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceBigQueryOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceBigQuery) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceBigQueryOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceBigQuery) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceBigQueryOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceBigQuery) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceBigQueryOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceBigQuery) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceBigQueryOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceBigQuery) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceBigQueryArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceBigQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceBigQuery)(nil)).Elem()
}

func (o GetResourceResourceBigQueryArrayOutput) ToGetResourceResourceBigQueryArrayOutput() GetResourceResourceBigQueryArrayOutput {
	return o
}

func (o GetResourceResourceBigQueryArrayOutput) ToGetResourceResourceBigQueryArrayOutputWithContext(ctx context.Context) GetResourceResourceBigQueryArrayOutput {
	return o
}

func (o GetResourceResourceBigQueryArrayOutput) Index(i pulumi.IntInput) GetResourceResourceBigQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceBigQuery {
		return vs[0].([]GetResourceResourceBigQuery)[vs[1].(int)]
	}).(GetResourceResourceBigQueryOutput)
}

type GetResourceResourceCassandra struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceCassandraInput is an input type that accepts GetResourceResourceCassandraArgs and GetResourceResourceCassandraOutput values.
// You can construct a concrete instance of `GetResourceResourceCassandraInput` via:
//
//	GetResourceResourceCassandraArgs{...}
type GetResourceResourceCassandraInput interface {
	pulumi.Input

	ToGetResourceResourceCassandraOutput() GetResourceResourceCassandraOutput
	ToGetResourceResourceCassandraOutputWithContext(context.Context) GetResourceResourceCassandraOutput
}

type GetResourceResourceCassandraArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceCassandraArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceCassandra)(nil)).Elem()
}

func (i GetResourceResourceCassandraArgs) ToGetResourceResourceCassandraOutput() GetResourceResourceCassandraOutput {
	return i.ToGetResourceResourceCassandraOutputWithContext(context.Background())
}

func (i GetResourceResourceCassandraArgs) ToGetResourceResourceCassandraOutputWithContext(ctx context.Context) GetResourceResourceCassandraOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceCassandraOutput)
}

// GetResourceResourceCassandraArrayInput is an input type that accepts GetResourceResourceCassandraArray and GetResourceResourceCassandraArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceCassandraArrayInput` via:
//
//	GetResourceResourceCassandraArray{ GetResourceResourceCassandraArgs{...} }
type GetResourceResourceCassandraArrayInput interface {
	pulumi.Input

	ToGetResourceResourceCassandraArrayOutput() GetResourceResourceCassandraArrayOutput
	ToGetResourceResourceCassandraArrayOutputWithContext(context.Context) GetResourceResourceCassandraArrayOutput
}

type GetResourceResourceCassandraArray []GetResourceResourceCassandraInput

func (GetResourceResourceCassandraArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceCassandra)(nil)).Elem()
}

func (i GetResourceResourceCassandraArray) ToGetResourceResourceCassandraArrayOutput() GetResourceResourceCassandraArrayOutput {
	return i.ToGetResourceResourceCassandraArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceCassandraArray) ToGetResourceResourceCassandraArrayOutputWithContext(ctx context.Context) GetResourceResourceCassandraArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceCassandraArrayOutput)
}

type GetResourceResourceCassandraOutput struct{ *pulumi.OutputState }

func (GetResourceResourceCassandraOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceCassandra)(nil)).Elem()
}

func (o GetResourceResourceCassandraOutput) ToGetResourceResourceCassandraOutput() GetResourceResourceCassandraOutput {
	return o
}

func (o GetResourceResourceCassandraOutput) ToGetResourceResourceCassandraOutputWithContext(ctx context.Context) GetResourceResourceCassandraOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceCassandraOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCassandra) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceCassandraOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCassandra) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceCassandraOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCassandra) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceCassandraOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCassandra) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceCassandraOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCassandra) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceCassandraOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCassandra) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceCassandraOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCassandra) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceCassandraOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCassandra) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceCassandraOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCassandra) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceCassandraOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCassandra) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceCassandraOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCassandra) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceCassandraOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceCassandra) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o GetResourceResourceCassandraOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCassandra) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceCassandraOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCassandra) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceCassandraArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceCassandraArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceCassandra)(nil)).Elem()
}

func (o GetResourceResourceCassandraArrayOutput) ToGetResourceResourceCassandraArrayOutput() GetResourceResourceCassandraArrayOutput {
	return o
}

func (o GetResourceResourceCassandraArrayOutput) ToGetResourceResourceCassandraArrayOutputWithContext(ctx context.Context) GetResourceResourceCassandraArrayOutput {
	return o
}

func (o GetResourceResourceCassandraArrayOutput) Index(i pulumi.IntInput) GetResourceResourceCassandraOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceCassandra {
		return vs[0].([]GetResourceResourceCassandra)[vs[1].(int)]
	}).(GetResourceResourceCassandraOutput)
}

type GetResourceResourceCitus struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceCitusInput is an input type that accepts GetResourceResourceCitusArgs and GetResourceResourceCitusOutput values.
// You can construct a concrete instance of `GetResourceResourceCitusInput` via:
//
//	GetResourceResourceCitusArgs{...}
type GetResourceResourceCitusInput interface {
	pulumi.Input

	ToGetResourceResourceCitusOutput() GetResourceResourceCitusOutput
	ToGetResourceResourceCitusOutputWithContext(context.Context) GetResourceResourceCitusOutput
}

type GetResourceResourceCitusArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceCitusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceCitus)(nil)).Elem()
}

func (i GetResourceResourceCitusArgs) ToGetResourceResourceCitusOutput() GetResourceResourceCitusOutput {
	return i.ToGetResourceResourceCitusOutputWithContext(context.Background())
}

func (i GetResourceResourceCitusArgs) ToGetResourceResourceCitusOutputWithContext(ctx context.Context) GetResourceResourceCitusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceCitusOutput)
}

// GetResourceResourceCitusArrayInput is an input type that accepts GetResourceResourceCitusArray and GetResourceResourceCitusArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceCitusArrayInput` via:
//
//	GetResourceResourceCitusArray{ GetResourceResourceCitusArgs{...} }
type GetResourceResourceCitusArrayInput interface {
	pulumi.Input

	ToGetResourceResourceCitusArrayOutput() GetResourceResourceCitusArrayOutput
	ToGetResourceResourceCitusArrayOutputWithContext(context.Context) GetResourceResourceCitusArrayOutput
}

type GetResourceResourceCitusArray []GetResourceResourceCitusInput

func (GetResourceResourceCitusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceCitus)(nil)).Elem()
}

func (i GetResourceResourceCitusArray) ToGetResourceResourceCitusArrayOutput() GetResourceResourceCitusArrayOutput {
	return i.ToGetResourceResourceCitusArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceCitusArray) ToGetResourceResourceCitusArrayOutputWithContext(ctx context.Context) GetResourceResourceCitusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceCitusArrayOutput)
}

type GetResourceResourceCitusOutput struct{ *pulumi.OutputState }

func (GetResourceResourceCitusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceCitus)(nil)).Elem()
}

func (o GetResourceResourceCitusOutput) ToGetResourceResourceCitusOutput() GetResourceResourceCitusOutput {
	return o
}

func (o GetResourceResourceCitusOutput) ToGetResourceResourceCitusOutputWithContext(ctx context.Context) GetResourceResourceCitusOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceCitusOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCitus) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceCitusOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCitus) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceCitusOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCitus) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceCitusOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCitus) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceCitusOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCitus) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceCitusOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCitus) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o GetResourceResourceCitusOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCitus) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceCitusOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCitus) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceCitusOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCitus) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceCitusOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCitus) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceCitusOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCitus) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceCitusOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCitus) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceCitusOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCitus) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceCitusOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceCitus) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceCitusOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCitus) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceCitusArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceCitusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceCitus)(nil)).Elem()
}

func (o GetResourceResourceCitusArrayOutput) ToGetResourceResourceCitusArrayOutput() GetResourceResourceCitusArrayOutput {
	return o
}

func (o GetResourceResourceCitusArrayOutput) ToGetResourceResourceCitusArrayOutputWithContext(ctx context.Context) GetResourceResourceCitusArrayOutput {
	return o
}

func (o GetResourceResourceCitusArrayOutput) Index(i pulumi.IntInput) GetResourceResourceCitusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceCitus {
		return vs[0].([]GetResourceResourceCitus)[vs[1].(int)]
	}).(GetResourceResourceCitusOutput)
}

type GetResourceResourceClickHouseHttp struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url *string `pulumi:"url"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceClickHouseHttpInput is an input type that accepts GetResourceResourceClickHouseHttpArgs and GetResourceResourceClickHouseHttpOutput values.
// You can construct a concrete instance of `GetResourceResourceClickHouseHttpInput` via:
//
//	GetResourceResourceClickHouseHttpArgs{...}
type GetResourceResourceClickHouseHttpInput interface {
	pulumi.Input

	ToGetResourceResourceClickHouseHttpOutput() GetResourceResourceClickHouseHttpOutput
	ToGetResourceResourceClickHouseHttpOutputWithContext(context.Context) GetResourceResourceClickHouseHttpOutput
}

type GetResourceResourceClickHouseHttpArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url pulumi.StringPtrInput `pulumi:"url"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceClickHouseHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceClickHouseHttp)(nil)).Elem()
}

func (i GetResourceResourceClickHouseHttpArgs) ToGetResourceResourceClickHouseHttpOutput() GetResourceResourceClickHouseHttpOutput {
	return i.ToGetResourceResourceClickHouseHttpOutputWithContext(context.Background())
}

func (i GetResourceResourceClickHouseHttpArgs) ToGetResourceResourceClickHouseHttpOutputWithContext(ctx context.Context) GetResourceResourceClickHouseHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceClickHouseHttpOutput)
}

// GetResourceResourceClickHouseHttpArrayInput is an input type that accepts GetResourceResourceClickHouseHttpArray and GetResourceResourceClickHouseHttpArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceClickHouseHttpArrayInput` via:
//
//	GetResourceResourceClickHouseHttpArray{ GetResourceResourceClickHouseHttpArgs{...} }
type GetResourceResourceClickHouseHttpArrayInput interface {
	pulumi.Input

	ToGetResourceResourceClickHouseHttpArrayOutput() GetResourceResourceClickHouseHttpArrayOutput
	ToGetResourceResourceClickHouseHttpArrayOutputWithContext(context.Context) GetResourceResourceClickHouseHttpArrayOutput
}

type GetResourceResourceClickHouseHttpArray []GetResourceResourceClickHouseHttpInput

func (GetResourceResourceClickHouseHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceClickHouseHttp)(nil)).Elem()
}

func (i GetResourceResourceClickHouseHttpArray) ToGetResourceResourceClickHouseHttpArrayOutput() GetResourceResourceClickHouseHttpArrayOutput {
	return i.ToGetResourceResourceClickHouseHttpArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceClickHouseHttpArray) ToGetResourceResourceClickHouseHttpArrayOutputWithContext(ctx context.Context) GetResourceResourceClickHouseHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceClickHouseHttpArrayOutput)
}

type GetResourceResourceClickHouseHttpOutput struct{ *pulumi.OutputState }

func (GetResourceResourceClickHouseHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceClickHouseHttp)(nil)).Elem()
}

func (o GetResourceResourceClickHouseHttpOutput) ToGetResourceResourceClickHouseHttpOutput() GetResourceResourceClickHouseHttpOutput {
	return o
}

func (o GetResourceResourceClickHouseHttpOutput) ToGetResourceResourceClickHouseHttpOutputWithContext(ctx context.Context) GetResourceResourceClickHouseHttpOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceClickHouseHttpOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseHttp) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceClickHouseHttpOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseHttp) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceClickHouseHttpOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseHttp) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceClickHouseHttpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseHttp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceClickHouseHttpOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseHttp) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceClickHouseHttpOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseHttp) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceClickHouseHttpOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseHttp) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceClickHouseHttpOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseHttp) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceClickHouseHttpOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseHttp) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceClickHouseHttpOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseHttp) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The base address of your website without the path.
// * kubernetes:
func (o GetResourceResourceClickHouseHttpOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseHttp) *string { return v.Url }).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceClickHouseHttpOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseHttp) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceClickHouseHttpArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceClickHouseHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceClickHouseHttp)(nil)).Elem()
}

func (o GetResourceResourceClickHouseHttpArrayOutput) ToGetResourceResourceClickHouseHttpArrayOutput() GetResourceResourceClickHouseHttpArrayOutput {
	return o
}

func (o GetResourceResourceClickHouseHttpArrayOutput) ToGetResourceResourceClickHouseHttpArrayOutputWithContext(ctx context.Context) GetResourceResourceClickHouseHttpArrayOutput {
	return o
}

func (o GetResourceResourceClickHouseHttpArrayOutput) Index(i pulumi.IntInput) GetResourceResourceClickHouseHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceClickHouseHttp {
		return vs[0].([]GetResourceResourceClickHouseHttp)[vs[1].(int)]
	}).(GetResourceResourceClickHouseHttpOutput)
}

type GetResourceResourceClickHouseMySql struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceClickHouseMySqlInput is an input type that accepts GetResourceResourceClickHouseMySqlArgs and GetResourceResourceClickHouseMySqlOutput values.
// You can construct a concrete instance of `GetResourceResourceClickHouseMySqlInput` via:
//
//	GetResourceResourceClickHouseMySqlArgs{...}
type GetResourceResourceClickHouseMySqlInput interface {
	pulumi.Input

	ToGetResourceResourceClickHouseMySqlOutput() GetResourceResourceClickHouseMySqlOutput
	ToGetResourceResourceClickHouseMySqlOutputWithContext(context.Context) GetResourceResourceClickHouseMySqlOutput
}

type GetResourceResourceClickHouseMySqlArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceClickHouseMySqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceClickHouseMySql)(nil)).Elem()
}

func (i GetResourceResourceClickHouseMySqlArgs) ToGetResourceResourceClickHouseMySqlOutput() GetResourceResourceClickHouseMySqlOutput {
	return i.ToGetResourceResourceClickHouseMySqlOutputWithContext(context.Background())
}

func (i GetResourceResourceClickHouseMySqlArgs) ToGetResourceResourceClickHouseMySqlOutputWithContext(ctx context.Context) GetResourceResourceClickHouseMySqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceClickHouseMySqlOutput)
}

// GetResourceResourceClickHouseMySqlArrayInput is an input type that accepts GetResourceResourceClickHouseMySqlArray and GetResourceResourceClickHouseMySqlArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceClickHouseMySqlArrayInput` via:
//
//	GetResourceResourceClickHouseMySqlArray{ GetResourceResourceClickHouseMySqlArgs{...} }
type GetResourceResourceClickHouseMySqlArrayInput interface {
	pulumi.Input

	ToGetResourceResourceClickHouseMySqlArrayOutput() GetResourceResourceClickHouseMySqlArrayOutput
	ToGetResourceResourceClickHouseMySqlArrayOutputWithContext(context.Context) GetResourceResourceClickHouseMySqlArrayOutput
}

type GetResourceResourceClickHouseMySqlArray []GetResourceResourceClickHouseMySqlInput

func (GetResourceResourceClickHouseMySqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceClickHouseMySql)(nil)).Elem()
}

func (i GetResourceResourceClickHouseMySqlArray) ToGetResourceResourceClickHouseMySqlArrayOutput() GetResourceResourceClickHouseMySqlArrayOutput {
	return i.ToGetResourceResourceClickHouseMySqlArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceClickHouseMySqlArray) ToGetResourceResourceClickHouseMySqlArrayOutputWithContext(ctx context.Context) GetResourceResourceClickHouseMySqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceClickHouseMySqlArrayOutput)
}

type GetResourceResourceClickHouseMySqlOutput struct{ *pulumi.OutputState }

func (GetResourceResourceClickHouseMySqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceClickHouseMySql)(nil)).Elem()
}

func (o GetResourceResourceClickHouseMySqlOutput) ToGetResourceResourceClickHouseMySqlOutput() GetResourceResourceClickHouseMySqlOutput {
	return o
}

func (o GetResourceResourceClickHouseMySqlOutput) ToGetResourceResourceClickHouseMySqlOutputWithContext(ctx context.Context) GetResourceResourceClickHouseMySqlOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceClickHouseMySqlOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseMySql) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceClickHouseMySqlOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseMySql) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceClickHouseMySqlOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseMySql) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceClickHouseMySqlOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseMySql) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceClickHouseMySqlOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseMySql) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceClickHouseMySqlOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseMySql) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceClickHouseMySqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseMySql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceClickHouseMySqlOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseMySql) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceClickHouseMySqlOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseMySql) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceClickHouseMySqlOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseMySql) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o GetResourceResourceClickHouseMySqlOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseMySql) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceClickHouseMySqlOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseMySql) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceClickHouseMySqlOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseMySql) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceClickHouseMySqlOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseMySql) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceClickHouseMySqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseMySql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceClickHouseMySqlArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceClickHouseMySqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceClickHouseMySql)(nil)).Elem()
}

func (o GetResourceResourceClickHouseMySqlArrayOutput) ToGetResourceResourceClickHouseMySqlArrayOutput() GetResourceResourceClickHouseMySqlArrayOutput {
	return o
}

func (o GetResourceResourceClickHouseMySqlArrayOutput) ToGetResourceResourceClickHouseMySqlArrayOutputWithContext(ctx context.Context) GetResourceResourceClickHouseMySqlArrayOutput {
	return o
}

func (o GetResourceResourceClickHouseMySqlArrayOutput) Index(i pulumi.IntInput) GetResourceResourceClickHouseMySqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceClickHouseMySql {
		return vs[0].([]GetResourceResourceClickHouseMySql)[vs[1].(int)]
	}).(GetResourceResourceClickHouseMySqlOutput)
}

type GetResourceResourceClickHouseTcp struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceClickHouseTcpInput is an input type that accepts GetResourceResourceClickHouseTcpArgs and GetResourceResourceClickHouseTcpOutput values.
// You can construct a concrete instance of `GetResourceResourceClickHouseTcpInput` via:
//
//	GetResourceResourceClickHouseTcpArgs{...}
type GetResourceResourceClickHouseTcpInput interface {
	pulumi.Input

	ToGetResourceResourceClickHouseTcpOutput() GetResourceResourceClickHouseTcpOutput
	ToGetResourceResourceClickHouseTcpOutputWithContext(context.Context) GetResourceResourceClickHouseTcpOutput
}

type GetResourceResourceClickHouseTcpArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceClickHouseTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceClickHouseTcp)(nil)).Elem()
}

func (i GetResourceResourceClickHouseTcpArgs) ToGetResourceResourceClickHouseTcpOutput() GetResourceResourceClickHouseTcpOutput {
	return i.ToGetResourceResourceClickHouseTcpOutputWithContext(context.Background())
}

func (i GetResourceResourceClickHouseTcpArgs) ToGetResourceResourceClickHouseTcpOutputWithContext(ctx context.Context) GetResourceResourceClickHouseTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceClickHouseTcpOutput)
}

// GetResourceResourceClickHouseTcpArrayInput is an input type that accepts GetResourceResourceClickHouseTcpArray and GetResourceResourceClickHouseTcpArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceClickHouseTcpArrayInput` via:
//
//	GetResourceResourceClickHouseTcpArray{ GetResourceResourceClickHouseTcpArgs{...} }
type GetResourceResourceClickHouseTcpArrayInput interface {
	pulumi.Input

	ToGetResourceResourceClickHouseTcpArrayOutput() GetResourceResourceClickHouseTcpArrayOutput
	ToGetResourceResourceClickHouseTcpArrayOutputWithContext(context.Context) GetResourceResourceClickHouseTcpArrayOutput
}

type GetResourceResourceClickHouseTcpArray []GetResourceResourceClickHouseTcpInput

func (GetResourceResourceClickHouseTcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceClickHouseTcp)(nil)).Elem()
}

func (i GetResourceResourceClickHouseTcpArray) ToGetResourceResourceClickHouseTcpArrayOutput() GetResourceResourceClickHouseTcpArrayOutput {
	return i.ToGetResourceResourceClickHouseTcpArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceClickHouseTcpArray) ToGetResourceResourceClickHouseTcpArrayOutputWithContext(ctx context.Context) GetResourceResourceClickHouseTcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceClickHouseTcpArrayOutput)
}

type GetResourceResourceClickHouseTcpOutput struct{ *pulumi.OutputState }

func (GetResourceResourceClickHouseTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceClickHouseTcp)(nil)).Elem()
}

func (o GetResourceResourceClickHouseTcpOutput) ToGetResourceResourceClickHouseTcpOutput() GetResourceResourceClickHouseTcpOutput {
	return o
}

func (o GetResourceResourceClickHouseTcpOutput) ToGetResourceResourceClickHouseTcpOutputWithContext(ctx context.Context) GetResourceResourceClickHouseTcpOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceClickHouseTcpOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseTcp) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceClickHouseTcpOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseTcp) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceClickHouseTcpOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseTcp) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceClickHouseTcpOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseTcp) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceClickHouseTcpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseTcp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceClickHouseTcpOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseTcp) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceClickHouseTcpOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseTcp) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceClickHouseTcpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseTcp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceClickHouseTcpOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseTcp) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceClickHouseTcpOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseTcp) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceClickHouseTcpOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseTcp) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceClickHouseTcpOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseTcp) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceClickHouseTcpOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseTcp) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o GetResourceResourceClickHouseTcpOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseTcp) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceClickHouseTcpOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClickHouseTcp) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceClickHouseTcpArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceClickHouseTcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceClickHouseTcp)(nil)).Elem()
}

func (o GetResourceResourceClickHouseTcpArrayOutput) ToGetResourceResourceClickHouseTcpArrayOutput() GetResourceResourceClickHouseTcpArrayOutput {
	return o
}

func (o GetResourceResourceClickHouseTcpArrayOutput) ToGetResourceResourceClickHouseTcpArrayOutputWithContext(ctx context.Context) GetResourceResourceClickHouseTcpArrayOutput {
	return o
}

func (o GetResourceResourceClickHouseTcpArrayOutput) Index(i pulumi.IntInput) GetResourceResourceClickHouseTcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceClickHouseTcp {
		return vs[0].([]GetResourceResourceClickHouseTcp)[vs[1].(int)]
	}).(GetResourceResourceClickHouseTcpOutput)
}

type GetResourceResourceClustrix struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceClustrixInput is an input type that accepts GetResourceResourceClustrixArgs and GetResourceResourceClustrixOutput values.
// You can construct a concrete instance of `GetResourceResourceClustrixInput` via:
//
//	GetResourceResourceClustrixArgs{...}
type GetResourceResourceClustrixInput interface {
	pulumi.Input

	ToGetResourceResourceClustrixOutput() GetResourceResourceClustrixOutput
	ToGetResourceResourceClustrixOutputWithContext(context.Context) GetResourceResourceClustrixOutput
}

type GetResourceResourceClustrixArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceClustrixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceClustrix)(nil)).Elem()
}

func (i GetResourceResourceClustrixArgs) ToGetResourceResourceClustrixOutput() GetResourceResourceClustrixOutput {
	return i.ToGetResourceResourceClustrixOutputWithContext(context.Background())
}

func (i GetResourceResourceClustrixArgs) ToGetResourceResourceClustrixOutputWithContext(ctx context.Context) GetResourceResourceClustrixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceClustrixOutput)
}

// GetResourceResourceClustrixArrayInput is an input type that accepts GetResourceResourceClustrixArray and GetResourceResourceClustrixArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceClustrixArrayInput` via:
//
//	GetResourceResourceClustrixArray{ GetResourceResourceClustrixArgs{...} }
type GetResourceResourceClustrixArrayInput interface {
	pulumi.Input

	ToGetResourceResourceClustrixArrayOutput() GetResourceResourceClustrixArrayOutput
	ToGetResourceResourceClustrixArrayOutputWithContext(context.Context) GetResourceResourceClustrixArrayOutput
}

type GetResourceResourceClustrixArray []GetResourceResourceClustrixInput

func (GetResourceResourceClustrixArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceClustrix)(nil)).Elem()
}

func (i GetResourceResourceClustrixArray) ToGetResourceResourceClustrixArrayOutput() GetResourceResourceClustrixArrayOutput {
	return i.ToGetResourceResourceClustrixArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceClustrixArray) ToGetResourceResourceClustrixArrayOutputWithContext(ctx context.Context) GetResourceResourceClustrixArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceClustrixArrayOutput)
}

type GetResourceResourceClustrixOutput struct{ *pulumi.OutputState }

func (GetResourceResourceClustrixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceClustrix)(nil)).Elem()
}

func (o GetResourceResourceClustrixOutput) ToGetResourceResourceClustrixOutput() GetResourceResourceClustrixOutput {
	return o
}

func (o GetResourceResourceClustrixOutput) ToGetResourceResourceClustrixOutputWithContext(ctx context.Context) GetResourceResourceClustrixOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceClustrixOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClustrix) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceClustrixOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClustrix) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceClustrixOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClustrix) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceClustrixOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClustrix) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceClustrixOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClustrix) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceClustrixOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClustrix) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceClustrixOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClustrix) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceClustrixOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClustrix) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceClustrixOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClustrix) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceClustrixOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClustrix) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o GetResourceResourceClustrixOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClustrix) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceClustrixOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClustrix) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceClustrixOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClustrix) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceClustrixOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceClustrix) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o GetResourceResourceClustrixOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClustrix) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceClustrixOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceClustrix) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceClustrixArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceClustrixArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceClustrix)(nil)).Elem()
}

func (o GetResourceResourceClustrixArrayOutput) ToGetResourceResourceClustrixArrayOutput() GetResourceResourceClustrixArrayOutput {
	return o
}

func (o GetResourceResourceClustrixArrayOutput) ToGetResourceResourceClustrixArrayOutputWithContext(ctx context.Context) GetResourceResourceClustrixArrayOutput {
	return o
}

func (o GetResourceResourceClustrixArrayOutput) Index(i pulumi.IntInput) GetResourceResourceClustrixOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceClustrix {
		return vs[0].([]GetResourceResourceClustrix)[vs[1].(int)]
	}).(GetResourceResourceClustrixOutput)
}

type GetResourceResourceCockroach struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceCockroachInput is an input type that accepts GetResourceResourceCockroachArgs and GetResourceResourceCockroachOutput values.
// You can construct a concrete instance of `GetResourceResourceCockroachInput` via:
//
//	GetResourceResourceCockroachArgs{...}
type GetResourceResourceCockroachInput interface {
	pulumi.Input

	ToGetResourceResourceCockroachOutput() GetResourceResourceCockroachOutput
	ToGetResourceResourceCockroachOutputWithContext(context.Context) GetResourceResourceCockroachOutput
}

type GetResourceResourceCockroachArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceCockroachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceCockroach)(nil)).Elem()
}

func (i GetResourceResourceCockroachArgs) ToGetResourceResourceCockroachOutput() GetResourceResourceCockroachOutput {
	return i.ToGetResourceResourceCockroachOutputWithContext(context.Background())
}

func (i GetResourceResourceCockroachArgs) ToGetResourceResourceCockroachOutputWithContext(ctx context.Context) GetResourceResourceCockroachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceCockroachOutput)
}

// GetResourceResourceCockroachArrayInput is an input type that accepts GetResourceResourceCockroachArray and GetResourceResourceCockroachArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceCockroachArrayInput` via:
//
//	GetResourceResourceCockroachArray{ GetResourceResourceCockroachArgs{...} }
type GetResourceResourceCockroachArrayInput interface {
	pulumi.Input

	ToGetResourceResourceCockroachArrayOutput() GetResourceResourceCockroachArrayOutput
	ToGetResourceResourceCockroachArrayOutputWithContext(context.Context) GetResourceResourceCockroachArrayOutput
}

type GetResourceResourceCockroachArray []GetResourceResourceCockroachInput

func (GetResourceResourceCockroachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceCockroach)(nil)).Elem()
}

func (i GetResourceResourceCockroachArray) ToGetResourceResourceCockroachArrayOutput() GetResourceResourceCockroachArrayOutput {
	return i.ToGetResourceResourceCockroachArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceCockroachArray) ToGetResourceResourceCockroachArrayOutputWithContext(ctx context.Context) GetResourceResourceCockroachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceCockroachArrayOutput)
}

type GetResourceResourceCockroachOutput struct{ *pulumi.OutputState }

func (GetResourceResourceCockroachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceCockroach)(nil)).Elem()
}

func (o GetResourceResourceCockroachOutput) ToGetResourceResourceCockroachOutput() GetResourceResourceCockroachOutput {
	return o
}

func (o GetResourceResourceCockroachOutput) ToGetResourceResourceCockroachOutputWithContext(ctx context.Context) GetResourceResourceCockroachOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceCockroachOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCockroach) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceCockroachOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCockroach) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceCockroachOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCockroach) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceCockroachOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCockroach) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceCockroachOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCockroach) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceCockroachOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCockroach) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o GetResourceResourceCockroachOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCockroach) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceCockroachOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCockroach) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceCockroachOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCockroach) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceCockroachOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCockroach) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceCockroachOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCockroach) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceCockroachOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCockroach) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceCockroachOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCockroach) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceCockroachOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceCockroach) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceCockroachOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCockroach) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceCockroachArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceCockroachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceCockroach)(nil)).Elem()
}

func (o GetResourceResourceCockroachArrayOutput) ToGetResourceResourceCockroachArrayOutput() GetResourceResourceCockroachArrayOutput {
	return o
}

func (o GetResourceResourceCockroachArrayOutput) ToGetResourceResourceCockroachArrayOutputWithContext(ctx context.Context) GetResourceResourceCockroachArrayOutput {
	return o
}

func (o GetResourceResourceCockroachArrayOutput) Index(i pulumi.IntInput) GetResourceResourceCockroachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceCockroach {
		return vs[0].([]GetResourceResourceCockroach)[vs[1].(int)]
	}).(GetResourceResourceCockroachOutput)
}

type GetResourceResourceCouchbaseDatabase struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// The port number for N1QL queries. Default HTTP is 8093. Default HTTPS is 18093.
	N1QlPort *int `pulumi:"n1QlPort"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceCouchbaseDatabaseInput is an input type that accepts GetResourceResourceCouchbaseDatabaseArgs and GetResourceResourceCouchbaseDatabaseOutput values.
// You can construct a concrete instance of `GetResourceResourceCouchbaseDatabaseInput` via:
//
//	GetResourceResourceCouchbaseDatabaseArgs{...}
type GetResourceResourceCouchbaseDatabaseInput interface {
	pulumi.Input

	ToGetResourceResourceCouchbaseDatabaseOutput() GetResourceResourceCouchbaseDatabaseOutput
	ToGetResourceResourceCouchbaseDatabaseOutputWithContext(context.Context) GetResourceResourceCouchbaseDatabaseOutput
}

type GetResourceResourceCouchbaseDatabaseArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The port number for N1QL queries. Default HTTP is 8093. Default HTTPS is 18093.
	N1QlPort pulumi.IntPtrInput `pulumi:"n1QlPort"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceCouchbaseDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceCouchbaseDatabase)(nil)).Elem()
}

func (i GetResourceResourceCouchbaseDatabaseArgs) ToGetResourceResourceCouchbaseDatabaseOutput() GetResourceResourceCouchbaseDatabaseOutput {
	return i.ToGetResourceResourceCouchbaseDatabaseOutputWithContext(context.Background())
}

func (i GetResourceResourceCouchbaseDatabaseArgs) ToGetResourceResourceCouchbaseDatabaseOutputWithContext(ctx context.Context) GetResourceResourceCouchbaseDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceCouchbaseDatabaseOutput)
}

// GetResourceResourceCouchbaseDatabaseArrayInput is an input type that accepts GetResourceResourceCouchbaseDatabaseArray and GetResourceResourceCouchbaseDatabaseArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceCouchbaseDatabaseArrayInput` via:
//
//	GetResourceResourceCouchbaseDatabaseArray{ GetResourceResourceCouchbaseDatabaseArgs{...} }
type GetResourceResourceCouchbaseDatabaseArrayInput interface {
	pulumi.Input

	ToGetResourceResourceCouchbaseDatabaseArrayOutput() GetResourceResourceCouchbaseDatabaseArrayOutput
	ToGetResourceResourceCouchbaseDatabaseArrayOutputWithContext(context.Context) GetResourceResourceCouchbaseDatabaseArrayOutput
}

type GetResourceResourceCouchbaseDatabaseArray []GetResourceResourceCouchbaseDatabaseInput

func (GetResourceResourceCouchbaseDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceCouchbaseDatabase)(nil)).Elem()
}

func (i GetResourceResourceCouchbaseDatabaseArray) ToGetResourceResourceCouchbaseDatabaseArrayOutput() GetResourceResourceCouchbaseDatabaseArrayOutput {
	return i.ToGetResourceResourceCouchbaseDatabaseArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceCouchbaseDatabaseArray) ToGetResourceResourceCouchbaseDatabaseArrayOutputWithContext(ctx context.Context) GetResourceResourceCouchbaseDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceCouchbaseDatabaseArrayOutput)
}

type GetResourceResourceCouchbaseDatabaseOutput struct{ *pulumi.OutputState }

func (GetResourceResourceCouchbaseDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceCouchbaseDatabase)(nil)).Elem()
}

func (o GetResourceResourceCouchbaseDatabaseOutput) ToGetResourceResourceCouchbaseDatabaseOutput() GetResourceResourceCouchbaseDatabaseOutput {
	return o
}

func (o GetResourceResourceCouchbaseDatabaseOutput) ToGetResourceResourceCouchbaseDatabaseOutputWithContext(ctx context.Context) GetResourceResourceCouchbaseDatabaseOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceCouchbaseDatabaseOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseDatabase) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceCouchbaseDatabaseOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseDatabase) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceCouchbaseDatabaseOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseDatabase) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceCouchbaseDatabaseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseDatabase) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The port number for N1QL queries. Default HTTP is 8093. Default HTTPS is 18093.
func (o GetResourceResourceCouchbaseDatabaseOutput) N1QlPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseDatabase) *int { return v.N1QlPort }).(pulumi.IntPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceCouchbaseDatabaseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseDatabase) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceCouchbaseDatabaseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseDatabase) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceCouchbaseDatabaseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseDatabase) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceCouchbaseDatabaseOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseDatabase) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceCouchbaseDatabaseOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseDatabase) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceCouchbaseDatabaseOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseDatabase) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceCouchbaseDatabaseOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseDatabase) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceCouchbaseDatabaseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseDatabase) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o GetResourceResourceCouchbaseDatabaseOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseDatabase) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceCouchbaseDatabaseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseDatabase) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceCouchbaseDatabaseArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceCouchbaseDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceCouchbaseDatabase)(nil)).Elem()
}

func (o GetResourceResourceCouchbaseDatabaseArrayOutput) ToGetResourceResourceCouchbaseDatabaseArrayOutput() GetResourceResourceCouchbaseDatabaseArrayOutput {
	return o
}

func (o GetResourceResourceCouchbaseDatabaseArrayOutput) ToGetResourceResourceCouchbaseDatabaseArrayOutputWithContext(ctx context.Context) GetResourceResourceCouchbaseDatabaseArrayOutput {
	return o
}

func (o GetResourceResourceCouchbaseDatabaseArrayOutput) Index(i pulumi.IntInput) GetResourceResourceCouchbaseDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceCouchbaseDatabase {
		return vs[0].([]GetResourceResourceCouchbaseDatabase)[vs[1].(int)]
	}).(GetResourceResourceCouchbaseDatabaseOutput)
}

type GetResourceResourceCouchbaseWebUi struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url *string `pulumi:"url"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceCouchbaseWebUiInput is an input type that accepts GetResourceResourceCouchbaseWebUiArgs and GetResourceResourceCouchbaseWebUiOutput values.
// You can construct a concrete instance of `GetResourceResourceCouchbaseWebUiInput` via:
//
//	GetResourceResourceCouchbaseWebUiArgs{...}
type GetResourceResourceCouchbaseWebUiInput interface {
	pulumi.Input

	ToGetResourceResourceCouchbaseWebUiOutput() GetResourceResourceCouchbaseWebUiOutput
	ToGetResourceResourceCouchbaseWebUiOutputWithContext(context.Context) GetResourceResourceCouchbaseWebUiOutput
}

type GetResourceResourceCouchbaseWebUiArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url pulumi.StringPtrInput `pulumi:"url"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceCouchbaseWebUiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceCouchbaseWebUi)(nil)).Elem()
}

func (i GetResourceResourceCouchbaseWebUiArgs) ToGetResourceResourceCouchbaseWebUiOutput() GetResourceResourceCouchbaseWebUiOutput {
	return i.ToGetResourceResourceCouchbaseWebUiOutputWithContext(context.Background())
}

func (i GetResourceResourceCouchbaseWebUiArgs) ToGetResourceResourceCouchbaseWebUiOutputWithContext(ctx context.Context) GetResourceResourceCouchbaseWebUiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceCouchbaseWebUiOutput)
}

// GetResourceResourceCouchbaseWebUiArrayInput is an input type that accepts GetResourceResourceCouchbaseWebUiArray and GetResourceResourceCouchbaseWebUiArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceCouchbaseWebUiArrayInput` via:
//
//	GetResourceResourceCouchbaseWebUiArray{ GetResourceResourceCouchbaseWebUiArgs{...} }
type GetResourceResourceCouchbaseWebUiArrayInput interface {
	pulumi.Input

	ToGetResourceResourceCouchbaseWebUiArrayOutput() GetResourceResourceCouchbaseWebUiArrayOutput
	ToGetResourceResourceCouchbaseWebUiArrayOutputWithContext(context.Context) GetResourceResourceCouchbaseWebUiArrayOutput
}

type GetResourceResourceCouchbaseWebUiArray []GetResourceResourceCouchbaseWebUiInput

func (GetResourceResourceCouchbaseWebUiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceCouchbaseWebUi)(nil)).Elem()
}

func (i GetResourceResourceCouchbaseWebUiArray) ToGetResourceResourceCouchbaseWebUiArrayOutput() GetResourceResourceCouchbaseWebUiArrayOutput {
	return i.ToGetResourceResourceCouchbaseWebUiArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceCouchbaseWebUiArray) ToGetResourceResourceCouchbaseWebUiArrayOutputWithContext(ctx context.Context) GetResourceResourceCouchbaseWebUiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceCouchbaseWebUiArrayOutput)
}

type GetResourceResourceCouchbaseWebUiOutput struct{ *pulumi.OutputState }

func (GetResourceResourceCouchbaseWebUiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceCouchbaseWebUi)(nil)).Elem()
}

func (o GetResourceResourceCouchbaseWebUiOutput) ToGetResourceResourceCouchbaseWebUiOutput() GetResourceResourceCouchbaseWebUiOutput {
	return o
}

func (o GetResourceResourceCouchbaseWebUiOutput) ToGetResourceResourceCouchbaseWebUiOutputWithContext(ctx context.Context) GetResourceResourceCouchbaseWebUiOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceCouchbaseWebUiOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseWebUi) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceCouchbaseWebUiOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseWebUi) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceCouchbaseWebUiOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseWebUi) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceCouchbaseWebUiOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseWebUi) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceCouchbaseWebUiOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseWebUi) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceCouchbaseWebUiOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseWebUi) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceCouchbaseWebUiOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseWebUi) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceCouchbaseWebUiOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseWebUi) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceCouchbaseWebUiOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseWebUi) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceCouchbaseWebUiOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseWebUi) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The base address of your website without the path.
// * kubernetes:
func (o GetResourceResourceCouchbaseWebUiOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseWebUi) *string { return v.Url }).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceCouchbaseWebUiOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceCouchbaseWebUi) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceCouchbaseWebUiArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceCouchbaseWebUiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceCouchbaseWebUi)(nil)).Elem()
}

func (o GetResourceResourceCouchbaseWebUiArrayOutput) ToGetResourceResourceCouchbaseWebUiArrayOutput() GetResourceResourceCouchbaseWebUiArrayOutput {
	return o
}

func (o GetResourceResourceCouchbaseWebUiArrayOutput) ToGetResourceResourceCouchbaseWebUiArrayOutputWithContext(ctx context.Context) GetResourceResourceCouchbaseWebUiArrayOutput {
	return o
}

func (o GetResourceResourceCouchbaseWebUiArrayOutput) Index(i pulumi.IntInput) GetResourceResourceCouchbaseWebUiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceCouchbaseWebUi {
		return vs[0].([]GetResourceResourceCouchbaseWebUi)[vs[1].(int)]
	}).(GetResourceResourceCouchbaseWebUiOutput)
}

type GetResourceResourceDb2I struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceDb2IInput is an input type that accepts GetResourceResourceDb2IArgs and GetResourceResourceDb2IOutput values.
// You can construct a concrete instance of `GetResourceResourceDb2IInput` via:
//
//	GetResourceResourceDb2IArgs{...}
type GetResourceResourceDb2IInput interface {
	pulumi.Input

	ToGetResourceResourceDb2IOutput() GetResourceResourceDb2IOutput
	ToGetResourceResourceDb2IOutputWithContext(context.Context) GetResourceResourceDb2IOutput
}

type GetResourceResourceDb2IArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceDb2IArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceDb2I)(nil)).Elem()
}

func (i GetResourceResourceDb2IArgs) ToGetResourceResourceDb2IOutput() GetResourceResourceDb2IOutput {
	return i.ToGetResourceResourceDb2IOutputWithContext(context.Background())
}

func (i GetResourceResourceDb2IArgs) ToGetResourceResourceDb2IOutputWithContext(ctx context.Context) GetResourceResourceDb2IOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceDb2IOutput)
}

// GetResourceResourceDb2IArrayInput is an input type that accepts GetResourceResourceDb2IArray and GetResourceResourceDb2IArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceDb2IArrayInput` via:
//
//	GetResourceResourceDb2IArray{ GetResourceResourceDb2IArgs{...} }
type GetResourceResourceDb2IArrayInput interface {
	pulumi.Input

	ToGetResourceResourceDb2IArrayOutput() GetResourceResourceDb2IArrayOutput
	ToGetResourceResourceDb2IArrayOutputWithContext(context.Context) GetResourceResourceDb2IArrayOutput
}

type GetResourceResourceDb2IArray []GetResourceResourceDb2IInput

func (GetResourceResourceDb2IArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceDb2I)(nil)).Elem()
}

func (i GetResourceResourceDb2IArray) ToGetResourceResourceDb2IArrayOutput() GetResourceResourceDb2IArrayOutput {
	return i.ToGetResourceResourceDb2IArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceDb2IArray) ToGetResourceResourceDb2IArrayOutputWithContext(ctx context.Context) GetResourceResourceDb2IArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceDb2IArrayOutput)
}

type GetResourceResourceDb2IOutput struct{ *pulumi.OutputState }

func (GetResourceResourceDb2IOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceDb2I)(nil)).Elem()
}

func (o GetResourceResourceDb2IOutput) ToGetResourceResourceDb2IOutput() GetResourceResourceDb2IOutput {
	return o
}

func (o GetResourceResourceDb2IOutput) ToGetResourceResourceDb2IOutputWithContext(ctx context.Context) GetResourceResourceDb2IOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceDb2IOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2I) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceDb2IOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2I) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceDb2IOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2I) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceDb2IOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2I) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceDb2IOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2I) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceDb2IOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2I) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceDb2IOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2I) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceDb2IOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2I) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceDb2IOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2I) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceDb2IOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2I) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceDb2IOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2I) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceDb2IOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceDb2I) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o GetResourceResourceDb2IOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2I) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceDb2IOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2I) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceDb2IArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceDb2IArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceDb2I)(nil)).Elem()
}

func (o GetResourceResourceDb2IArrayOutput) ToGetResourceResourceDb2IArrayOutput() GetResourceResourceDb2IArrayOutput {
	return o
}

func (o GetResourceResourceDb2IArrayOutput) ToGetResourceResourceDb2IArrayOutputWithContext(ctx context.Context) GetResourceResourceDb2IArrayOutput {
	return o
}

func (o GetResourceResourceDb2IArrayOutput) Index(i pulumi.IntInput) GetResourceResourceDb2IOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceDb2I {
		return vs[0].([]GetResourceResourceDb2I)[vs[1].(int)]
	}).(GetResourceResourceDb2IOutput)
}

type GetResourceResourceDb2Luw struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceDb2LuwInput is an input type that accepts GetResourceResourceDb2LuwArgs and GetResourceResourceDb2LuwOutput values.
// You can construct a concrete instance of `GetResourceResourceDb2LuwInput` via:
//
//	GetResourceResourceDb2LuwArgs{...}
type GetResourceResourceDb2LuwInput interface {
	pulumi.Input

	ToGetResourceResourceDb2LuwOutput() GetResourceResourceDb2LuwOutput
	ToGetResourceResourceDb2LuwOutputWithContext(context.Context) GetResourceResourceDb2LuwOutput
}

type GetResourceResourceDb2LuwArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceDb2LuwArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceDb2Luw)(nil)).Elem()
}

func (i GetResourceResourceDb2LuwArgs) ToGetResourceResourceDb2LuwOutput() GetResourceResourceDb2LuwOutput {
	return i.ToGetResourceResourceDb2LuwOutputWithContext(context.Background())
}

func (i GetResourceResourceDb2LuwArgs) ToGetResourceResourceDb2LuwOutputWithContext(ctx context.Context) GetResourceResourceDb2LuwOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceDb2LuwOutput)
}

// GetResourceResourceDb2LuwArrayInput is an input type that accepts GetResourceResourceDb2LuwArray and GetResourceResourceDb2LuwArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceDb2LuwArrayInput` via:
//
//	GetResourceResourceDb2LuwArray{ GetResourceResourceDb2LuwArgs{...} }
type GetResourceResourceDb2LuwArrayInput interface {
	pulumi.Input

	ToGetResourceResourceDb2LuwArrayOutput() GetResourceResourceDb2LuwArrayOutput
	ToGetResourceResourceDb2LuwArrayOutputWithContext(context.Context) GetResourceResourceDb2LuwArrayOutput
}

type GetResourceResourceDb2LuwArray []GetResourceResourceDb2LuwInput

func (GetResourceResourceDb2LuwArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceDb2Luw)(nil)).Elem()
}

func (i GetResourceResourceDb2LuwArray) ToGetResourceResourceDb2LuwArrayOutput() GetResourceResourceDb2LuwArrayOutput {
	return i.ToGetResourceResourceDb2LuwArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceDb2LuwArray) ToGetResourceResourceDb2LuwArrayOutputWithContext(ctx context.Context) GetResourceResourceDb2LuwArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceDb2LuwArrayOutput)
}

type GetResourceResourceDb2LuwOutput struct{ *pulumi.OutputState }

func (GetResourceResourceDb2LuwOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceDb2Luw)(nil)).Elem()
}

func (o GetResourceResourceDb2LuwOutput) ToGetResourceResourceDb2LuwOutput() GetResourceResourceDb2LuwOutput {
	return o
}

func (o GetResourceResourceDb2LuwOutput) ToGetResourceResourceDb2LuwOutputWithContext(ctx context.Context) GetResourceResourceDb2LuwOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceDb2LuwOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2Luw) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceDb2LuwOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2Luw) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceDb2LuwOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2Luw) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceDb2LuwOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2Luw) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceDb2LuwOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2Luw) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceDb2LuwOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2Luw) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceDb2LuwOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2Luw) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceDb2LuwOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2Luw) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceDb2LuwOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2Luw) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceDb2LuwOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2Luw) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceDb2LuwOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2Luw) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceDb2LuwOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2Luw) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceDb2LuwOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceDb2Luw) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceDb2LuwOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDb2Luw) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceDb2LuwArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceDb2LuwArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceDb2Luw)(nil)).Elem()
}

func (o GetResourceResourceDb2LuwArrayOutput) ToGetResourceResourceDb2LuwArrayOutput() GetResourceResourceDb2LuwArrayOutput {
	return o
}

func (o GetResourceResourceDb2LuwArrayOutput) ToGetResourceResourceDb2LuwArrayOutputWithContext(ctx context.Context) GetResourceResourceDb2LuwArrayOutput {
	return o
}

func (o GetResourceResourceDb2LuwArrayOutput) Index(i pulumi.IntInput) GetResourceResourceDb2LuwOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceDb2Luw {
		return vs[0].([]GetResourceResourceDb2Luw)[vs[1].(int)]
	}).(GetResourceResourceDb2LuwOutput)
}

type GetResourceResourceDocumentDbHost struct {
	// The authentication database to use.
	AuthDatabase *string `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceDocumentDbHostInput is an input type that accepts GetResourceResourceDocumentDbHostArgs and GetResourceResourceDocumentDbHostOutput values.
// You can construct a concrete instance of `GetResourceResourceDocumentDbHostInput` via:
//
//	GetResourceResourceDocumentDbHostArgs{...}
type GetResourceResourceDocumentDbHostInput interface {
	pulumi.Input

	ToGetResourceResourceDocumentDbHostOutput() GetResourceResourceDocumentDbHostOutput
	ToGetResourceResourceDocumentDbHostOutputWithContext(context.Context) GetResourceResourceDocumentDbHostOutput
}

type GetResourceResourceDocumentDbHostArgs struct {
	// The authentication database to use.
	AuthDatabase pulumi.StringPtrInput `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceDocumentDbHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceDocumentDbHost)(nil)).Elem()
}

func (i GetResourceResourceDocumentDbHostArgs) ToGetResourceResourceDocumentDbHostOutput() GetResourceResourceDocumentDbHostOutput {
	return i.ToGetResourceResourceDocumentDbHostOutputWithContext(context.Background())
}

func (i GetResourceResourceDocumentDbHostArgs) ToGetResourceResourceDocumentDbHostOutputWithContext(ctx context.Context) GetResourceResourceDocumentDbHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceDocumentDbHostOutput)
}

// GetResourceResourceDocumentDbHostArrayInput is an input type that accepts GetResourceResourceDocumentDbHostArray and GetResourceResourceDocumentDbHostArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceDocumentDbHostArrayInput` via:
//
//	GetResourceResourceDocumentDbHostArray{ GetResourceResourceDocumentDbHostArgs{...} }
type GetResourceResourceDocumentDbHostArrayInput interface {
	pulumi.Input

	ToGetResourceResourceDocumentDbHostArrayOutput() GetResourceResourceDocumentDbHostArrayOutput
	ToGetResourceResourceDocumentDbHostArrayOutputWithContext(context.Context) GetResourceResourceDocumentDbHostArrayOutput
}

type GetResourceResourceDocumentDbHostArray []GetResourceResourceDocumentDbHostInput

func (GetResourceResourceDocumentDbHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceDocumentDbHost)(nil)).Elem()
}

func (i GetResourceResourceDocumentDbHostArray) ToGetResourceResourceDocumentDbHostArrayOutput() GetResourceResourceDocumentDbHostArrayOutput {
	return i.ToGetResourceResourceDocumentDbHostArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceDocumentDbHostArray) ToGetResourceResourceDocumentDbHostArrayOutputWithContext(ctx context.Context) GetResourceResourceDocumentDbHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceDocumentDbHostArrayOutput)
}

type GetResourceResourceDocumentDbHostOutput struct{ *pulumi.OutputState }

func (GetResourceResourceDocumentDbHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceDocumentDbHost)(nil)).Elem()
}

func (o GetResourceResourceDocumentDbHostOutput) ToGetResourceResourceDocumentDbHostOutput() GetResourceResourceDocumentDbHostOutput {
	return o
}

func (o GetResourceResourceDocumentDbHostOutput) ToGetResourceResourceDocumentDbHostOutputWithContext(ctx context.Context) GetResourceResourceDocumentDbHostOutput {
	return o
}

// The authentication database to use.
func (o GetResourceResourceDocumentDbHostOutput) AuthDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHost) *string { return v.AuthDatabase }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceDocumentDbHostOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHost) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceDocumentDbHostOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHost) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceDocumentDbHostOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHost) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceDocumentDbHostOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHost) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceDocumentDbHostOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHost) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceDocumentDbHostOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHost) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceDocumentDbHostOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHost) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceDocumentDbHostOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHost) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceDocumentDbHostOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHost) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceDocumentDbHostOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHost) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceDocumentDbHostOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHost) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceDocumentDbHostOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHost) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceDocumentDbHostOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHost) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceDocumentDbHostArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceDocumentDbHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceDocumentDbHost)(nil)).Elem()
}

func (o GetResourceResourceDocumentDbHostArrayOutput) ToGetResourceResourceDocumentDbHostArrayOutput() GetResourceResourceDocumentDbHostArrayOutput {
	return o
}

func (o GetResourceResourceDocumentDbHostArrayOutput) ToGetResourceResourceDocumentDbHostArrayOutputWithContext(ctx context.Context) GetResourceResourceDocumentDbHostArrayOutput {
	return o
}

func (o GetResourceResourceDocumentDbHostArrayOutput) Index(i pulumi.IntInput) GetResourceResourceDocumentDbHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceDocumentDbHost {
		return vs[0].([]GetResourceResourceDocumentDbHost)[vs[1].(int)]
	}).(GetResourceResourceDocumentDbHostOutput)
}

type GetResourceResourceDocumentDbHostIam struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceDocumentDbHostIamInput is an input type that accepts GetResourceResourceDocumentDbHostIamArgs and GetResourceResourceDocumentDbHostIamOutput values.
// You can construct a concrete instance of `GetResourceResourceDocumentDbHostIamInput` via:
//
//	GetResourceResourceDocumentDbHostIamArgs{...}
type GetResourceResourceDocumentDbHostIamInput interface {
	pulumi.Input

	ToGetResourceResourceDocumentDbHostIamOutput() GetResourceResourceDocumentDbHostIamOutput
	ToGetResourceResourceDocumentDbHostIamOutputWithContext(context.Context) GetResourceResourceDocumentDbHostIamOutput
}

type GetResourceResourceDocumentDbHostIamArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceDocumentDbHostIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceDocumentDbHostIam)(nil)).Elem()
}

func (i GetResourceResourceDocumentDbHostIamArgs) ToGetResourceResourceDocumentDbHostIamOutput() GetResourceResourceDocumentDbHostIamOutput {
	return i.ToGetResourceResourceDocumentDbHostIamOutputWithContext(context.Background())
}

func (i GetResourceResourceDocumentDbHostIamArgs) ToGetResourceResourceDocumentDbHostIamOutputWithContext(ctx context.Context) GetResourceResourceDocumentDbHostIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceDocumentDbHostIamOutput)
}

// GetResourceResourceDocumentDbHostIamArrayInput is an input type that accepts GetResourceResourceDocumentDbHostIamArray and GetResourceResourceDocumentDbHostIamArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceDocumentDbHostIamArrayInput` via:
//
//	GetResourceResourceDocumentDbHostIamArray{ GetResourceResourceDocumentDbHostIamArgs{...} }
type GetResourceResourceDocumentDbHostIamArrayInput interface {
	pulumi.Input

	ToGetResourceResourceDocumentDbHostIamArrayOutput() GetResourceResourceDocumentDbHostIamArrayOutput
	ToGetResourceResourceDocumentDbHostIamArrayOutputWithContext(context.Context) GetResourceResourceDocumentDbHostIamArrayOutput
}

type GetResourceResourceDocumentDbHostIamArray []GetResourceResourceDocumentDbHostIamInput

func (GetResourceResourceDocumentDbHostIamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceDocumentDbHostIam)(nil)).Elem()
}

func (i GetResourceResourceDocumentDbHostIamArray) ToGetResourceResourceDocumentDbHostIamArrayOutput() GetResourceResourceDocumentDbHostIamArrayOutput {
	return i.ToGetResourceResourceDocumentDbHostIamArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceDocumentDbHostIamArray) ToGetResourceResourceDocumentDbHostIamArrayOutputWithContext(ctx context.Context) GetResourceResourceDocumentDbHostIamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceDocumentDbHostIamArrayOutput)
}

type GetResourceResourceDocumentDbHostIamOutput struct{ *pulumi.OutputState }

func (GetResourceResourceDocumentDbHostIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceDocumentDbHostIam)(nil)).Elem()
}

func (o GetResourceResourceDocumentDbHostIamOutput) ToGetResourceResourceDocumentDbHostIamOutput() GetResourceResourceDocumentDbHostIamOutput {
	return o
}

func (o GetResourceResourceDocumentDbHostIamOutput) ToGetResourceResourceDocumentDbHostIamOutputWithContext(ctx context.Context) GetResourceResourceDocumentDbHostIamOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceDocumentDbHostIamOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHostIam) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceDocumentDbHostIamOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHostIam) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceDocumentDbHostIamOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHostIam) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceDocumentDbHostIamOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHostIam) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceDocumentDbHostIamOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHostIam) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceDocumentDbHostIamOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHostIam) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceDocumentDbHostIamOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHostIam) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceDocumentDbHostIamOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHostIam) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o GetResourceResourceDocumentDbHostIamOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHostIam) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceDocumentDbHostIamOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHostIam) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceDocumentDbHostIamOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHostIam) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceDocumentDbHostIamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbHostIam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceDocumentDbHostIamArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceDocumentDbHostIamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceDocumentDbHostIam)(nil)).Elem()
}

func (o GetResourceResourceDocumentDbHostIamArrayOutput) ToGetResourceResourceDocumentDbHostIamArrayOutput() GetResourceResourceDocumentDbHostIamArrayOutput {
	return o
}

func (o GetResourceResourceDocumentDbHostIamArrayOutput) ToGetResourceResourceDocumentDbHostIamArrayOutputWithContext(ctx context.Context) GetResourceResourceDocumentDbHostIamArrayOutput {
	return o
}

func (o GetResourceResourceDocumentDbHostIamArrayOutput) Index(i pulumi.IntInput) GetResourceResourceDocumentDbHostIamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceDocumentDbHostIam {
		return vs[0].([]GetResourceResourceDocumentDbHostIam)[vs[1].(int)]
	}).(GetResourceResourceDocumentDbHostIamOutput)
}

type GetResourceResourceDocumentDbReplicaSet struct {
	// The authentication database to use.
	AuthDatabase *string `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// Set to connect to a replica instead of the primary node.
	ConnectToReplica *bool `pulumi:"connectToReplica"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The name of the mongo replicaset.
	ReplicaSet *string `pulumi:"replicaSet"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceDocumentDbReplicaSetInput is an input type that accepts GetResourceResourceDocumentDbReplicaSetArgs and GetResourceResourceDocumentDbReplicaSetOutput values.
// You can construct a concrete instance of `GetResourceResourceDocumentDbReplicaSetInput` via:
//
//	GetResourceResourceDocumentDbReplicaSetArgs{...}
type GetResourceResourceDocumentDbReplicaSetInput interface {
	pulumi.Input

	ToGetResourceResourceDocumentDbReplicaSetOutput() GetResourceResourceDocumentDbReplicaSetOutput
	ToGetResourceResourceDocumentDbReplicaSetOutputWithContext(context.Context) GetResourceResourceDocumentDbReplicaSetOutput
}

type GetResourceResourceDocumentDbReplicaSetArgs struct {
	// The authentication database to use.
	AuthDatabase pulumi.StringPtrInput `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// Set to connect to a replica instead of the primary node.
	ConnectToReplica pulumi.BoolPtrInput `pulumi:"connectToReplica"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The name of the mongo replicaset.
	ReplicaSet pulumi.StringPtrInput `pulumi:"replicaSet"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceDocumentDbReplicaSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceDocumentDbReplicaSet)(nil)).Elem()
}

func (i GetResourceResourceDocumentDbReplicaSetArgs) ToGetResourceResourceDocumentDbReplicaSetOutput() GetResourceResourceDocumentDbReplicaSetOutput {
	return i.ToGetResourceResourceDocumentDbReplicaSetOutputWithContext(context.Background())
}

func (i GetResourceResourceDocumentDbReplicaSetArgs) ToGetResourceResourceDocumentDbReplicaSetOutputWithContext(ctx context.Context) GetResourceResourceDocumentDbReplicaSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceDocumentDbReplicaSetOutput)
}

// GetResourceResourceDocumentDbReplicaSetArrayInput is an input type that accepts GetResourceResourceDocumentDbReplicaSetArray and GetResourceResourceDocumentDbReplicaSetArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceDocumentDbReplicaSetArrayInput` via:
//
//	GetResourceResourceDocumentDbReplicaSetArray{ GetResourceResourceDocumentDbReplicaSetArgs{...} }
type GetResourceResourceDocumentDbReplicaSetArrayInput interface {
	pulumi.Input

	ToGetResourceResourceDocumentDbReplicaSetArrayOutput() GetResourceResourceDocumentDbReplicaSetArrayOutput
	ToGetResourceResourceDocumentDbReplicaSetArrayOutputWithContext(context.Context) GetResourceResourceDocumentDbReplicaSetArrayOutput
}

type GetResourceResourceDocumentDbReplicaSetArray []GetResourceResourceDocumentDbReplicaSetInput

func (GetResourceResourceDocumentDbReplicaSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceDocumentDbReplicaSet)(nil)).Elem()
}

func (i GetResourceResourceDocumentDbReplicaSetArray) ToGetResourceResourceDocumentDbReplicaSetArrayOutput() GetResourceResourceDocumentDbReplicaSetArrayOutput {
	return i.ToGetResourceResourceDocumentDbReplicaSetArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceDocumentDbReplicaSetArray) ToGetResourceResourceDocumentDbReplicaSetArrayOutputWithContext(ctx context.Context) GetResourceResourceDocumentDbReplicaSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceDocumentDbReplicaSetArrayOutput)
}

type GetResourceResourceDocumentDbReplicaSetOutput struct{ *pulumi.OutputState }

func (GetResourceResourceDocumentDbReplicaSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceDocumentDbReplicaSet)(nil)).Elem()
}

func (o GetResourceResourceDocumentDbReplicaSetOutput) ToGetResourceResourceDocumentDbReplicaSetOutput() GetResourceResourceDocumentDbReplicaSetOutput {
	return o
}

func (o GetResourceResourceDocumentDbReplicaSetOutput) ToGetResourceResourceDocumentDbReplicaSetOutputWithContext(ctx context.Context) GetResourceResourceDocumentDbReplicaSetOutput {
	return o
}

// The authentication database to use.
func (o GetResourceResourceDocumentDbReplicaSetOutput) AuthDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbReplicaSet) *string { return v.AuthDatabase }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceDocumentDbReplicaSetOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbReplicaSet) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// Set to connect to a replica instead of the primary node.
func (o GetResourceResourceDocumentDbReplicaSetOutput) ConnectToReplica() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbReplicaSet) *bool { return v.ConnectToReplica }).(pulumi.BoolPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceDocumentDbReplicaSetOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbReplicaSet) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceDocumentDbReplicaSetOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbReplicaSet) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceDocumentDbReplicaSetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbReplicaSet) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceDocumentDbReplicaSetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbReplicaSet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceDocumentDbReplicaSetOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbReplicaSet) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceDocumentDbReplicaSetOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbReplicaSet) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceDocumentDbReplicaSetOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbReplicaSet) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The name of the mongo replicaset.
func (o GetResourceResourceDocumentDbReplicaSetOutput) ReplicaSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbReplicaSet) *string { return v.ReplicaSet }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceDocumentDbReplicaSetOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbReplicaSet) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceDocumentDbReplicaSetOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbReplicaSet) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceDocumentDbReplicaSetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbReplicaSet) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceDocumentDbReplicaSetOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDocumentDbReplicaSet) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceDocumentDbReplicaSetArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceDocumentDbReplicaSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceDocumentDbReplicaSet)(nil)).Elem()
}

func (o GetResourceResourceDocumentDbReplicaSetArrayOutput) ToGetResourceResourceDocumentDbReplicaSetArrayOutput() GetResourceResourceDocumentDbReplicaSetArrayOutput {
	return o
}

func (o GetResourceResourceDocumentDbReplicaSetArrayOutput) ToGetResourceResourceDocumentDbReplicaSetArrayOutputWithContext(ctx context.Context) GetResourceResourceDocumentDbReplicaSetArrayOutput {
	return o
}

func (o GetResourceResourceDocumentDbReplicaSetArrayOutput) Index(i pulumi.IntInput) GetResourceResourceDocumentDbReplicaSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceDocumentDbReplicaSet {
		return vs[0].([]GetResourceResourceDocumentDbReplicaSet)[vs[1].(int)]
	}).(GetResourceResourceDocumentDbReplicaSetOutput)
}

type GetResourceResourceDruid struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceDruidInput is an input type that accepts GetResourceResourceDruidArgs and GetResourceResourceDruidOutput values.
// You can construct a concrete instance of `GetResourceResourceDruidInput` via:
//
//	GetResourceResourceDruidArgs{...}
type GetResourceResourceDruidInput interface {
	pulumi.Input

	ToGetResourceResourceDruidOutput() GetResourceResourceDruidOutput
	ToGetResourceResourceDruidOutputWithContext(context.Context) GetResourceResourceDruidOutput
}

type GetResourceResourceDruidArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceDruidArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceDruid)(nil)).Elem()
}

func (i GetResourceResourceDruidArgs) ToGetResourceResourceDruidOutput() GetResourceResourceDruidOutput {
	return i.ToGetResourceResourceDruidOutputWithContext(context.Background())
}

func (i GetResourceResourceDruidArgs) ToGetResourceResourceDruidOutputWithContext(ctx context.Context) GetResourceResourceDruidOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceDruidOutput)
}

// GetResourceResourceDruidArrayInput is an input type that accepts GetResourceResourceDruidArray and GetResourceResourceDruidArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceDruidArrayInput` via:
//
//	GetResourceResourceDruidArray{ GetResourceResourceDruidArgs{...} }
type GetResourceResourceDruidArrayInput interface {
	pulumi.Input

	ToGetResourceResourceDruidArrayOutput() GetResourceResourceDruidArrayOutput
	ToGetResourceResourceDruidArrayOutputWithContext(context.Context) GetResourceResourceDruidArrayOutput
}

type GetResourceResourceDruidArray []GetResourceResourceDruidInput

func (GetResourceResourceDruidArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceDruid)(nil)).Elem()
}

func (i GetResourceResourceDruidArray) ToGetResourceResourceDruidArrayOutput() GetResourceResourceDruidArrayOutput {
	return i.ToGetResourceResourceDruidArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceDruidArray) ToGetResourceResourceDruidArrayOutputWithContext(ctx context.Context) GetResourceResourceDruidArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceDruidArrayOutput)
}

type GetResourceResourceDruidOutput struct{ *pulumi.OutputState }

func (GetResourceResourceDruidOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceDruid)(nil)).Elem()
}

func (o GetResourceResourceDruidOutput) ToGetResourceResourceDruidOutput() GetResourceResourceDruidOutput {
	return o
}

func (o GetResourceResourceDruidOutput) ToGetResourceResourceDruidOutputWithContext(ctx context.Context) GetResourceResourceDruidOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceDruidOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDruid) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceDruidOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDruid) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceDruidOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDruid) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceDruidOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDruid) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceDruidOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDruid) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceDruidOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDruid) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceDruidOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDruid) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceDruidOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDruid) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceDruidOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDruid) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceDruidOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDruid) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceDruidOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDruid) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceDruidOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceDruid) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceDruidOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDruid) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceDruidArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceDruidArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceDruid)(nil)).Elem()
}

func (o GetResourceResourceDruidArrayOutput) ToGetResourceResourceDruidArrayOutput() GetResourceResourceDruidArrayOutput {
	return o
}

func (o GetResourceResourceDruidArrayOutput) ToGetResourceResourceDruidArrayOutputWithContext(ctx context.Context) GetResourceResourceDruidArrayOutput {
	return o
}

func (o GetResourceResourceDruidArrayOutput) Index(i pulumi.IntInput) GetResourceResourceDruidOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceDruid {
		return vs[0].([]GetResourceResourceDruid)[vs[1].(int)]
	}).(GetResourceResourceDruidOutput)
}

type GetResourceResourceDynamoDb struct {
	// The Access Key ID to use to authenticate.
	AccessKey *string `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint *string `pulumi:"endpoint"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceDynamoDbInput is an input type that accepts GetResourceResourceDynamoDbArgs and GetResourceResourceDynamoDbOutput values.
// You can construct a concrete instance of `GetResourceResourceDynamoDbInput` via:
//
//	GetResourceResourceDynamoDbArgs{...}
type GetResourceResourceDynamoDbInput interface {
	pulumi.Input

	ToGetResourceResourceDynamoDbOutput() GetResourceResourceDynamoDbOutput
	ToGetResourceResourceDynamoDbOutputWithContext(context.Context) GetResourceResourceDynamoDbOutput
}

type GetResourceResourceDynamoDbArgs struct {
	// The Access Key ID to use to authenticate.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceDynamoDbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceDynamoDb)(nil)).Elem()
}

func (i GetResourceResourceDynamoDbArgs) ToGetResourceResourceDynamoDbOutput() GetResourceResourceDynamoDbOutput {
	return i.ToGetResourceResourceDynamoDbOutputWithContext(context.Background())
}

func (i GetResourceResourceDynamoDbArgs) ToGetResourceResourceDynamoDbOutputWithContext(ctx context.Context) GetResourceResourceDynamoDbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceDynamoDbOutput)
}

// GetResourceResourceDynamoDbArrayInput is an input type that accepts GetResourceResourceDynamoDbArray and GetResourceResourceDynamoDbArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceDynamoDbArrayInput` via:
//
//	GetResourceResourceDynamoDbArray{ GetResourceResourceDynamoDbArgs{...} }
type GetResourceResourceDynamoDbArrayInput interface {
	pulumi.Input

	ToGetResourceResourceDynamoDbArrayOutput() GetResourceResourceDynamoDbArrayOutput
	ToGetResourceResourceDynamoDbArrayOutputWithContext(context.Context) GetResourceResourceDynamoDbArrayOutput
}

type GetResourceResourceDynamoDbArray []GetResourceResourceDynamoDbInput

func (GetResourceResourceDynamoDbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceDynamoDb)(nil)).Elem()
}

func (i GetResourceResourceDynamoDbArray) ToGetResourceResourceDynamoDbArrayOutput() GetResourceResourceDynamoDbArrayOutput {
	return i.ToGetResourceResourceDynamoDbArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceDynamoDbArray) ToGetResourceResourceDynamoDbArrayOutputWithContext(ctx context.Context) GetResourceResourceDynamoDbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceDynamoDbArrayOutput)
}

type GetResourceResourceDynamoDbOutput struct{ *pulumi.OutputState }

func (GetResourceResourceDynamoDbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceDynamoDb)(nil)).Elem()
}

func (o GetResourceResourceDynamoDbOutput) ToGetResourceResourceDynamoDbOutput() GetResourceResourceDynamoDbOutput {
	return o
}

func (o GetResourceResourceDynamoDbOutput) ToGetResourceResourceDynamoDbOutputWithContext(ctx context.Context) GetResourceResourceDynamoDbOutput {
	return o
}

// The Access Key ID to use to authenticate.
func (o GetResourceResourceDynamoDbOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDb) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceDynamoDbOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDb) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceDynamoDbOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDb) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o GetResourceResourceDynamoDbOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDb) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceDynamoDbOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDb) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceDynamoDbOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDb) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceDynamoDbOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDb) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceDynamoDbOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDb) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o GetResourceResourceDynamoDbOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDb) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o GetResourceResourceDynamoDbOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDb) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o GetResourceResourceDynamoDbOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDb) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o GetResourceResourceDynamoDbOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDb) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceDynamoDbOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDb) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceDynamoDbOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDb) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceDynamoDbOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDb) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceDynamoDbArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceDynamoDbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceDynamoDb)(nil)).Elem()
}

func (o GetResourceResourceDynamoDbArrayOutput) ToGetResourceResourceDynamoDbArrayOutput() GetResourceResourceDynamoDbArrayOutput {
	return o
}

func (o GetResourceResourceDynamoDbArrayOutput) ToGetResourceResourceDynamoDbArrayOutputWithContext(ctx context.Context) GetResourceResourceDynamoDbArrayOutput {
	return o
}

func (o GetResourceResourceDynamoDbArrayOutput) Index(i pulumi.IntInput) GetResourceResourceDynamoDbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceDynamoDb {
		return vs[0].([]GetResourceResourceDynamoDb)[vs[1].(int)]
	}).(GetResourceResourceDynamoDbOutput)
}

type GetResourceResourceDynamoDbiam struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint *string `pulumi:"endpoint"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceDynamoDbiamInput is an input type that accepts GetResourceResourceDynamoDbiamArgs and GetResourceResourceDynamoDbiamOutput values.
// You can construct a concrete instance of `GetResourceResourceDynamoDbiamInput` via:
//
//	GetResourceResourceDynamoDbiamArgs{...}
type GetResourceResourceDynamoDbiamInput interface {
	pulumi.Input

	ToGetResourceResourceDynamoDbiamOutput() GetResourceResourceDynamoDbiamOutput
	ToGetResourceResourceDynamoDbiamOutputWithContext(context.Context) GetResourceResourceDynamoDbiamOutput
}

type GetResourceResourceDynamoDbiamArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceDynamoDbiamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceDynamoDbiam)(nil)).Elem()
}

func (i GetResourceResourceDynamoDbiamArgs) ToGetResourceResourceDynamoDbiamOutput() GetResourceResourceDynamoDbiamOutput {
	return i.ToGetResourceResourceDynamoDbiamOutputWithContext(context.Background())
}

func (i GetResourceResourceDynamoDbiamArgs) ToGetResourceResourceDynamoDbiamOutputWithContext(ctx context.Context) GetResourceResourceDynamoDbiamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceDynamoDbiamOutput)
}

// GetResourceResourceDynamoDbiamArrayInput is an input type that accepts GetResourceResourceDynamoDbiamArray and GetResourceResourceDynamoDbiamArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceDynamoDbiamArrayInput` via:
//
//	GetResourceResourceDynamoDbiamArray{ GetResourceResourceDynamoDbiamArgs{...} }
type GetResourceResourceDynamoDbiamArrayInput interface {
	pulumi.Input

	ToGetResourceResourceDynamoDbiamArrayOutput() GetResourceResourceDynamoDbiamArrayOutput
	ToGetResourceResourceDynamoDbiamArrayOutputWithContext(context.Context) GetResourceResourceDynamoDbiamArrayOutput
}

type GetResourceResourceDynamoDbiamArray []GetResourceResourceDynamoDbiamInput

func (GetResourceResourceDynamoDbiamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceDynamoDbiam)(nil)).Elem()
}

func (i GetResourceResourceDynamoDbiamArray) ToGetResourceResourceDynamoDbiamArrayOutput() GetResourceResourceDynamoDbiamArrayOutput {
	return i.ToGetResourceResourceDynamoDbiamArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceDynamoDbiamArray) ToGetResourceResourceDynamoDbiamArrayOutputWithContext(ctx context.Context) GetResourceResourceDynamoDbiamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceDynamoDbiamArrayOutput)
}

type GetResourceResourceDynamoDbiamOutput struct{ *pulumi.OutputState }

func (GetResourceResourceDynamoDbiamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceDynamoDbiam)(nil)).Elem()
}

func (o GetResourceResourceDynamoDbiamOutput) ToGetResourceResourceDynamoDbiamOutput() GetResourceResourceDynamoDbiamOutput {
	return o
}

func (o GetResourceResourceDynamoDbiamOutput) ToGetResourceResourceDynamoDbiamOutputWithContext(ctx context.Context) GetResourceResourceDynamoDbiamOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceDynamoDbiamOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDbiam) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceDynamoDbiamOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDbiam) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o GetResourceResourceDynamoDbiamOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDbiam) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceDynamoDbiamOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDbiam) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceDynamoDbiamOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDbiam) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceDynamoDbiamOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDbiam) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceDynamoDbiamOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDbiam) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o GetResourceResourceDynamoDbiamOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDbiam) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o GetResourceResourceDynamoDbiamOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDbiam) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o GetResourceResourceDynamoDbiamOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDbiam) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceDynamoDbiamOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDbiam) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceDynamoDbiamOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDbiam) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceDynamoDbiamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceDynamoDbiam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceDynamoDbiamArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceDynamoDbiamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceDynamoDbiam)(nil)).Elem()
}

func (o GetResourceResourceDynamoDbiamArrayOutput) ToGetResourceResourceDynamoDbiamArrayOutput() GetResourceResourceDynamoDbiamArrayOutput {
	return o
}

func (o GetResourceResourceDynamoDbiamArrayOutput) ToGetResourceResourceDynamoDbiamArrayOutputWithContext(ctx context.Context) GetResourceResourceDynamoDbiamArrayOutput {
	return o
}

func (o GetResourceResourceDynamoDbiamArrayOutput) Index(i pulumi.IntInput) GetResourceResourceDynamoDbiamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceDynamoDbiam {
		return vs[0].([]GetResourceResourceDynamoDbiam)[vs[1].(int)]
	}).(GetResourceResourceDynamoDbiamOutput)
}

type GetResourceResourceElastic struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceElasticInput is an input type that accepts GetResourceResourceElasticArgs and GetResourceResourceElasticOutput values.
// You can construct a concrete instance of `GetResourceResourceElasticInput` via:
//
//	GetResourceResourceElasticArgs{...}
type GetResourceResourceElasticInput interface {
	pulumi.Input

	ToGetResourceResourceElasticOutput() GetResourceResourceElasticOutput
	ToGetResourceResourceElasticOutputWithContext(context.Context) GetResourceResourceElasticOutput
}

type GetResourceResourceElasticArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceElasticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceElastic)(nil)).Elem()
}

func (i GetResourceResourceElasticArgs) ToGetResourceResourceElasticOutput() GetResourceResourceElasticOutput {
	return i.ToGetResourceResourceElasticOutputWithContext(context.Background())
}

func (i GetResourceResourceElasticArgs) ToGetResourceResourceElasticOutputWithContext(ctx context.Context) GetResourceResourceElasticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceElasticOutput)
}

// GetResourceResourceElasticArrayInput is an input type that accepts GetResourceResourceElasticArray and GetResourceResourceElasticArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceElasticArrayInput` via:
//
//	GetResourceResourceElasticArray{ GetResourceResourceElasticArgs{...} }
type GetResourceResourceElasticArrayInput interface {
	pulumi.Input

	ToGetResourceResourceElasticArrayOutput() GetResourceResourceElasticArrayOutput
	ToGetResourceResourceElasticArrayOutputWithContext(context.Context) GetResourceResourceElasticArrayOutput
}

type GetResourceResourceElasticArray []GetResourceResourceElasticInput

func (GetResourceResourceElasticArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceElastic)(nil)).Elem()
}

func (i GetResourceResourceElasticArray) ToGetResourceResourceElasticArrayOutput() GetResourceResourceElasticArrayOutput {
	return i.ToGetResourceResourceElasticArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceElasticArray) ToGetResourceResourceElasticArrayOutputWithContext(ctx context.Context) GetResourceResourceElasticArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceElasticArrayOutput)
}

type GetResourceResourceElasticOutput struct{ *pulumi.OutputState }

func (GetResourceResourceElasticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceElastic)(nil)).Elem()
}

func (o GetResourceResourceElasticOutput) ToGetResourceResourceElasticOutput() GetResourceResourceElasticOutput {
	return o
}

func (o GetResourceResourceElasticOutput) ToGetResourceResourceElasticOutputWithContext(ctx context.Context) GetResourceResourceElasticOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceElasticOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElastic) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceElasticOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElastic) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceElasticOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElastic) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceElasticOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElastic) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceElasticOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElastic) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceElasticOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElastic) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceElasticOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElastic) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceElasticOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElastic) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceElasticOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElastic) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceElasticOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElastic) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceElasticOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElastic) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceElasticOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceElastic) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o GetResourceResourceElasticOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElastic) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceElasticOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElastic) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceElasticArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceElasticArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceElastic)(nil)).Elem()
}

func (o GetResourceResourceElasticArrayOutput) ToGetResourceResourceElasticArrayOutput() GetResourceResourceElasticArrayOutput {
	return o
}

func (o GetResourceResourceElasticArrayOutput) ToGetResourceResourceElasticArrayOutputWithContext(ctx context.Context) GetResourceResourceElasticArrayOutput {
	return o
}

func (o GetResourceResourceElasticArrayOutput) Index(i pulumi.IntInput) GetResourceResourceElasticOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceElastic {
		return vs[0].([]GetResourceResourceElastic)[vs[1].(int)]
	}).(GetResourceResourceElasticOutput)
}

type GetResourceResourceElasticacheRedi struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceElasticacheRediInput is an input type that accepts GetResourceResourceElasticacheRediArgs and GetResourceResourceElasticacheRediOutput values.
// You can construct a concrete instance of `GetResourceResourceElasticacheRediInput` via:
//
//	GetResourceResourceElasticacheRediArgs{...}
type GetResourceResourceElasticacheRediInput interface {
	pulumi.Input

	ToGetResourceResourceElasticacheRediOutput() GetResourceResourceElasticacheRediOutput
	ToGetResourceResourceElasticacheRediOutputWithContext(context.Context) GetResourceResourceElasticacheRediOutput
}

type GetResourceResourceElasticacheRediArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceElasticacheRediArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceElasticacheRedi)(nil)).Elem()
}

func (i GetResourceResourceElasticacheRediArgs) ToGetResourceResourceElasticacheRediOutput() GetResourceResourceElasticacheRediOutput {
	return i.ToGetResourceResourceElasticacheRediOutputWithContext(context.Background())
}

func (i GetResourceResourceElasticacheRediArgs) ToGetResourceResourceElasticacheRediOutputWithContext(ctx context.Context) GetResourceResourceElasticacheRediOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceElasticacheRediOutput)
}

// GetResourceResourceElasticacheRediArrayInput is an input type that accepts GetResourceResourceElasticacheRediArray and GetResourceResourceElasticacheRediArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceElasticacheRediArrayInput` via:
//
//	GetResourceResourceElasticacheRediArray{ GetResourceResourceElasticacheRediArgs{...} }
type GetResourceResourceElasticacheRediArrayInput interface {
	pulumi.Input

	ToGetResourceResourceElasticacheRediArrayOutput() GetResourceResourceElasticacheRediArrayOutput
	ToGetResourceResourceElasticacheRediArrayOutputWithContext(context.Context) GetResourceResourceElasticacheRediArrayOutput
}

type GetResourceResourceElasticacheRediArray []GetResourceResourceElasticacheRediInput

func (GetResourceResourceElasticacheRediArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceElasticacheRedi)(nil)).Elem()
}

func (i GetResourceResourceElasticacheRediArray) ToGetResourceResourceElasticacheRediArrayOutput() GetResourceResourceElasticacheRediArrayOutput {
	return i.ToGetResourceResourceElasticacheRediArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceElasticacheRediArray) ToGetResourceResourceElasticacheRediArrayOutputWithContext(ctx context.Context) GetResourceResourceElasticacheRediArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceElasticacheRediArrayOutput)
}

type GetResourceResourceElasticacheRediOutput struct{ *pulumi.OutputState }

func (GetResourceResourceElasticacheRediOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceElasticacheRedi)(nil)).Elem()
}

func (o GetResourceResourceElasticacheRediOutput) ToGetResourceResourceElasticacheRediOutput() GetResourceResourceElasticacheRediOutput {
	return o
}

func (o GetResourceResourceElasticacheRediOutput) ToGetResourceResourceElasticacheRediOutputWithContext(ctx context.Context) GetResourceResourceElasticacheRediOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceElasticacheRediOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElasticacheRedi) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceElasticacheRediOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElasticacheRedi) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceElasticacheRediOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElasticacheRedi) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceElasticacheRediOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElasticacheRedi) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceElasticacheRediOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElasticacheRedi) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceElasticacheRediOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElasticacheRedi) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceElasticacheRediOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElasticacheRedi) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceElasticacheRediOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElasticacheRedi) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceElasticacheRediOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElasticacheRedi) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceElasticacheRediOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElasticacheRedi) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceElasticacheRediOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElasticacheRedi) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceElasticacheRediOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceElasticacheRedi) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o GetResourceResourceElasticacheRediOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElasticacheRedi) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceElasticacheRediOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceElasticacheRedi) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceElasticacheRediArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceElasticacheRediArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceElasticacheRedi)(nil)).Elem()
}

func (o GetResourceResourceElasticacheRediArrayOutput) ToGetResourceResourceElasticacheRediArrayOutput() GetResourceResourceElasticacheRediArrayOutput {
	return o
}

func (o GetResourceResourceElasticacheRediArrayOutput) ToGetResourceResourceElasticacheRediArrayOutputWithContext(ctx context.Context) GetResourceResourceElasticacheRediArrayOutput {
	return o
}

func (o GetResourceResourceElasticacheRediArrayOutput) Index(i pulumi.IntInput) GetResourceResourceElasticacheRediOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceElasticacheRedi {
		return vs[0].([]GetResourceResourceElasticacheRedi)[vs[1].(int)]
	}).(GetResourceResourceElasticacheRediOutput)
}

type GetResourceResourceGcp struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// The service account keyfile to authenticate with.
	Keyfile *string `pulumi:"keyfile"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Space separated scopes that this login should assume into when authenticating.
	Scopes *string `pulumi:"scopes"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceGcpInput is an input type that accepts GetResourceResourceGcpArgs and GetResourceResourceGcpOutput values.
// You can construct a concrete instance of `GetResourceResourceGcpInput` via:
//
//	GetResourceResourceGcpArgs{...}
type GetResourceResourceGcpInput interface {
	pulumi.Input

	ToGetResourceResourceGcpOutput() GetResourceResourceGcpOutput
	ToGetResourceResourceGcpOutputWithContext(context.Context) GetResourceResourceGcpOutput
}

type GetResourceResourceGcpArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The service account keyfile to authenticate with.
	Keyfile pulumi.StringPtrInput `pulumi:"keyfile"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Space separated scopes that this login should assume into when authenticating.
	Scopes pulumi.StringPtrInput `pulumi:"scopes"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceGcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceGcp)(nil)).Elem()
}

func (i GetResourceResourceGcpArgs) ToGetResourceResourceGcpOutput() GetResourceResourceGcpOutput {
	return i.ToGetResourceResourceGcpOutputWithContext(context.Background())
}

func (i GetResourceResourceGcpArgs) ToGetResourceResourceGcpOutputWithContext(ctx context.Context) GetResourceResourceGcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceGcpOutput)
}

// GetResourceResourceGcpArrayInput is an input type that accepts GetResourceResourceGcpArray and GetResourceResourceGcpArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceGcpArrayInput` via:
//
//	GetResourceResourceGcpArray{ GetResourceResourceGcpArgs{...} }
type GetResourceResourceGcpArrayInput interface {
	pulumi.Input

	ToGetResourceResourceGcpArrayOutput() GetResourceResourceGcpArrayOutput
	ToGetResourceResourceGcpArrayOutputWithContext(context.Context) GetResourceResourceGcpArrayOutput
}

type GetResourceResourceGcpArray []GetResourceResourceGcpInput

func (GetResourceResourceGcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceGcp)(nil)).Elem()
}

func (i GetResourceResourceGcpArray) ToGetResourceResourceGcpArrayOutput() GetResourceResourceGcpArrayOutput {
	return i.ToGetResourceResourceGcpArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceGcpArray) ToGetResourceResourceGcpArrayOutputWithContext(ctx context.Context) GetResourceResourceGcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceGcpArrayOutput)
}

type GetResourceResourceGcpOutput struct{ *pulumi.OutputState }

func (GetResourceResourceGcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceGcp)(nil)).Elem()
}

func (o GetResourceResourceGcpOutput) ToGetResourceResourceGcpOutput() GetResourceResourceGcpOutput {
	return o
}

func (o GetResourceResourceGcpOutput) ToGetResourceResourceGcpOutputWithContext(ctx context.Context) GetResourceResourceGcpOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceGcpOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcp) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceGcpOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcp) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceGcpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The service account keyfile to authenticate with.
func (o GetResourceResourceGcpOutput) Keyfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcp) *string { return v.Keyfile }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceGcpOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcp) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceGcpOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcp) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceGcpOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcp) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Space separated scopes that this login should assume into when authenticating.
func (o GetResourceResourceGcpOutput) Scopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcp) *string { return v.Scopes }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceGcpOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcp) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceGcpOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcp) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceGcpOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceGcp) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceGcpArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceGcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceGcp)(nil)).Elem()
}

func (o GetResourceResourceGcpArrayOutput) ToGetResourceResourceGcpArrayOutput() GetResourceResourceGcpArrayOutput {
	return o
}

func (o GetResourceResourceGcpArrayOutput) ToGetResourceResourceGcpArrayOutputWithContext(ctx context.Context) GetResourceResourceGcpArrayOutput {
	return o
}

func (o GetResourceResourceGcpArrayOutput) Index(i pulumi.IntInput) GetResourceResourceGcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceGcp {
		return vs[0].([]GetResourceResourceGcp)[vs[1].(int)]
	}).(GetResourceResourceGcpOutput)
}

type GetResourceResourceGcpConsole struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// The length of time in seconds console sessions will live before needing to reauthenticate.
	SessionExpiry *int `pulumi:"sessionExpiry"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the Workforce Identity Pool in GCP to use for federated authentication.
	WorkforcePoolId *string `pulumi:"workforcePoolId"`
	// The ID of the Workforce Identity Provider in GCP to use for federated authentication.
	// * google_gke:
	WorkforceProviderId *string `pulumi:"workforceProviderId"`
}

// GetResourceResourceGcpConsoleInput is an input type that accepts GetResourceResourceGcpConsoleArgs and GetResourceResourceGcpConsoleOutput values.
// You can construct a concrete instance of `GetResourceResourceGcpConsoleInput` via:
//
//	GetResourceResourceGcpConsoleArgs{...}
type GetResourceResourceGcpConsoleInput interface {
	pulumi.Input

	ToGetResourceResourceGcpConsoleOutput() GetResourceResourceGcpConsoleOutput
	ToGetResourceResourceGcpConsoleOutputWithContext(context.Context) GetResourceResourceGcpConsoleOutput
}

type GetResourceResourceGcpConsoleArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// The length of time in seconds console sessions will live before needing to reauthenticate.
	SessionExpiry pulumi.IntPtrInput `pulumi:"sessionExpiry"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The ID of the Workforce Identity Pool in GCP to use for federated authentication.
	WorkforcePoolId pulumi.StringPtrInput `pulumi:"workforcePoolId"`
	// The ID of the Workforce Identity Provider in GCP to use for federated authentication.
	// * google_gke:
	WorkforceProviderId pulumi.StringPtrInput `pulumi:"workforceProviderId"`
}

func (GetResourceResourceGcpConsoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceGcpConsole)(nil)).Elem()
}

func (i GetResourceResourceGcpConsoleArgs) ToGetResourceResourceGcpConsoleOutput() GetResourceResourceGcpConsoleOutput {
	return i.ToGetResourceResourceGcpConsoleOutputWithContext(context.Background())
}

func (i GetResourceResourceGcpConsoleArgs) ToGetResourceResourceGcpConsoleOutputWithContext(ctx context.Context) GetResourceResourceGcpConsoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceGcpConsoleOutput)
}

// GetResourceResourceGcpConsoleArrayInput is an input type that accepts GetResourceResourceGcpConsoleArray and GetResourceResourceGcpConsoleArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceGcpConsoleArrayInput` via:
//
//	GetResourceResourceGcpConsoleArray{ GetResourceResourceGcpConsoleArgs{...} }
type GetResourceResourceGcpConsoleArrayInput interface {
	pulumi.Input

	ToGetResourceResourceGcpConsoleArrayOutput() GetResourceResourceGcpConsoleArrayOutput
	ToGetResourceResourceGcpConsoleArrayOutputWithContext(context.Context) GetResourceResourceGcpConsoleArrayOutput
}

type GetResourceResourceGcpConsoleArray []GetResourceResourceGcpConsoleInput

func (GetResourceResourceGcpConsoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceGcpConsole)(nil)).Elem()
}

func (i GetResourceResourceGcpConsoleArray) ToGetResourceResourceGcpConsoleArrayOutput() GetResourceResourceGcpConsoleArrayOutput {
	return i.ToGetResourceResourceGcpConsoleArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceGcpConsoleArray) ToGetResourceResourceGcpConsoleArrayOutputWithContext(ctx context.Context) GetResourceResourceGcpConsoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceGcpConsoleArrayOutput)
}

type GetResourceResourceGcpConsoleOutput struct{ *pulumi.OutputState }

func (GetResourceResourceGcpConsoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceGcpConsole)(nil)).Elem()
}

func (o GetResourceResourceGcpConsoleOutput) ToGetResourceResourceGcpConsoleOutput() GetResourceResourceGcpConsoleOutput {
	return o
}

func (o GetResourceResourceGcpConsoleOutput) ToGetResourceResourceGcpConsoleOutputWithContext(ctx context.Context) GetResourceResourceGcpConsoleOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceGcpConsoleOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpConsole) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceGcpConsoleOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpConsole) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceGcpConsoleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpConsole) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o GetResourceResourceGcpConsoleOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpConsole) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o GetResourceResourceGcpConsoleOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpConsole) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceGcpConsoleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpConsole) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceGcpConsoleOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpConsole) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceGcpConsoleOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpConsole) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceGcpConsoleOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpConsole) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// The length of time in seconds console sessions will live before needing to reauthenticate.
func (o GetResourceResourceGcpConsoleOutput) SessionExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpConsole) *int { return v.SessionExpiry }).(pulumi.IntPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceGcpConsoleOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpConsole) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceGcpConsoleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceGcpConsole) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The ID of the Workforce Identity Pool in GCP to use for federated authentication.
func (o GetResourceResourceGcpConsoleOutput) WorkforcePoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpConsole) *string { return v.WorkforcePoolId }).(pulumi.StringPtrOutput)
}

// The ID of the Workforce Identity Provider in GCP to use for federated authentication.
// * google_gke:
func (o GetResourceResourceGcpConsoleOutput) WorkforceProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpConsole) *string { return v.WorkforceProviderId }).(pulumi.StringPtrOutput)
}

type GetResourceResourceGcpConsoleArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceGcpConsoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceGcpConsole)(nil)).Elem()
}

func (o GetResourceResourceGcpConsoleArrayOutput) ToGetResourceResourceGcpConsoleArrayOutput() GetResourceResourceGcpConsoleArrayOutput {
	return o
}

func (o GetResourceResourceGcpConsoleArrayOutput) ToGetResourceResourceGcpConsoleArrayOutputWithContext(ctx context.Context) GetResourceResourceGcpConsoleArrayOutput {
	return o
}

func (o GetResourceResourceGcpConsoleArrayOutput) Index(i pulumi.IntInput) GetResourceResourceGcpConsoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceGcpConsole {
		return vs[0].([]GetResourceResourceGcpConsole)[vs[1].(int)]
	}).(GetResourceResourceGcpConsoleOutput)
}

type GetResourceResourceGcpwif struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// When specified, all project scoped requests will use this Project ID, overriding the project ID specified by clients
	ProjectId *string `pulumi:"projectId"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Space separated scopes that this login should assume into when authenticating.
	Scopes *string `pulumi:"scopes"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// The length of time in seconds console sessions will live before needing to reauthenticate.
	SessionExpiry *int `pulumi:"sessionExpiry"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The ID of the Workforce Identity Pool in GCP to use for federated authentication.
	WorkforcePoolId *string `pulumi:"workforcePoolId"`
	// The ID of the Workforce Identity Provider in GCP to use for federated authentication.
	// * google_gke:
	WorkforceProviderId *string `pulumi:"workforceProviderId"`
}

// GetResourceResourceGcpwifInput is an input type that accepts GetResourceResourceGcpwifArgs and GetResourceResourceGcpwifOutput values.
// You can construct a concrete instance of `GetResourceResourceGcpwifInput` via:
//
//	GetResourceResourceGcpwifArgs{...}
type GetResourceResourceGcpwifInput interface {
	pulumi.Input

	ToGetResourceResourceGcpwifOutput() GetResourceResourceGcpwifOutput
	ToGetResourceResourceGcpwifOutputWithContext(context.Context) GetResourceResourceGcpwifOutput
}

type GetResourceResourceGcpwifArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// When specified, all project scoped requests will use this Project ID, overriding the project ID specified by clients
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Space separated scopes that this login should assume into when authenticating.
	Scopes pulumi.StringPtrInput `pulumi:"scopes"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// The length of time in seconds console sessions will live before needing to reauthenticate.
	SessionExpiry pulumi.IntPtrInput `pulumi:"sessionExpiry"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The ID of the Workforce Identity Pool in GCP to use for federated authentication.
	WorkforcePoolId pulumi.StringPtrInput `pulumi:"workforcePoolId"`
	// The ID of the Workforce Identity Provider in GCP to use for federated authentication.
	// * google_gke:
	WorkforceProviderId pulumi.StringPtrInput `pulumi:"workforceProviderId"`
}

func (GetResourceResourceGcpwifArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceGcpwif)(nil)).Elem()
}

func (i GetResourceResourceGcpwifArgs) ToGetResourceResourceGcpwifOutput() GetResourceResourceGcpwifOutput {
	return i.ToGetResourceResourceGcpwifOutputWithContext(context.Background())
}

func (i GetResourceResourceGcpwifArgs) ToGetResourceResourceGcpwifOutputWithContext(ctx context.Context) GetResourceResourceGcpwifOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceGcpwifOutput)
}

// GetResourceResourceGcpwifArrayInput is an input type that accepts GetResourceResourceGcpwifArray and GetResourceResourceGcpwifArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceGcpwifArrayInput` via:
//
//	GetResourceResourceGcpwifArray{ GetResourceResourceGcpwifArgs{...} }
type GetResourceResourceGcpwifArrayInput interface {
	pulumi.Input

	ToGetResourceResourceGcpwifArrayOutput() GetResourceResourceGcpwifArrayOutput
	ToGetResourceResourceGcpwifArrayOutputWithContext(context.Context) GetResourceResourceGcpwifArrayOutput
}

type GetResourceResourceGcpwifArray []GetResourceResourceGcpwifInput

func (GetResourceResourceGcpwifArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceGcpwif)(nil)).Elem()
}

func (i GetResourceResourceGcpwifArray) ToGetResourceResourceGcpwifArrayOutput() GetResourceResourceGcpwifArrayOutput {
	return i.ToGetResourceResourceGcpwifArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceGcpwifArray) ToGetResourceResourceGcpwifArrayOutputWithContext(ctx context.Context) GetResourceResourceGcpwifArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceGcpwifArrayOutput)
}

type GetResourceResourceGcpwifOutput struct{ *pulumi.OutputState }

func (GetResourceResourceGcpwifOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceGcpwif)(nil)).Elem()
}

func (o GetResourceResourceGcpwifOutput) ToGetResourceResourceGcpwifOutput() GetResourceResourceGcpwifOutput {
	return o
}

func (o GetResourceResourceGcpwifOutput) ToGetResourceResourceGcpwifOutputWithContext(ctx context.Context) GetResourceResourceGcpwifOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceGcpwifOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpwif) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceGcpwifOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpwif) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceGcpwifOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpwif) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o GetResourceResourceGcpwifOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpwif) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o GetResourceResourceGcpwifOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpwif) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceGcpwifOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpwif) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceGcpwifOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpwif) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// When specified, all project scoped requests will use this Project ID, overriding the project ID specified by clients
func (o GetResourceResourceGcpwifOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpwif) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceGcpwifOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpwif) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Space separated scopes that this login should assume into when authenticating.
func (o GetResourceResourceGcpwifOutput) Scopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpwif) *string { return v.Scopes }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceGcpwifOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpwif) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// The length of time in seconds console sessions will live before needing to reauthenticate.
func (o GetResourceResourceGcpwifOutput) SessionExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpwif) *int { return v.SessionExpiry }).(pulumi.IntPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceGcpwifOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpwif) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceGcpwifOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceGcpwif) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The ID of the Workforce Identity Pool in GCP to use for federated authentication.
func (o GetResourceResourceGcpwifOutput) WorkforcePoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpwif) *string { return v.WorkforcePoolId }).(pulumi.StringPtrOutput)
}

// The ID of the Workforce Identity Provider in GCP to use for federated authentication.
// * google_gke:
func (o GetResourceResourceGcpwifOutput) WorkforceProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGcpwif) *string { return v.WorkforceProviderId }).(pulumi.StringPtrOutput)
}

type GetResourceResourceGcpwifArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceGcpwifArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceGcpwif)(nil)).Elem()
}

func (o GetResourceResourceGcpwifArrayOutput) ToGetResourceResourceGcpwifArrayOutput() GetResourceResourceGcpwifArrayOutput {
	return o
}

func (o GetResourceResourceGcpwifArrayOutput) ToGetResourceResourceGcpwifArrayOutputWithContext(ctx context.Context) GetResourceResourceGcpwifArrayOutput {
	return o
}

func (o GetResourceResourceGcpwifArrayOutput) Index(i pulumi.IntInput) GetResourceResourceGcpwifOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceGcpwif {
		return vs[0].([]GetResourceResourceGcpwif)[vs[1].(int)]
	}).(GetResourceResourceGcpwifOutput)
}

type GetResourceResourceGoogleGke struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass *bool `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled *bool `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername *string `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint *string `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// The service account key to authenticate with.
	ServiceAccountKey *string `pulumi:"serviceAccountKey"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceGoogleGkeInput is an input type that accepts GetResourceResourceGoogleGkeArgs and GetResourceResourceGoogleGkeOutput values.
// You can construct a concrete instance of `GetResourceResourceGoogleGkeInput` via:
//
//	GetResourceResourceGoogleGkeArgs{...}
type GetResourceResourceGoogleGkeInput interface {
	pulumi.Input

	ToGetResourceResourceGoogleGkeOutput() GetResourceResourceGoogleGkeOutput
	ToGetResourceResourceGoogleGkeOutputWithContext(context.Context) GetResourceResourceGoogleGkeOutput
}

type GetResourceResourceGoogleGkeArgs struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass pulumi.BoolPtrInput `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled pulumi.BoolPtrInput `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername pulumi.StringPtrInput `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// The service account key to authenticate with.
	ServiceAccountKey pulumi.StringPtrInput `pulumi:"serviceAccountKey"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceGoogleGkeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceGoogleGke)(nil)).Elem()
}

func (i GetResourceResourceGoogleGkeArgs) ToGetResourceResourceGoogleGkeOutput() GetResourceResourceGoogleGkeOutput {
	return i.ToGetResourceResourceGoogleGkeOutputWithContext(context.Background())
}

func (i GetResourceResourceGoogleGkeArgs) ToGetResourceResourceGoogleGkeOutputWithContext(ctx context.Context) GetResourceResourceGoogleGkeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceGoogleGkeOutput)
}

// GetResourceResourceGoogleGkeArrayInput is an input type that accepts GetResourceResourceGoogleGkeArray and GetResourceResourceGoogleGkeArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceGoogleGkeArrayInput` via:
//
//	GetResourceResourceGoogleGkeArray{ GetResourceResourceGoogleGkeArgs{...} }
type GetResourceResourceGoogleGkeArrayInput interface {
	pulumi.Input

	ToGetResourceResourceGoogleGkeArrayOutput() GetResourceResourceGoogleGkeArrayOutput
	ToGetResourceResourceGoogleGkeArrayOutputWithContext(context.Context) GetResourceResourceGoogleGkeArrayOutput
}

type GetResourceResourceGoogleGkeArray []GetResourceResourceGoogleGkeInput

func (GetResourceResourceGoogleGkeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceGoogleGke)(nil)).Elem()
}

func (i GetResourceResourceGoogleGkeArray) ToGetResourceResourceGoogleGkeArrayOutput() GetResourceResourceGoogleGkeArrayOutput {
	return i.ToGetResourceResourceGoogleGkeArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceGoogleGkeArray) ToGetResourceResourceGoogleGkeArrayOutputWithContext(ctx context.Context) GetResourceResourceGoogleGkeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceGoogleGkeArrayOutput)
}

type GetResourceResourceGoogleGkeOutput struct{ *pulumi.OutputState }

func (GetResourceResourceGoogleGkeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceGoogleGke)(nil)).Elem()
}

func (o GetResourceResourceGoogleGkeOutput) ToGetResourceResourceGoogleGkeOutput() GetResourceResourceGoogleGkeOutput {
	return o
}

func (o GetResourceResourceGoogleGkeOutput) ToGetResourceResourceGoogleGkeOutputWithContext(ctx context.Context) GetResourceResourceGoogleGkeOutput {
	return o
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o GetResourceResourceGoogleGkeOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) *bool { return v.AllowResourceRoleBypass }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceGoogleGkeOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o GetResourceResourceGoogleGkeOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o GetResourceResourceGoogleGkeOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) *bool { return v.DiscoveryEnabled }).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o GetResourceResourceGoogleGkeOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) *string { return v.DiscoveryUsername }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceGoogleGkeOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o GetResourceResourceGoogleGkeOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o GetResourceResourceGoogleGkeOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceGoogleGkeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o GetResourceResourceGoogleGkeOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o GetResourceResourceGoogleGkeOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceGoogleGkeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceGoogleGkeOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceGoogleGkeOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceGoogleGkeOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// The service account key to authenticate with.
func (o GetResourceResourceGoogleGkeOutput) ServiceAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) *string { return v.ServiceAccountKey }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceGoogleGkeOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceGoogleGkeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGke) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceGoogleGkeArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceGoogleGkeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceGoogleGke)(nil)).Elem()
}

func (o GetResourceResourceGoogleGkeArrayOutput) ToGetResourceResourceGoogleGkeArrayOutput() GetResourceResourceGoogleGkeArrayOutput {
	return o
}

func (o GetResourceResourceGoogleGkeArrayOutput) ToGetResourceResourceGoogleGkeArrayOutputWithContext(ctx context.Context) GetResourceResourceGoogleGkeArrayOutput {
	return o
}

func (o GetResourceResourceGoogleGkeArrayOutput) Index(i pulumi.IntInput) GetResourceResourceGoogleGkeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceGoogleGke {
		return vs[0].([]GetResourceResourceGoogleGke)[vs[1].(int)]
	}).(GetResourceResourceGoogleGkeOutput)
}

type GetResourceResourceGoogleGkeUserImpersonation struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint *string `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// The service account key to authenticate with.
	ServiceAccountKey *string `pulumi:"serviceAccountKey"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceGoogleGkeUserImpersonationInput is an input type that accepts GetResourceResourceGoogleGkeUserImpersonationArgs and GetResourceResourceGoogleGkeUserImpersonationOutput values.
// You can construct a concrete instance of `GetResourceResourceGoogleGkeUserImpersonationInput` via:
//
//	GetResourceResourceGoogleGkeUserImpersonationArgs{...}
type GetResourceResourceGoogleGkeUserImpersonationInput interface {
	pulumi.Input

	ToGetResourceResourceGoogleGkeUserImpersonationOutput() GetResourceResourceGoogleGkeUserImpersonationOutput
	ToGetResourceResourceGoogleGkeUserImpersonationOutputWithContext(context.Context) GetResourceResourceGoogleGkeUserImpersonationOutput
}

type GetResourceResourceGoogleGkeUserImpersonationArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// The service account key to authenticate with.
	ServiceAccountKey pulumi.StringPtrInput `pulumi:"serviceAccountKey"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceGoogleGkeUserImpersonationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceGoogleGkeUserImpersonation)(nil)).Elem()
}

func (i GetResourceResourceGoogleGkeUserImpersonationArgs) ToGetResourceResourceGoogleGkeUserImpersonationOutput() GetResourceResourceGoogleGkeUserImpersonationOutput {
	return i.ToGetResourceResourceGoogleGkeUserImpersonationOutputWithContext(context.Background())
}

func (i GetResourceResourceGoogleGkeUserImpersonationArgs) ToGetResourceResourceGoogleGkeUserImpersonationOutputWithContext(ctx context.Context) GetResourceResourceGoogleGkeUserImpersonationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceGoogleGkeUserImpersonationOutput)
}

// GetResourceResourceGoogleGkeUserImpersonationArrayInput is an input type that accepts GetResourceResourceGoogleGkeUserImpersonationArray and GetResourceResourceGoogleGkeUserImpersonationArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceGoogleGkeUserImpersonationArrayInput` via:
//
//	GetResourceResourceGoogleGkeUserImpersonationArray{ GetResourceResourceGoogleGkeUserImpersonationArgs{...} }
type GetResourceResourceGoogleGkeUserImpersonationArrayInput interface {
	pulumi.Input

	ToGetResourceResourceGoogleGkeUserImpersonationArrayOutput() GetResourceResourceGoogleGkeUserImpersonationArrayOutput
	ToGetResourceResourceGoogleGkeUserImpersonationArrayOutputWithContext(context.Context) GetResourceResourceGoogleGkeUserImpersonationArrayOutput
}

type GetResourceResourceGoogleGkeUserImpersonationArray []GetResourceResourceGoogleGkeUserImpersonationInput

func (GetResourceResourceGoogleGkeUserImpersonationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceGoogleGkeUserImpersonation)(nil)).Elem()
}

func (i GetResourceResourceGoogleGkeUserImpersonationArray) ToGetResourceResourceGoogleGkeUserImpersonationArrayOutput() GetResourceResourceGoogleGkeUserImpersonationArrayOutput {
	return i.ToGetResourceResourceGoogleGkeUserImpersonationArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceGoogleGkeUserImpersonationArray) ToGetResourceResourceGoogleGkeUserImpersonationArrayOutputWithContext(ctx context.Context) GetResourceResourceGoogleGkeUserImpersonationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceGoogleGkeUserImpersonationArrayOutput)
}

type GetResourceResourceGoogleGkeUserImpersonationOutput struct{ *pulumi.OutputState }

func (GetResourceResourceGoogleGkeUserImpersonationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceGoogleGkeUserImpersonation)(nil)).Elem()
}

func (o GetResourceResourceGoogleGkeUserImpersonationOutput) ToGetResourceResourceGoogleGkeUserImpersonationOutput() GetResourceResourceGoogleGkeUserImpersonationOutput {
	return o
}

func (o GetResourceResourceGoogleGkeUserImpersonationOutput) ToGetResourceResourceGoogleGkeUserImpersonationOutputWithContext(ctx context.Context) GetResourceResourceGoogleGkeUserImpersonationOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceGoogleGkeUserImpersonationOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGkeUserImpersonation) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o GetResourceResourceGoogleGkeUserImpersonationOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGkeUserImpersonation) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceGoogleGkeUserImpersonationOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGkeUserImpersonation) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o GetResourceResourceGoogleGkeUserImpersonationOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGkeUserImpersonation) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o GetResourceResourceGoogleGkeUserImpersonationOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGkeUserImpersonation) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceGoogleGkeUserImpersonationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGkeUserImpersonation) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceGoogleGkeUserImpersonationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGkeUserImpersonation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceGoogleGkeUserImpersonationOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGkeUserImpersonation) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceGoogleGkeUserImpersonationOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGkeUserImpersonation) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceGoogleGkeUserImpersonationOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGkeUserImpersonation) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// The service account key to authenticate with.
func (o GetResourceResourceGoogleGkeUserImpersonationOutput) ServiceAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGkeUserImpersonation) *string { return v.ServiceAccountKey }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceGoogleGkeUserImpersonationOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGkeUserImpersonation) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceGoogleGkeUserImpersonationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceGoogleGkeUserImpersonation) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceGoogleGkeUserImpersonationArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceGoogleGkeUserImpersonationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceGoogleGkeUserImpersonation)(nil)).Elem()
}

func (o GetResourceResourceGoogleGkeUserImpersonationArrayOutput) ToGetResourceResourceGoogleGkeUserImpersonationArrayOutput() GetResourceResourceGoogleGkeUserImpersonationArrayOutput {
	return o
}

func (o GetResourceResourceGoogleGkeUserImpersonationArrayOutput) ToGetResourceResourceGoogleGkeUserImpersonationArrayOutputWithContext(ctx context.Context) GetResourceResourceGoogleGkeUserImpersonationArrayOutput {
	return o
}

func (o GetResourceResourceGoogleGkeUserImpersonationArrayOutput) Index(i pulumi.IntInput) GetResourceResourceGoogleGkeUserImpersonationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceGoogleGkeUserImpersonation {
		return vs[0].([]GetResourceResourceGoogleGkeUserImpersonation)[vs[1].(int)]
	}).(GetResourceResourceGoogleGkeUserImpersonationOutput)
}

type GetResourceResourceGreenplum struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceGreenplumInput is an input type that accepts GetResourceResourceGreenplumArgs and GetResourceResourceGreenplumOutput values.
// You can construct a concrete instance of `GetResourceResourceGreenplumInput` via:
//
//	GetResourceResourceGreenplumArgs{...}
type GetResourceResourceGreenplumInput interface {
	pulumi.Input

	ToGetResourceResourceGreenplumOutput() GetResourceResourceGreenplumOutput
	ToGetResourceResourceGreenplumOutputWithContext(context.Context) GetResourceResourceGreenplumOutput
}

type GetResourceResourceGreenplumArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceGreenplumArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceGreenplum)(nil)).Elem()
}

func (i GetResourceResourceGreenplumArgs) ToGetResourceResourceGreenplumOutput() GetResourceResourceGreenplumOutput {
	return i.ToGetResourceResourceGreenplumOutputWithContext(context.Background())
}

func (i GetResourceResourceGreenplumArgs) ToGetResourceResourceGreenplumOutputWithContext(ctx context.Context) GetResourceResourceGreenplumOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceGreenplumOutput)
}

// GetResourceResourceGreenplumArrayInput is an input type that accepts GetResourceResourceGreenplumArray and GetResourceResourceGreenplumArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceGreenplumArrayInput` via:
//
//	GetResourceResourceGreenplumArray{ GetResourceResourceGreenplumArgs{...} }
type GetResourceResourceGreenplumArrayInput interface {
	pulumi.Input

	ToGetResourceResourceGreenplumArrayOutput() GetResourceResourceGreenplumArrayOutput
	ToGetResourceResourceGreenplumArrayOutputWithContext(context.Context) GetResourceResourceGreenplumArrayOutput
}

type GetResourceResourceGreenplumArray []GetResourceResourceGreenplumInput

func (GetResourceResourceGreenplumArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceGreenplum)(nil)).Elem()
}

func (i GetResourceResourceGreenplumArray) ToGetResourceResourceGreenplumArrayOutput() GetResourceResourceGreenplumArrayOutput {
	return i.ToGetResourceResourceGreenplumArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceGreenplumArray) ToGetResourceResourceGreenplumArrayOutputWithContext(ctx context.Context) GetResourceResourceGreenplumArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceGreenplumArrayOutput)
}

type GetResourceResourceGreenplumOutput struct{ *pulumi.OutputState }

func (GetResourceResourceGreenplumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceGreenplum)(nil)).Elem()
}

func (o GetResourceResourceGreenplumOutput) ToGetResourceResourceGreenplumOutput() GetResourceResourceGreenplumOutput {
	return o
}

func (o GetResourceResourceGreenplumOutput) ToGetResourceResourceGreenplumOutputWithContext(ctx context.Context) GetResourceResourceGreenplumOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceGreenplumOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGreenplum) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceGreenplumOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGreenplum) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceGreenplumOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGreenplum) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceGreenplumOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGreenplum) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceGreenplumOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGreenplum) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceGreenplumOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGreenplum) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o GetResourceResourceGreenplumOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGreenplum) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceGreenplumOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGreenplum) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceGreenplumOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGreenplum) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceGreenplumOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGreenplum) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceGreenplumOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGreenplum) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceGreenplumOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGreenplum) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceGreenplumOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGreenplum) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceGreenplumOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceGreenplum) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceGreenplumOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceGreenplum) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceGreenplumArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceGreenplumArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceGreenplum)(nil)).Elem()
}

func (o GetResourceResourceGreenplumArrayOutput) ToGetResourceResourceGreenplumArrayOutput() GetResourceResourceGreenplumArrayOutput {
	return o
}

func (o GetResourceResourceGreenplumArrayOutput) ToGetResourceResourceGreenplumArrayOutputWithContext(ctx context.Context) GetResourceResourceGreenplumArrayOutput {
	return o
}

func (o GetResourceResourceGreenplumArrayOutput) Index(i pulumi.IntInput) GetResourceResourceGreenplumOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceGreenplum {
		return vs[0].([]GetResourceResourceGreenplum)[vs[1].(int)]
	}).(GetResourceResourceGreenplumOutput)
}

type GetResourceResourceHttpAuth struct {
	// The content to set as the authorization header.
	AuthHeader *string `pulumi:"authHeader"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// Automatically redirect to this path upon connecting.
	DefaultPath *string `pulumi:"defaultPath"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Header names (e.g. Authorization), to omit from logs.
	HeadersBlacklist *string `pulumi:"headersBlacklist"`
	// This path will be used to check the health of your site.
	HealthcheckPath *string `pulumi:"healthcheckPath"`
	// The host header will be overwritten with this field if provided.
	HostOverride *string `pulumi:"hostOverride"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url *string `pulumi:"url"`
}

// GetResourceResourceHttpAuthInput is an input type that accepts GetResourceResourceHttpAuthArgs and GetResourceResourceHttpAuthOutput values.
// You can construct a concrete instance of `GetResourceResourceHttpAuthInput` via:
//
//	GetResourceResourceHttpAuthArgs{...}
type GetResourceResourceHttpAuthInput interface {
	pulumi.Input

	ToGetResourceResourceHttpAuthOutput() GetResourceResourceHttpAuthOutput
	ToGetResourceResourceHttpAuthOutputWithContext(context.Context) GetResourceResourceHttpAuthOutput
}

type GetResourceResourceHttpAuthArgs struct {
	// The content to set as the authorization header.
	AuthHeader pulumi.StringPtrInput `pulumi:"authHeader"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// Automatically redirect to this path upon connecting.
	DefaultPath pulumi.StringPtrInput `pulumi:"defaultPath"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Header names (e.g. Authorization), to omit from logs.
	HeadersBlacklist pulumi.StringPtrInput `pulumi:"headersBlacklist"`
	// This path will be used to check the health of your site.
	HealthcheckPath pulumi.StringPtrInput `pulumi:"healthcheckPath"`
	// The host header will be overwritten with this field if provided.
	HostOverride pulumi.StringPtrInput `pulumi:"hostOverride"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GetResourceResourceHttpAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceHttpAuth)(nil)).Elem()
}

func (i GetResourceResourceHttpAuthArgs) ToGetResourceResourceHttpAuthOutput() GetResourceResourceHttpAuthOutput {
	return i.ToGetResourceResourceHttpAuthOutputWithContext(context.Background())
}

func (i GetResourceResourceHttpAuthArgs) ToGetResourceResourceHttpAuthOutputWithContext(ctx context.Context) GetResourceResourceHttpAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceHttpAuthOutput)
}

// GetResourceResourceHttpAuthArrayInput is an input type that accepts GetResourceResourceHttpAuthArray and GetResourceResourceHttpAuthArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceHttpAuthArrayInput` via:
//
//	GetResourceResourceHttpAuthArray{ GetResourceResourceHttpAuthArgs{...} }
type GetResourceResourceHttpAuthArrayInput interface {
	pulumi.Input

	ToGetResourceResourceHttpAuthArrayOutput() GetResourceResourceHttpAuthArrayOutput
	ToGetResourceResourceHttpAuthArrayOutputWithContext(context.Context) GetResourceResourceHttpAuthArrayOutput
}

type GetResourceResourceHttpAuthArray []GetResourceResourceHttpAuthInput

func (GetResourceResourceHttpAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceHttpAuth)(nil)).Elem()
}

func (i GetResourceResourceHttpAuthArray) ToGetResourceResourceHttpAuthArrayOutput() GetResourceResourceHttpAuthArrayOutput {
	return i.ToGetResourceResourceHttpAuthArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceHttpAuthArray) ToGetResourceResourceHttpAuthArrayOutputWithContext(ctx context.Context) GetResourceResourceHttpAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceHttpAuthArrayOutput)
}

type GetResourceResourceHttpAuthOutput struct{ *pulumi.OutputState }

func (GetResourceResourceHttpAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceHttpAuth)(nil)).Elem()
}

func (o GetResourceResourceHttpAuthOutput) ToGetResourceResourceHttpAuthOutput() GetResourceResourceHttpAuthOutput {
	return o
}

func (o GetResourceResourceHttpAuthOutput) ToGetResourceResourceHttpAuthOutputWithContext(ctx context.Context) GetResourceResourceHttpAuthOutput {
	return o
}

// The content to set as the authorization header.
func (o GetResourceResourceHttpAuthOutput) AuthHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpAuth) *string { return v.AuthHeader }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceHttpAuthOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpAuth) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// Automatically redirect to this path upon connecting.
func (o GetResourceResourceHttpAuthOutput) DefaultPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpAuth) *string { return v.DefaultPath }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceHttpAuthOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpAuth) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Header names (e.g. Authorization), to omit from logs.
func (o GetResourceResourceHttpAuthOutput) HeadersBlacklist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpAuth) *string { return v.HeadersBlacklist }).(pulumi.StringPtrOutput)
}

// This path will be used to check the health of your site.
func (o GetResourceResourceHttpAuthOutput) HealthcheckPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpAuth) *string { return v.HealthcheckPath }).(pulumi.StringPtrOutput)
}

// The host header will be overwritten with this field if provided.
func (o GetResourceResourceHttpAuthOutput) HostOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpAuth) *string { return v.HostOverride }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceHttpAuthOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpAuth) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceHttpAuthOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpAuth) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceHttpAuthOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpAuth) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceHttpAuthOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpAuth) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceHttpAuthOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpAuth) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceHttpAuthOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceHttpAuth) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The base address of your website without the path.
// * kubernetes:
func (o GetResourceResourceHttpAuthOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpAuth) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GetResourceResourceHttpAuthArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceHttpAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceHttpAuth)(nil)).Elem()
}

func (o GetResourceResourceHttpAuthArrayOutput) ToGetResourceResourceHttpAuthArrayOutput() GetResourceResourceHttpAuthArrayOutput {
	return o
}

func (o GetResourceResourceHttpAuthArrayOutput) ToGetResourceResourceHttpAuthArrayOutputWithContext(ctx context.Context) GetResourceResourceHttpAuthArrayOutput {
	return o
}

func (o GetResourceResourceHttpAuthArrayOutput) Index(i pulumi.IntInput) GetResourceResourceHttpAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceHttpAuth {
		return vs[0].([]GetResourceResourceHttpAuth)[vs[1].(int)]
	}).(GetResourceResourceHttpAuthOutput)
}

type GetResourceResourceHttpBasicAuth struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// Automatically redirect to this path upon connecting.
	DefaultPath *string `pulumi:"defaultPath"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Header names (e.g. Authorization), to omit from logs.
	HeadersBlacklist *string `pulumi:"headersBlacklist"`
	// This path will be used to check the health of your site.
	HealthcheckPath *string `pulumi:"healthcheckPath"`
	// The host header will be overwritten with this field if provided.
	HostOverride *string `pulumi:"hostOverride"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url *string `pulumi:"url"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceHttpBasicAuthInput is an input type that accepts GetResourceResourceHttpBasicAuthArgs and GetResourceResourceHttpBasicAuthOutput values.
// You can construct a concrete instance of `GetResourceResourceHttpBasicAuthInput` via:
//
//	GetResourceResourceHttpBasicAuthArgs{...}
type GetResourceResourceHttpBasicAuthInput interface {
	pulumi.Input

	ToGetResourceResourceHttpBasicAuthOutput() GetResourceResourceHttpBasicAuthOutput
	ToGetResourceResourceHttpBasicAuthOutputWithContext(context.Context) GetResourceResourceHttpBasicAuthOutput
}

type GetResourceResourceHttpBasicAuthArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// Automatically redirect to this path upon connecting.
	DefaultPath pulumi.StringPtrInput `pulumi:"defaultPath"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Header names (e.g. Authorization), to omit from logs.
	HeadersBlacklist pulumi.StringPtrInput `pulumi:"headersBlacklist"`
	// This path will be used to check the health of your site.
	HealthcheckPath pulumi.StringPtrInput `pulumi:"healthcheckPath"`
	// The host header will be overwritten with this field if provided.
	HostOverride pulumi.StringPtrInput `pulumi:"hostOverride"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url pulumi.StringPtrInput `pulumi:"url"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceHttpBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceHttpBasicAuth)(nil)).Elem()
}

func (i GetResourceResourceHttpBasicAuthArgs) ToGetResourceResourceHttpBasicAuthOutput() GetResourceResourceHttpBasicAuthOutput {
	return i.ToGetResourceResourceHttpBasicAuthOutputWithContext(context.Background())
}

func (i GetResourceResourceHttpBasicAuthArgs) ToGetResourceResourceHttpBasicAuthOutputWithContext(ctx context.Context) GetResourceResourceHttpBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceHttpBasicAuthOutput)
}

// GetResourceResourceHttpBasicAuthArrayInput is an input type that accepts GetResourceResourceHttpBasicAuthArray and GetResourceResourceHttpBasicAuthArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceHttpBasicAuthArrayInput` via:
//
//	GetResourceResourceHttpBasicAuthArray{ GetResourceResourceHttpBasicAuthArgs{...} }
type GetResourceResourceHttpBasicAuthArrayInput interface {
	pulumi.Input

	ToGetResourceResourceHttpBasicAuthArrayOutput() GetResourceResourceHttpBasicAuthArrayOutput
	ToGetResourceResourceHttpBasicAuthArrayOutputWithContext(context.Context) GetResourceResourceHttpBasicAuthArrayOutput
}

type GetResourceResourceHttpBasicAuthArray []GetResourceResourceHttpBasicAuthInput

func (GetResourceResourceHttpBasicAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceHttpBasicAuth)(nil)).Elem()
}

func (i GetResourceResourceHttpBasicAuthArray) ToGetResourceResourceHttpBasicAuthArrayOutput() GetResourceResourceHttpBasicAuthArrayOutput {
	return i.ToGetResourceResourceHttpBasicAuthArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceHttpBasicAuthArray) ToGetResourceResourceHttpBasicAuthArrayOutputWithContext(ctx context.Context) GetResourceResourceHttpBasicAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceHttpBasicAuthArrayOutput)
}

type GetResourceResourceHttpBasicAuthOutput struct{ *pulumi.OutputState }

func (GetResourceResourceHttpBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceHttpBasicAuth)(nil)).Elem()
}

func (o GetResourceResourceHttpBasicAuthOutput) ToGetResourceResourceHttpBasicAuthOutput() GetResourceResourceHttpBasicAuthOutput {
	return o
}

func (o GetResourceResourceHttpBasicAuthOutput) ToGetResourceResourceHttpBasicAuthOutputWithContext(ctx context.Context) GetResourceResourceHttpBasicAuthOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceHttpBasicAuthOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpBasicAuth) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// Automatically redirect to this path upon connecting.
func (o GetResourceResourceHttpBasicAuthOutput) DefaultPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpBasicAuth) *string { return v.DefaultPath }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceHttpBasicAuthOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpBasicAuth) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Header names (e.g. Authorization), to omit from logs.
func (o GetResourceResourceHttpBasicAuthOutput) HeadersBlacklist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpBasicAuth) *string { return v.HeadersBlacklist }).(pulumi.StringPtrOutput)
}

// This path will be used to check the health of your site.
func (o GetResourceResourceHttpBasicAuthOutput) HealthcheckPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpBasicAuth) *string { return v.HealthcheckPath }).(pulumi.StringPtrOutput)
}

// The host header will be overwritten with this field if provided.
func (o GetResourceResourceHttpBasicAuthOutput) HostOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpBasicAuth) *string { return v.HostOverride }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceHttpBasicAuthOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpBasicAuth) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceHttpBasicAuthOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpBasicAuth) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceHttpBasicAuthOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpBasicAuth) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceHttpBasicAuthOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpBasicAuth) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceHttpBasicAuthOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpBasicAuth) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceHttpBasicAuthOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpBasicAuth) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceHttpBasicAuthOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceHttpBasicAuth) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The base address of your website without the path.
// * kubernetes:
func (o GetResourceResourceHttpBasicAuthOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpBasicAuth) *string { return v.Url }).(pulumi.StringPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceHttpBasicAuthOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpBasicAuth) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceHttpBasicAuthArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceHttpBasicAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceHttpBasicAuth)(nil)).Elem()
}

func (o GetResourceResourceHttpBasicAuthArrayOutput) ToGetResourceResourceHttpBasicAuthArrayOutput() GetResourceResourceHttpBasicAuthArrayOutput {
	return o
}

func (o GetResourceResourceHttpBasicAuthArrayOutput) ToGetResourceResourceHttpBasicAuthArrayOutputWithContext(ctx context.Context) GetResourceResourceHttpBasicAuthArrayOutput {
	return o
}

func (o GetResourceResourceHttpBasicAuthArrayOutput) Index(i pulumi.IntInput) GetResourceResourceHttpBasicAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceHttpBasicAuth {
		return vs[0].([]GetResourceResourceHttpBasicAuth)[vs[1].(int)]
	}).(GetResourceResourceHttpBasicAuthOutput)
}

type GetResourceResourceHttpNoAuth struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// Automatically redirect to this path upon connecting.
	DefaultPath *string `pulumi:"defaultPath"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// Header names (e.g. Authorization), to omit from logs.
	HeadersBlacklist *string `pulumi:"headersBlacklist"`
	// This path will be used to check the health of your site.
	HealthcheckPath *string `pulumi:"healthcheckPath"`
	// The host header will be overwritten with this field if provided.
	HostOverride *string `pulumi:"hostOverride"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url *string `pulumi:"url"`
}

// GetResourceResourceHttpNoAuthInput is an input type that accepts GetResourceResourceHttpNoAuthArgs and GetResourceResourceHttpNoAuthOutput values.
// You can construct a concrete instance of `GetResourceResourceHttpNoAuthInput` via:
//
//	GetResourceResourceHttpNoAuthArgs{...}
type GetResourceResourceHttpNoAuthInput interface {
	pulumi.Input

	ToGetResourceResourceHttpNoAuthOutput() GetResourceResourceHttpNoAuthOutput
	ToGetResourceResourceHttpNoAuthOutputWithContext(context.Context) GetResourceResourceHttpNoAuthOutput
}

type GetResourceResourceHttpNoAuthArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// Automatically redirect to this path upon connecting.
	DefaultPath pulumi.StringPtrInput `pulumi:"defaultPath"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// Header names (e.g. Authorization), to omit from logs.
	HeadersBlacklist pulumi.StringPtrInput `pulumi:"headersBlacklist"`
	// This path will be used to check the health of your site.
	HealthcheckPath pulumi.StringPtrInput `pulumi:"healthcheckPath"`
	// The host header will be overwritten with this field if provided.
	HostOverride pulumi.StringPtrInput `pulumi:"hostOverride"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The base address of your website without the path.
	// * kubernetes:
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GetResourceResourceHttpNoAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceHttpNoAuth)(nil)).Elem()
}

func (i GetResourceResourceHttpNoAuthArgs) ToGetResourceResourceHttpNoAuthOutput() GetResourceResourceHttpNoAuthOutput {
	return i.ToGetResourceResourceHttpNoAuthOutputWithContext(context.Background())
}

func (i GetResourceResourceHttpNoAuthArgs) ToGetResourceResourceHttpNoAuthOutputWithContext(ctx context.Context) GetResourceResourceHttpNoAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceHttpNoAuthOutput)
}

// GetResourceResourceHttpNoAuthArrayInput is an input type that accepts GetResourceResourceHttpNoAuthArray and GetResourceResourceHttpNoAuthArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceHttpNoAuthArrayInput` via:
//
//	GetResourceResourceHttpNoAuthArray{ GetResourceResourceHttpNoAuthArgs{...} }
type GetResourceResourceHttpNoAuthArrayInput interface {
	pulumi.Input

	ToGetResourceResourceHttpNoAuthArrayOutput() GetResourceResourceHttpNoAuthArrayOutput
	ToGetResourceResourceHttpNoAuthArrayOutputWithContext(context.Context) GetResourceResourceHttpNoAuthArrayOutput
}

type GetResourceResourceHttpNoAuthArray []GetResourceResourceHttpNoAuthInput

func (GetResourceResourceHttpNoAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceHttpNoAuth)(nil)).Elem()
}

func (i GetResourceResourceHttpNoAuthArray) ToGetResourceResourceHttpNoAuthArrayOutput() GetResourceResourceHttpNoAuthArrayOutput {
	return i.ToGetResourceResourceHttpNoAuthArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceHttpNoAuthArray) ToGetResourceResourceHttpNoAuthArrayOutputWithContext(ctx context.Context) GetResourceResourceHttpNoAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceHttpNoAuthArrayOutput)
}

type GetResourceResourceHttpNoAuthOutput struct{ *pulumi.OutputState }

func (GetResourceResourceHttpNoAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceHttpNoAuth)(nil)).Elem()
}

func (o GetResourceResourceHttpNoAuthOutput) ToGetResourceResourceHttpNoAuthOutput() GetResourceResourceHttpNoAuthOutput {
	return o
}

func (o GetResourceResourceHttpNoAuthOutput) ToGetResourceResourceHttpNoAuthOutputWithContext(ctx context.Context) GetResourceResourceHttpNoAuthOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceHttpNoAuthOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpNoAuth) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// Automatically redirect to this path upon connecting.
func (o GetResourceResourceHttpNoAuthOutput) DefaultPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpNoAuth) *string { return v.DefaultPath }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceHttpNoAuthOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpNoAuth) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// Header names (e.g. Authorization), to omit from logs.
func (o GetResourceResourceHttpNoAuthOutput) HeadersBlacklist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpNoAuth) *string { return v.HeadersBlacklist }).(pulumi.StringPtrOutput)
}

// This path will be used to check the health of your site.
func (o GetResourceResourceHttpNoAuthOutput) HealthcheckPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpNoAuth) *string { return v.HealthcheckPath }).(pulumi.StringPtrOutput)
}

// The host header will be overwritten with this field if provided.
func (o GetResourceResourceHttpNoAuthOutput) HostOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpNoAuth) *string { return v.HostOverride }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceHttpNoAuthOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpNoAuth) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceHttpNoAuthOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpNoAuth) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceHttpNoAuthOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpNoAuth) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceHttpNoAuthOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpNoAuth) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceHttpNoAuthOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpNoAuth) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceHttpNoAuthOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceHttpNoAuth) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The base address of your website without the path.
// * kubernetes:
func (o GetResourceResourceHttpNoAuthOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceHttpNoAuth) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GetResourceResourceHttpNoAuthArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceHttpNoAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceHttpNoAuth)(nil)).Elem()
}

func (o GetResourceResourceHttpNoAuthArrayOutput) ToGetResourceResourceHttpNoAuthArrayOutput() GetResourceResourceHttpNoAuthArrayOutput {
	return o
}

func (o GetResourceResourceHttpNoAuthArrayOutput) ToGetResourceResourceHttpNoAuthArrayOutputWithContext(ctx context.Context) GetResourceResourceHttpNoAuthArrayOutput {
	return o
}

func (o GetResourceResourceHttpNoAuthArrayOutput) Index(i pulumi.IntInput) GetResourceResourceHttpNoAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceHttpNoAuth {
		return vs[0].([]GetResourceResourceHttpNoAuth)[vs[1].(int)]
	}).(GetResourceResourceHttpNoAuthOutput)
}

type GetResourceResourceKubernete struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass *bool `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey *string `pulumi:"clientKey"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled *bool `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername *string `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceKuberneteInput is an input type that accepts GetResourceResourceKuberneteArgs and GetResourceResourceKuberneteOutput values.
// You can construct a concrete instance of `GetResourceResourceKuberneteInput` via:
//
//	GetResourceResourceKuberneteArgs{...}
type GetResourceResourceKuberneteInput interface {
	pulumi.Input

	ToGetResourceResourceKuberneteOutput() GetResourceResourceKuberneteOutput
	ToGetResourceResourceKuberneteOutputWithContext(context.Context) GetResourceResourceKuberneteOutput
}

type GetResourceResourceKuberneteArgs struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass pulumi.BoolPtrInput `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled pulumi.BoolPtrInput `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername pulumi.StringPtrInput `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceKuberneteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceKubernete)(nil)).Elem()
}

func (i GetResourceResourceKuberneteArgs) ToGetResourceResourceKuberneteOutput() GetResourceResourceKuberneteOutput {
	return i.ToGetResourceResourceKuberneteOutputWithContext(context.Background())
}

func (i GetResourceResourceKuberneteArgs) ToGetResourceResourceKuberneteOutputWithContext(ctx context.Context) GetResourceResourceKuberneteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceKuberneteOutput)
}

// GetResourceResourceKuberneteArrayInput is an input type that accepts GetResourceResourceKuberneteArray and GetResourceResourceKuberneteArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceKuberneteArrayInput` via:
//
//	GetResourceResourceKuberneteArray{ GetResourceResourceKuberneteArgs{...} }
type GetResourceResourceKuberneteArrayInput interface {
	pulumi.Input

	ToGetResourceResourceKuberneteArrayOutput() GetResourceResourceKuberneteArrayOutput
	ToGetResourceResourceKuberneteArrayOutputWithContext(context.Context) GetResourceResourceKuberneteArrayOutput
}

type GetResourceResourceKuberneteArray []GetResourceResourceKuberneteInput

func (GetResourceResourceKuberneteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceKubernete)(nil)).Elem()
}

func (i GetResourceResourceKuberneteArray) ToGetResourceResourceKuberneteArrayOutput() GetResourceResourceKuberneteArrayOutput {
	return i.ToGetResourceResourceKuberneteArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceKuberneteArray) ToGetResourceResourceKuberneteArrayOutputWithContext(ctx context.Context) GetResourceResourceKuberneteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceKuberneteArrayOutput)
}

type GetResourceResourceKuberneteOutput struct{ *pulumi.OutputState }

func (GetResourceResourceKuberneteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceKubernete)(nil)).Elem()
}

func (o GetResourceResourceKuberneteOutput) ToGetResourceResourceKuberneteOutput() GetResourceResourceKuberneteOutput {
	return o
}

func (o GetResourceResourceKuberneteOutput) ToGetResourceResourceKuberneteOutputWithContext(ctx context.Context) GetResourceResourceKuberneteOutput {
	return o
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o GetResourceResourceKuberneteOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *bool { return v.AllowResourceRoleBypass }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceKuberneteOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o GetResourceResourceKuberneteOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o GetResourceResourceKuberneteOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o GetResourceResourceKuberneteOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o GetResourceResourceKuberneteOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *bool { return v.DiscoveryEnabled }).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o GetResourceResourceKuberneteOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *string { return v.DiscoveryUsername }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceKuberneteOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o GetResourceResourceKuberneteOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceKuberneteOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceKuberneteOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o GetResourceResourceKuberneteOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o GetResourceResourceKuberneteOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceKuberneteOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceKuberneteOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceKuberneteOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceKuberneteOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceKuberneteOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceKuberneteOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceKuberneteOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceKubernete) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceKuberneteArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceKuberneteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceKubernete)(nil)).Elem()
}

func (o GetResourceResourceKuberneteArrayOutput) ToGetResourceResourceKuberneteArrayOutput() GetResourceResourceKuberneteArrayOutput {
	return o
}

func (o GetResourceResourceKuberneteArrayOutput) ToGetResourceResourceKuberneteArrayOutputWithContext(ctx context.Context) GetResourceResourceKuberneteArrayOutput {
	return o
}

func (o GetResourceResourceKuberneteArrayOutput) Index(i pulumi.IntInput) GetResourceResourceKuberneteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceKubernete {
		return vs[0].([]GetResourceResourceKubernete)[vs[1].(int)]
	}).(GetResourceResourceKuberneteOutput)
}

type GetResourceResourceKubernetesBasicAuth struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceKubernetesBasicAuthInput is an input type that accepts GetResourceResourceKubernetesBasicAuthArgs and GetResourceResourceKubernetesBasicAuthOutput values.
// You can construct a concrete instance of `GetResourceResourceKubernetesBasicAuthInput` via:
//
//	GetResourceResourceKubernetesBasicAuthArgs{...}
type GetResourceResourceKubernetesBasicAuthInput interface {
	pulumi.Input

	ToGetResourceResourceKubernetesBasicAuthOutput() GetResourceResourceKubernetesBasicAuthOutput
	ToGetResourceResourceKubernetesBasicAuthOutputWithContext(context.Context) GetResourceResourceKubernetesBasicAuthOutput
}

type GetResourceResourceKubernetesBasicAuthArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceKubernetesBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceKubernetesBasicAuth)(nil)).Elem()
}

func (i GetResourceResourceKubernetesBasicAuthArgs) ToGetResourceResourceKubernetesBasicAuthOutput() GetResourceResourceKubernetesBasicAuthOutput {
	return i.ToGetResourceResourceKubernetesBasicAuthOutputWithContext(context.Background())
}

func (i GetResourceResourceKubernetesBasicAuthArgs) ToGetResourceResourceKubernetesBasicAuthOutputWithContext(ctx context.Context) GetResourceResourceKubernetesBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceKubernetesBasicAuthOutput)
}

// GetResourceResourceKubernetesBasicAuthArrayInput is an input type that accepts GetResourceResourceKubernetesBasicAuthArray and GetResourceResourceKubernetesBasicAuthArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceKubernetesBasicAuthArrayInput` via:
//
//	GetResourceResourceKubernetesBasicAuthArray{ GetResourceResourceKubernetesBasicAuthArgs{...} }
type GetResourceResourceKubernetesBasicAuthArrayInput interface {
	pulumi.Input

	ToGetResourceResourceKubernetesBasicAuthArrayOutput() GetResourceResourceKubernetesBasicAuthArrayOutput
	ToGetResourceResourceKubernetesBasicAuthArrayOutputWithContext(context.Context) GetResourceResourceKubernetesBasicAuthArrayOutput
}

type GetResourceResourceKubernetesBasicAuthArray []GetResourceResourceKubernetesBasicAuthInput

func (GetResourceResourceKubernetesBasicAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceKubernetesBasicAuth)(nil)).Elem()
}

func (i GetResourceResourceKubernetesBasicAuthArray) ToGetResourceResourceKubernetesBasicAuthArrayOutput() GetResourceResourceKubernetesBasicAuthArrayOutput {
	return i.ToGetResourceResourceKubernetesBasicAuthArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceKubernetesBasicAuthArray) ToGetResourceResourceKubernetesBasicAuthArrayOutputWithContext(ctx context.Context) GetResourceResourceKubernetesBasicAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceKubernetesBasicAuthArrayOutput)
}

type GetResourceResourceKubernetesBasicAuthOutput struct{ *pulumi.OutputState }

func (GetResourceResourceKubernetesBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceKubernetesBasicAuth)(nil)).Elem()
}

func (o GetResourceResourceKubernetesBasicAuthOutput) ToGetResourceResourceKubernetesBasicAuthOutput() GetResourceResourceKubernetesBasicAuthOutput {
	return o
}

func (o GetResourceResourceKubernetesBasicAuthOutput) ToGetResourceResourceKubernetesBasicAuthOutputWithContext(ctx context.Context) GetResourceResourceKubernetesBasicAuthOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceKubernetesBasicAuthOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesBasicAuth) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceKubernetesBasicAuthOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesBasicAuth) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o GetResourceResourceKubernetesBasicAuthOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesBasicAuth) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceKubernetesBasicAuthOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesBasicAuth) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceKubernetesBasicAuthOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesBasicAuth) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceKubernetesBasicAuthOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesBasicAuth) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceKubernetesBasicAuthOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesBasicAuth) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceKubernetesBasicAuthOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesBasicAuth) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceKubernetesBasicAuthOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesBasicAuth) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceKubernetesBasicAuthOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesBasicAuth) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceKubernetesBasicAuthOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesBasicAuth) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceKubernetesBasicAuthOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesBasicAuth) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceKubernetesBasicAuthOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesBasicAuth) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceKubernetesBasicAuthOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesBasicAuth) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceKubernetesBasicAuthArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceKubernetesBasicAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceKubernetesBasicAuth)(nil)).Elem()
}

func (o GetResourceResourceKubernetesBasicAuthArrayOutput) ToGetResourceResourceKubernetesBasicAuthArrayOutput() GetResourceResourceKubernetesBasicAuthArrayOutput {
	return o
}

func (o GetResourceResourceKubernetesBasicAuthArrayOutput) ToGetResourceResourceKubernetesBasicAuthArrayOutputWithContext(ctx context.Context) GetResourceResourceKubernetesBasicAuthArrayOutput {
	return o
}

func (o GetResourceResourceKubernetesBasicAuthArrayOutput) Index(i pulumi.IntInput) GetResourceResourceKubernetesBasicAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceKubernetesBasicAuth {
		return vs[0].([]GetResourceResourceKubernetesBasicAuth)[vs[1].(int)]
	}).(GetResourceResourceKubernetesBasicAuthOutput)
}

type GetResourceResourceKubernetesServiceAccount struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass *bool `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled *bool `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername *string `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The API token to authenticate with.
	// * kubernetes_user_impersonation:
	Token *string `pulumi:"token"`
}

// GetResourceResourceKubernetesServiceAccountInput is an input type that accepts GetResourceResourceKubernetesServiceAccountArgs and GetResourceResourceKubernetesServiceAccountOutput values.
// You can construct a concrete instance of `GetResourceResourceKubernetesServiceAccountInput` via:
//
//	GetResourceResourceKubernetesServiceAccountArgs{...}
type GetResourceResourceKubernetesServiceAccountInput interface {
	pulumi.Input

	ToGetResourceResourceKubernetesServiceAccountOutput() GetResourceResourceKubernetesServiceAccountOutput
	ToGetResourceResourceKubernetesServiceAccountOutputWithContext(context.Context) GetResourceResourceKubernetesServiceAccountOutput
}

type GetResourceResourceKubernetesServiceAccountArgs struct {
	// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
	AllowResourceRoleBypass pulumi.BoolPtrInput `pulumi:"allowResourceRoleBypass"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// If true, configures discovery of a cluster to be run from a node.
	DiscoveryEnabled pulumi.BoolPtrInput `pulumi:"discoveryEnabled"`
	// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
	DiscoveryUsername pulumi.StringPtrInput `pulumi:"discoveryUsername"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The API token to authenticate with.
	// * kubernetes_user_impersonation:
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (GetResourceResourceKubernetesServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceKubernetesServiceAccount)(nil)).Elem()
}

func (i GetResourceResourceKubernetesServiceAccountArgs) ToGetResourceResourceKubernetesServiceAccountOutput() GetResourceResourceKubernetesServiceAccountOutput {
	return i.ToGetResourceResourceKubernetesServiceAccountOutputWithContext(context.Background())
}

func (i GetResourceResourceKubernetesServiceAccountArgs) ToGetResourceResourceKubernetesServiceAccountOutputWithContext(ctx context.Context) GetResourceResourceKubernetesServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceKubernetesServiceAccountOutput)
}

// GetResourceResourceKubernetesServiceAccountArrayInput is an input type that accepts GetResourceResourceKubernetesServiceAccountArray and GetResourceResourceKubernetesServiceAccountArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceKubernetesServiceAccountArrayInput` via:
//
//	GetResourceResourceKubernetesServiceAccountArray{ GetResourceResourceKubernetesServiceAccountArgs{...} }
type GetResourceResourceKubernetesServiceAccountArrayInput interface {
	pulumi.Input

	ToGetResourceResourceKubernetesServiceAccountArrayOutput() GetResourceResourceKubernetesServiceAccountArrayOutput
	ToGetResourceResourceKubernetesServiceAccountArrayOutputWithContext(context.Context) GetResourceResourceKubernetesServiceAccountArrayOutput
}

type GetResourceResourceKubernetesServiceAccountArray []GetResourceResourceKubernetesServiceAccountInput

func (GetResourceResourceKubernetesServiceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceKubernetesServiceAccount)(nil)).Elem()
}

func (i GetResourceResourceKubernetesServiceAccountArray) ToGetResourceResourceKubernetesServiceAccountArrayOutput() GetResourceResourceKubernetesServiceAccountArrayOutput {
	return i.ToGetResourceResourceKubernetesServiceAccountArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceKubernetesServiceAccountArray) ToGetResourceResourceKubernetesServiceAccountArrayOutputWithContext(ctx context.Context) GetResourceResourceKubernetesServiceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceKubernetesServiceAccountArrayOutput)
}

type GetResourceResourceKubernetesServiceAccountOutput struct{ *pulumi.OutputState }

func (GetResourceResourceKubernetesServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceKubernetesServiceAccount)(nil)).Elem()
}

func (o GetResourceResourceKubernetesServiceAccountOutput) ToGetResourceResourceKubernetesServiceAccountOutput() GetResourceResourceKubernetesServiceAccountOutput {
	return o
}

func (o GetResourceResourceKubernetesServiceAccountOutput) ToGetResourceResourceKubernetesServiceAccountOutputWithContext(ctx context.Context) GetResourceResourceKubernetesServiceAccountOutput {
	return o
}

// If true, allows users to fallback to the existing authentication mode (Leased Credential or Identity Set) when a resource role is not provided.
func (o GetResourceResourceKubernetesServiceAccountOutput) AllowResourceRoleBypass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) *bool { return v.AllowResourceRoleBypass }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceKubernetesServiceAccountOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// If true, configures discovery of a cluster to be run from a node.
func (o GetResourceResourceKubernetesServiceAccountOutput) DiscoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) *bool { return v.DiscoveryEnabled }).(pulumi.BoolPtrOutput)
}

// If a cluster is configured for user impersonation, this is the user to impersonate when running discovery.
func (o GetResourceResourceKubernetesServiceAccountOutput) DiscoveryUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) *string { return v.DiscoveryUsername }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceKubernetesServiceAccountOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o GetResourceResourceKubernetesServiceAccountOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceKubernetesServiceAccountOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceKubernetesServiceAccountOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o GetResourceResourceKubernetesServiceAccountOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o GetResourceResourceKubernetesServiceAccountOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceKubernetesServiceAccountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceKubernetesServiceAccountOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceKubernetesServiceAccountOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceKubernetesServiceAccountOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceKubernetesServiceAccountOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceKubernetesServiceAccountOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceKubernetesServiceAccountOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The API token to authenticate with.
// * kubernetes_user_impersonation:
func (o GetResourceResourceKubernetesServiceAccountOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccount) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type GetResourceResourceKubernetesServiceAccountArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceKubernetesServiceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceKubernetesServiceAccount)(nil)).Elem()
}

func (o GetResourceResourceKubernetesServiceAccountArrayOutput) ToGetResourceResourceKubernetesServiceAccountArrayOutput() GetResourceResourceKubernetesServiceAccountArrayOutput {
	return o
}

func (o GetResourceResourceKubernetesServiceAccountArrayOutput) ToGetResourceResourceKubernetesServiceAccountArrayOutputWithContext(ctx context.Context) GetResourceResourceKubernetesServiceAccountArrayOutput {
	return o
}

func (o GetResourceResourceKubernetesServiceAccountArrayOutput) Index(i pulumi.IntInput) GetResourceResourceKubernetesServiceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceKubernetesServiceAccount {
		return vs[0].([]GetResourceResourceKubernetesServiceAccount)[vs[1].(int)]
	}).(GetResourceResourceKubernetesServiceAccountOutput)
}

type GetResourceResourceKubernetesServiceAccountUserImpersonation struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The API token to authenticate with.
	// * kubernetes_user_impersonation:
	Token *string `pulumi:"token"`
}

// GetResourceResourceKubernetesServiceAccountUserImpersonationInput is an input type that accepts GetResourceResourceKubernetesServiceAccountUserImpersonationArgs and GetResourceResourceKubernetesServiceAccountUserImpersonationOutput values.
// You can construct a concrete instance of `GetResourceResourceKubernetesServiceAccountUserImpersonationInput` via:
//
//	GetResourceResourceKubernetesServiceAccountUserImpersonationArgs{...}
type GetResourceResourceKubernetesServiceAccountUserImpersonationInput interface {
	pulumi.Input

	ToGetResourceResourceKubernetesServiceAccountUserImpersonationOutput() GetResourceResourceKubernetesServiceAccountUserImpersonationOutput
	ToGetResourceResourceKubernetesServiceAccountUserImpersonationOutputWithContext(context.Context) GetResourceResourceKubernetesServiceAccountUserImpersonationOutput
}

type GetResourceResourceKubernetesServiceAccountUserImpersonationArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The API token to authenticate with.
	// * kubernetes_user_impersonation:
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (GetResourceResourceKubernetesServiceAccountUserImpersonationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceKubernetesServiceAccountUserImpersonation)(nil)).Elem()
}

func (i GetResourceResourceKubernetesServiceAccountUserImpersonationArgs) ToGetResourceResourceKubernetesServiceAccountUserImpersonationOutput() GetResourceResourceKubernetesServiceAccountUserImpersonationOutput {
	return i.ToGetResourceResourceKubernetesServiceAccountUserImpersonationOutputWithContext(context.Background())
}

func (i GetResourceResourceKubernetesServiceAccountUserImpersonationArgs) ToGetResourceResourceKubernetesServiceAccountUserImpersonationOutputWithContext(ctx context.Context) GetResourceResourceKubernetesServiceAccountUserImpersonationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceKubernetesServiceAccountUserImpersonationOutput)
}

// GetResourceResourceKubernetesServiceAccountUserImpersonationArrayInput is an input type that accepts GetResourceResourceKubernetesServiceAccountUserImpersonationArray and GetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceKubernetesServiceAccountUserImpersonationArrayInput` via:
//
//	GetResourceResourceKubernetesServiceAccountUserImpersonationArray{ GetResourceResourceKubernetesServiceAccountUserImpersonationArgs{...} }
type GetResourceResourceKubernetesServiceAccountUserImpersonationArrayInput interface {
	pulumi.Input

	ToGetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput() GetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput
	ToGetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutputWithContext(context.Context) GetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput
}

type GetResourceResourceKubernetesServiceAccountUserImpersonationArray []GetResourceResourceKubernetesServiceAccountUserImpersonationInput

func (GetResourceResourceKubernetesServiceAccountUserImpersonationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceKubernetesServiceAccountUserImpersonation)(nil)).Elem()
}

func (i GetResourceResourceKubernetesServiceAccountUserImpersonationArray) ToGetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput() GetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput {
	return i.ToGetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceKubernetesServiceAccountUserImpersonationArray) ToGetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutputWithContext(ctx context.Context) GetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput)
}

type GetResourceResourceKubernetesServiceAccountUserImpersonationOutput struct{ *pulumi.OutputState }

func (GetResourceResourceKubernetesServiceAccountUserImpersonationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceKubernetesServiceAccountUserImpersonation)(nil)).Elem()
}

func (o GetResourceResourceKubernetesServiceAccountUserImpersonationOutput) ToGetResourceResourceKubernetesServiceAccountUserImpersonationOutput() GetResourceResourceKubernetesServiceAccountUserImpersonationOutput {
	return o
}

func (o GetResourceResourceKubernetesServiceAccountUserImpersonationOutput) ToGetResourceResourceKubernetesServiceAccountUserImpersonationOutputWithContext(ctx context.Context) GetResourceResourceKubernetesServiceAccountUserImpersonationOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceKubernetesServiceAccountUserImpersonationOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccountUserImpersonation) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceKubernetesServiceAccountUserImpersonationOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccountUserImpersonation) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o GetResourceResourceKubernetesServiceAccountUserImpersonationOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccountUserImpersonation) *string {
		return v.HealthcheckNamespace
	}).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceKubernetesServiceAccountUserImpersonationOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccountUserImpersonation) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceKubernetesServiceAccountUserImpersonationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccountUserImpersonation) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceKubernetesServiceAccountUserImpersonationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccountUserImpersonation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceKubernetesServiceAccountUserImpersonationOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccountUserImpersonation) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceKubernetesServiceAccountUserImpersonationOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccountUserImpersonation) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceKubernetesServiceAccountUserImpersonationOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccountUserImpersonation) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceKubernetesServiceAccountUserImpersonationOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccountUserImpersonation) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceKubernetesServiceAccountUserImpersonationOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccountUserImpersonation) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceKubernetesServiceAccountUserImpersonationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccountUserImpersonation) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The API token to authenticate with.
// * kubernetes_user_impersonation:
func (o GetResourceResourceKubernetesServiceAccountUserImpersonationOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesServiceAccountUserImpersonation) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type GetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceKubernetesServiceAccountUserImpersonation)(nil)).Elem()
}

func (o GetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput) ToGetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput() GetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput {
	return o
}

func (o GetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput) ToGetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutputWithContext(ctx context.Context) GetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput {
	return o
}

func (o GetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput) Index(i pulumi.IntInput) GetResourceResourceKubernetesServiceAccountUserImpersonationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceKubernetesServiceAccountUserImpersonation {
		return vs[0].([]GetResourceResourceKubernetesServiceAccountUserImpersonation)[vs[1].(int)]
	}).(GetResourceResourceKubernetesServiceAccountUserImpersonationOutput)
}

type GetResourceResourceKubernetesUserImpersonation struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey *string `pulumi:"clientKey"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace *string `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceKubernetesUserImpersonationInput is an input type that accepts GetResourceResourceKubernetesUserImpersonationArgs and GetResourceResourceKubernetesUserImpersonationOutput values.
// You can construct a concrete instance of `GetResourceResourceKubernetesUserImpersonationInput` via:
//
//	GetResourceResourceKubernetesUserImpersonationArgs{...}
type GetResourceResourceKubernetesUserImpersonationInput interface {
	pulumi.Input

	ToGetResourceResourceKubernetesUserImpersonationOutput() GetResourceResourceKubernetesUserImpersonationOutput
	ToGetResourceResourceKubernetesUserImpersonationOutputWithContext(context.Context) GetResourceResourceKubernetesUserImpersonationOutput
}

type GetResourceResourceKubernetesUserImpersonationArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
	HealthcheckNamespace pulumi.StringPtrInput `pulumi:"healthcheckNamespace"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceKubernetesUserImpersonationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceKubernetesUserImpersonation)(nil)).Elem()
}

func (i GetResourceResourceKubernetesUserImpersonationArgs) ToGetResourceResourceKubernetesUserImpersonationOutput() GetResourceResourceKubernetesUserImpersonationOutput {
	return i.ToGetResourceResourceKubernetesUserImpersonationOutputWithContext(context.Background())
}

func (i GetResourceResourceKubernetesUserImpersonationArgs) ToGetResourceResourceKubernetesUserImpersonationOutputWithContext(ctx context.Context) GetResourceResourceKubernetesUserImpersonationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceKubernetesUserImpersonationOutput)
}

// GetResourceResourceKubernetesUserImpersonationArrayInput is an input type that accepts GetResourceResourceKubernetesUserImpersonationArray and GetResourceResourceKubernetesUserImpersonationArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceKubernetesUserImpersonationArrayInput` via:
//
//	GetResourceResourceKubernetesUserImpersonationArray{ GetResourceResourceKubernetesUserImpersonationArgs{...} }
type GetResourceResourceKubernetesUserImpersonationArrayInput interface {
	pulumi.Input

	ToGetResourceResourceKubernetesUserImpersonationArrayOutput() GetResourceResourceKubernetesUserImpersonationArrayOutput
	ToGetResourceResourceKubernetesUserImpersonationArrayOutputWithContext(context.Context) GetResourceResourceKubernetesUserImpersonationArrayOutput
}

type GetResourceResourceKubernetesUserImpersonationArray []GetResourceResourceKubernetesUserImpersonationInput

func (GetResourceResourceKubernetesUserImpersonationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceKubernetesUserImpersonation)(nil)).Elem()
}

func (i GetResourceResourceKubernetesUserImpersonationArray) ToGetResourceResourceKubernetesUserImpersonationArrayOutput() GetResourceResourceKubernetesUserImpersonationArrayOutput {
	return i.ToGetResourceResourceKubernetesUserImpersonationArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceKubernetesUserImpersonationArray) ToGetResourceResourceKubernetesUserImpersonationArrayOutputWithContext(ctx context.Context) GetResourceResourceKubernetesUserImpersonationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceKubernetesUserImpersonationArrayOutput)
}

type GetResourceResourceKubernetesUserImpersonationOutput struct{ *pulumi.OutputState }

func (GetResourceResourceKubernetesUserImpersonationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceKubernetesUserImpersonation)(nil)).Elem()
}

func (o GetResourceResourceKubernetesUserImpersonationOutput) ToGetResourceResourceKubernetesUserImpersonationOutput() GetResourceResourceKubernetesUserImpersonationOutput {
	return o
}

func (o GetResourceResourceKubernetesUserImpersonationOutput) ToGetResourceResourceKubernetesUserImpersonationOutputWithContext(ctx context.Context) GetResourceResourceKubernetesUserImpersonationOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceKubernetesUserImpersonationOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesUserImpersonation) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o GetResourceResourceKubernetesUserImpersonationOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesUserImpersonation) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o GetResourceResourceKubernetesUserImpersonationOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesUserImpersonation) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o GetResourceResourceKubernetesUserImpersonationOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesUserImpersonation) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceKubernetesUserImpersonationOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesUserImpersonation) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
func (o GetResourceResourceKubernetesUserImpersonationOutput) HealthcheckNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesUserImpersonation) *string { return v.HealthcheckNamespace }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceKubernetesUserImpersonationOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesUserImpersonation) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceKubernetesUserImpersonationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesUserImpersonation) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceKubernetesUserImpersonationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesUserImpersonation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceKubernetesUserImpersonationOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesUserImpersonation) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceKubernetesUserImpersonationOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesUserImpersonation) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceKubernetesUserImpersonationOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesUserImpersonation) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceKubernetesUserImpersonationOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesUserImpersonation) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceKubernetesUserImpersonationOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesUserImpersonation) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceKubernetesUserImpersonationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceKubernetesUserImpersonation) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceKubernetesUserImpersonationArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceKubernetesUserImpersonationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceKubernetesUserImpersonation)(nil)).Elem()
}

func (o GetResourceResourceKubernetesUserImpersonationArrayOutput) ToGetResourceResourceKubernetesUserImpersonationArrayOutput() GetResourceResourceKubernetesUserImpersonationArrayOutput {
	return o
}

func (o GetResourceResourceKubernetesUserImpersonationArrayOutput) ToGetResourceResourceKubernetesUserImpersonationArrayOutputWithContext(ctx context.Context) GetResourceResourceKubernetesUserImpersonationArrayOutput {
	return o
}

func (o GetResourceResourceKubernetesUserImpersonationArrayOutput) Index(i pulumi.IntInput) GetResourceResourceKubernetesUserImpersonationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceKubernetesUserImpersonation {
		return vs[0].([]GetResourceResourceKubernetesUserImpersonation)[vs[1].(int)]
	}).(GetResourceResourceKubernetesUserImpersonationOutput)
}

type GetResourceResourceMaria struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceMariaInput is an input type that accepts GetResourceResourceMariaArgs and GetResourceResourceMariaOutput values.
// You can construct a concrete instance of `GetResourceResourceMariaInput` via:
//
//	GetResourceResourceMariaArgs{...}
type GetResourceResourceMariaInput interface {
	pulumi.Input

	ToGetResourceResourceMariaOutput() GetResourceResourceMariaOutput
	ToGetResourceResourceMariaOutputWithContext(context.Context) GetResourceResourceMariaOutput
}

type GetResourceResourceMariaArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceMariaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMaria)(nil)).Elem()
}

func (i GetResourceResourceMariaArgs) ToGetResourceResourceMariaOutput() GetResourceResourceMariaOutput {
	return i.ToGetResourceResourceMariaOutputWithContext(context.Background())
}

func (i GetResourceResourceMariaArgs) ToGetResourceResourceMariaOutputWithContext(ctx context.Context) GetResourceResourceMariaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMariaOutput)
}

// GetResourceResourceMariaArrayInput is an input type that accepts GetResourceResourceMariaArray and GetResourceResourceMariaArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceMariaArrayInput` via:
//
//	GetResourceResourceMariaArray{ GetResourceResourceMariaArgs{...} }
type GetResourceResourceMariaArrayInput interface {
	pulumi.Input

	ToGetResourceResourceMariaArrayOutput() GetResourceResourceMariaArrayOutput
	ToGetResourceResourceMariaArrayOutputWithContext(context.Context) GetResourceResourceMariaArrayOutput
}

type GetResourceResourceMariaArray []GetResourceResourceMariaInput

func (GetResourceResourceMariaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMaria)(nil)).Elem()
}

func (i GetResourceResourceMariaArray) ToGetResourceResourceMariaArrayOutput() GetResourceResourceMariaArrayOutput {
	return i.ToGetResourceResourceMariaArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceMariaArray) ToGetResourceResourceMariaArrayOutputWithContext(ctx context.Context) GetResourceResourceMariaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMariaArrayOutput)
}

type GetResourceResourceMariaOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMariaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMaria)(nil)).Elem()
}

func (o GetResourceResourceMariaOutput) ToGetResourceResourceMariaOutput() GetResourceResourceMariaOutput {
	return o
}

func (o GetResourceResourceMariaOutput) ToGetResourceResourceMariaOutputWithContext(ctx context.Context) GetResourceResourceMariaOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceMariaOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMaria) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceMariaOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMaria) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceMariaOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMaria) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMariaOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMaria) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceMariaOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMaria) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceMariaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMaria) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceMariaOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMaria) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMariaOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMaria) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceMariaOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMaria) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceMariaOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMaria) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o GetResourceResourceMariaOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMaria) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceMariaOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMaria) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceMariaOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMaria) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceMariaOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceMaria) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o GetResourceResourceMariaOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMaria) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceMariaOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMaria) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceMariaArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMariaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMaria)(nil)).Elem()
}

func (o GetResourceResourceMariaArrayOutput) ToGetResourceResourceMariaArrayOutput() GetResourceResourceMariaArrayOutput {
	return o
}

func (o GetResourceResourceMariaArrayOutput) ToGetResourceResourceMariaArrayOutputWithContext(ctx context.Context) GetResourceResourceMariaArrayOutput {
	return o
}

func (o GetResourceResourceMariaArrayOutput) Index(i pulumi.IntInput) GetResourceResourceMariaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceMaria {
		return vs[0].([]GetResourceResourceMaria)[vs[1].(int)]
	}).(GetResourceResourceMariaOutput)
}

type GetResourceResourceMemcached struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceMemcachedInput is an input type that accepts GetResourceResourceMemcachedArgs and GetResourceResourceMemcachedOutput values.
// You can construct a concrete instance of `GetResourceResourceMemcachedInput` via:
//
//	GetResourceResourceMemcachedArgs{...}
type GetResourceResourceMemcachedInput interface {
	pulumi.Input

	ToGetResourceResourceMemcachedOutput() GetResourceResourceMemcachedOutput
	ToGetResourceResourceMemcachedOutputWithContext(context.Context) GetResourceResourceMemcachedOutput
}

type GetResourceResourceMemcachedArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceMemcachedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMemcached)(nil)).Elem()
}

func (i GetResourceResourceMemcachedArgs) ToGetResourceResourceMemcachedOutput() GetResourceResourceMemcachedOutput {
	return i.ToGetResourceResourceMemcachedOutputWithContext(context.Background())
}

func (i GetResourceResourceMemcachedArgs) ToGetResourceResourceMemcachedOutputWithContext(ctx context.Context) GetResourceResourceMemcachedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMemcachedOutput)
}

// GetResourceResourceMemcachedArrayInput is an input type that accepts GetResourceResourceMemcachedArray and GetResourceResourceMemcachedArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceMemcachedArrayInput` via:
//
//	GetResourceResourceMemcachedArray{ GetResourceResourceMemcachedArgs{...} }
type GetResourceResourceMemcachedArrayInput interface {
	pulumi.Input

	ToGetResourceResourceMemcachedArrayOutput() GetResourceResourceMemcachedArrayOutput
	ToGetResourceResourceMemcachedArrayOutputWithContext(context.Context) GetResourceResourceMemcachedArrayOutput
}

type GetResourceResourceMemcachedArray []GetResourceResourceMemcachedInput

func (GetResourceResourceMemcachedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMemcached)(nil)).Elem()
}

func (i GetResourceResourceMemcachedArray) ToGetResourceResourceMemcachedArrayOutput() GetResourceResourceMemcachedArrayOutput {
	return i.ToGetResourceResourceMemcachedArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceMemcachedArray) ToGetResourceResourceMemcachedArrayOutputWithContext(ctx context.Context) GetResourceResourceMemcachedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMemcachedArrayOutput)
}

type GetResourceResourceMemcachedOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMemcachedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMemcached)(nil)).Elem()
}

func (o GetResourceResourceMemcachedOutput) ToGetResourceResourceMemcachedOutput() GetResourceResourceMemcachedOutput {
	return o
}

func (o GetResourceResourceMemcachedOutput) ToGetResourceResourceMemcachedOutputWithContext(ctx context.Context) GetResourceResourceMemcachedOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceMemcachedOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemcached) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceMemcachedOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemcached) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMemcachedOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemcached) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceMemcachedOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemcached) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceMemcachedOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemcached) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMemcachedOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemcached) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceMemcachedOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemcached) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceMemcachedOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemcached) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceMemcachedOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemcached) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceMemcachedOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemcached) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceMemcachedOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceMemcached) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceMemcachedArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMemcachedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMemcached)(nil)).Elem()
}

func (o GetResourceResourceMemcachedArrayOutput) ToGetResourceResourceMemcachedArrayOutput() GetResourceResourceMemcachedArrayOutput {
	return o
}

func (o GetResourceResourceMemcachedArrayOutput) ToGetResourceResourceMemcachedArrayOutputWithContext(ctx context.Context) GetResourceResourceMemcachedArrayOutput {
	return o
}

func (o GetResourceResourceMemcachedArrayOutput) Index(i pulumi.IntInput) GetResourceResourceMemcachedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceMemcached {
		return vs[0].([]GetResourceResourceMemcached)[vs[1].(int)]
	}).(GetResourceResourceMemcachedOutput)
}

type GetResourceResourceMemsql struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceMemsqlInput is an input type that accepts GetResourceResourceMemsqlArgs and GetResourceResourceMemsqlOutput values.
// You can construct a concrete instance of `GetResourceResourceMemsqlInput` via:
//
//	GetResourceResourceMemsqlArgs{...}
type GetResourceResourceMemsqlInput interface {
	pulumi.Input

	ToGetResourceResourceMemsqlOutput() GetResourceResourceMemsqlOutput
	ToGetResourceResourceMemsqlOutputWithContext(context.Context) GetResourceResourceMemsqlOutput
}

type GetResourceResourceMemsqlArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceMemsqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMemsql)(nil)).Elem()
}

func (i GetResourceResourceMemsqlArgs) ToGetResourceResourceMemsqlOutput() GetResourceResourceMemsqlOutput {
	return i.ToGetResourceResourceMemsqlOutputWithContext(context.Background())
}

func (i GetResourceResourceMemsqlArgs) ToGetResourceResourceMemsqlOutputWithContext(ctx context.Context) GetResourceResourceMemsqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMemsqlOutput)
}

// GetResourceResourceMemsqlArrayInput is an input type that accepts GetResourceResourceMemsqlArray and GetResourceResourceMemsqlArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceMemsqlArrayInput` via:
//
//	GetResourceResourceMemsqlArray{ GetResourceResourceMemsqlArgs{...} }
type GetResourceResourceMemsqlArrayInput interface {
	pulumi.Input

	ToGetResourceResourceMemsqlArrayOutput() GetResourceResourceMemsqlArrayOutput
	ToGetResourceResourceMemsqlArrayOutputWithContext(context.Context) GetResourceResourceMemsqlArrayOutput
}

type GetResourceResourceMemsqlArray []GetResourceResourceMemsqlInput

func (GetResourceResourceMemsqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMemsql)(nil)).Elem()
}

func (i GetResourceResourceMemsqlArray) ToGetResourceResourceMemsqlArrayOutput() GetResourceResourceMemsqlArrayOutput {
	return i.ToGetResourceResourceMemsqlArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceMemsqlArray) ToGetResourceResourceMemsqlArrayOutputWithContext(ctx context.Context) GetResourceResourceMemsqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMemsqlArrayOutput)
}

type GetResourceResourceMemsqlOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMemsqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMemsql)(nil)).Elem()
}

func (o GetResourceResourceMemsqlOutput) ToGetResourceResourceMemsqlOutput() GetResourceResourceMemsqlOutput {
	return o
}

func (o GetResourceResourceMemsqlOutput) ToGetResourceResourceMemsqlOutputWithContext(ctx context.Context) GetResourceResourceMemsqlOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceMemsqlOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemsql) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceMemsqlOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemsql) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceMemsqlOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemsql) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMemsqlOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemsql) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceMemsqlOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemsql) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceMemsqlOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemsql) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceMemsqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemsql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMemsqlOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemsql) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceMemsqlOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemsql) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceMemsqlOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemsql) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o GetResourceResourceMemsqlOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemsql) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceMemsqlOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemsql) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceMemsqlOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemsql) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceMemsqlOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceMemsql) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o GetResourceResourceMemsqlOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemsql) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceMemsqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMemsql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceMemsqlArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMemsqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMemsql)(nil)).Elem()
}

func (o GetResourceResourceMemsqlArrayOutput) ToGetResourceResourceMemsqlArrayOutput() GetResourceResourceMemsqlArrayOutput {
	return o
}

func (o GetResourceResourceMemsqlArrayOutput) ToGetResourceResourceMemsqlArrayOutputWithContext(ctx context.Context) GetResourceResourceMemsqlArrayOutput {
	return o
}

func (o GetResourceResourceMemsqlArrayOutput) Index(i pulumi.IntInput) GetResourceResourceMemsqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceMemsql {
		return vs[0].([]GetResourceResourceMemsql)[vs[1].(int)]
	}).(GetResourceResourceMemsqlOutput)
}

type GetResourceResourceMongoHost struct {
	// The authentication database to use.
	AuthDatabase *string `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceMongoHostInput is an input type that accepts GetResourceResourceMongoHostArgs and GetResourceResourceMongoHostOutput values.
// You can construct a concrete instance of `GetResourceResourceMongoHostInput` via:
//
//	GetResourceResourceMongoHostArgs{...}
type GetResourceResourceMongoHostInput interface {
	pulumi.Input

	ToGetResourceResourceMongoHostOutput() GetResourceResourceMongoHostOutput
	ToGetResourceResourceMongoHostOutputWithContext(context.Context) GetResourceResourceMongoHostOutput
}

type GetResourceResourceMongoHostArgs struct {
	// The authentication database to use.
	AuthDatabase pulumi.StringPtrInput `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceMongoHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMongoHost)(nil)).Elem()
}

func (i GetResourceResourceMongoHostArgs) ToGetResourceResourceMongoHostOutput() GetResourceResourceMongoHostOutput {
	return i.ToGetResourceResourceMongoHostOutputWithContext(context.Background())
}

func (i GetResourceResourceMongoHostArgs) ToGetResourceResourceMongoHostOutputWithContext(ctx context.Context) GetResourceResourceMongoHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMongoHostOutput)
}

// GetResourceResourceMongoHostArrayInput is an input type that accepts GetResourceResourceMongoHostArray and GetResourceResourceMongoHostArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceMongoHostArrayInput` via:
//
//	GetResourceResourceMongoHostArray{ GetResourceResourceMongoHostArgs{...} }
type GetResourceResourceMongoHostArrayInput interface {
	pulumi.Input

	ToGetResourceResourceMongoHostArrayOutput() GetResourceResourceMongoHostArrayOutput
	ToGetResourceResourceMongoHostArrayOutputWithContext(context.Context) GetResourceResourceMongoHostArrayOutput
}

type GetResourceResourceMongoHostArray []GetResourceResourceMongoHostInput

func (GetResourceResourceMongoHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMongoHost)(nil)).Elem()
}

func (i GetResourceResourceMongoHostArray) ToGetResourceResourceMongoHostArrayOutput() GetResourceResourceMongoHostArrayOutput {
	return i.ToGetResourceResourceMongoHostArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceMongoHostArray) ToGetResourceResourceMongoHostArrayOutputWithContext(ctx context.Context) GetResourceResourceMongoHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMongoHostArrayOutput)
}

type GetResourceResourceMongoHostOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMongoHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMongoHost)(nil)).Elem()
}

func (o GetResourceResourceMongoHostOutput) ToGetResourceResourceMongoHostOutput() GetResourceResourceMongoHostOutput {
	return o
}

func (o GetResourceResourceMongoHostOutput) ToGetResourceResourceMongoHostOutputWithContext(ctx context.Context) GetResourceResourceMongoHostOutput {
	return o
}

// The authentication database to use.
func (o GetResourceResourceMongoHostOutput) AuthDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoHost) *string { return v.AuthDatabase }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceMongoHostOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoHost) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceMongoHostOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoHost) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMongoHostOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoHost) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceMongoHostOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoHost) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceMongoHostOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoHost) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceMongoHostOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoHost) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMongoHostOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoHost) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceMongoHostOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoHost) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceMongoHostOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoHost) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceMongoHostOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoHost) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceMongoHostOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoHost) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceMongoHostOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceMongoHost) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o GetResourceResourceMongoHostOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoHost) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceMongoHostOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoHost) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceMongoHostArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMongoHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMongoHost)(nil)).Elem()
}

func (o GetResourceResourceMongoHostArrayOutput) ToGetResourceResourceMongoHostArrayOutput() GetResourceResourceMongoHostArrayOutput {
	return o
}

func (o GetResourceResourceMongoHostArrayOutput) ToGetResourceResourceMongoHostArrayOutputWithContext(ctx context.Context) GetResourceResourceMongoHostArrayOutput {
	return o
}

func (o GetResourceResourceMongoHostArrayOutput) Index(i pulumi.IntInput) GetResourceResourceMongoHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceMongoHost {
		return vs[0].([]GetResourceResourceMongoHost)[vs[1].(int)]
	}).(GetResourceResourceMongoHostOutput)
}

type GetResourceResourceMongoLegacyHost struct {
	// The authentication database to use.
	AuthDatabase *string `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceMongoLegacyHostInput is an input type that accepts GetResourceResourceMongoLegacyHostArgs and GetResourceResourceMongoLegacyHostOutput values.
// You can construct a concrete instance of `GetResourceResourceMongoLegacyHostInput` via:
//
//	GetResourceResourceMongoLegacyHostArgs{...}
type GetResourceResourceMongoLegacyHostInput interface {
	pulumi.Input

	ToGetResourceResourceMongoLegacyHostOutput() GetResourceResourceMongoLegacyHostOutput
	ToGetResourceResourceMongoLegacyHostOutputWithContext(context.Context) GetResourceResourceMongoLegacyHostOutput
}

type GetResourceResourceMongoLegacyHostArgs struct {
	// The authentication database to use.
	AuthDatabase pulumi.StringPtrInput `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceMongoLegacyHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMongoLegacyHost)(nil)).Elem()
}

func (i GetResourceResourceMongoLegacyHostArgs) ToGetResourceResourceMongoLegacyHostOutput() GetResourceResourceMongoLegacyHostOutput {
	return i.ToGetResourceResourceMongoLegacyHostOutputWithContext(context.Background())
}

func (i GetResourceResourceMongoLegacyHostArgs) ToGetResourceResourceMongoLegacyHostOutputWithContext(ctx context.Context) GetResourceResourceMongoLegacyHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMongoLegacyHostOutput)
}

// GetResourceResourceMongoLegacyHostArrayInput is an input type that accepts GetResourceResourceMongoLegacyHostArray and GetResourceResourceMongoLegacyHostArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceMongoLegacyHostArrayInput` via:
//
//	GetResourceResourceMongoLegacyHostArray{ GetResourceResourceMongoLegacyHostArgs{...} }
type GetResourceResourceMongoLegacyHostArrayInput interface {
	pulumi.Input

	ToGetResourceResourceMongoLegacyHostArrayOutput() GetResourceResourceMongoLegacyHostArrayOutput
	ToGetResourceResourceMongoLegacyHostArrayOutputWithContext(context.Context) GetResourceResourceMongoLegacyHostArrayOutput
}

type GetResourceResourceMongoLegacyHostArray []GetResourceResourceMongoLegacyHostInput

func (GetResourceResourceMongoLegacyHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMongoLegacyHost)(nil)).Elem()
}

func (i GetResourceResourceMongoLegacyHostArray) ToGetResourceResourceMongoLegacyHostArrayOutput() GetResourceResourceMongoLegacyHostArrayOutput {
	return i.ToGetResourceResourceMongoLegacyHostArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceMongoLegacyHostArray) ToGetResourceResourceMongoLegacyHostArrayOutputWithContext(ctx context.Context) GetResourceResourceMongoLegacyHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMongoLegacyHostArrayOutput)
}

type GetResourceResourceMongoLegacyHostOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMongoLegacyHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMongoLegacyHost)(nil)).Elem()
}

func (o GetResourceResourceMongoLegacyHostOutput) ToGetResourceResourceMongoLegacyHostOutput() GetResourceResourceMongoLegacyHostOutput {
	return o
}

func (o GetResourceResourceMongoLegacyHostOutput) ToGetResourceResourceMongoLegacyHostOutputWithContext(ctx context.Context) GetResourceResourceMongoLegacyHostOutput {
	return o
}

// The authentication database to use.
func (o GetResourceResourceMongoLegacyHostOutput) AuthDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyHost) *string { return v.AuthDatabase }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceMongoLegacyHostOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyHost) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceMongoLegacyHostOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyHost) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMongoLegacyHostOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyHost) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceMongoLegacyHostOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyHost) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceMongoLegacyHostOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyHost) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceMongoLegacyHostOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyHost) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMongoLegacyHostOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyHost) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceMongoLegacyHostOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyHost) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceMongoLegacyHostOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyHost) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceMongoLegacyHostOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyHost) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceMongoLegacyHostOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyHost) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceMongoLegacyHostOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyHost) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o GetResourceResourceMongoLegacyHostOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyHost) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceMongoLegacyHostOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyHost) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceMongoLegacyHostArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMongoLegacyHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMongoLegacyHost)(nil)).Elem()
}

func (o GetResourceResourceMongoLegacyHostArrayOutput) ToGetResourceResourceMongoLegacyHostArrayOutput() GetResourceResourceMongoLegacyHostArrayOutput {
	return o
}

func (o GetResourceResourceMongoLegacyHostArrayOutput) ToGetResourceResourceMongoLegacyHostArrayOutputWithContext(ctx context.Context) GetResourceResourceMongoLegacyHostArrayOutput {
	return o
}

func (o GetResourceResourceMongoLegacyHostArrayOutput) Index(i pulumi.IntInput) GetResourceResourceMongoLegacyHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceMongoLegacyHost {
		return vs[0].([]GetResourceResourceMongoLegacyHost)[vs[1].(int)]
	}).(GetResourceResourceMongoLegacyHostOutput)
}

type GetResourceResourceMongoLegacyReplicaset struct {
	// The authentication database to use.
	AuthDatabase *string `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// Set to connect to a replica instead of the primary node.
	ConnectToReplica *bool `pulumi:"connectToReplica"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The name of the mongo replicaset.
	ReplicaSet *string `pulumi:"replicaSet"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceMongoLegacyReplicasetInput is an input type that accepts GetResourceResourceMongoLegacyReplicasetArgs and GetResourceResourceMongoLegacyReplicasetOutput values.
// You can construct a concrete instance of `GetResourceResourceMongoLegacyReplicasetInput` via:
//
//	GetResourceResourceMongoLegacyReplicasetArgs{...}
type GetResourceResourceMongoLegacyReplicasetInput interface {
	pulumi.Input

	ToGetResourceResourceMongoLegacyReplicasetOutput() GetResourceResourceMongoLegacyReplicasetOutput
	ToGetResourceResourceMongoLegacyReplicasetOutputWithContext(context.Context) GetResourceResourceMongoLegacyReplicasetOutput
}

type GetResourceResourceMongoLegacyReplicasetArgs struct {
	// The authentication database to use.
	AuthDatabase pulumi.StringPtrInput `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// Set to connect to a replica instead of the primary node.
	ConnectToReplica pulumi.BoolPtrInput `pulumi:"connectToReplica"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The name of the mongo replicaset.
	ReplicaSet pulumi.StringPtrInput `pulumi:"replicaSet"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceMongoLegacyReplicasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMongoLegacyReplicaset)(nil)).Elem()
}

func (i GetResourceResourceMongoLegacyReplicasetArgs) ToGetResourceResourceMongoLegacyReplicasetOutput() GetResourceResourceMongoLegacyReplicasetOutput {
	return i.ToGetResourceResourceMongoLegacyReplicasetOutputWithContext(context.Background())
}

func (i GetResourceResourceMongoLegacyReplicasetArgs) ToGetResourceResourceMongoLegacyReplicasetOutputWithContext(ctx context.Context) GetResourceResourceMongoLegacyReplicasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMongoLegacyReplicasetOutput)
}

// GetResourceResourceMongoLegacyReplicasetArrayInput is an input type that accepts GetResourceResourceMongoLegacyReplicasetArray and GetResourceResourceMongoLegacyReplicasetArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceMongoLegacyReplicasetArrayInput` via:
//
//	GetResourceResourceMongoLegacyReplicasetArray{ GetResourceResourceMongoLegacyReplicasetArgs{...} }
type GetResourceResourceMongoLegacyReplicasetArrayInput interface {
	pulumi.Input

	ToGetResourceResourceMongoLegacyReplicasetArrayOutput() GetResourceResourceMongoLegacyReplicasetArrayOutput
	ToGetResourceResourceMongoLegacyReplicasetArrayOutputWithContext(context.Context) GetResourceResourceMongoLegacyReplicasetArrayOutput
}

type GetResourceResourceMongoLegacyReplicasetArray []GetResourceResourceMongoLegacyReplicasetInput

func (GetResourceResourceMongoLegacyReplicasetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMongoLegacyReplicaset)(nil)).Elem()
}

func (i GetResourceResourceMongoLegacyReplicasetArray) ToGetResourceResourceMongoLegacyReplicasetArrayOutput() GetResourceResourceMongoLegacyReplicasetArrayOutput {
	return i.ToGetResourceResourceMongoLegacyReplicasetArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceMongoLegacyReplicasetArray) ToGetResourceResourceMongoLegacyReplicasetArrayOutputWithContext(ctx context.Context) GetResourceResourceMongoLegacyReplicasetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMongoLegacyReplicasetArrayOutput)
}

type GetResourceResourceMongoLegacyReplicasetOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMongoLegacyReplicasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMongoLegacyReplicaset)(nil)).Elem()
}

func (o GetResourceResourceMongoLegacyReplicasetOutput) ToGetResourceResourceMongoLegacyReplicasetOutput() GetResourceResourceMongoLegacyReplicasetOutput {
	return o
}

func (o GetResourceResourceMongoLegacyReplicasetOutput) ToGetResourceResourceMongoLegacyReplicasetOutputWithContext(ctx context.Context) GetResourceResourceMongoLegacyReplicasetOutput {
	return o
}

// The authentication database to use.
func (o GetResourceResourceMongoLegacyReplicasetOutput) AuthDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyReplicaset) *string { return v.AuthDatabase }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceMongoLegacyReplicasetOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyReplicaset) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// Set to connect to a replica instead of the primary node.
func (o GetResourceResourceMongoLegacyReplicasetOutput) ConnectToReplica() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyReplicaset) *bool { return v.ConnectToReplica }).(pulumi.BoolPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceMongoLegacyReplicasetOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyReplicaset) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMongoLegacyReplicasetOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyReplicaset) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceMongoLegacyReplicasetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyReplicaset) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceMongoLegacyReplicasetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyReplicaset) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceMongoLegacyReplicasetOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyReplicaset) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMongoLegacyReplicasetOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyReplicaset) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceMongoLegacyReplicasetOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyReplicaset) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceMongoLegacyReplicasetOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyReplicaset) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The name of the mongo replicaset.
func (o GetResourceResourceMongoLegacyReplicasetOutput) ReplicaSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyReplicaset) *string { return v.ReplicaSet }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceMongoLegacyReplicasetOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyReplicaset) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceMongoLegacyReplicasetOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyReplicaset) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceMongoLegacyReplicasetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyReplicaset) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o GetResourceResourceMongoLegacyReplicasetOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyReplicaset) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceMongoLegacyReplicasetOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoLegacyReplicaset) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceMongoLegacyReplicasetArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMongoLegacyReplicasetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMongoLegacyReplicaset)(nil)).Elem()
}

func (o GetResourceResourceMongoLegacyReplicasetArrayOutput) ToGetResourceResourceMongoLegacyReplicasetArrayOutput() GetResourceResourceMongoLegacyReplicasetArrayOutput {
	return o
}

func (o GetResourceResourceMongoLegacyReplicasetArrayOutput) ToGetResourceResourceMongoLegacyReplicasetArrayOutputWithContext(ctx context.Context) GetResourceResourceMongoLegacyReplicasetArrayOutput {
	return o
}

func (o GetResourceResourceMongoLegacyReplicasetArrayOutput) Index(i pulumi.IntInput) GetResourceResourceMongoLegacyReplicasetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceMongoLegacyReplicaset {
		return vs[0].([]GetResourceResourceMongoLegacyReplicaset)[vs[1].(int)]
	}).(GetResourceResourceMongoLegacyReplicasetOutput)
}

type GetResourceResourceMongoReplicaSet struct {
	// The authentication database to use.
	AuthDatabase *string `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// Set to connect to a replica instead of the primary node.
	ConnectToReplica *bool `pulumi:"connectToReplica"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The name of the mongo replicaset.
	ReplicaSet *string `pulumi:"replicaSet"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceMongoReplicaSetInput is an input type that accepts GetResourceResourceMongoReplicaSetArgs and GetResourceResourceMongoReplicaSetOutput values.
// You can construct a concrete instance of `GetResourceResourceMongoReplicaSetInput` via:
//
//	GetResourceResourceMongoReplicaSetArgs{...}
type GetResourceResourceMongoReplicaSetInput interface {
	pulumi.Input

	ToGetResourceResourceMongoReplicaSetOutput() GetResourceResourceMongoReplicaSetOutput
	ToGetResourceResourceMongoReplicaSetOutputWithContext(context.Context) GetResourceResourceMongoReplicaSetOutput
}

type GetResourceResourceMongoReplicaSetArgs struct {
	// The authentication database to use.
	AuthDatabase pulumi.StringPtrInput `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// Set to connect to a replica instead of the primary node.
	ConnectToReplica pulumi.BoolPtrInput `pulumi:"connectToReplica"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The name of the mongo replicaset.
	ReplicaSet pulumi.StringPtrInput `pulumi:"replicaSet"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceMongoReplicaSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMongoReplicaSet)(nil)).Elem()
}

func (i GetResourceResourceMongoReplicaSetArgs) ToGetResourceResourceMongoReplicaSetOutput() GetResourceResourceMongoReplicaSetOutput {
	return i.ToGetResourceResourceMongoReplicaSetOutputWithContext(context.Background())
}

func (i GetResourceResourceMongoReplicaSetArgs) ToGetResourceResourceMongoReplicaSetOutputWithContext(ctx context.Context) GetResourceResourceMongoReplicaSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMongoReplicaSetOutput)
}

// GetResourceResourceMongoReplicaSetArrayInput is an input type that accepts GetResourceResourceMongoReplicaSetArray and GetResourceResourceMongoReplicaSetArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceMongoReplicaSetArrayInput` via:
//
//	GetResourceResourceMongoReplicaSetArray{ GetResourceResourceMongoReplicaSetArgs{...} }
type GetResourceResourceMongoReplicaSetArrayInput interface {
	pulumi.Input

	ToGetResourceResourceMongoReplicaSetArrayOutput() GetResourceResourceMongoReplicaSetArrayOutput
	ToGetResourceResourceMongoReplicaSetArrayOutputWithContext(context.Context) GetResourceResourceMongoReplicaSetArrayOutput
}

type GetResourceResourceMongoReplicaSetArray []GetResourceResourceMongoReplicaSetInput

func (GetResourceResourceMongoReplicaSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMongoReplicaSet)(nil)).Elem()
}

func (i GetResourceResourceMongoReplicaSetArray) ToGetResourceResourceMongoReplicaSetArrayOutput() GetResourceResourceMongoReplicaSetArrayOutput {
	return i.ToGetResourceResourceMongoReplicaSetArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceMongoReplicaSetArray) ToGetResourceResourceMongoReplicaSetArrayOutputWithContext(ctx context.Context) GetResourceResourceMongoReplicaSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMongoReplicaSetArrayOutput)
}

type GetResourceResourceMongoReplicaSetOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMongoReplicaSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMongoReplicaSet)(nil)).Elem()
}

func (o GetResourceResourceMongoReplicaSetOutput) ToGetResourceResourceMongoReplicaSetOutput() GetResourceResourceMongoReplicaSetOutput {
	return o
}

func (o GetResourceResourceMongoReplicaSetOutput) ToGetResourceResourceMongoReplicaSetOutputWithContext(ctx context.Context) GetResourceResourceMongoReplicaSetOutput {
	return o
}

// The authentication database to use.
func (o GetResourceResourceMongoReplicaSetOutput) AuthDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoReplicaSet) *string { return v.AuthDatabase }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceMongoReplicaSetOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoReplicaSet) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// Set to connect to a replica instead of the primary node.
func (o GetResourceResourceMongoReplicaSetOutput) ConnectToReplica() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoReplicaSet) *bool { return v.ConnectToReplica }).(pulumi.BoolPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceMongoReplicaSetOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoReplicaSet) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMongoReplicaSetOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoReplicaSet) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceMongoReplicaSetOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoReplicaSet) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceMongoReplicaSetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoReplicaSet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceMongoReplicaSetOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoReplicaSet) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMongoReplicaSetOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoReplicaSet) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceMongoReplicaSetOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoReplicaSet) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceMongoReplicaSetOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoReplicaSet) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The name of the mongo replicaset.
func (o GetResourceResourceMongoReplicaSetOutput) ReplicaSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoReplicaSet) *string { return v.ReplicaSet }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceMongoReplicaSetOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoReplicaSet) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceMongoReplicaSetOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoReplicaSet) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceMongoReplicaSetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceMongoReplicaSet) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o GetResourceResourceMongoReplicaSetOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoReplicaSet) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceMongoReplicaSetOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoReplicaSet) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceMongoReplicaSetArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMongoReplicaSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMongoReplicaSet)(nil)).Elem()
}

func (o GetResourceResourceMongoReplicaSetArrayOutput) ToGetResourceResourceMongoReplicaSetArrayOutput() GetResourceResourceMongoReplicaSetArrayOutput {
	return o
}

func (o GetResourceResourceMongoReplicaSetArrayOutput) ToGetResourceResourceMongoReplicaSetArrayOutputWithContext(ctx context.Context) GetResourceResourceMongoReplicaSetArrayOutput {
	return o
}

func (o GetResourceResourceMongoReplicaSetArrayOutput) Index(i pulumi.IntInput) GetResourceResourceMongoReplicaSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceMongoReplicaSet {
		return vs[0].([]GetResourceResourceMongoReplicaSet)[vs[1].(int)]
	}).(GetResourceResourceMongoReplicaSetOutput)
}

type GetResourceResourceMongoShardedCluster struct {
	// The authentication database to use.
	AuthDatabase *string `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceMongoShardedClusterInput is an input type that accepts GetResourceResourceMongoShardedClusterArgs and GetResourceResourceMongoShardedClusterOutput values.
// You can construct a concrete instance of `GetResourceResourceMongoShardedClusterInput` via:
//
//	GetResourceResourceMongoShardedClusterArgs{...}
type GetResourceResourceMongoShardedClusterInput interface {
	pulumi.Input

	ToGetResourceResourceMongoShardedClusterOutput() GetResourceResourceMongoShardedClusterOutput
	ToGetResourceResourceMongoShardedClusterOutputWithContext(context.Context) GetResourceResourceMongoShardedClusterOutput
}

type GetResourceResourceMongoShardedClusterArgs struct {
	// The authentication database to use.
	AuthDatabase pulumi.StringPtrInput `pulumi:"authDatabase"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceMongoShardedClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMongoShardedCluster)(nil)).Elem()
}

func (i GetResourceResourceMongoShardedClusterArgs) ToGetResourceResourceMongoShardedClusterOutput() GetResourceResourceMongoShardedClusterOutput {
	return i.ToGetResourceResourceMongoShardedClusterOutputWithContext(context.Background())
}

func (i GetResourceResourceMongoShardedClusterArgs) ToGetResourceResourceMongoShardedClusterOutputWithContext(ctx context.Context) GetResourceResourceMongoShardedClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMongoShardedClusterOutput)
}

// GetResourceResourceMongoShardedClusterArrayInput is an input type that accepts GetResourceResourceMongoShardedClusterArray and GetResourceResourceMongoShardedClusterArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceMongoShardedClusterArrayInput` via:
//
//	GetResourceResourceMongoShardedClusterArray{ GetResourceResourceMongoShardedClusterArgs{...} }
type GetResourceResourceMongoShardedClusterArrayInput interface {
	pulumi.Input

	ToGetResourceResourceMongoShardedClusterArrayOutput() GetResourceResourceMongoShardedClusterArrayOutput
	ToGetResourceResourceMongoShardedClusterArrayOutputWithContext(context.Context) GetResourceResourceMongoShardedClusterArrayOutput
}

type GetResourceResourceMongoShardedClusterArray []GetResourceResourceMongoShardedClusterInput

func (GetResourceResourceMongoShardedClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMongoShardedCluster)(nil)).Elem()
}

func (i GetResourceResourceMongoShardedClusterArray) ToGetResourceResourceMongoShardedClusterArrayOutput() GetResourceResourceMongoShardedClusterArrayOutput {
	return i.ToGetResourceResourceMongoShardedClusterArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceMongoShardedClusterArray) ToGetResourceResourceMongoShardedClusterArrayOutputWithContext(ctx context.Context) GetResourceResourceMongoShardedClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMongoShardedClusterArrayOutput)
}

type GetResourceResourceMongoShardedClusterOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMongoShardedClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMongoShardedCluster)(nil)).Elem()
}

func (o GetResourceResourceMongoShardedClusterOutput) ToGetResourceResourceMongoShardedClusterOutput() GetResourceResourceMongoShardedClusterOutput {
	return o
}

func (o GetResourceResourceMongoShardedClusterOutput) ToGetResourceResourceMongoShardedClusterOutputWithContext(ctx context.Context) GetResourceResourceMongoShardedClusterOutput {
	return o
}

// The authentication database to use.
func (o GetResourceResourceMongoShardedClusterOutput) AuthDatabase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoShardedCluster) *string { return v.AuthDatabase }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceMongoShardedClusterOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoShardedCluster) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceMongoShardedClusterOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoShardedCluster) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMongoShardedClusterOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoShardedCluster) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceMongoShardedClusterOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoShardedCluster) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceMongoShardedClusterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoShardedCluster) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceMongoShardedClusterOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoShardedCluster) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceMongoShardedClusterOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoShardedCluster) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceMongoShardedClusterOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoShardedCluster) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceMongoShardedClusterOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoShardedCluster) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceMongoShardedClusterOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoShardedCluster) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceMongoShardedClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceMongoShardedCluster) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o GetResourceResourceMongoShardedClusterOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoShardedCluster) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceMongoShardedClusterOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMongoShardedCluster) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceMongoShardedClusterArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMongoShardedClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMongoShardedCluster)(nil)).Elem()
}

func (o GetResourceResourceMongoShardedClusterArrayOutput) ToGetResourceResourceMongoShardedClusterArrayOutput() GetResourceResourceMongoShardedClusterArrayOutput {
	return o
}

func (o GetResourceResourceMongoShardedClusterArrayOutput) ToGetResourceResourceMongoShardedClusterArrayOutputWithContext(ctx context.Context) GetResourceResourceMongoShardedClusterArrayOutput {
	return o
}

func (o GetResourceResourceMongoShardedClusterArrayOutput) Index(i pulumi.IntInput) GetResourceResourceMongoShardedClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceMongoShardedCluster {
		return vs[0].([]GetResourceResourceMongoShardedCluster)[vs[1].(int)]
	}).(GetResourceResourceMongoShardedClusterOutput)
}

type GetResourceResourceMtlsMysql struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey *string `pulumi:"clientKey"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Server name for TLS verification (unverified by StrongDM if empty)
	ServerName *string `pulumi:"serverName"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceMtlsMysqlInput is an input type that accepts GetResourceResourceMtlsMysqlArgs and GetResourceResourceMtlsMysqlOutput values.
// You can construct a concrete instance of `GetResourceResourceMtlsMysqlInput` via:
//
//	GetResourceResourceMtlsMysqlArgs{...}
type GetResourceResourceMtlsMysqlInput interface {
	pulumi.Input

	ToGetResourceResourceMtlsMysqlOutput() GetResourceResourceMtlsMysqlOutput
	ToGetResourceResourceMtlsMysqlOutputWithContext(context.Context) GetResourceResourceMtlsMysqlOutput
}

type GetResourceResourceMtlsMysqlArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Server name for TLS verification (unverified by StrongDM if empty)
	ServerName pulumi.StringPtrInput `pulumi:"serverName"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceMtlsMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMtlsMysql)(nil)).Elem()
}

func (i GetResourceResourceMtlsMysqlArgs) ToGetResourceResourceMtlsMysqlOutput() GetResourceResourceMtlsMysqlOutput {
	return i.ToGetResourceResourceMtlsMysqlOutputWithContext(context.Background())
}

func (i GetResourceResourceMtlsMysqlArgs) ToGetResourceResourceMtlsMysqlOutputWithContext(ctx context.Context) GetResourceResourceMtlsMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMtlsMysqlOutput)
}

// GetResourceResourceMtlsMysqlArrayInput is an input type that accepts GetResourceResourceMtlsMysqlArray and GetResourceResourceMtlsMysqlArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceMtlsMysqlArrayInput` via:
//
//	GetResourceResourceMtlsMysqlArray{ GetResourceResourceMtlsMysqlArgs{...} }
type GetResourceResourceMtlsMysqlArrayInput interface {
	pulumi.Input

	ToGetResourceResourceMtlsMysqlArrayOutput() GetResourceResourceMtlsMysqlArrayOutput
	ToGetResourceResourceMtlsMysqlArrayOutputWithContext(context.Context) GetResourceResourceMtlsMysqlArrayOutput
}

type GetResourceResourceMtlsMysqlArray []GetResourceResourceMtlsMysqlInput

func (GetResourceResourceMtlsMysqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMtlsMysql)(nil)).Elem()
}

func (i GetResourceResourceMtlsMysqlArray) ToGetResourceResourceMtlsMysqlArrayOutput() GetResourceResourceMtlsMysqlArrayOutput {
	return i.ToGetResourceResourceMtlsMysqlArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceMtlsMysqlArray) ToGetResourceResourceMtlsMysqlArrayOutputWithContext(ctx context.Context) GetResourceResourceMtlsMysqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMtlsMysqlArrayOutput)
}

type GetResourceResourceMtlsMysqlOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMtlsMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMtlsMysql)(nil)).Elem()
}

func (o GetResourceResourceMtlsMysqlOutput) ToGetResourceResourceMtlsMysqlOutput() GetResourceResourceMtlsMysqlOutput {
	return o
}

func (o GetResourceResourceMtlsMysqlOutput) ToGetResourceResourceMtlsMysqlOutputWithContext(ctx context.Context) GetResourceResourceMtlsMysqlOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceMtlsMysqlOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o GetResourceResourceMtlsMysqlOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o GetResourceResourceMtlsMysqlOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o GetResourceResourceMtlsMysqlOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceMtlsMysqlOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceMtlsMysqlOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMtlsMysqlOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceMtlsMysqlOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceMtlsMysqlOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceMtlsMysqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMtlsMysqlOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceMtlsMysqlOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceMtlsMysqlOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o GetResourceResourceMtlsMysqlOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceMtlsMysqlOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Server name for TLS verification (unverified by StrongDM if empty)
func (o GetResourceResourceMtlsMysqlOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceMtlsMysqlOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceMtlsMysqlOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o GetResourceResourceMtlsMysqlOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceMtlsMysqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsMysql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceMtlsMysqlArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMtlsMysqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMtlsMysql)(nil)).Elem()
}

func (o GetResourceResourceMtlsMysqlArrayOutput) ToGetResourceResourceMtlsMysqlArrayOutput() GetResourceResourceMtlsMysqlArrayOutput {
	return o
}

func (o GetResourceResourceMtlsMysqlArrayOutput) ToGetResourceResourceMtlsMysqlArrayOutputWithContext(ctx context.Context) GetResourceResourceMtlsMysqlArrayOutput {
	return o
}

func (o GetResourceResourceMtlsMysqlArrayOutput) Index(i pulumi.IntInput) GetResourceResourceMtlsMysqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceMtlsMysql {
		return vs[0].([]GetResourceResourceMtlsMysql)[vs[1].(int)]
	}).(GetResourceResourceMtlsMysqlOutput)
}

type GetResourceResourceMtlsPostgre struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey *string `pulumi:"clientKey"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Server name for TLS verification (unverified by StrongDM if empty)
	ServerName *string `pulumi:"serverName"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceMtlsPostgreInput is an input type that accepts GetResourceResourceMtlsPostgreArgs and GetResourceResourceMtlsPostgreOutput values.
// You can construct a concrete instance of `GetResourceResourceMtlsPostgreInput` via:
//
//	GetResourceResourceMtlsPostgreArgs{...}
type GetResourceResourceMtlsPostgreInput interface {
	pulumi.Input

	ToGetResourceResourceMtlsPostgreOutput() GetResourceResourceMtlsPostgreOutput
	ToGetResourceResourceMtlsPostgreOutputWithContext(context.Context) GetResourceResourceMtlsPostgreOutput
}

type GetResourceResourceMtlsPostgreArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The CA to authenticate TLS connections with.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// The certificate to authenticate TLS connections with.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The key to authenticate TLS connections with.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Server name for TLS verification (unverified by StrongDM if empty)
	ServerName pulumi.StringPtrInput `pulumi:"serverName"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceMtlsPostgreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMtlsPostgre)(nil)).Elem()
}

func (i GetResourceResourceMtlsPostgreArgs) ToGetResourceResourceMtlsPostgreOutput() GetResourceResourceMtlsPostgreOutput {
	return i.ToGetResourceResourceMtlsPostgreOutputWithContext(context.Background())
}

func (i GetResourceResourceMtlsPostgreArgs) ToGetResourceResourceMtlsPostgreOutputWithContext(ctx context.Context) GetResourceResourceMtlsPostgreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMtlsPostgreOutput)
}

// GetResourceResourceMtlsPostgreArrayInput is an input type that accepts GetResourceResourceMtlsPostgreArray and GetResourceResourceMtlsPostgreArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceMtlsPostgreArrayInput` via:
//
//	GetResourceResourceMtlsPostgreArray{ GetResourceResourceMtlsPostgreArgs{...} }
type GetResourceResourceMtlsPostgreArrayInput interface {
	pulumi.Input

	ToGetResourceResourceMtlsPostgreArrayOutput() GetResourceResourceMtlsPostgreArrayOutput
	ToGetResourceResourceMtlsPostgreArrayOutputWithContext(context.Context) GetResourceResourceMtlsPostgreArrayOutput
}

type GetResourceResourceMtlsPostgreArray []GetResourceResourceMtlsPostgreInput

func (GetResourceResourceMtlsPostgreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMtlsPostgre)(nil)).Elem()
}

func (i GetResourceResourceMtlsPostgreArray) ToGetResourceResourceMtlsPostgreArrayOutput() GetResourceResourceMtlsPostgreArrayOutput {
	return i.ToGetResourceResourceMtlsPostgreArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceMtlsPostgreArray) ToGetResourceResourceMtlsPostgreArrayOutputWithContext(ctx context.Context) GetResourceResourceMtlsPostgreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMtlsPostgreArrayOutput)
}

type GetResourceResourceMtlsPostgreOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMtlsPostgreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMtlsPostgre)(nil)).Elem()
}

func (o GetResourceResourceMtlsPostgreOutput) ToGetResourceResourceMtlsPostgreOutput() GetResourceResourceMtlsPostgreOutput {
	return o
}

func (o GetResourceResourceMtlsPostgreOutput) ToGetResourceResourceMtlsPostgreOutputWithContext(ctx context.Context) GetResourceResourceMtlsPostgreOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceMtlsPostgreOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The CA to authenticate TLS connections with.
func (o GetResourceResourceMtlsPostgreOutput) CertificateAuthority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *string { return v.CertificateAuthority }).(pulumi.StringPtrOutput)
}

// The certificate to authenticate TLS connections with.
func (o GetResourceResourceMtlsPostgreOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The key to authenticate TLS connections with.
func (o GetResourceResourceMtlsPostgreOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceMtlsPostgreOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceMtlsPostgreOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMtlsPostgreOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceMtlsPostgreOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceMtlsPostgreOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o GetResourceResourceMtlsPostgreOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceMtlsPostgreOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMtlsPostgreOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceMtlsPostgreOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceMtlsPostgreOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceMtlsPostgreOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Server name for TLS verification (unverified by StrongDM if empty)
func (o GetResourceResourceMtlsPostgreOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceMtlsPostgreOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceMtlsPostgreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceMtlsPostgreOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMtlsPostgre) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceMtlsPostgreArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMtlsPostgreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMtlsPostgre)(nil)).Elem()
}

func (o GetResourceResourceMtlsPostgreArrayOutput) ToGetResourceResourceMtlsPostgreArrayOutput() GetResourceResourceMtlsPostgreArrayOutput {
	return o
}

func (o GetResourceResourceMtlsPostgreArrayOutput) ToGetResourceResourceMtlsPostgreArrayOutputWithContext(ctx context.Context) GetResourceResourceMtlsPostgreArrayOutput {
	return o
}

func (o GetResourceResourceMtlsPostgreArrayOutput) Index(i pulumi.IntInput) GetResourceResourceMtlsPostgreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceMtlsPostgre {
		return vs[0].([]GetResourceResourceMtlsPostgre)[vs[1].(int)]
	}).(GetResourceResourceMtlsPostgreOutput)
}

type GetResourceResourceMysql struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceMysqlInput is an input type that accepts GetResourceResourceMysqlArgs and GetResourceResourceMysqlOutput values.
// You can construct a concrete instance of `GetResourceResourceMysqlInput` via:
//
//	GetResourceResourceMysqlArgs{...}
type GetResourceResourceMysqlInput interface {
	pulumi.Input

	ToGetResourceResourceMysqlOutput() GetResourceResourceMysqlOutput
	ToGetResourceResourceMysqlOutputWithContext(context.Context) GetResourceResourceMysqlOutput
}

type GetResourceResourceMysqlArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceMysqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMysql)(nil)).Elem()
}

func (i GetResourceResourceMysqlArgs) ToGetResourceResourceMysqlOutput() GetResourceResourceMysqlOutput {
	return i.ToGetResourceResourceMysqlOutputWithContext(context.Background())
}

func (i GetResourceResourceMysqlArgs) ToGetResourceResourceMysqlOutputWithContext(ctx context.Context) GetResourceResourceMysqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMysqlOutput)
}

// GetResourceResourceMysqlArrayInput is an input type that accepts GetResourceResourceMysqlArray and GetResourceResourceMysqlArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceMysqlArrayInput` via:
//
//	GetResourceResourceMysqlArray{ GetResourceResourceMysqlArgs{...} }
type GetResourceResourceMysqlArrayInput interface {
	pulumi.Input

	ToGetResourceResourceMysqlArrayOutput() GetResourceResourceMysqlArrayOutput
	ToGetResourceResourceMysqlArrayOutputWithContext(context.Context) GetResourceResourceMysqlArrayOutput
}

type GetResourceResourceMysqlArray []GetResourceResourceMysqlInput

func (GetResourceResourceMysqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMysql)(nil)).Elem()
}

func (i GetResourceResourceMysqlArray) ToGetResourceResourceMysqlArrayOutput() GetResourceResourceMysqlArrayOutput {
	return i.ToGetResourceResourceMysqlArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceMysqlArray) ToGetResourceResourceMysqlArrayOutputWithContext(ctx context.Context) GetResourceResourceMysqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceMysqlArrayOutput)
}

type GetResourceResourceMysqlOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMysqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceMysql)(nil)).Elem()
}

func (o GetResourceResourceMysqlOutput) ToGetResourceResourceMysqlOutput() GetResourceResourceMysqlOutput {
	return o
}

func (o GetResourceResourceMysqlOutput) ToGetResourceResourceMysqlOutputWithContext(ctx context.Context) GetResourceResourceMysqlOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceMysqlOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMysql) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceMysqlOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMysql) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceMysqlOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMysql) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMysqlOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMysql) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceMysqlOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMysql) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceMysqlOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMysql) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceMysqlOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMysql) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceMysqlOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMysql) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceMysqlOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMysql) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceMysqlOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMysql) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o GetResourceResourceMysqlOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMysql) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceMysqlOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMysql) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceMysqlOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMysql) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceMysqlOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceMysql) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o GetResourceResourceMysqlOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMysql) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceMysqlOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceMysql) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceMysqlArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceMysqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceMysql)(nil)).Elem()
}

func (o GetResourceResourceMysqlArrayOutput) ToGetResourceResourceMysqlArrayOutput() GetResourceResourceMysqlArrayOutput {
	return o
}

func (o GetResourceResourceMysqlArrayOutput) ToGetResourceResourceMysqlArrayOutputWithContext(ctx context.Context) GetResourceResourceMysqlArrayOutput {
	return o
}

func (o GetResourceResourceMysqlArrayOutput) Index(i pulumi.IntInput) GetResourceResourceMysqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceMysql {
		return vs[0].([]GetResourceResourceMysql)[vs[1].(int)]
	}).(GetResourceResourceMysqlOutput)
}

type GetResourceResourceNeptune struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint *string `pulumi:"endpoint"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceNeptuneInput is an input type that accepts GetResourceResourceNeptuneArgs and GetResourceResourceNeptuneOutput values.
// You can construct a concrete instance of `GetResourceResourceNeptuneInput` via:
//
//	GetResourceResourceNeptuneArgs{...}
type GetResourceResourceNeptuneInput interface {
	pulumi.Input

	ToGetResourceResourceNeptuneOutput() GetResourceResourceNeptuneOutput
	ToGetResourceResourceNeptuneOutputWithContext(context.Context) GetResourceResourceNeptuneOutput
}

type GetResourceResourceNeptuneArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceNeptuneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceNeptune)(nil)).Elem()
}

func (i GetResourceResourceNeptuneArgs) ToGetResourceResourceNeptuneOutput() GetResourceResourceNeptuneOutput {
	return i.ToGetResourceResourceNeptuneOutputWithContext(context.Background())
}

func (i GetResourceResourceNeptuneArgs) ToGetResourceResourceNeptuneOutputWithContext(ctx context.Context) GetResourceResourceNeptuneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceNeptuneOutput)
}

// GetResourceResourceNeptuneArrayInput is an input type that accepts GetResourceResourceNeptuneArray and GetResourceResourceNeptuneArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceNeptuneArrayInput` via:
//
//	GetResourceResourceNeptuneArray{ GetResourceResourceNeptuneArgs{...} }
type GetResourceResourceNeptuneArrayInput interface {
	pulumi.Input

	ToGetResourceResourceNeptuneArrayOutput() GetResourceResourceNeptuneArrayOutput
	ToGetResourceResourceNeptuneArrayOutputWithContext(context.Context) GetResourceResourceNeptuneArrayOutput
}

type GetResourceResourceNeptuneArray []GetResourceResourceNeptuneInput

func (GetResourceResourceNeptuneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceNeptune)(nil)).Elem()
}

func (i GetResourceResourceNeptuneArray) ToGetResourceResourceNeptuneArrayOutput() GetResourceResourceNeptuneArrayOutput {
	return i.ToGetResourceResourceNeptuneArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceNeptuneArray) ToGetResourceResourceNeptuneArrayOutputWithContext(ctx context.Context) GetResourceResourceNeptuneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceNeptuneArrayOutput)
}

type GetResourceResourceNeptuneOutput struct{ *pulumi.OutputState }

func (GetResourceResourceNeptuneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceNeptune)(nil)).Elem()
}

func (o GetResourceResourceNeptuneOutput) ToGetResourceResourceNeptuneOutput() GetResourceResourceNeptuneOutput {
	return o
}

func (o GetResourceResourceNeptuneOutput) ToGetResourceResourceNeptuneOutputWithContext(ctx context.Context) GetResourceResourceNeptuneOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceNeptuneOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptune) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceNeptuneOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptune) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o GetResourceResourceNeptuneOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptune) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceNeptuneOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptune) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceNeptuneOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptune) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceNeptuneOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptune) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceNeptuneOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptune) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceNeptuneOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptune) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceNeptuneOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptune) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceNeptuneOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptune) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceNeptuneOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceNeptune) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceNeptuneArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceNeptuneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceNeptune)(nil)).Elem()
}

func (o GetResourceResourceNeptuneArrayOutput) ToGetResourceResourceNeptuneArrayOutput() GetResourceResourceNeptuneArrayOutput {
	return o
}

func (o GetResourceResourceNeptuneArrayOutput) ToGetResourceResourceNeptuneArrayOutputWithContext(ctx context.Context) GetResourceResourceNeptuneArrayOutput {
	return o
}

func (o GetResourceResourceNeptuneArrayOutput) Index(i pulumi.IntInput) GetResourceResourceNeptuneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceNeptune {
		return vs[0].([]GetResourceResourceNeptune)[vs[1].(int)]
	}).(GetResourceResourceNeptuneOutput)
}

type GetResourceResourceNeptuneIam struct {
	// The Access Key ID to use to authenticate.
	AccessKey *string `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint *string `pulumi:"endpoint"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn *string `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId *string `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceNeptuneIamInput is an input type that accepts GetResourceResourceNeptuneIamArgs and GetResourceResourceNeptuneIamOutput values.
// You can construct a concrete instance of `GetResourceResourceNeptuneIamInput` via:
//
//	GetResourceResourceNeptuneIamArgs{...}
type GetResourceResourceNeptuneIamInput interface {
	pulumi.Input

	ToGetResourceResourceNeptuneIamOutput() GetResourceResourceNeptuneIamOutput
	ToGetResourceResourceNeptuneIamOutputWithContext(context.Context) GetResourceResourceNeptuneIamOutput
}

type GetResourceResourceNeptuneIamArgs struct {
	// The Access Key ID to use to authenticate.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The role to assume after logging in.
	RoleArn pulumi.StringPtrInput `pulumi:"roleArn"`
	// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
	RoleExternalId pulumi.StringPtrInput `pulumi:"roleExternalId"`
	// The Secret Access Key to use to authenticate.
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceNeptuneIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceNeptuneIam)(nil)).Elem()
}

func (i GetResourceResourceNeptuneIamArgs) ToGetResourceResourceNeptuneIamOutput() GetResourceResourceNeptuneIamOutput {
	return i.ToGetResourceResourceNeptuneIamOutputWithContext(context.Background())
}

func (i GetResourceResourceNeptuneIamArgs) ToGetResourceResourceNeptuneIamOutputWithContext(ctx context.Context) GetResourceResourceNeptuneIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceNeptuneIamOutput)
}

// GetResourceResourceNeptuneIamArrayInput is an input type that accepts GetResourceResourceNeptuneIamArray and GetResourceResourceNeptuneIamArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceNeptuneIamArrayInput` via:
//
//	GetResourceResourceNeptuneIamArray{ GetResourceResourceNeptuneIamArgs{...} }
type GetResourceResourceNeptuneIamArrayInput interface {
	pulumi.Input

	ToGetResourceResourceNeptuneIamArrayOutput() GetResourceResourceNeptuneIamArrayOutput
	ToGetResourceResourceNeptuneIamArrayOutputWithContext(context.Context) GetResourceResourceNeptuneIamArrayOutput
}

type GetResourceResourceNeptuneIamArray []GetResourceResourceNeptuneIamInput

func (GetResourceResourceNeptuneIamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceNeptuneIam)(nil)).Elem()
}

func (i GetResourceResourceNeptuneIamArray) ToGetResourceResourceNeptuneIamArrayOutput() GetResourceResourceNeptuneIamArrayOutput {
	return i.ToGetResourceResourceNeptuneIamArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceNeptuneIamArray) ToGetResourceResourceNeptuneIamArrayOutputWithContext(ctx context.Context) GetResourceResourceNeptuneIamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceNeptuneIamArrayOutput)
}

type GetResourceResourceNeptuneIamOutput struct{ *pulumi.OutputState }

func (GetResourceResourceNeptuneIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceNeptuneIam)(nil)).Elem()
}

func (o GetResourceResourceNeptuneIamOutput) ToGetResourceResourceNeptuneIamOutput() GetResourceResourceNeptuneIamOutput {
	return o
}

func (o GetResourceResourceNeptuneIamOutput) ToGetResourceResourceNeptuneIamOutputWithContext(ctx context.Context) GetResourceResourceNeptuneIamOutput {
	return o
}

// The Access Key ID to use to authenticate.
func (o GetResourceResourceNeptuneIamOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptuneIam) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceNeptuneIamOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptuneIam) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceNeptuneIamOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptuneIam) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The neptune endpoint to connect to as in endpoint.region.neptune.amazonaws.com
func (o GetResourceResourceNeptuneIamOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptuneIam) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceNeptuneIamOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptuneIam) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceNeptuneIamOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptuneIam) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceNeptuneIamOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptuneIam) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceNeptuneIamOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptuneIam) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceNeptuneIamOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptuneIam) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o GetResourceResourceNeptuneIamOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptuneIam) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The role to assume after logging in.
func (o GetResourceResourceNeptuneIamOutput) RoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptuneIam) *string { return v.RoleArn }).(pulumi.StringPtrOutput)
}

// The external ID to associate with assume role requests. Does nothing if a role ARN is not provided.
func (o GetResourceResourceNeptuneIamOutput) RoleExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptuneIam) *string { return v.RoleExternalId }).(pulumi.StringPtrOutput)
}

// The Secret Access Key to use to authenticate.
func (o GetResourceResourceNeptuneIamOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptuneIam) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceNeptuneIamOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptuneIam) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceNeptuneIamOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceNeptuneIam) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceNeptuneIamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceNeptuneIam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceNeptuneIamArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceNeptuneIamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceNeptuneIam)(nil)).Elem()
}

func (o GetResourceResourceNeptuneIamArrayOutput) ToGetResourceResourceNeptuneIamArrayOutput() GetResourceResourceNeptuneIamArrayOutput {
	return o
}

func (o GetResourceResourceNeptuneIamArrayOutput) ToGetResourceResourceNeptuneIamArrayOutputWithContext(ctx context.Context) GetResourceResourceNeptuneIamArrayOutput {
	return o
}

func (o GetResourceResourceNeptuneIamArrayOutput) Index(i pulumi.IntInput) GetResourceResourceNeptuneIamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceNeptuneIam {
		return vs[0].([]GetResourceResourceNeptuneIam)[vs[1].(int)]
	}).(GetResourceResourceNeptuneIamOutput)
}

type GetResourceResourceOracle struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceOracleInput is an input type that accepts GetResourceResourceOracleArgs and GetResourceResourceOracleOutput values.
// You can construct a concrete instance of `GetResourceResourceOracleInput` via:
//
//	GetResourceResourceOracleArgs{...}
type GetResourceResourceOracleInput interface {
	pulumi.Input

	ToGetResourceResourceOracleOutput() GetResourceResourceOracleOutput
	ToGetResourceResourceOracleOutputWithContext(context.Context) GetResourceResourceOracleOutput
}

type GetResourceResourceOracleArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceOracleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceOracle)(nil)).Elem()
}

func (i GetResourceResourceOracleArgs) ToGetResourceResourceOracleOutput() GetResourceResourceOracleOutput {
	return i.ToGetResourceResourceOracleOutputWithContext(context.Background())
}

func (i GetResourceResourceOracleArgs) ToGetResourceResourceOracleOutputWithContext(ctx context.Context) GetResourceResourceOracleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceOracleOutput)
}

// GetResourceResourceOracleArrayInput is an input type that accepts GetResourceResourceOracleArray and GetResourceResourceOracleArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceOracleArrayInput` via:
//
//	GetResourceResourceOracleArray{ GetResourceResourceOracleArgs{...} }
type GetResourceResourceOracleArrayInput interface {
	pulumi.Input

	ToGetResourceResourceOracleArrayOutput() GetResourceResourceOracleArrayOutput
	ToGetResourceResourceOracleArrayOutputWithContext(context.Context) GetResourceResourceOracleArrayOutput
}

type GetResourceResourceOracleArray []GetResourceResourceOracleInput

func (GetResourceResourceOracleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceOracle)(nil)).Elem()
}

func (i GetResourceResourceOracleArray) ToGetResourceResourceOracleArrayOutput() GetResourceResourceOracleArrayOutput {
	return i.ToGetResourceResourceOracleArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceOracleArray) ToGetResourceResourceOracleArrayOutputWithContext(ctx context.Context) GetResourceResourceOracleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceOracleArrayOutput)
}

type GetResourceResourceOracleOutput struct{ *pulumi.OutputState }

func (GetResourceResourceOracleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceOracle)(nil)).Elem()
}

func (o GetResourceResourceOracleOutput) ToGetResourceResourceOracleOutput() GetResourceResourceOracleOutput {
	return o
}

func (o GetResourceResourceOracleOutput) ToGetResourceResourceOracleOutputWithContext(ctx context.Context) GetResourceResourceOracleOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceOracleOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceOracle) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceOracleOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceOracle) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceOracleOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceOracle) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceOracleOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceOracle) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceOracleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceOracle) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceOracleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceOracle) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceOracleOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceOracle) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceOracleOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceOracle) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceOracleOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceOracle) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceOracleOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceOracle) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceOracleOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceOracle) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceOracleOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceOracle) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceOracleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceOracle) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o GetResourceResourceOracleOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceOracle) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceOracleOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceOracle) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceOracleArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceOracleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceOracle)(nil)).Elem()
}

func (o GetResourceResourceOracleArrayOutput) ToGetResourceResourceOracleArrayOutput() GetResourceResourceOracleArrayOutput {
	return o
}

func (o GetResourceResourceOracleArrayOutput) ToGetResourceResourceOracleArrayOutputWithContext(ctx context.Context) GetResourceResourceOracleArrayOutput {
	return o
}

func (o GetResourceResourceOracleArrayOutput) Index(i pulumi.IntInput) GetResourceResourceOracleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceOracle {
		return vs[0].([]GetResourceResourceOracle)[vs[1].(int)]
	}).(GetResourceResourceOracleOutput)
}

type GetResourceResourcePostgre struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourcePostgreInput is an input type that accepts GetResourceResourcePostgreArgs and GetResourceResourcePostgreOutput values.
// You can construct a concrete instance of `GetResourceResourcePostgreInput` via:
//
//	GetResourceResourcePostgreArgs{...}
type GetResourceResourcePostgreInput interface {
	pulumi.Input

	ToGetResourceResourcePostgreOutput() GetResourceResourcePostgreOutput
	ToGetResourceResourcePostgreOutputWithContext(context.Context) GetResourceResourcePostgreOutput
}

type GetResourceResourcePostgreArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourcePostgreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourcePostgre)(nil)).Elem()
}

func (i GetResourceResourcePostgreArgs) ToGetResourceResourcePostgreOutput() GetResourceResourcePostgreOutput {
	return i.ToGetResourceResourcePostgreOutputWithContext(context.Background())
}

func (i GetResourceResourcePostgreArgs) ToGetResourceResourcePostgreOutputWithContext(ctx context.Context) GetResourceResourcePostgreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourcePostgreOutput)
}

// GetResourceResourcePostgreArrayInput is an input type that accepts GetResourceResourcePostgreArray and GetResourceResourcePostgreArrayOutput values.
// You can construct a concrete instance of `GetResourceResourcePostgreArrayInput` via:
//
//	GetResourceResourcePostgreArray{ GetResourceResourcePostgreArgs{...} }
type GetResourceResourcePostgreArrayInput interface {
	pulumi.Input

	ToGetResourceResourcePostgreArrayOutput() GetResourceResourcePostgreArrayOutput
	ToGetResourceResourcePostgreArrayOutputWithContext(context.Context) GetResourceResourcePostgreArrayOutput
}

type GetResourceResourcePostgreArray []GetResourceResourcePostgreInput

func (GetResourceResourcePostgreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourcePostgre)(nil)).Elem()
}

func (i GetResourceResourcePostgreArray) ToGetResourceResourcePostgreArrayOutput() GetResourceResourcePostgreArrayOutput {
	return i.ToGetResourceResourcePostgreArrayOutputWithContext(context.Background())
}

func (i GetResourceResourcePostgreArray) ToGetResourceResourcePostgreArrayOutputWithContext(ctx context.Context) GetResourceResourcePostgreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourcePostgreArrayOutput)
}

type GetResourceResourcePostgreOutput struct{ *pulumi.OutputState }

func (GetResourceResourcePostgreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourcePostgre)(nil)).Elem()
}

func (o GetResourceResourcePostgreOutput) ToGetResourceResourcePostgreOutput() GetResourceResourcePostgreOutput {
	return o
}

func (o GetResourceResourcePostgreOutput) ToGetResourceResourcePostgreOutputWithContext(ctx context.Context) GetResourceResourcePostgreOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourcePostgreOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePostgre) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourcePostgreOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePostgre) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourcePostgreOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePostgre) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourcePostgreOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePostgre) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourcePostgreOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePostgre) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourcePostgreOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePostgre) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o GetResourceResourcePostgreOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePostgre) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourcePostgreOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePostgre) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourcePostgreOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePostgre) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourcePostgreOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePostgre) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourcePostgreOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePostgre) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourcePostgreOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePostgre) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourcePostgreOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePostgre) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourcePostgreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourcePostgre) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourcePostgreOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePostgre) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourcePostgreArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourcePostgreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourcePostgre)(nil)).Elem()
}

func (o GetResourceResourcePostgreArrayOutput) ToGetResourceResourcePostgreArrayOutput() GetResourceResourcePostgreArrayOutput {
	return o
}

func (o GetResourceResourcePostgreArrayOutput) ToGetResourceResourcePostgreArrayOutputWithContext(ctx context.Context) GetResourceResourcePostgreArrayOutput {
	return o
}

func (o GetResourceResourcePostgreArrayOutput) Index(i pulumi.IntInput) GetResourceResourcePostgreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourcePostgre {
		return vs[0].([]GetResourceResourcePostgre)[vs[1].(int)]
	}).(GetResourceResourcePostgreOutput)
}

type GetResourceResourcePresto struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourcePrestoInput is an input type that accepts GetResourceResourcePrestoArgs and GetResourceResourcePrestoOutput values.
// You can construct a concrete instance of `GetResourceResourcePrestoInput` via:
//
//	GetResourceResourcePrestoArgs{...}
type GetResourceResourcePrestoInput interface {
	pulumi.Input

	ToGetResourceResourcePrestoOutput() GetResourceResourcePrestoOutput
	ToGetResourceResourcePrestoOutputWithContext(context.Context) GetResourceResourcePrestoOutput
}

type GetResourceResourcePrestoArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourcePrestoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourcePresto)(nil)).Elem()
}

func (i GetResourceResourcePrestoArgs) ToGetResourceResourcePrestoOutput() GetResourceResourcePrestoOutput {
	return i.ToGetResourceResourcePrestoOutputWithContext(context.Background())
}

func (i GetResourceResourcePrestoArgs) ToGetResourceResourcePrestoOutputWithContext(ctx context.Context) GetResourceResourcePrestoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourcePrestoOutput)
}

// GetResourceResourcePrestoArrayInput is an input type that accepts GetResourceResourcePrestoArray and GetResourceResourcePrestoArrayOutput values.
// You can construct a concrete instance of `GetResourceResourcePrestoArrayInput` via:
//
//	GetResourceResourcePrestoArray{ GetResourceResourcePrestoArgs{...} }
type GetResourceResourcePrestoArrayInput interface {
	pulumi.Input

	ToGetResourceResourcePrestoArrayOutput() GetResourceResourcePrestoArrayOutput
	ToGetResourceResourcePrestoArrayOutputWithContext(context.Context) GetResourceResourcePrestoArrayOutput
}

type GetResourceResourcePrestoArray []GetResourceResourcePrestoInput

func (GetResourceResourcePrestoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourcePresto)(nil)).Elem()
}

func (i GetResourceResourcePrestoArray) ToGetResourceResourcePrestoArrayOutput() GetResourceResourcePrestoArrayOutput {
	return i.ToGetResourceResourcePrestoArrayOutputWithContext(context.Background())
}

func (i GetResourceResourcePrestoArray) ToGetResourceResourcePrestoArrayOutputWithContext(ctx context.Context) GetResourceResourcePrestoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourcePrestoArrayOutput)
}

type GetResourceResourcePrestoOutput struct{ *pulumi.OutputState }

func (GetResourceResourcePrestoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourcePresto)(nil)).Elem()
}

func (o GetResourceResourcePrestoOutput) ToGetResourceResourcePrestoOutput() GetResourceResourcePrestoOutput {
	return o
}

func (o GetResourceResourcePrestoOutput) ToGetResourceResourcePrestoOutputWithContext(ctx context.Context) GetResourceResourcePrestoOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourcePrestoOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePresto) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourcePrestoOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePresto) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourcePrestoOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePresto) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourcePrestoOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePresto) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourcePrestoOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePresto) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourcePrestoOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePresto) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourcePrestoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePresto) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourcePrestoOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePresto) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourcePrestoOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePresto) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourcePrestoOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePresto) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourcePrestoOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePresto) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourcePrestoOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePresto) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourcePrestoOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourcePresto) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o GetResourceResourcePrestoOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePresto) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourcePrestoOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourcePresto) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourcePrestoArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourcePrestoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourcePresto)(nil)).Elem()
}

func (o GetResourceResourcePrestoArrayOutput) ToGetResourceResourcePrestoArrayOutput() GetResourceResourcePrestoArrayOutput {
	return o
}

func (o GetResourceResourcePrestoArrayOutput) ToGetResourceResourcePrestoArrayOutputWithContext(ctx context.Context) GetResourceResourcePrestoArrayOutput {
	return o
}

func (o GetResourceResourcePrestoArrayOutput) Index(i pulumi.IntInput) GetResourceResourcePrestoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourcePresto {
		return vs[0].([]GetResourceResourcePresto)[vs[1].(int)]
	}).(GetResourceResourcePrestoOutput)
}

type GetResourceResourceRabbitmqAmqp091 struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceRabbitmqAmqp091Input is an input type that accepts GetResourceResourceRabbitmqAmqp091Args and GetResourceResourceRabbitmqAmqp091Output values.
// You can construct a concrete instance of `GetResourceResourceRabbitmqAmqp091Input` via:
//
//	GetResourceResourceRabbitmqAmqp091Args{...}
type GetResourceResourceRabbitmqAmqp091Input interface {
	pulumi.Input

	ToGetResourceResourceRabbitmqAmqp091Output() GetResourceResourceRabbitmqAmqp091Output
	ToGetResourceResourceRabbitmqAmqp091OutputWithContext(context.Context) GetResourceResourceRabbitmqAmqp091Output
}

type GetResourceResourceRabbitmqAmqp091Args struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceRabbitmqAmqp091Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceRabbitmqAmqp091)(nil)).Elem()
}

func (i GetResourceResourceRabbitmqAmqp091Args) ToGetResourceResourceRabbitmqAmqp091Output() GetResourceResourceRabbitmqAmqp091Output {
	return i.ToGetResourceResourceRabbitmqAmqp091OutputWithContext(context.Background())
}

func (i GetResourceResourceRabbitmqAmqp091Args) ToGetResourceResourceRabbitmqAmqp091OutputWithContext(ctx context.Context) GetResourceResourceRabbitmqAmqp091Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceRabbitmqAmqp091Output)
}

// GetResourceResourceRabbitmqAmqp091ArrayInput is an input type that accepts GetResourceResourceRabbitmqAmqp091Array and GetResourceResourceRabbitmqAmqp091ArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceRabbitmqAmqp091ArrayInput` via:
//
//	GetResourceResourceRabbitmqAmqp091Array{ GetResourceResourceRabbitmqAmqp091Args{...} }
type GetResourceResourceRabbitmqAmqp091ArrayInput interface {
	pulumi.Input

	ToGetResourceResourceRabbitmqAmqp091ArrayOutput() GetResourceResourceRabbitmqAmqp091ArrayOutput
	ToGetResourceResourceRabbitmqAmqp091ArrayOutputWithContext(context.Context) GetResourceResourceRabbitmqAmqp091ArrayOutput
}

type GetResourceResourceRabbitmqAmqp091Array []GetResourceResourceRabbitmqAmqp091Input

func (GetResourceResourceRabbitmqAmqp091Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceRabbitmqAmqp091)(nil)).Elem()
}

func (i GetResourceResourceRabbitmqAmqp091Array) ToGetResourceResourceRabbitmqAmqp091ArrayOutput() GetResourceResourceRabbitmqAmqp091ArrayOutput {
	return i.ToGetResourceResourceRabbitmqAmqp091ArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceRabbitmqAmqp091Array) ToGetResourceResourceRabbitmqAmqp091ArrayOutputWithContext(ctx context.Context) GetResourceResourceRabbitmqAmqp091ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceRabbitmqAmqp091ArrayOutput)
}

type GetResourceResourceRabbitmqAmqp091Output struct{ *pulumi.OutputState }

func (GetResourceResourceRabbitmqAmqp091Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceRabbitmqAmqp091)(nil)).Elem()
}

func (o GetResourceResourceRabbitmqAmqp091Output) ToGetResourceResourceRabbitmqAmqp091Output() GetResourceResourceRabbitmqAmqp091Output {
	return o
}

func (o GetResourceResourceRabbitmqAmqp091Output) ToGetResourceResourceRabbitmqAmqp091OutputWithContext(ctx context.Context) GetResourceResourceRabbitmqAmqp091Output {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceRabbitmqAmqp091Output) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRabbitmqAmqp091) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceRabbitmqAmqp091Output) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRabbitmqAmqp091) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceRabbitmqAmqp091Output) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRabbitmqAmqp091) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceRabbitmqAmqp091Output) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRabbitmqAmqp091) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceRabbitmqAmqp091Output) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRabbitmqAmqp091) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceRabbitmqAmqp091Output) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRabbitmqAmqp091) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceRabbitmqAmqp091Output) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRabbitmqAmqp091) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceRabbitmqAmqp091Output) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRabbitmqAmqp091) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceRabbitmqAmqp091Output) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRabbitmqAmqp091) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceRabbitmqAmqp091Output) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRabbitmqAmqp091) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceRabbitmqAmqp091Output) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRabbitmqAmqp091) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceRabbitmqAmqp091Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceRabbitmqAmqp091) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o GetResourceResourceRabbitmqAmqp091Output) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRabbitmqAmqp091) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceRabbitmqAmqp091Output) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRabbitmqAmqp091) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceRabbitmqAmqp091ArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceRabbitmqAmqp091ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceRabbitmqAmqp091)(nil)).Elem()
}

func (o GetResourceResourceRabbitmqAmqp091ArrayOutput) ToGetResourceResourceRabbitmqAmqp091ArrayOutput() GetResourceResourceRabbitmqAmqp091ArrayOutput {
	return o
}

func (o GetResourceResourceRabbitmqAmqp091ArrayOutput) ToGetResourceResourceRabbitmqAmqp091ArrayOutputWithContext(ctx context.Context) GetResourceResourceRabbitmqAmqp091ArrayOutput {
	return o
}

func (o GetResourceResourceRabbitmqAmqp091ArrayOutput) Index(i pulumi.IntInput) GetResourceResourceRabbitmqAmqp091Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceRabbitmqAmqp091 {
		return vs[0].([]GetResourceResourceRabbitmqAmqp091)[vs[1].(int)]
	}).(GetResourceResourceRabbitmqAmqp091Output)
}

type GetResourceResourceRawTcp struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceRawTcpInput is an input type that accepts GetResourceResourceRawTcpArgs and GetResourceResourceRawTcpOutput values.
// You can construct a concrete instance of `GetResourceResourceRawTcpInput` via:
//
//	GetResourceResourceRawTcpArgs{...}
type GetResourceResourceRawTcpInput interface {
	pulumi.Input

	ToGetResourceResourceRawTcpOutput() GetResourceResourceRawTcpOutput
	ToGetResourceResourceRawTcpOutputWithContext(context.Context) GetResourceResourceRawTcpOutput
}

type GetResourceResourceRawTcpArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceRawTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceRawTcp)(nil)).Elem()
}

func (i GetResourceResourceRawTcpArgs) ToGetResourceResourceRawTcpOutput() GetResourceResourceRawTcpOutput {
	return i.ToGetResourceResourceRawTcpOutputWithContext(context.Background())
}

func (i GetResourceResourceRawTcpArgs) ToGetResourceResourceRawTcpOutputWithContext(ctx context.Context) GetResourceResourceRawTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceRawTcpOutput)
}

// GetResourceResourceRawTcpArrayInput is an input type that accepts GetResourceResourceRawTcpArray and GetResourceResourceRawTcpArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceRawTcpArrayInput` via:
//
//	GetResourceResourceRawTcpArray{ GetResourceResourceRawTcpArgs{...} }
type GetResourceResourceRawTcpArrayInput interface {
	pulumi.Input

	ToGetResourceResourceRawTcpArrayOutput() GetResourceResourceRawTcpArrayOutput
	ToGetResourceResourceRawTcpArrayOutputWithContext(context.Context) GetResourceResourceRawTcpArrayOutput
}

type GetResourceResourceRawTcpArray []GetResourceResourceRawTcpInput

func (GetResourceResourceRawTcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceRawTcp)(nil)).Elem()
}

func (i GetResourceResourceRawTcpArray) ToGetResourceResourceRawTcpArrayOutput() GetResourceResourceRawTcpArrayOutput {
	return i.ToGetResourceResourceRawTcpArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceRawTcpArray) ToGetResourceResourceRawTcpArrayOutputWithContext(ctx context.Context) GetResourceResourceRawTcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceRawTcpArrayOutput)
}

type GetResourceResourceRawTcpOutput struct{ *pulumi.OutputState }

func (GetResourceResourceRawTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceRawTcp)(nil)).Elem()
}

func (o GetResourceResourceRawTcpOutput) ToGetResourceResourceRawTcpOutput() GetResourceResourceRawTcpOutput {
	return o
}

func (o GetResourceResourceRawTcpOutput) ToGetResourceResourceRawTcpOutputWithContext(ctx context.Context) GetResourceResourceRawTcpOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceRawTcpOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRawTcp) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceRawTcpOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRawTcp) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceRawTcpOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRawTcp) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceRawTcpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRawTcp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceRawTcpOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRawTcp) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceRawTcpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRawTcp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceRawTcpOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRawTcp) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceRawTcpOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRawTcp) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceRawTcpOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRawTcp) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceRawTcpOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRawTcp) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceRawTcpOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceRawTcp) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceRawTcpArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceRawTcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceRawTcp)(nil)).Elem()
}

func (o GetResourceResourceRawTcpArrayOutput) ToGetResourceResourceRawTcpArrayOutput() GetResourceResourceRawTcpArrayOutput {
	return o
}

func (o GetResourceResourceRawTcpArrayOutput) ToGetResourceResourceRawTcpArrayOutputWithContext(ctx context.Context) GetResourceResourceRawTcpArrayOutput {
	return o
}

func (o GetResourceResourceRawTcpArrayOutput) Index(i pulumi.IntInput) GetResourceResourceRawTcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceRawTcp {
		return vs[0].([]GetResourceResourceRawTcp)[vs[1].(int)]
	}).(GetResourceResourceRawTcpOutput)
}

type GetResourceResourceRdp struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// When set, network level authentication will not be used. May resolve unexpected authentication errors to older servers. When set, healthchecks cannot detect if a provided username / password pair is correct.
	DowngradeNlaConnections *bool `pulumi:"downgradeNlaConnections"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// When set, require a resource lock to access the resource to ensure it can only be used by one user at a time.
	LockRequired *bool `pulumi:"lockRequired"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceRdpInput is an input type that accepts GetResourceResourceRdpArgs and GetResourceResourceRdpOutput values.
// You can construct a concrete instance of `GetResourceResourceRdpInput` via:
//
//	GetResourceResourceRdpArgs{...}
type GetResourceResourceRdpInput interface {
	pulumi.Input

	ToGetResourceResourceRdpOutput() GetResourceResourceRdpOutput
	ToGetResourceResourceRdpOutputWithContext(context.Context) GetResourceResourceRdpOutput
}

type GetResourceResourceRdpArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// When set, network level authentication will not be used. May resolve unexpected authentication errors to older servers. When set, healthchecks cannot detect if a provided username / password pair is correct.
	DowngradeNlaConnections pulumi.BoolPtrInput `pulumi:"downgradeNlaConnections"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// When set, require a resource lock to access the resource to ensure it can only be used by one user at a time.
	LockRequired pulumi.BoolPtrInput `pulumi:"lockRequired"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceRdpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceRdp)(nil)).Elem()
}

func (i GetResourceResourceRdpArgs) ToGetResourceResourceRdpOutput() GetResourceResourceRdpOutput {
	return i.ToGetResourceResourceRdpOutputWithContext(context.Background())
}

func (i GetResourceResourceRdpArgs) ToGetResourceResourceRdpOutputWithContext(ctx context.Context) GetResourceResourceRdpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceRdpOutput)
}

// GetResourceResourceRdpArrayInput is an input type that accepts GetResourceResourceRdpArray and GetResourceResourceRdpArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceRdpArrayInput` via:
//
//	GetResourceResourceRdpArray{ GetResourceResourceRdpArgs{...} }
type GetResourceResourceRdpArrayInput interface {
	pulumi.Input

	ToGetResourceResourceRdpArrayOutput() GetResourceResourceRdpArrayOutput
	ToGetResourceResourceRdpArrayOutputWithContext(context.Context) GetResourceResourceRdpArrayOutput
}

type GetResourceResourceRdpArray []GetResourceResourceRdpInput

func (GetResourceResourceRdpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceRdp)(nil)).Elem()
}

func (i GetResourceResourceRdpArray) ToGetResourceResourceRdpArrayOutput() GetResourceResourceRdpArrayOutput {
	return i.ToGetResourceResourceRdpArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceRdpArray) ToGetResourceResourceRdpArrayOutputWithContext(ctx context.Context) GetResourceResourceRdpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceRdpArrayOutput)
}

type GetResourceResourceRdpOutput struct{ *pulumi.OutputState }

func (GetResourceResourceRdpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceRdp)(nil)).Elem()
}

func (o GetResourceResourceRdpOutput) ToGetResourceResourceRdpOutput() GetResourceResourceRdpOutput {
	return o
}

func (o GetResourceResourceRdpOutput) ToGetResourceResourceRdpOutputWithContext(ctx context.Context) GetResourceResourceRdpOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceRdpOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdp) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// When set, network level authentication will not be used. May resolve unexpected authentication errors to older servers. When set, healthchecks cannot detect if a provided username / password pair is correct.
func (o GetResourceResourceRdpOutput) DowngradeNlaConnections() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdp) *bool { return v.DowngradeNlaConnections }).(pulumi.BoolPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceRdpOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdp) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceRdpOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdp) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceRdpOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdp) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// When set, require a resource lock to access the resource to ensure it can only be used by one user at a time.
func (o GetResourceResourceRdpOutput) LockRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdp) *bool { return v.LockRequired }).(pulumi.BoolPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceRdpOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdp) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceRdpOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdp) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceRdpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceRdpOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdp) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceRdpOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdp) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceRdpOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdp) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceRdpOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdp) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceRdpOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceRdp) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceRdpOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdp) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceRdpArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceRdpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceRdp)(nil)).Elem()
}

func (o GetResourceResourceRdpArrayOutput) ToGetResourceResourceRdpArrayOutput() GetResourceResourceRdpArrayOutput {
	return o
}

func (o GetResourceResourceRdpArrayOutput) ToGetResourceResourceRdpArrayOutputWithContext(ctx context.Context) GetResourceResourceRdpArrayOutput {
	return o
}

func (o GetResourceResourceRdpArrayOutput) Index(i pulumi.IntInput) GetResourceResourceRdpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceRdp {
		return vs[0].([]GetResourceResourceRdp)[vs[1].(int)]
	}).(GetResourceResourceRdpOutput)
}

type GetResourceResourceRdpCert struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// When set, require a resource lock to access the resource to ensure it can only be used by one user at a time.
	LockRequired *bool `pulumi:"lockRequired"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceRdpCertInput is an input type that accepts GetResourceResourceRdpCertArgs and GetResourceResourceRdpCertOutput values.
// You can construct a concrete instance of `GetResourceResourceRdpCertInput` via:
//
//	GetResourceResourceRdpCertArgs{...}
type GetResourceResourceRdpCertInput interface {
	pulumi.Input

	ToGetResourceResourceRdpCertOutput() GetResourceResourceRdpCertOutput
	ToGetResourceResourceRdpCertOutputWithContext(context.Context) GetResourceResourceRdpCertOutput
}

type GetResourceResourceRdpCertArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// When set, require a resource lock to access the resource to ensure it can only be used by one user at a time.
	LockRequired pulumi.BoolPtrInput `pulumi:"lockRequired"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceRdpCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceRdpCert)(nil)).Elem()
}

func (i GetResourceResourceRdpCertArgs) ToGetResourceResourceRdpCertOutput() GetResourceResourceRdpCertOutput {
	return i.ToGetResourceResourceRdpCertOutputWithContext(context.Background())
}

func (i GetResourceResourceRdpCertArgs) ToGetResourceResourceRdpCertOutputWithContext(ctx context.Context) GetResourceResourceRdpCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceRdpCertOutput)
}

// GetResourceResourceRdpCertArrayInput is an input type that accepts GetResourceResourceRdpCertArray and GetResourceResourceRdpCertArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceRdpCertArrayInput` via:
//
//	GetResourceResourceRdpCertArray{ GetResourceResourceRdpCertArgs{...} }
type GetResourceResourceRdpCertArrayInput interface {
	pulumi.Input

	ToGetResourceResourceRdpCertArrayOutput() GetResourceResourceRdpCertArrayOutput
	ToGetResourceResourceRdpCertArrayOutputWithContext(context.Context) GetResourceResourceRdpCertArrayOutput
}

type GetResourceResourceRdpCertArray []GetResourceResourceRdpCertInput

func (GetResourceResourceRdpCertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceRdpCert)(nil)).Elem()
}

func (i GetResourceResourceRdpCertArray) ToGetResourceResourceRdpCertArrayOutput() GetResourceResourceRdpCertArrayOutput {
	return i.ToGetResourceResourceRdpCertArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceRdpCertArray) ToGetResourceResourceRdpCertArrayOutputWithContext(ctx context.Context) GetResourceResourceRdpCertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceRdpCertArrayOutput)
}

type GetResourceResourceRdpCertOutput struct{ *pulumi.OutputState }

func (GetResourceResourceRdpCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceRdpCert)(nil)).Elem()
}

func (o GetResourceResourceRdpCertOutput) ToGetResourceResourceRdpCertOutput() GetResourceResourceRdpCertOutput {
	return o
}

func (o GetResourceResourceRdpCertOutput) ToGetResourceResourceRdpCertOutputWithContext(ctx context.Context) GetResourceResourceRdpCertOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceRdpCertOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdpCert) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceRdpCertOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdpCert) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceRdpCertOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdpCert) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceRdpCertOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdpCert) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o GetResourceResourceRdpCertOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdpCert) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o GetResourceResourceRdpCertOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdpCert) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// When set, require a resource lock to access the resource to ensure it can only be used by one user at a time.
func (o GetResourceResourceRdpCertOutput) LockRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdpCert) *bool { return v.LockRequired }).(pulumi.BoolPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceRdpCertOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdpCert) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceRdpCertOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdpCert) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceRdpCertOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdpCert) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceRdpCertOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdpCert) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceRdpCertOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdpCert) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceRdpCertOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdpCert) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceRdpCertOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceRdpCert) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceRdpCertOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdpCert) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceRdpCertArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceRdpCertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceRdpCert)(nil)).Elem()
}

func (o GetResourceResourceRdpCertArrayOutput) ToGetResourceResourceRdpCertArrayOutput() GetResourceResourceRdpCertArrayOutput {
	return o
}

func (o GetResourceResourceRdpCertArrayOutput) ToGetResourceResourceRdpCertArrayOutputWithContext(ctx context.Context) GetResourceResourceRdpCertArrayOutput {
	return o
}

func (o GetResourceResourceRdpCertArrayOutput) Index(i pulumi.IntInput) GetResourceResourceRdpCertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceRdpCert {
		return vs[0].([]GetResourceResourceRdpCert)[vs[1].(int)]
	}).(GetResourceResourceRdpCertOutput)
}

type GetResourceResourceRdsPostgresIam struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region *string `pulumi:"region"`
	// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
	RoleAssumptionArn *string `pulumi:"roleAssumptionArn"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceRdsPostgresIamInput is an input type that accepts GetResourceResourceRdsPostgresIamArgs and GetResourceResourceRdsPostgresIamOutput values.
// You can construct a concrete instance of `GetResourceResourceRdsPostgresIamInput` via:
//
//	GetResourceResourceRdsPostgresIamArgs{...}
type GetResourceResourceRdsPostgresIamInput interface {
	pulumi.Input

	ToGetResourceResourceRdsPostgresIamOutput() GetResourceResourceRdsPostgresIamOutput
	ToGetResourceResourceRdsPostgresIamOutputWithContext(context.Context) GetResourceResourceRdsPostgresIamOutput
}

type GetResourceResourceRdsPostgresIamArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The AWS region to connect to.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
	RoleAssumptionArn pulumi.StringPtrInput `pulumi:"roleAssumptionArn"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceRdsPostgresIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceRdsPostgresIam)(nil)).Elem()
}

func (i GetResourceResourceRdsPostgresIamArgs) ToGetResourceResourceRdsPostgresIamOutput() GetResourceResourceRdsPostgresIamOutput {
	return i.ToGetResourceResourceRdsPostgresIamOutputWithContext(context.Background())
}

func (i GetResourceResourceRdsPostgresIamArgs) ToGetResourceResourceRdsPostgresIamOutputWithContext(ctx context.Context) GetResourceResourceRdsPostgresIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceRdsPostgresIamOutput)
}

// GetResourceResourceRdsPostgresIamArrayInput is an input type that accepts GetResourceResourceRdsPostgresIamArray and GetResourceResourceRdsPostgresIamArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceRdsPostgresIamArrayInput` via:
//
//	GetResourceResourceRdsPostgresIamArray{ GetResourceResourceRdsPostgresIamArgs{...} }
type GetResourceResourceRdsPostgresIamArrayInput interface {
	pulumi.Input

	ToGetResourceResourceRdsPostgresIamArrayOutput() GetResourceResourceRdsPostgresIamArrayOutput
	ToGetResourceResourceRdsPostgresIamArrayOutputWithContext(context.Context) GetResourceResourceRdsPostgresIamArrayOutput
}

type GetResourceResourceRdsPostgresIamArray []GetResourceResourceRdsPostgresIamInput

func (GetResourceResourceRdsPostgresIamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceRdsPostgresIam)(nil)).Elem()
}

func (i GetResourceResourceRdsPostgresIamArray) ToGetResourceResourceRdsPostgresIamArrayOutput() GetResourceResourceRdsPostgresIamArrayOutput {
	return i.ToGetResourceResourceRdsPostgresIamArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceRdsPostgresIamArray) ToGetResourceResourceRdsPostgresIamArrayOutputWithContext(ctx context.Context) GetResourceResourceRdsPostgresIamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceRdsPostgresIamArrayOutput)
}

type GetResourceResourceRdsPostgresIamOutput struct{ *pulumi.OutputState }

func (GetResourceResourceRdsPostgresIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceRdsPostgresIam)(nil)).Elem()
}

func (o GetResourceResourceRdsPostgresIamOutput) ToGetResourceResourceRdsPostgresIamOutput() GetResourceResourceRdsPostgresIamOutput {
	return o
}

func (o GetResourceResourceRdsPostgresIamOutput) ToGetResourceResourceRdsPostgresIamOutputWithContext(ctx context.Context) GetResourceResourceRdsPostgresIamOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceRdsPostgresIamOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdsPostgresIam) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceRdsPostgresIamOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdsPostgresIam) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceRdsPostgresIamOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdsPostgresIam) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceRdsPostgresIamOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdsPostgresIam) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceRdsPostgresIamOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdsPostgresIam) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceRdsPostgresIamOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdsPostgresIam) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o GetResourceResourceRdsPostgresIamOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdsPostgresIam) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceRdsPostgresIamOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdsPostgresIam) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceRdsPostgresIamOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdsPostgresIam) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceRdsPostgresIamOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdsPostgresIam) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The AWS region to connect to.
func (o GetResourceResourceRdsPostgresIamOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdsPostgresIam) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
func (o GetResourceResourceRdsPostgresIamOutput) RoleAssumptionArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdsPostgresIam) *string { return v.RoleAssumptionArn }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceRdsPostgresIamOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdsPostgresIam) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceRdsPostgresIamOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdsPostgresIam) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceRdsPostgresIamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceRdsPostgresIam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceRdsPostgresIamOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRdsPostgresIam) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceRdsPostgresIamArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceRdsPostgresIamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceRdsPostgresIam)(nil)).Elem()
}

func (o GetResourceResourceRdsPostgresIamArrayOutput) ToGetResourceResourceRdsPostgresIamArrayOutput() GetResourceResourceRdsPostgresIamArrayOutput {
	return o
}

func (o GetResourceResourceRdsPostgresIamArrayOutput) ToGetResourceResourceRdsPostgresIamArrayOutputWithContext(ctx context.Context) GetResourceResourceRdsPostgresIamArrayOutput {
	return o
}

func (o GetResourceResourceRdsPostgresIamArrayOutput) Index(i pulumi.IntInput) GetResourceResourceRdsPostgresIamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceRdsPostgresIam {
		return vs[0].([]GetResourceResourceRdsPostgresIam)[vs[1].(int)]
	}).(GetResourceResourceRdsPostgresIamOutput)
}

type GetResourceResourceRedi struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired *bool `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceRediInput is an input type that accepts GetResourceResourceRediArgs and GetResourceResourceRediOutput values.
// You can construct a concrete instance of `GetResourceResourceRediInput` via:
//
//	GetResourceResourceRediArgs{...}
type GetResourceResourceRediInput interface {
	pulumi.Input

	ToGetResourceResourceRediOutput() GetResourceResourceRediOutput
	ToGetResourceResourceRediOutputWithContext(context.Context) GetResourceResourceRediOutput
}

type GetResourceResourceRediArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If set, TLS must be used to connect to this resource.
	TlsRequired pulumi.BoolPtrInput `pulumi:"tlsRequired"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceRediArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceRedi)(nil)).Elem()
}

func (i GetResourceResourceRediArgs) ToGetResourceResourceRediOutput() GetResourceResourceRediOutput {
	return i.ToGetResourceResourceRediOutputWithContext(context.Background())
}

func (i GetResourceResourceRediArgs) ToGetResourceResourceRediOutputWithContext(ctx context.Context) GetResourceResourceRediOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceRediOutput)
}

// GetResourceResourceRediArrayInput is an input type that accepts GetResourceResourceRediArray and GetResourceResourceRediArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceRediArrayInput` via:
//
//	GetResourceResourceRediArray{ GetResourceResourceRediArgs{...} }
type GetResourceResourceRediArrayInput interface {
	pulumi.Input

	ToGetResourceResourceRediArrayOutput() GetResourceResourceRediArrayOutput
	ToGetResourceResourceRediArrayOutputWithContext(context.Context) GetResourceResourceRediArrayOutput
}

type GetResourceResourceRediArray []GetResourceResourceRediInput

func (GetResourceResourceRediArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceRedi)(nil)).Elem()
}

func (i GetResourceResourceRediArray) ToGetResourceResourceRediArrayOutput() GetResourceResourceRediArrayOutput {
	return i.ToGetResourceResourceRediArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceRediArray) ToGetResourceResourceRediArrayOutputWithContext(ctx context.Context) GetResourceResourceRediArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceRediArrayOutput)
}

type GetResourceResourceRediOutput struct{ *pulumi.OutputState }

func (GetResourceResourceRediOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceRedi)(nil)).Elem()
}

func (o GetResourceResourceRediOutput) ToGetResourceResourceRediOutput() GetResourceResourceRediOutput {
	return o
}

func (o GetResourceResourceRediOutput) ToGetResourceResourceRediOutputWithContext(ctx context.Context) GetResourceResourceRediOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceRediOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedi) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceRediOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedi) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceRediOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedi) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceRediOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedi) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceRediOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedi) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceRediOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedi) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceRediOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedi) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceRediOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedi) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceRediOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedi) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceRediOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedi) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceRediOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedi) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceRediOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceRedi) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If set, TLS must be used to connect to this resource.
func (o GetResourceResourceRediOutput) TlsRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedi) *bool { return v.TlsRequired }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceRediOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedi) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceRediArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceRediArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceRedi)(nil)).Elem()
}

func (o GetResourceResourceRediArrayOutput) ToGetResourceResourceRediArrayOutput() GetResourceResourceRediArrayOutput {
	return o
}

func (o GetResourceResourceRediArrayOutput) ToGetResourceResourceRediArrayOutputWithContext(ctx context.Context) GetResourceResourceRediArrayOutput {
	return o
}

func (o GetResourceResourceRediArrayOutput) Index(i pulumi.IntInput) GetResourceResourceRediOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceRedi {
		return vs[0].([]GetResourceResourceRedi)[vs[1].(int)]
	}).(GetResourceResourceRediOutput)
}

type GetResourceResourceRedshift struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceRedshiftInput is an input type that accepts GetResourceResourceRedshiftArgs and GetResourceResourceRedshiftOutput values.
// You can construct a concrete instance of `GetResourceResourceRedshiftInput` via:
//
//	GetResourceResourceRedshiftArgs{...}
type GetResourceResourceRedshiftInput interface {
	pulumi.Input

	ToGetResourceResourceRedshiftOutput() GetResourceResourceRedshiftOutput
	ToGetResourceResourceRedshiftOutputWithContext(context.Context) GetResourceResourceRedshiftOutput
}

type GetResourceResourceRedshiftArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceRedshiftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceRedshift)(nil)).Elem()
}

func (i GetResourceResourceRedshiftArgs) ToGetResourceResourceRedshiftOutput() GetResourceResourceRedshiftOutput {
	return i.ToGetResourceResourceRedshiftOutputWithContext(context.Background())
}

func (i GetResourceResourceRedshiftArgs) ToGetResourceResourceRedshiftOutputWithContext(ctx context.Context) GetResourceResourceRedshiftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceRedshiftOutput)
}

// GetResourceResourceRedshiftArrayInput is an input type that accepts GetResourceResourceRedshiftArray and GetResourceResourceRedshiftArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceRedshiftArrayInput` via:
//
//	GetResourceResourceRedshiftArray{ GetResourceResourceRedshiftArgs{...} }
type GetResourceResourceRedshiftArrayInput interface {
	pulumi.Input

	ToGetResourceResourceRedshiftArrayOutput() GetResourceResourceRedshiftArrayOutput
	ToGetResourceResourceRedshiftArrayOutputWithContext(context.Context) GetResourceResourceRedshiftArrayOutput
}

type GetResourceResourceRedshiftArray []GetResourceResourceRedshiftInput

func (GetResourceResourceRedshiftArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceRedshift)(nil)).Elem()
}

func (i GetResourceResourceRedshiftArray) ToGetResourceResourceRedshiftArrayOutput() GetResourceResourceRedshiftArrayOutput {
	return i.ToGetResourceResourceRedshiftArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceRedshiftArray) ToGetResourceResourceRedshiftArrayOutputWithContext(ctx context.Context) GetResourceResourceRedshiftArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceRedshiftArrayOutput)
}

type GetResourceResourceRedshiftOutput struct{ *pulumi.OutputState }

func (GetResourceResourceRedshiftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceRedshift)(nil)).Elem()
}

func (o GetResourceResourceRedshiftOutput) ToGetResourceResourceRedshiftOutput() GetResourceResourceRedshiftOutput {
	return o
}

func (o GetResourceResourceRedshiftOutput) ToGetResourceResourceRedshiftOutputWithContext(ctx context.Context) GetResourceResourceRedshiftOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceRedshiftOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedshift) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceRedshiftOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedshift) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceRedshiftOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedshift) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceRedshiftOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedshift) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceRedshiftOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedshift) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceRedshiftOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedshift) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o GetResourceResourceRedshiftOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedshift) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceRedshiftOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedshift) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceRedshiftOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedshift) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceRedshiftOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedshift) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceRedshiftOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedshift) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceRedshiftOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedshift) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceRedshiftOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedshift) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceRedshiftOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceRedshift) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceRedshiftOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceRedshift) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceRedshiftArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceRedshiftArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceRedshift)(nil)).Elem()
}

func (o GetResourceResourceRedshiftArrayOutput) ToGetResourceResourceRedshiftArrayOutput() GetResourceResourceRedshiftArrayOutput {
	return o
}

func (o GetResourceResourceRedshiftArrayOutput) ToGetResourceResourceRedshiftArrayOutputWithContext(ctx context.Context) GetResourceResourceRedshiftArrayOutput {
	return o
}

func (o GetResourceResourceRedshiftArrayOutput) Index(i pulumi.IntInput) GetResourceResourceRedshiftOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceRedshift {
		return vs[0].([]GetResourceResourceRedshift)[vs[1].(int)]
	}).(GetResourceResourceRedshiftOutput)
}

type GetResourceResourceSingleStore struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth *bool `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames *bool `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceSingleStoreInput is an input type that accepts GetResourceResourceSingleStoreArgs and GetResourceResourceSingleStoreOutput values.
// You can construct a concrete instance of `GetResourceResourceSingleStoreInput` via:
//
//	GetResourceResourceSingleStoreArgs{...}
type GetResourceResourceSingleStoreInput interface {
	pulumi.Input

	ToGetResourceResourceSingleStoreOutput() GetResourceResourceSingleStoreOutput
	ToGetResourceResourceSingleStoreOutputWithContext(context.Context) GetResourceResourceSingleStoreOutput
}

type GetResourceResourceSingleStoreArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
	RequireNativeAuth pulumi.BoolPtrInput `pulumi:"requireNativeAuth"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// If true, appends the hostname to the username when hitting a database.azure.com address
	UseAzureSingleServerUsernames pulumi.BoolPtrInput `pulumi:"useAzureSingleServerUsernames"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceSingleStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSingleStore)(nil)).Elem()
}

func (i GetResourceResourceSingleStoreArgs) ToGetResourceResourceSingleStoreOutput() GetResourceResourceSingleStoreOutput {
	return i.ToGetResourceResourceSingleStoreOutputWithContext(context.Background())
}

func (i GetResourceResourceSingleStoreArgs) ToGetResourceResourceSingleStoreOutputWithContext(ctx context.Context) GetResourceResourceSingleStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSingleStoreOutput)
}

// GetResourceResourceSingleStoreArrayInput is an input type that accepts GetResourceResourceSingleStoreArray and GetResourceResourceSingleStoreArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceSingleStoreArrayInput` via:
//
//	GetResourceResourceSingleStoreArray{ GetResourceResourceSingleStoreArgs{...} }
type GetResourceResourceSingleStoreArrayInput interface {
	pulumi.Input

	ToGetResourceResourceSingleStoreArrayOutput() GetResourceResourceSingleStoreArrayOutput
	ToGetResourceResourceSingleStoreArrayOutputWithContext(context.Context) GetResourceResourceSingleStoreArrayOutput
}

type GetResourceResourceSingleStoreArray []GetResourceResourceSingleStoreInput

func (GetResourceResourceSingleStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSingleStore)(nil)).Elem()
}

func (i GetResourceResourceSingleStoreArray) ToGetResourceResourceSingleStoreArrayOutput() GetResourceResourceSingleStoreArrayOutput {
	return i.ToGetResourceResourceSingleStoreArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceSingleStoreArray) ToGetResourceResourceSingleStoreArrayOutputWithContext(ctx context.Context) GetResourceResourceSingleStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSingleStoreArrayOutput)
}

type GetResourceResourceSingleStoreOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSingleStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSingleStore)(nil)).Elem()
}

func (o GetResourceResourceSingleStoreOutput) ToGetResourceResourceSingleStoreOutput() GetResourceResourceSingleStoreOutput {
	return o
}

func (o GetResourceResourceSingleStoreOutput) ToGetResourceResourceSingleStoreOutputWithContext(ctx context.Context) GetResourceResourceSingleStoreOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceSingleStoreOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSingleStore) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceSingleStoreOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSingleStore) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceSingleStoreOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSingleStore) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSingleStoreOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSingleStore) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceSingleStoreOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSingleStore) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceSingleStoreOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSingleStore) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceSingleStoreOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSingleStore) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSingleStoreOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSingleStore) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceSingleStoreOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSingleStore) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceSingleStoreOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSingleStore) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// Whether native auth (mysql_native_password) is used for all connections (for backwards compatibility)
func (o GetResourceResourceSingleStoreOutput) RequireNativeAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSingleStore) *bool { return v.RequireNativeAuth }).(pulumi.BoolPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceSingleStoreOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSingleStore) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceSingleStoreOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSingleStore) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceSingleStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceSingleStore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// If true, appends the hostname to the username when hitting a database.azure.com address
func (o GetResourceResourceSingleStoreOutput) UseAzureSingleServerUsernames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSingleStore) *bool { return v.UseAzureSingleServerUsernames }).(pulumi.BoolPtrOutput)
}

// The username to authenticate with.
func (o GetResourceResourceSingleStoreOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSingleStore) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceSingleStoreArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSingleStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSingleStore)(nil)).Elem()
}

func (o GetResourceResourceSingleStoreArrayOutput) ToGetResourceResourceSingleStoreArrayOutput() GetResourceResourceSingleStoreArrayOutput {
	return o
}

func (o GetResourceResourceSingleStoreArrayOutput) ToGetResourceResourceSingleStoreArrayOutputWithContext(ctx context.Context) GetResourceResourceSingleStoreArrayOutput {
	return o
}

func (o GetResourceResourceSingleStoreArrayOutput) Index(i pulumi.IntInput) GetResourceResourceSingleStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceSingleStore {
		return vs[0].([]GetResourceResourceSingleStore)[vs[1].(int)]
	}).(GetResourceResourceSingleStoreOutput)
}

type GetResourceResourceSnowflake struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The Schema to use to direct initial requests.
	Schema *string `pulumi:"schema"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceSnowflakeInput is an input type that accepts GetResourceResourceSnowflakeArgs and GetResourceResourceSnowflakeOutput values.
// You can construct a concrete instance of `GetResourceResourceSnowflakeInput` via:
//
//	GetResourceResourceSnowflakeArgs{...}
type GetResourceResourceSnowflakeInput interface {
	pulumi.Input

	ToGetResourceResourceSnowflakeOutput() GetResourceResourceSnowflakeOutput
	ToGetResourceResourceSnowflakeOutputWithContext(context.Context) GetResourceResourceSnowflakeOutput
}

type GetResourceResourceSnowflakeArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The Schema to use to direct initial requests.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceSnowflakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSnowflake)(nil)).Elem()
}

func (i GetResourceResourceSnowflakeArgs) ToGetResourceResourceSnowflakeOutput() GetResourceResourceSnowflakeOutput {
	return i.ToGetResourceResourceSnowflakeOutputWithContext(context.Background())
}

func (i GetResourceResourceSnowflakeArgs) ToGetResourceResourceSnowflakeOutputWithContext(ctx context.Context) GetResourceResourceSnowflakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSnowflakeOutput)
}

// GetResourceResourceSnowflakeArrayInput is an input type that accepts GetResourceResourceSnowflakeArray and GetResourceResourceSnowflakeArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceSnowflakeArrayInput` via:
//
//	GetResourceResourceSnowflakeArray{ GetResourceResourceSnowflakeArgs{...} }
type GetResourceResourceSnowflakeArrayInput interface {
	pulumi.Input

	ToGetResourceResourceSnowflakeArrayOutput() GetResourceResourceSnowflakeArrayOutput
	ToGetResourceResourceSnowflakeArrayOutputWithContext(context.Context) GetResourceResourceSnowflakeArrayOutput
}

type GetResourceResourceSnowflakeArray []GetResourceResourceSnowflakeInput

func (GetResourceResourceSnowflakeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSnowflake)(nil)).Elem()
}

func (i GetResourceResourceSnowflakeArray) ToGetResourceResourceSnowflakeArrayOutput() GetResourceResourceSnowflakeArrayOutput {
	return i.ToGetResourceResourceSnowflakeArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceSnowflakeArray) ToGetResourceResourceSnowflakeArrayOutputWithContext(ctx context.Context) GetResourceResourceSnowflakeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSnowflakeArrayOutput)
}

type GetResourceResourceSnowflakeOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSnowflakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSnowflake)(nil)).Elem()
}

func (o GetResourceResourceSnowflakeOutput) ToGetResourceResourceSnowflakeOutput() GetResourceResourceSnowflakeOutput {
	return o
}

func (o GetResourceResourceSnowflakeOutput) ToGetResourceResourceSnowflakeOutputWithContext(ctx context.Context) GetResourceResourceSnowflakeOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceSnowflakeOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowflake) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceSnowflakeOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowflake) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceSnowflakeOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowflake) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSnowflakeOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowflake) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceSnowflakeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowflake) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceSnowflakeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowflake) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceSnowflakeOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowflake) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceSnowflakeOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowflake) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceSnowflakeOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowflake) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The Schema to use to direct initial requests.
func (o GetResourceResourceSnowflakeOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowflake) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceSnowflakeOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowflake) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceSnowflakeOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowflake) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceSnowflakeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceSnowflake) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceSnowflakeOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowflake) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceSnowflakeArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSnowflakeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSnowflake)(nil)).Elem()
}

func (o GetResourceResourceSnowflakeArrayOutput) ToGetResourceResourceSnowflakeArrayOutput() GetResourceResourceSnowflakeArrayOutput {
	return o
}

func (o GetResourceResourceSnowflakeArrayOutput) ToGetResourceResourceSnowflakeArrayOutputWithContext(ctx context.Context) GetResourceResourceSnowflakeArrayOutput {
	return o
}

func (o GetResourceResourceSnowflakeArrayOutput) Index(i pulumi.IntInput) GetResourceResourceSnowflakeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceSnowflake {
		return vs[0].([]GetResourceResourceSnowflake)[vs[1].(int)]
	}).(GetResourceResourceSnowflakeOutput)
}

type GetResourceResourceSnowsight struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The StrongDM user email to use for healthchecks.
	HealthcheckUsername *string `pulumi:"healthcheckUsername"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The Metadata for your snowflake IDP integration
	SamlMetadata *string `pulumi:"samlMetadata"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetResourceResourceSnowsightInput is an input type that accepts GetResourceResourceSnowsightArgs and GetResourceResourceSnowsightOutput values.
// You can construct a concrete instance of `GetResourceResourceSnowsightInput` via:
//
//	GetResourceResourceSnowsightArgs{...}
type GetResourceResourceSnowsightInput interface {
	pulumi.Input

	ToGetResourceResourceSnowsightOutput() GetResourceResourceSnowsightOutput
	ToGetResourceResourceSnowsightOutputWithContext(context.Context) GetResourceResourceSnowsightOutput
}

type GetResourceResourceSnowsightArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The StrongDM user email to use for healthchecks.
	HealthcheckUsername pulumi.StringPtrInput `pulumi:"healthcheckUsername"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The Metadata for your snowflake IDP integration
	SamlMetadata pulumi.StringPtrInput `pulumi:"samlMetadata"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetResourceResourceSnowsightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSnowsight)(nil)).Elem()
}

func (i GetResourceResourceSnowsightArgs) ToGetResourceResourceSnowsightOutput() GetResourceResourceSnowsightOutput {
	return i.ToGetResourceResourceSnowsightOutputWithContext(context.Background())
}

func (i GetResourceResourceSnowsightArgs) ToGetResourceResourceSnowsightOutputWithContext(ctx context.Context) GetResourceResourceSnowsightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSnowsightOutput)
}

// GetResourceResourceSnowsightArrayInput is an input type that accepts GetResourceResourceSnowsightArray and GetResourceResourceSnowsightArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceSnowsightArrayInput` via:
//
//	GetResourceResourceSnowsightArray{ GetResourceResourceSnowsightArgs{...} }
type GetResourceResourceSnowsightArrayInput interface {
	pulumi.Input

	ToGetResourceResourceSnowsightArrayOutput() GetResourceResourceSnowsightArrayOutput
	ToGetResourceResourceSnowsightArrayOutputWithContext(context.Context) GetResourceResourceSnowsightArrayOutput
}

type GetResourceResourceSnowsightArray []GetResourceResourceSnowsightInput

func (GetResourceResourceSnowsightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSnowsight)(nil)).Elem()
}

func (i GetResourceResourceSnowsightArray) ToGetResourceResourceSnowsightArrayOutput() GetResourceResourceSnowsightArrayOutput {
	return i.ToGetResourceResourceSnowsightArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceSnowsightArray) ToGetResourceResourceSnowsightArrayOutputWithContext(ctx context.Context) GetResourceResourceSnowsightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSnowsightArrayOutput)
}

type GetResourceResourceSnowsightOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSnowsightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSnowsight)(nil)).Elem()
}

func (o GetResourceResourceSnowsightOutput) ToGetResourceResourceSnowsightOutput() GetResourceResourceSnowsightOutput {
	return o
}

func (o GetResourceResourceSnowsightOutput) ToGetResourceResourceSnowsightOutputWithContext(ctx context.Context) GetResourceResourceSnowsightOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceSnowsightOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowsight) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceSnowsightOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowsight) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The StrongDM user email to use for healthchecks.
func (o GetResourceResourceSnowsightOutput) HealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowsight) *string { return v.HealthcheckUsername }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceSnowsightOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowsight) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceSnowsightOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowsight) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceSnowsightOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowsight) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceSnowsightOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowsight) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The Metadata for your snowflake IDP integration
func (o GetResourceResourceSnowsightOutput) SamlMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowsight) *string { return v.SamlMetadata }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceSnowsightOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowsight) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceSnowsightOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSnowsight) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceSnowsightOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceSnowsight) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetResourceResourceSnowsightArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSnowsightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSnowsight)(nil)).Elem()
}

func (o GetResourceResourceSnowsightArrayOutput) ToGetResourceResourceSnowsightArrayOutput() GetResourceResourceSnowsightArrayOutput {
	return o
}

func (o GetResourceResourceSnowsightArrayOutput) ToGetResourceResourceSnowsightArrayOutputWithContext(ctx context.Context) GetResourceResourceSnowsightArrayOutput {
	return o
}

func (o GetResourceResourceSnowsightArrayOutput) Index(i pulumi.IntInput) GetResourceResourceSnowsightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceSnowsight {
		return vs[0].([]GetResourceResourceSnowsight)[vs[1].(int)]
	}).(GetResourceResourceSnowsightOutput)
}

type GetResourceResourceSqlServer struct {
	// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
	AllowDeprecatedEncryption *bool `pulumi:"allowDeprecatedEncryption"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The Schema to use to direct initial requests.
	Schema *string `pulumi:"schema"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceSqlServerInput is an input type that accepts GetResourceResourceSqlServerArgs and GetResourceResourceSqlServerOutput values.
// You can construct a concrete instance of `GetResourceResourceSqlServerInput` via:
//
//	GetResourceResourceSqlServerArgs{...}
type GetResourceResourceSqlServerInput interface {
	pulumi.Input

	ToGetResourceResourceSqlServerOutput() GetResourceResourceSqlServerOutput
	ToGetResourceResourceSqlServerOutputWithContext(context.Context) GetResourceResourceSqlServerOutput
}

type GetResourceResourceSqlServerArgs struct {
	// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
	AllowDeprecatedEncryption pulumi.BoolPtrInput `pulumi:"allowDeprecatedEncryption"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The Schema to use to direct initial requests.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceSqlServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSqlServer)(nil)).Elem()
}

func (i GetResourceResourceSqlServerArgs) ToGetResourceResourceSqlServerOutput() GetResourceResourceSqlServerOutput {
	return i.ToGetResourceResourceSqlServerOutputWithContext(context.Background())
}

func (i GetResourceResourceSqlServerArgs) ToGetResourceResourceSqlServerOutputWithContext(ctx context.Context) GetResourceResourceSqlServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSqlServerOutput)
}

// GetResourceResourceSqlServerArrayInput is an input type that accepts GetResourceResourceSqlServerArray and GetResourceResourceSqlServerArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceSqlServerArrayInput` via:
//
//	GetResourceResourceSqlServerArray{ GetResourceResourceSqlServerArgs{...} }
type GetResourceResourceSqlServerArrayInput interface {
	pulumi.Input

	ToGetResourceResourceSqlServerArrayOutput() GetResourceResourceSqlServerArrayOutput
	ToGetResourceResourceSqlServerArrayOutputWithContext(context.Context) GetResourceResourceSqlServerArrayOutput
}

type GetResourceResourceSqlServerArray []GetResourceResourceSqlServerInput

func (GetResourceResourceSqlServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSqlServer)(nil)).Elem()
}

func (i GetResourceResourceSqlServerArray) ToGetResourceResourceSqlServerArrayOutput() GetResourceResourceSqlServerArrayOutput {
	return i.ToGetResourceResourceSqlServerArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceSqlServerArray) ToGetResourceResourceSqlServerArrayOutputWithContext(ctx context.Context) GetResourceResourceSqlServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSqlServerArrayOutput)
}

type GetResourceResourceSqlServerOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSqlServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSqlServer)(nil)).Elem()
}

func (o GetResourceResourceSqlServerOutput) ToGetResourceResourceSqlServerOutput() GetResourceResourceSqlServerOutput {
	return o
}

func (o GetResourceResourceSqlServerOutput) ToGetResourceResourceSqlServerOutputWithContext(ctx context.Context) GetResourceResourceSqlServerOutput {
	return o
}

// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
func (o GetResourceResourceSqlServerOutput) AllowDeprecatedEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServer) *bool { return v.AllowDeprecatedEncryption }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceSqlServerOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServer) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceSqlServerOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServer) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceSqlServerOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServer) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSqlServerOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServer) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceSqlServerOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServer) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceSqlServerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServer) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o GetResourceResourceSqlServerOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServer) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceSqlServerOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServer) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSqlServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceSqlServerOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServer) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceSqlServerOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServer) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The Schema to use to direct initial requests.
func (o GetResourceResourceSqlServerOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServer) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceSqlServerOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServer) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceSqlServerOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServer) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceSqlServerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServer) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceSqlServerOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServer) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceSqlServerArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSqlServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSqlServer)(nil)).Elem()
}

func (o GetResourceResourceSqlServerArrayOutput) ToGetResourceResourceSqlServerArrayOutput() GetResourceResourceSqlServerArrayOutput {
	return o
}

func (o GetResourceResourceSqlServerArrayOutput) ToGetResourceResourceSqlServerArrayOutputWithContext(ctx context.Context) GetResourceResourceSqlServerArrayOutput {
	return o
}

func (o GetResourceResourceSqlServerArrayOutput) Index(i pulumi.IntInput) GetResourceResourceSqlServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceSqlServer {
		return vs[0].([]GetResourceResourceSqlServer)[vs[1].(int)]
	}).(GetResourceResourceSqlServerOutput)
}

type GetResourceResourceSqlServerAzureAd struct {
	// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
	AllowDeprecatedEncryption *bool `pulumi:"allowDeprecatedEncryption"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The Azure AD application (client) ID with which to authenticate.
	ClientId *string `pulumi:"clientId"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The Schema to use to direct initial requests.
	Schema *string `pulumi:"schema"`
	// The Azure AD client secret (application password) with which to authenticate.
	Secret *string `pulumi:"secret"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The Azure AD directory (tenant) ID with which to authenticate.
	// * sql_server_kerberos_ad:
	TenantId *string `pulumi:"tenantId"`
}

// GetResourceResourceSqlServerAzureAdInput is an input type that accepts GetResourceResourceSqlServerAzureAdArgs and GetResourceResourceSqlServerAzureAdOutput values.
// You can construct a concrete instance of `GetResourceResourceSqlServerAzureAdInput` via:
//
//	GetResourceResourceSqlServerAzureAdArgs{...}
type GetResourceResourceSqlServerAzureAdInput interface {
	pulumi.Input

	ToGetResourceResourceSqlServerAzureAdOutput() GetResourceResourceSqlServerAzureAdOutput
	ToGetResourceResourceSqlServerAzureAdOutputWithContext(context.Context) GetResourceResourceSqlServerAzureAdOutput
}

type GetResourceResourceSqlServerAzureAdArgs struct {
	// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
	AllowDeprecatedEncryption pulumi.BoolPtrInput `pulumi:"allowDeprecatedEncryption"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The Azure AD application (client) ID with which to authenticate.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The Schema to use to direct initial requests.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// The Azure AD client secret (application password) with which to authenticate.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The Azure AD directory (tenant) ID with which to authenticate.
	// * sql_server_kerberos_ad:
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (GetResourceResourceSqlServerAzureAdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSqlServerAzureAd)(nil)).Elem()
}

func (i GetResourceResourceSqlServerAzureAdArgs) ToGetResourceResourceSqlServerAzureAdOutput() GetResourceResourceSqlServerAzureAdOutput {
	return i.ToGetResourceResourceSqlServerAzureAdOutputWithContext(context.Background())
}

func (i GetResourceResourceSqlServerAzureAdArgs) ToGetResourceResourceSqlServerAzureAdOutputWithContext(ctx context.Context) GetResourceResourceSqlServerAzureAdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSqlServerAzureAdOutput)
}

// GetResourceResourceSqlServerAzureAdArrayInput is an input type that accepts GetResourceResourceSqlServerAzureAdArray and GetResourceResourceSqlServerAzureAdArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceSqlServerAzureAdArrayInput` via:
//
//	GetResourceResourceSqlServerAzureAdArray{ GetResourceResourceSqlServerAzureAdArgs{...} }
type GetResourceResourceSqlServerAzureAdArrayInput interface {
	pulumi.Input

	ToGetResourceResourceSqlServerAzureAdArrayOutput() GetResourceResourceSqlServerAzureAdArrayOutput
	ToGetResourceResourceSqlServerAzureAdArrayOutputWithContext(context.Context) GetResourceResourceSqlServerAzureAdArrayOutput
}

type GetResourceResourceSqlServerAzureAdArray []GetResourceResourceSqlServerAzureAdInput

func (GetResourceResourceSqlServerAzureAdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSqlServerAzureAd)(nil)).Elem()
}

func (i GetResourceResourceSqlServerAzureAdArray) ToGetResourceResourceSqlServerAzureAdArrayOutput() GetResourceResourceSqlServerAzureAdArrayOutput {
	return i.ToGetResourceResourceSqlServerAzureAdArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceSqlServerAzureAdArray) ToGetResourceResourceSqlServerAzureAdArrayOutputWithContext(ctx context.Context) GetResourceResourceSqlServerAzureAdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSqlServerAzureAdArrayOutput)
}

type GetResourceResourceSqlServerAzureAdOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSqlServerAzureAdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSqlServerAzureAd)(nil)).Elem()
}

func (o GetResourceResourceSqlServerAzureAdOutput) ToGetResourceResourceSqlServerAzureAdOutput() GetResourceResourceSqlServerAzureAdOutput {
	return o
}

func (o GetResourceResourceSqlServerAzureAdOutput) ToGetResourceResourceSqlServerAzureAdOutputWithContext(ctx context.Context) GetResourceResourceSqlServerAzureAdOutput {
	return o
}

// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
func (o GetResourceResourceSqlServerAzureAdOutput) AllowDeprecatedEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) *bool { return v.AllowDeprecatedEncryption }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceSqlServerAzureAdOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The Azure AD application (client) ID with which to authenticate.
func (o GetResourceResourceSqlServerAzureAdOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceSqlServerAzureAdOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceSqlServerAzureAdOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSqlServerAzureAdOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceSqlServerAzureAdOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceSqlServerAzureAdOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o GetResourceResourceSqlServerAzureAdOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSqlServerAzureAdOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceSqlServerAzureAdOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceSqlServerAzureAdOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The Schema to use to direct initial requests.
func (o GetResourceResourceSqlServerAzureAdOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// The Azure AD client secret (application password) with which to authenticate.
func (o GetResourceResourceSqlServerAzureAdOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceSqlServerAzureAdOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceSqlServerAzureAdOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceSqlServerAzureAdOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The Azure AD directory (tenant) ID with which to authenticate.
// * sql_server_kerberos_ad:
func (o GetResourceResourceSqlServerAzureAdOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerAzureAd) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type GetResourceResourceSqlServerAzureAdArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSqlServerAzureAdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSqlServerAzureAd)(nil)).Elem()
}

func (o GetResourceResourceSqlServerAzureAdArrayOutput) ToGetResourceResourceSqlServerAzureAdArrayOutput() GetResourceResourceSqlServerAzureAdArrayOutput {
	return o
}

func (o GetResourceResourceSqlServerAzureAdArrayOutput) ToGetResourceResourceSqlServerAzureAdArrayOutputWithContext(ctx context.Context) GetResourceResourceSqlServerAzureAdArrayOutput {
	return o
}

func (o GetResourceResourceSqlServerAzureAdArrayOutput) Index(i pulumi.IntInput) GetResourceResourceSqlServerAzureAdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceSqlServerAzureAd {
		return vs[0].([]GetResourceResourceSqlServerAzureAd)[vs[1].(int)]
	}).(GetResourceResourceSqlServerAzureAdOutput)
}

type GetResourceResourceSqlServerKerberosAd struct {
	// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
	AllowDeprecatedEncryption *bool `pulumi:"allowDeprecatedEncryption"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// The keytab file in base64 format containing an entry with the principal name (username@realm) and key version number with which to authenticate.
	Keytab *string `pulumi:"keytab"`
	// The Kerberos 5 configuration file (krb5.conf) specifying the Active Directory server (KDC) for the configured realm.
	KrbConfig *string `pulumi:"krbConfig"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase *bool `pulumi:"overrideDatabase"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The Active Directory domain (realm) to which the configured username belongs.
	Realm *string `pulumi:"realm"`
	// The Schema to use to direct initial requests.
	Schema *string `pulumi:"schema"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// The Service Principal Name of the Microsoft SQL Server instance in Active Directory.
	ServerSpn *string `pulumi:"serverSpn"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceSqlServerKerberosAdInput is an input type that accepts GetResourceResourceSqlServerKerberosAdArgs and GetResourceResourceSqlServerKerberosAdOutput values.
// You can construct a concrete instance of `GetResourceResourceSqlServerKerberosAdInput` via:
//
//	GetResourceResourceSqlServerKerberosAdArgs{...}
type GetResourceResourceSqlServerKerberosAdInput interface {
	pulumi.Input

	ToGetResourceResourceSqlServerKerberosAdOutput() GetResourceResourceSqlServerKerberosAdOutput
	ToGetResourceResourceSqlServerKerberosAdOutputWithContext(context.Context) GetResourceResourceSqlServerKerberosAdOutput
}

type GetResourceResourceSqlServerKerberosAdArgs struct {
	// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
	AllowDeprecatedEncryption pulumi.BoolPtrInput `pulumi:"allowDeprecatedEncryption"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The keytab file in base64 format containing an entry with the principal name (username@realm) and key version number with which to authenticate.
	Keytab pulumi.StringPtrInput `pulumi:"keytab"`
	// The Kerberos 5 configuration file (krb5.conf) specifying the Active Directory server (KDC) for the configured realm.
	KrbConfig pulumi.StringPtrInput `pulumi:"krbConfig"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
	OverrideDatabase pulumi.BoolPtrInput `pulumi:"overrideDatabase"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The Active Directory domain (realm) to which the configured username belongs.
	Realm pulumi.StringPtrInput `pulumi:"realm"`
	// The Schema to use to direct initial requests.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// The Service Principal Name of the Microsoft SQL Server instance in Active Directory.
	ServerSpn pulumi.StringPtrInput `pulumi:"serverSpn"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceSqlServerKerberosAdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSqlServerKerberosAd)(nil)).Elem()
}

func (i GetResourceResourceSqlServerKerberosAdArgs) ToGetResourceResourceSqlServerKerberosAdOutput() GetResourceResourceSqlServerKerberosAdOutput {
	return i.ToGetResourceResourceSqlServerKerberosAdOutputWithContext(context.Background())
}

func (i GetResourceResourceSqlServerKerberosAdArgs) ToGetResourceResourceSqlServerKerberosAdOutputWithContext(ctx context.Context) GetResourceResourceSqlServerKerberosAdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSqlServerKerberosAdOutput)
}

// GetResourceResourceSqlServerKerberosAdArrayInput is an input type that accepts GetResourceResourceSqlServerKerberosAdArray and GetResourceResourceSqlServerKerberosAdArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceSqlServerKerberosAdArrayInput` via:
//
//	GetResourceResourceSqlServerKerberosAdArray{ GetResourceResourceSqlServerKerberosAdArgs{...} }
type GetResourceResourceSqlServerKerberosAdArrayInput interface {
	pulumi.Input

	ToGetResourceResourceSqlServerKerberosAdArrayOutput() GetResourceResourceSqlServerKerberosAdArrayOutput
	ToGetResourceResourceSqlServerKerberosAdArrayOutputWithContext(context.Context) GetResourceResourceSqlServerKerberosAdArrayOutput
}

type GetResourceResourceSqlServerKerberosAdArray []GetResourceResourceSqlServerKerberosAdInput

func (GetResourceResourceSqlServerKerberosAdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSqlServerKerberosAd)(nil)).Elem()
}

func (i GetResourceResourceSqlServerKerberosAdArray) ToGetResourceResourceSqlServerKerberosAdArrayOutput() GetResourceResourceSqlServerKerberosAdArrayOutput {
	return i.ToGetResourceResourceSqlServerKerberosAdArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceSqlServerKerberosAdArray) ToGetResourceResourceSqlServerKerberosAdArrayOutputWithContext(ctx context.Context) GetResourceResourceSqlServerKerberosAdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSqlServerKerberosAdArrayOutput)
}

type GetResourceResourceSqlServerKerberosAdOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSqlServerKerberosAdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSqlServerKerberosAd)(nil)).Elem()
}

func (o GetResourceResourceSqlServerKerberosAdOutput) ToGetResourceResourceSqlServerKerberosAdOutput() GetResourceResourceSqlServerKerberosAdOutput {
	return o
}

func (o GetResourceResourceSqlServerKerberosAdOutput) ToGetResourceResourceSqlServerKerberosAdOutputWithContext(ctx context.Context) GetResourceResourceSqlServerKerberosAdOutput {
	return o
}

// Whether to allow deprecated encryption protocols to be used for this resource. For example, TLS 1.0.
func (o GetResourceResourceSqlServerKerberosAdOutput) AllowDeprecatedEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *bool { return v.AllowDeprecatedEncryption }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceSqlServerKerberosAdOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceSqlServerKerberosAdOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceSqlServerKerberosAdOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSqlServerKerberosAdOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceSqlServerKerberosAdOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The keytab file in base64 format containing an entry with the principal name (username@realm) and key version number with which to authenticate.
func (o GetResourceResourceSqlServerKerberosAdOutput) Keytab() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *string { return v.Keytab }).(pulumi.StringPtrOutput)
}

// The Kerberos 5 configuration file (krb5.conf) specifying the Active Directory server (KDC) for the configured realm.
func (o GetResourceResourceSqlServerKerberosAdOutput) KrbConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *string { return v.KrbConfig }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceSqlServerKerberosAdOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
func (o GetResourceResourceSqlServerKerberosAdOutput) OverrideDatabase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *bool { return v.OverrideDatabase }).(pulumi.BoolPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSqlServerKerberosAdOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceSqlServerKerberosAdOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceSqlServerKerberosAdOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The Active Directory domain (realm) to which the configured username belongs.
func (o GetResourceResourceSqlServerKerberosAdOutput) Realm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *string { return v.Realm }).(pulumi.StringPtrOutput)
}

// The Schema to use to direct initial requests.
func (o GetResourceResourceSqlServerKerberosAdOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceSqlServerKerberosAdOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// The Service Principal Name of the Microsoft SQL Server instance in Active Directory.
func (o GetResourceResourceSqlServerKerberosAdOutput) ServerSpn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *string { return v.ServerSpn }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceSqlServerKerberosAdOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceSqlServerKerberosAdOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceSqlServerKerberosAdOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSqlServerKerberosAd) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceSqlServerKerberosAdArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSqlServerKerberosAdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSqlServerKerberosAd)(nil)).Elem()
}

func (o GetResourceResourceSqlServerKerberosAdArrayOutput) ToGetResourceResourceSqlServerKerberosAdArrayOutput() GetResourceResourceSqlServerKerberosAdArrayOutput {
	return o
}

func (o GetResourceResourceSqlServerKerberosAdArrayOutput) ToGetResourceResourceSqlServerKerberosAdArrayOutputWithContext(ctx context.Context) GetResourceResourceSqlServerKerberosAdArrayOutput {
	return o
}

func (o GetResourceResourceSqlServerKerberosAdArrayOutput) Index(i pulumi.IntInput) GetResourceResourceSqlServerKerberosAdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceSqlServerKerberosAd {
		return vs[0].([]GetResourceResourceSqlServerKerberosAd)[vs[1].(int)]
	}).(GetResourceResourceSqlServerKerberosAdOutput)
}

type GetResourceResourceSsh struct {
	// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
	AllowDeprecatedKeyExchanges *bool `pulumi:"allowDeprecatedKeyExchanges"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// The key type to use e.g. rsa-2048 or ed25519
	KeyType *string `pulumi:"keyType"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// Whether port forwarding is allowed through this server.
	PortForwarding *bool `pulumi:"portForwarding"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// The public key to append to a server's authorized keys. This will be generated after resource creation.
	PublicKey string `pulumi:"publicKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceSshInput is an input type that accepts GetResourceResourceSshArgs and GetResourceResourceSshOutput values.
// You can construct a concrete instance of `GetResourceResourceSshInput` via:
//
//	GetResourceResourceSshArgs{...}
type GetResourceResourceSshInput interface {
	pulumi.Input

	ToGetResourceResourceSshOutput() GetResourceResourceSshOutput
	ToGetResourceResourceSshOutputWithContext(context.Context) GetResourceResourceSshOutput
}

type GetResourceResourceSshArgs struct {
	// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
	AllowDeprecatedKeyExchanges pulumi.BoolPtrInput `pulumi:"allowDeprecatedKeyExchanges"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The key type to use e.g. rsa-2048 or ed25519
	KeyType pulumi.StringPtrInput `pulumi:"keyType"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Whether port forwarding is allowed through this server.
	PortForwarding pulumi.BoolPtrInput `pulumi:"portForwarding"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// The public key to append to a server's authorized keys. This will be generated after resource creation.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSsh)(nil)).Elem()
}

func (i GetResourceResourceSshArgs) ToGetResourceResourceSshOutput() GetResourceResourceSshOutput {
	return i.ToGetResourceResourceSshOutputWithContext(context.Background())
}

func (i GetResourceResourceSshArgs) ToGetResourceResourceSshOutputWithContext(ctx context.Context) GetResourceResourceSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSshOutput)
}

// GetResourceResourceSshArrayInput is an input type that accepts GetResourceResourceSshArray and GetResourceResourceSshArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceSshArrayInput` via:
//
//	GetResourceResourceSshArray{ GetResourceResourceSshArgs{...} }
type GetResourceResourceSshArrayInput interface {
	pulumi.Input

	ToGetResourceResourceSshArrayOutput() GetResourceResourceSshArrayOutput
	ToGetResourceResourceSshArrayOutputWithContext(context.Context) GetResourceResourceSshArrayOutput
}

type GetResourceResourceSshArray []GetResourceResourceSshInput

func (GetResourceResourceSshArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSsh)(nil)).Elem()
}

func (i GetResourceResourceSshArray) ToGetResourceResourceSshArrayOutput() GetResourceResourceSshArrayOutput {
	return i.ToGetResourceResourceSshArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceSshArray) ToGetResourceResourceSshArrayOutputWithContext(ctx context.Context) GetResourceResourceSshArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSshArrayOutput)
}

type GetResourceResourceSshOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSsh)(nil)).Elem()
}

func (o GetResourceResourceSshOutput) ToGetResourceResourceSshOutput() GetResourceResourceSshOutput {
	return o
}

func (o GetResourceResourceSshOutput) ToGetResourceResourceSshOutputWithContext(ctx context.Context) GetResourceResourceSshOutput {
	return o
}

// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
func (o GetResourceResourceSshOutput) AllowDeprecatedKeyExchanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSsh) *bool { return v.AllowDeprecatedKeyExchanges }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceSshOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSsh) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceSshOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSsh) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSshOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSsh) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceSshOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSsh) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The key type to use e.g. rsa-2048 or ed25519
func (o GetResourceResourceSshOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSsh) *string { return v.KeyType }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceSshOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSsh) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSshOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSsh) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Whether port forwarding is allowed through this server.
func (o GetResourceResourceSshOutput) PortForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSsh) *bool { return v.PortForwarding }).(pulumi.BoolPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceSshOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSsh) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceSshOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSsh) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// The public key to append to a server's authorized keys. This will be generated after resource creation.
func (o GetResourceResourceSshOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetResourceResourceSsh) string { return v.PublicKey }).(pulumi.StringOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceSshOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSsh) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceSshOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSsh) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceSshOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceSsh) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceSshOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSsh) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceSshArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSshArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSsh)(nil)).Elem()
}

func (o GetResourceResourceSshArrayOutput) ToGetResourceResourceSshArrayOutput() GetResourceResourceSshArrayOutput {
	return o
}

func (o GetResourceResourceSshArrayOutput) ToGetResourceResourceSshArrayOutputWithContext(ctx context.Context) GetResourceResourceSshArrayOutput {
	return o
}

func (o GetResourceResourceSshArrayOutput) Index(i pulumi.IntInput) GetResourceResourceSshOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceSsh {
		return vs[0].([]GetResourceResourceSsh)[vs[1].(int)]
	}).(GetResourceResourceSshOutput)
}

type GetResourceResourceSshCert struct {
	// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
	AllowDeprecatedKeyExchanges *bool `pulumi:"allowDeprecatedKeyExchanges"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername *string `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId *string `pulumi:"identitySetId"`
	// The key type to use e.g. rsa-2048 or ed25519
	KeyType *string `pulumi:"keyType"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// Whether port forwarding is allowed through this server.
	PortForwarding *bool `pulumi:"portForwarding"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceSshCertInput is an input type that accepts GetResourceResourceSshCertArgs and GetResourceResourceSshCertOutput values.
// You can construct a concrete instance of `GetResourceResourceSshCertInput` via:
//
//	GetResourceResourceSshCertArgs{...}
type GetResourceResourceSshCertInput interface {
	pulumi.Input

	ToGetResourceResourceSshCertOutput() GetResourceResourceSshCertOutput
	ToGetResourceResourceSshCertOutputWithContext(context.Context) GetResourceResourceSshCertOutput
}

type GetResourceResourceSshCertArgs struct {
	// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
	AllowDeprecatedKeyExchanges pulumi.BoolPtrInput `pulumi:"allowDeprecatedKeyExchanges"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
	IdentityAliasHealthcheckUsername pulumi.StringPtrInput `pulumi:"identityAliasHealthcheckUsername"`
	// The ID of the identity set to use for identity connections.
	IdentitySetId pulumi.StringPtrInput `pulumi:"identitySetId"`
	// The key type to use e.g. rsa-2048 or ed25519
	KeyType pulumi.StringPtrInput `pulumi:"keyType"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Whether port forwarding is allowed through this server.
	PortForwarding pulumi.BoolPtrInput `pulumi:"portForwarding"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceSshCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSshCert)(nil)).Elem()
}

func (i GetResourceResourceSshCertArgs) ToGetResourceResourceSshCertOutput() GetResourceResourceSshCertOutput {
	return i.ToGetResourceResourceSshCertOutputWithContext(context.Background())
}

func (i GetResourceResourceSshCertArgs) ToGetResourceResourceSshCertOutputWithContext(ctx context.Context) GetResourceResourceSshCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSshCertOutput)
}

// GetResourceResourceSshCertArrayInput is an input type that accepts GetResourceResourceSshCertArray and GetResourceResourceSshCertArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceSshCertArrayInput` via:
//
//	GetResourceResourceSshCertArray{ GetResourceResourceSshCertArgs{...} }
type GetResourceResourceSshCertArrayInput interface {
	pulumi.Input

	ToGetResourceResourceSshCertArrayOutput() GetResourceResourceSshCertArrayOutput
	ToGetResourceResourceSshCertArrayOutputWithContext(context.Context) GetResourceResourceSshCertArrayOutput
}

type GetResourceResourceSshCertArray []GetResourceResourceSshCertInput

func (GetResourceResourceSshCertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSshCert)(nil)).Elem()
}

func (i GetResourceResourceSshCertArray) ToGetResourceResourceSshCertArrayOutput() GetResourceResourceSshCertArrayOutput {
	return i.ToGetResourceResourceSshCertArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceSshCertArray) ToGetResourceResourceSshCertArrayOutputWithContext(ctx context.Context) GetResourceResourceSshCertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSshCertArrayOutput)
}

type GetResourceResourceSshCertOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSshCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSshCert)(nil)).Elem()
}

func (o GetResourceResourceSshCertOutput) ToGetResourceResourceSshCertOutput() GetResourceResourceSshCertOutput {
	return o
}

func (o GetResourceResourceSshCertOutput) ToGetResourceResourceSshCertOutputWithContext(ctx context.Context) GetResourceResourceSshCertOutput {
	return o
}

// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
func (o GetResourceResourceSshCertOutput) AllowDeprecatedKeyExchanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCert) *bool { return v.AllowDeprecatedKeyExchanges }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceSshCertOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCert) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceSshCertOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCert) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSshCertOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCert) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceSshCertOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCert) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The username to use for healthchecks, when clients otherwise connect with their own identity alias username.
func (o GetResourceResourceSshCertOutput) IdentityAliasHealthcheckUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCert) *string { return v.IdentityAliasHealthcheckUsername }).(pulumi.StringPtrOutput)
}

// The ID of the identity set to use for identity connections.
func (o GetResourceResourceSshCertOutput) IdentitySetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCert) *string { return v.IdentitySetId }).(pulumi.StringPtrOutput)
}

// The key type to use e.g. rsa-2048 or ed25519
func (o GetResourceResourceSshCertOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCert) *string { return v.KeyType }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceSshCertOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCert) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSshCertOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCert) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Whether port forwarding is allowed through this server.
func (o GetResourceResourceSshCertOutput) PortForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCert) *bool { return v.PortForwarding }).(pulumi.BoolPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceSshCertOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCert) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceSshCertOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCert) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceSshCertOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCert) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceSshCertOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCert) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceSshCertOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceSshCert) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceSshCertOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCert) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceSshCertArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSshCertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSshCert)(nil)).Elem()
}

func (o GetResourceResourceSshCertArrayOutput) ToGetResourceResourceSshCertArrayOutput() GetResourceResourceSshCertArrayOutput {
	return o
}

func (o GetResourceResourceSshCertArrayOutput) ToGetResourceResourceSshCertArrayOutputWithContext(ctx context.Context) GetResourceResourceSshCertArrayOutput {
	return o
}

func (o GetResourceResourceSshCertArrayOutput) Index(i pulumi.IntInput) GetResourceResourceSshCertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceSshCert {
		return vs[0].([]GetResourceResourceSshCert)[vs[1].(int)]
	}).(GetResourceResourceSshCertOutput)
}

type GetResourceResourceSshCustomerKey struct {
	// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
	AllowDeprecatedKeyExchanges *bool `pulumi:"allowDeprecatedKeyExchanges"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// Whether port forwarding is allowed through this server.
	PortForwarding *bool `pulumi:"portForwarding"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// The private key used to authenticate with the server.
	PrivateKey *string `pulumi:"privateKey"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceSshCustomerKeyInput is an input type that accepts GetResourceResourceSshCustomerKeyArgs and GetResourceResourceSshCustomerKeyOutput values.
// You can construct a concrete instance of `GetResourceResourceSshCustomerKeyInput` via:
//
//	GetResourceResourceSshCustomerKeyArgs{...}
type GetResourceResourceSshCustomerKeyInput interface {
	pulumi.Input

	ToGetResourceResourceSshCustomerKeyOutput() GetResourceResourceSshCustomerKeyOutput
	ToGetResourceResourceSshCustomerKeyOutputWithContext(context.Context) GetResourceResourceSshCustomerKeyOutput
}

type GetResourceResourceSshCustomerKeyArgs struct {
	// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
	AllowDeprecatedKeyExchanges pulumi.BoolPtrInput `pulumi:"allowDeprecatedKeyExchanges"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Whether port forwarding is allowed through this server.
	PortForwarding pulumi.BoolPtrInput `pulumi:"portForwarding"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// The private key used to authenticate with the server.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceSshCustomerKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSshCustomerKey)(nil)).Elem()
}

func (i GetResourceResourceSshCustomerKeyArgs) ToGetResourceResourceSshCustomerKeyOutput() GetResourceResourceSshCustomerKeyOutput {
	return i.ToGetResourceResourceSshCustomerKeyOutputWithContext(context.Background())
}

func (i GetResourceResourceSshCustomerKeyArgs) ToGetResourceResourceSshCustomerKeyOutputWithContext(ctx context.Context) GetResourceResourceSshCustomerKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSshCustomerKeyOutput)
}

// GetResourceResourceSshCustomerKeyArrayInput is an input type that accepts GetResourceResourceSshCustomerKeyArray and GetResourceResourceSshCustomerKeyArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceSshCustomerKeyArrayInput` via:
//
//	GetResourceResourceSshCustomerKeyArray{ GetResourceResourceSshCustomerKeyArgs{...} }
type GetResourceResourceSshCustomerKeyArrayInput interface {
	pulumi.Input

	ToGetResourceResourceSshCustomerKeyArrayOutput() GetResourceResourceSshCustomerKeyArrayOutput
	ToGetResourceResourceSshCustomerKeyArrayOutputWithContext(context.Context) GetResourceResourceSshCustomerKeyArrayOutput
}

type GetResourceResourceSshCustomerKeyArray []GetResourceResourceSshCustomerKeyInput

func (GetResourceResourceSshCustomerKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSshCustomerKey)(nil)).Elem()
}

func (i GetResourceResourceSshCustomerKeyArray) ToGetResourceResourceSshCustomerKeyArrayOutput() GetResourceResourceSshCustomerKeyArrayOutput {
	return i.ToGetResourceResourceSshCustomerKeyArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceSshCustomerKeyArray) ToGetResourceResourceSshCustomerKeyArrayOutputWithContext(ctx context.Context) GetResourceResourceSshCustomerKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSshCustomerKeyArrayOutput)
}

type GetResourceResourceSshCustomerKeyOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSshCustomerKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSshCustomerKey)(nil)).Elem()
}

func (o GetResourceResourceSshCustomerKeyOutput) ToGetResourceResourceSshCustomerKeyOutput() GetResourceResourceSshCustomerKeyOutput {
	return o
}

func (o GetResourceResourceSshCustomerKeyOutput) ToGetResourceResourceSshCustomerKeyOutputWithContext(ctx context.Context) GetResourceResourceSshCustomerKeyOutput {
	return o
}

// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
func (o GetResourceResourceSshCustomerKeyOutput) AllowDeprecatedKeyExchanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCustomerKey) *bool { return v.AllowDeprecatedKeyExchanges }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceSshCustomerKeyOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCustomerKey) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceSshCustomerKeyOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCustomerKey) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSshCustomerKeyOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCustomerKey) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceSshCustomerKeyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCustomerKey) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceSshCustomerKeyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCustomerKey) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSshCustomerKeyOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCustomerKey) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Whether port forwarding is allowed through this server.
func (o GetResourceResourceSshCustomerKeyOutput) PortForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCustomerKey) *bool { return v.PortForwarding }).(pulumi.BoolPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceSshCustomerKeyOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCustomerKey) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// The private key used to authenticate with the server.
func (o GetResourceResourceSshCustomerKeyOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCustomerKey) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceSshCustomerKeyOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCustomerKey) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceSshCustomerKeyOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCustomerKey) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceSshCustomerKeyOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCustomerKey) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceSshCustomerKeyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceSshCustomerKey) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceSshCustomerKeyOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshCustomerKey) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceSshCustomerKeyArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSshCustomerKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSshCustomerKey)(nil)).Elem()
}

func (o GetResourceResourceSshCustomerKeyArrayOutput) ToGetResourceResourceSshCustomerKeyArrayOutput() GetResourceResourceSshCustomerKeyArrayOutput {
	return o
}

func (o GetResourceResourceSshCustomerKeyArrayOutput) ToGetResourceResourceSshCustomerKeyArrayOutputWithContext(ctx context.Context) GetResourceResourceSshCustomerKeyArrayOutput {
	return o
}

func (o GetResourceResourceSshCustomerKeyArrayOutput) Index(i pulumi.IntInput) GetResourceResourceSshCustomerKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceSshCustomerKey {
		return vs[0].([]GetResourceResourceSshCustomerKey)[vs[1].(int)]
	}).(GetResourceResourceSshCustomerKeyOutput)
}

type GetResourceResourceSshPassword struct {
	// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
	AllowDeprecatedKeyExchanges *bool `pulumi:"allowDeprecatedKeyExchanges"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// Whether port forwarding is allowed through this server.
	PortForwarding *bool `pulumi:"portForwarding"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceSshPasswordInput is an input type that accepts GetResourceResourceSshPasswordArgs and GetResourceResourceSshPasswordOutput values.
// You can construct a concrete instance of `GetResourceResourceSshPasswordInput` via:
//
//	GetResourceResourceSshPasswordArgs{...}
type GetResourceResourceSshPasswordInput interface {
	pulumi.Input

	ToGetResourceResourceSshPasswordOutput() GetResourceResourceSshPasswordOutput
	ToGetResourceResourceSshPasswordOutputWithContext(context.Context) GetResourceResourceSshPasswordOutput
}

type GetResourceResourceSshPasswordArgs struct {
	// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
	AllowDeprecatedKeyExchanges pulumi.BoolPtrInput `pulumi:"allowDeprecatedKeyExchanges"`
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Whether port forwarding is allowed through this server.
	PortForwarding pulumi.BoolPtrInput `pulumi:"portForwarding"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceSshPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSshPassword)(nil)).Elem()
}

func (i GetResourceResourceSshPasswordArgs) ToGetResourceResourceSshPasswordOutput() GetResourceResourceSshPasswordOutput {
	return i.ToGetResourceResourceSshPasswordOutputWithContext(context.Background())
}

func (i GetResourceResourceSshPasswordArgs) ToGetResourceResourceSshPasswordOutputWithContext(ctx context.Context) GetResourceResourceSshPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSshPasswordOutput)
}

// GetResourceResourceSshPasswordArrayInput is an input type that accepts GetResourceResourceSshPasswordArray and GetResourceResourceSshPasswordArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceSshPasswordArrayInput` via:
//
//	GetResourceResourceSshPasswordArray{ GetResourceResourceSshPasswordArgs{...} }
type GetResourceResourceSshPasswordArrayInput interface {
	pulumi.Input

	ToGetResourceResourceSshPasswordArrayOutput() GetResourceResourceSshPasswordArrayOutput
	ToGetResourceResourceSshPasswordArrayOutputWithContext(context.Context) GetResourceResourceSshPasswordArrayOutput
}

type GetResourceResourceSshPasswordArray []GetResourceResourceSshPasswordInput

func (GetResourceResourceSshPasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSshPassword)(nil)).Elem()
}

func (i GetResourceResourceSshPasswordArray) ToGetResourceResourceSshPasswordArrayOutput() GetResourceResourceSshPasswordArrayOutput {
	return i.ToGetResourceResourceSshPasswordArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceSshPasswordArray) ToGetResourceResourceSshPasswordArrayOutputWithContext(ctx context.Context) GetResourceResourceSshPasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSshPasswordArrayOutput)
}

type GetResourceResourceSshPasswordOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSshPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSshPassword)(nil)).Elem()
}

func (o GetResourceResourceSshPasswordOutput) ToGetResourceResourceSshPasswordOutput() GetResourceResourceSshPasswordOutput {
	return o
}

func (o GetResourceResourceSshPasswordOutput) ToGetResourceResourceSshPasswordOutputWithContext(ctx context.Context) GetResourceResourceSshPasswordOutput {
	return o
}

// Whether deprecated, insecure key exchanges are allowed for use to connect to the target ssh server.
func (o GetResourceResourceSshPasswordOutput) AllowDeprecatedKeyExchanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshPassword) *bool { return v.AllowDeprecatedKeyExchanges }).(pulumi.BoolPtrOutput)
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceSshPasswordOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshPassword) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceSshPasswordOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshPassword) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSshPasswordOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshPassword) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceSshPasswordOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshPassword) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceSshPasswordOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshPassword) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceSshPasswordOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshPassword) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSshPasswordOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshPassword) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Whether port forwarding is allowed through this server.
func (o GetResourceResourceSshPasswordOutput) PortForwarding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshPassword) *bool { return v.PortForwarding }).(pulumi.BoolPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceSshPasswordOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshPassword) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceSshPasswordOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshPassword) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceSshPasswordOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshPassword) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceSshPasswordOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshPassword) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceSshPasswordOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceSshPassword) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceSshPasswordOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSshPassword) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceSshPasswordArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSshPasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSshPassword)(nil)).Elem()
}

func (o GetResourceResourceSshPasswordArrayOutput) ToGetResourceResourceSshPasswordArrayOutput() GetResourceResourceSshPasswordArrayOutput {
	return o
}

func (o GetResourceResourceSshPasswordArrayOutput) ToGetResourceResourceSshPasswordArrayOutputWithContext(ctx context.Context) GetResourceResourceSshPasswordArrayOutput {
	return o
}

func (o GetResourceResourceSshPasswordArrayOutput) Index(i pulumi.IntInput) GetResourceResourceSshPasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceSshPassword {
		return vs[0].([]GetResourceResourceSshPassword)[vs[1].(int)]
	}).(GetResourceResourceSshPasswordOutput)
}

type GetResourceResourceSybase struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceSybaseInput is an input type that accepts GetResourceResourceSybaseArgs and GetResourceResourceSybaseOutput values.
// You can construct a concrete instance of `GetResourceResourceSybaseInput` via:
//
//	GetResourceResourceSybaseArgs{...}
type GetResourceResourceSybaseInput interface {
	pulumi.Input

	ToGetResourceResourceSybaseOutput() GetResourceResourceSybaseOutput
	ToGetResourceResourceSybaseOutputWithContext(context.Context) GetResourceResourceSybaseOutput
}

type GetResourceResourceSybaseArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceSybaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSybase)(nil)).Elem()
}

func (i GetResourceResourceSybaseArgs) ToGetResourceResourceSybaseOutput() GetResourceResourceSybaseOutput {
	return i.ToGetResourceResourceSybaseOutputWithContext(context.Background())
}

func (i GetResourceResourceSybaseArgs) ToGetResourceResourceSybaseOutputWithContext(ctx context.Context) GetResourceResourceSybaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSybaseOutput)
}

// GetResourceResourceSybaseArrayInput is an input type that accepts GetResourceResourceSybaseArray and GetResourceResourceSybaseArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceSybaseArrayInput` via:
//
//	GetResourceResourceSybaseArray{ GetResourceResourceSybaseArgs{...} }
type GetResourceResourceSybaseArrayInput interface {
	pulumi.Input

	ToGetResourceResourceSybaseArrayOutput() GetResourceResourceSybaseArrayOutput
	ToGetResourceResourceSybaseArrayOutputWithContext(context.Context) GetResourceResourceSybaseArrayOutput
}

type GetResourceResourceSybaseArray []GetResourceResourceSybaseInput

func (GetResourceResourceSybaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSybase)(nil)).Elem()
}

func (i GetResourceResourceSybaseArray) ToGetResourceResourceSybaseArrayOutput() GetResourceResourceSybaseArrayOutput {
	return i.ToGetResourceResourceSybaseArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceSybaseArray) ToGetResourceResourceSybaseArrayOutputWithContext(ctx context.Context) GetResourceResourceSybaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSybaseArrayOutput)
}

type GetResourceResourceSybaseOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSybaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSybase)(nil)).Elem()
}

func (o GetResourceResourceSybaseOutput) ToGetResourceResourceSybaseOutput() GetResourceResourceSybaseOutput {
	return o
}

func (o GetResourceResourceSybaseOutput) ToGetResourceResourceSybaseOutputWithContext(ctx context.Context) GetResourceResourceSybaseOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceSybaseOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybase) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceSybaseOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybase) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSybaseOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybase) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceSybaseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybase) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceSybaseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybase) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceSybaseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybase) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSybaseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybase) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceSybaseOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybase) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceSybaseOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybase) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceSybaseOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybase) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceSybaseOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybase) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceSybaseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceSybase) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceSybaseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybase) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceSybaseArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSybaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSybase)(nil)).Elem()
}

func (o GetResourceResourceSybaseArrayOutput) ToGetResourceResourceSybaseArrayOutput() GetResourceResourceSybaseArrayOutput {
	return o
}

func (o GetResourceResourceSybaseArrayOutput) ToGetResourceResourceSybaseArrayOutputWithContext(ctx context.Context) GetResourceResourceSybaseArrayOutput {
	return o
}

func (o GetResourceResourceSybaseArrayOutput) Index(i pulumi.IntInput) GetResourceResourceSybaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceSybase {
		return vs[0].([]GetResourceResourceSybase)[vs[1].(int)]
	}).(GetResourceResourceSybaseOutput)
}

type GetResourceResourceSybaseIq struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceSybaseIqInput is an input type that accepts GetResourceResourceSybaseIqArgs and GetResourceResourceSybaseIqOutput values.
// You can construct a concrete instance of `GetResourceResourceSybaseIqInput` via:
//
//	GetResourceResourceSybaseIqArgs{...}
type GetResourceResourceSybaseIqInput interface {
	pulumi.Input

	ToGetResourceResourceSybaseIqOutput() GetResourceResourceSybaseIqOutput
	ToGetResourceResourceSybaseIqOutputWithContext(context.Context) GetResourceResourceSybaseIqOutput
}

type GetResourceResourceSybaseIqArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceSybaseIqArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSybaseIq)(nil)).Elem()
}

func (i GetResourceResourceSybaseIqArgs) ToGetResourceResourceSybaseIqOutput() GetResourceResourceSybaseIqOutput {
	return i.ToGetResourceResourceSybaseIqOutputWithContext(context.Background())
}

func (i GetResourceResourceSybaseIqArgs) ToGetResourceResourceSybaseIqOutputWithContext(ctx context.Context) GetResourceResourceSybaseIqOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSybaseIqOutput)
}

// GetResourceResourceSybaseIqArrayInput is an input type that accepts GetResourceResourceSybaseIqArray and GetResourceResourceSybaseIqArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceSybaseIqArrayInput` via:
//
//	GetResourceResourceSybaseIqArray{ GetResourceResourceSybaseIqArgs{...} }
type GetResourceResourceSybaseIqArrayInput interface {
	pulumi.Input

	ToGetResourceResourceSybaseIqArrayOutput() GetResourceResourceSybaseIqArrayOutput
	ToGetResourceResourceSybaseIqArrayOutputWithContext(context.Context) GetResourceResourceSybaseIqArrayOutput
}

type GetResourceResourceSybaseIqArray []GetResourceResourceSybaseIqInput

func (GetResourceResourceSybaseIqArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSybaseIq)(nil)).Elem()
}

func (i GetResourceResourceSybaseIqArray) ToGetResourceResourceSybaseIqArrayOutput() GetResourceResourceSybaseIqArrayOutput {
	return i.ToGetResourceResourceSybaseIqArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceSybaseIqArray) ToGetResourceResourceSybaseIqArrayOutputWithContext(ctx context.Context) GetResourceResourceSybaseIqArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceSybaseIqArrayOutput)
}

type GetResourceResourceSybaseIqOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSybaseIqOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceSybaseIq)(nil)).Elem()
}

func (o GetResourceResourceSybaseIqOutput) ToGetResourceResourceSybaseIqOutput() GetResourceResourceSybaseIqOutput {
	return o
}

func (o GetResourceResourceSybaseIqOutput) ToGetResourceResourceSybaseIqOutputWithContext(ctx context.Context) GetResourceResourceSybaseIqOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceSybaseIqOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybaseIq) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceSybaseIqOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybaseIq) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSybaseIqOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybaseIq) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceSybaseIqOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybaseIq) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceSybaseIqOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybaseIq) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceSybaseIqOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybaseIq) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceSybaseIqOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybaseIq) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceSybaseIqOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybaseIq) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceSybaseIqOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybaseIq) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceSybaseIqOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybaseIq) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceSybaseIqOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybaseIq) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceSybaseIqOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceSybaseIq) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceSybaseIqOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceSybaseIq) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceSybaseIqArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceSybaseIqArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceSybaseIq)(nil)).Elem()
}

func (o GetResourceResourceSybaseIqArrayOutput) ToGetResourceResourceSybaseIqArrayOutput() GetResourceResourceSybaseIqArrayOutput {
	return o
}

func (o GetResourceResourceSybaseIqArrayOutput) ToGetResourceResourceSybaseIqArrayOutputWithContext(ctx context.Context) GetResourceResourceSybaseIqArrayOutput {
	return o
}

func (o GetResourceResourceSybaseIqArrayOutput) Index(i pulumi.IntInput) GetResourceResourceSybaseIqOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceSybaseIq {
		return vs[0].([]GetResourceResourceSybaseIq)[vs[1].(int)]
	}).(GetResourceResourceSybaseIqOutput)
}

type GetResourceResourceTeradata struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceTeradataInput is an input type that accepts GetResourceResourceTeradataArgs and GetResourceResourceTeradataOutput values.
// You can construct a concrete instance of `GetResourceResourceTeradataInput` via:
//
//	GetResourceResourceTeradataArgs{...}
type GetResourceResourceTeradataInput interface {
	pulumi.Input

	ToGetResourceResourceTeradataOutput() GetResourceResourceTeradataOutput
	ToGetResourceResourceTeradataOutputWithContext(context.Context) GetResourceResourceTeradataOutput
}

type GetResourceResourceTeradataArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceTeradataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceTeradata)(nil)).Elem()
}

func (i GetResourceResourceTeradataArgs) ToGetResourceResourceTeradataOutput() GetResourceResourceTeradataOutput {
	return i.ToGetResourceResourceTeradataOutputWithContext(context.Background())
}

func (i GetResourceResourceTeradataArgs) ToGetResourceResourceTeradataOutputWithContext(ctx context.Context) GetResourceResourceTeradataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceTeradataOutput)
}

// GetResourceResourceTeradataArrayInput is an input type that accepts GetResourceResourceTeradataArray and GetResourceResourceTeradataArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceTeradataArrayInput` via:
//
//	GetResourceResourceTeradataArray{ GetResourceResourceTeradataArgs{...} }
type GetResourceResourceTeradataArrayInput interface {
	pulumi.Input

	ToGetResourceResourceTeradataArrayOutput() GetResourceResourceTeradataArrayOutput
	ToGetResourceResourceTeradataArrayOutputWithContext(context.Context) GetResourceResourceTeradataArrayOutput
}

type GetResourceResourceTeradataArray []GetResourceResourceTeradataInput

func (GetResourceResourceTeradataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceTeradata)(nil)).Elem()
}

func (i GetResourceResourceTeradataArray) ToGetResourceResourceTeradataArrayOutput() GetResourceResourceTeradataArrayOutput {
	return i.ToGetResourceResourceTeradataArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceTeradataArray) ToGetResourceResourceTeradataArrayOutputWithContext(ctx context.Context) GetResourceResourceTeradataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceTeradataArrayOutput)
}

type GetResourceResourceTeradataOutput struct{ *pulumi.OutputState }

func (GetResourceResourceTeradataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceTeradata)(nil)).Elem()
}

func (o GetResourceResourceTeradataOutput) ToGetResourceResourceTeradataOutput() GetResourceResourceTeradataOutput {
	return o
}

func (o GetResourceResourceTeradataOutput) ToGetResourceResourceTeradataOutputWithContext(ctx context.Context) GetResourceResourceTeradataOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceTeradataOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTeradata) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceTeradataOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTeradata) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceTeradataOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTeradata) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceTeradataOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTeradata) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceTeradataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTeradata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceTeradataOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTeradata) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceTeradataOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTeradata) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceTeradataOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTeradata) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceTeradataOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTeradata) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceTeradataOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTeradata) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceTeradataOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTeradata) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceTeradataOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceTeradata) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceTeradataOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTeradata) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceTeradataArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceTeradataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceTeradata)(nil)).Elem()
}

func (o GetResourceResourceTeradataArrayOutput) ToGetResourceResourceTeradataArrayOutput() GetResourceResourceTeradataArrayOutput {
	return o
}

func (o GetResourceResourceTeradataArrayOutput) ToGetResourceResourceTeradataArrayOutputWithContext(ctx context.Context) GetResourceResourceTeradataArrayOutput {
	return o
}

func (o GetResourceResourceTeradataArrayOutput) Index(i pulumi.IntInput) GetResourceResourceTeradataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceTeradata {
		return vs[0].([]GetResourceResourceTeradata)[vs[1].(int)]
	}).(GetResourceResourceTeradataOutput)
}

type GetResourceResourceTrino struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface *string `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database *string `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter *string `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname *string `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name *string `pulumi:"name"`
	// The password to authenticate with.
	Password *string `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port *int `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride *int `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId *string `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId *string `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain *string `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The username to authenticate with.
	Username *string `pulumi:"username"`
}

// GetResourceResourceTrinoInput is an input type that accepts GetResourceResourceTrinoArgs and GetResourceResourceTrinoOutput values.
// You can construct a concrete instance of `GetResourceResourceTrinoInput` via:
//
//	GetResourceResourceTrinoArgs{...}
type GetResourceResourceTrinoInput interface {
	pulumi.Input

	ToGetResourceResourceTrinoOutput() GetResourceResourceTrinoOutput
	ToGetResourceResourceTrinoOutputWithContext(context.Context) GetResourceResourceTrinoOutput
}

type GetResourceResourceTrinoArgs struct {
	// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
	BindInterface pulumi.StringPtrInput `pulumi:"bindInterface"`
	// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// A filter applied to the routing logic to pin datasource to nodes.
	EgressFilter pulumi.StringPtrInput `pulumi:"egressFilter"`
	// The host to dial to initiate a connection from the egress node to this resource.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Unique identifier of the Resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The password to authenticate with.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port to dial to initiate a connection from the egress node to this resource.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The local port used by clients to connect to this resource.
	PortOverride pulumi.IntPtrInput `pulumi:"portOverride"`
	// ID of the proxy cluster for this resource, if any.
	ProxyClusterId pulumi.StringPtrInput `pulumi:"proxyClusterId"`
	// ID of the secret store containing credentials for this resource, if any.
	SecretStoreId pulumi.StringPtrInput `pulumi:"secretStoreId"`
	// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The username to authenticate with.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetResourceResourceTrinoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceTrino)(nil)).Elem()
}

func (i GetResourceResourceTrinoArgs) ToGetResourceResourceTrinoOutput() GetResourceResourceTrinoOutput {
	return i.ToGetResourceResourceTrinoOutputWithContext(context.Background())
}

func (i GetResourceResourceTrinoArgs) ToGetResourceResourceTrinoOutputWithContext(ctx context.Context) GetResourceResourceTrinoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceTrinoOutput)
}

// GetResourceResourceTrinoArrayInput is an input type that accepts GetResourceResourceTrinoArray and GetResourceResourceTrinoArrayOutput values.
// You can construct a concrete instance of `GetResourceResourceTrinoArrayInput` via:
//
//	GetResourceResourceTrinoArray{ GetResourceResourceTrinoArgs{...} }
type GetResourceResourceTrinoArrayInput interface {
	pulumi.Input

	ToGetResourceResourceTrinoArrayOutput() GetResourceResourceTrinoArrayOutput
	ToGetResourceResourceTrinoArrayOutputWithContext(context.Context) GetResourceResourceTrinoArrayOutput
}

type GetResourceResourceTrinoArray []GetResourceResourceTrinoInput

func (GetResourceResourceTrinoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceTrino)(nil)).Elem()
}

func (i GetResourceResourceTrinoArray) ToGetResourceResourceTrinoArrayOutput() GetResourceResourceTrinoArrayOutput {
	return i.ToGetResourceResourceTrinoArrayOutputWithContext(context.Background())
}

func (i GetResourceResourceTrinoArray) ToGetResourceResourceTrinoArrayOutputWithContext(ctx context.Context) GetResourceResourceTrinoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResourceResourceTrinoArrayOutput)
}

type GetResourceResourceTrinoOutput struct{ *pulumi.OutputState }

func (GetResourceResourceTrinoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResourceResourceTrino)(nil)).Elem()
}

func (o GetResourceResourceTrinoOutput) ToGetResourceResourceTrinoOutput() GetResourceResourceTrinoOutput {
	return o
}

func (o GetResourceResourceTrinoOutput) ToGetResourceResourceTrinoOutputWithContext(ctx context.Context) GetResourceResourceTrinoOutput {
	return o
}

// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
func (o GetResourceResourceTrinoOutput) BindInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTrino) *string { return v.BindInterface }).(pulumi.StringPtrOutput)
}

// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
func (o GetResourceResourceTrinoOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTrino) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// A filter applied to the routing logic to pin datasource to nodes.
func (o GetResourceResourceTrinoOutput) EgressFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTrino) *string { return v.EgressFilter }).(pulumi.StringPtrOutput)
}

// The host to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceTrinoOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTrino) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Resource.
func (o GetResourceResourceTrinoOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTrino) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Resource.
func (o GetResourceResourceTrinoOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTrino) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The password to authenticate with.
func (o GetResourceResourceTrinoOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTrino) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port to dial to initiate a connection from the egress node to this resource.
func (o GetResourceResourceTrinoOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTrino) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The local port used by clients to connect to this resource.
func (o GetResourceResourceTrinoOutput) PortOverride() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTrino) *int { return v.PortOverride }).(pulumi.IntPtrOutput)
}

// ID of the proxy cluster for this resource, if any.
func (o GetResourceResourceTrinoOutput) ProxyClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTrino) *string { return v.ProxyClusterId }).(pulumi.StringPtrOutput)
}

// ID of the secret store containing credentials for this resource, if any.
func (o GetResourceResourceTrinoOutput) SecretStoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTrino) *string { return v.SecretStoreId }).(pulumi.StringPtrOutput)
}

// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
func (o GetResourceResourceTrinoOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTrino) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetResourceResourceTrinoOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetResourceResourceTrino) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The username to authenticate with.
func (o GetResourceResourceTrinoOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResourceResourceTrino) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetResourceResourceTrinoArrayOutput struct{ *pulumi.OutputState }

func (GetResourceResourceTrinoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResourceResourceTrino)(nil)).Elem()
}

func (o GetResourceResourceTrinoArrayOutput) ToGetResourceResourceTrinoArrayOutput() GetResourceResourceTrinoArrayOutput {
	return o
}

func (o GetResourceResourceTrinoArrayOutput) ToGetResourceResourceTrinoArrayOutputWithContext(ctx context.Context) GetResourceResourceTrinoArrayOutput {
	return o
}

func (o GetResourceResourceTrinoArrayOutput) Index(i pulumi.IntInput) GetResourceResourceTrinoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResourceResourceTrino {
		return vs[0].([]GetResourceResourceTrino)[vs[1].(int)]
	}).(GetResourceResourceTrinoOutput)
}

type GetRoleRole struct {
	// AccessRules is a list of access rules defining the resources this Role has access to.
	AccessRules *string `pulumi:"accessRules"`
	// Unique identifier of the Role.
	Id *string `pulumi:"id"`
	// Managed By is a read only field for what service manages this role, e.g. StrongDM, Okta, Azure.
	ManagedBy string `pulumi:"managedBy"`
	// Unique human-readable name of the Role.
	Name *string `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetRoleRoleInput is an input type that accepts GetRoleRoleArgs and GetRoleRoleOutput values.
// You can construct a concrete instance of `GetRoleRoleInput` via:
//
//	GetRoleRoleArgs{...}
type GetRoleRoleInput interface {
	pulumi.Input

	ToGetRoleRoleOutput() GetRoleRoleOutput
	ToGetRoleRoleOutputWithContext(context.Context) GetRoleRoleOutput
}

type GetRoleRoleArgs struct {
	// AccessRules is a list of access rules defining the resources this Role has access to.
	AccessRules pulumi.StringPtrInput `pulumi:"accessRules"`
	// Unique identifier of the Role.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Managed By is a read only field for what service manages this role, e.g. StrongDM, Okta, Azure.
	ManagedBy pulumi.StringInput `pulumi:"managedBy"`
	// Unique human-readable name of the Role.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetRoleRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoleRole)(nil)).Elem()
}

func (i GetRoleRoleArgs) ToGetRoleRoleOutput() GetRoleRoleOutput {
	return i.ToGetRoleRoleOutputWithContext(context.Background())
}

func (i GetRoleRoleArgs) ToGetRoleRoleOutputWithContext(ctx context.Context) GetRoleRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoleRoleOutput)
}

// GetRoleRoleArrayInput is an input type that accepts GetRoleRoleArray and GetRoleRoleArrayOutput values.
// You can construct a concrete instance of `GetRoleRoleArrayInput` via:
//
//	GetRoleRoleArray{ GetRoleRoleArgs{...} }
type GetRoleRoleArrayInput interface {
	pulumi.Input

	ToGetRoleRoleArrayOutput() GetRoleRoleArrayOutput
	ToGetRoleRoleArrayOutputWithContext(context.Context) GetRoleRoleArrayOutput
}

type GetRoleRoleArray []GetRoleRoleInput

func (GetRoleRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRoleRole)(nil)).Elem()
}

func (i GetRoleRoleArray) ToGetRoleRoleArrayOutput() GetRoleRoleArrayOutput {
	return i.ToGetRoleRoleArrayOutputWithContext(context.Background())
}

func (i GetRoleRoleArray) ToGetRoleRoleArrayOutputWithContext(ctx context.Context) GetRoleRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoleRoleArrayOutput)
}

type GetRoleRoleOutput struct{ *pulumi.OutputState }

func (GetRoleRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoleRole)(nil)).Elem()
}

func (o GetRoleRoleOutput) ToGetRoleRoleOutput() GetRoleRoleOutput {
	return o
}

func (o GetRoleRoleOutput) ToGetRoleRoleOutputWithContext(ctx context.Context) GetRoleRoleOutput {
	return o
}

// AccessRules is a list of access rules defining the resources this Role has access to.
func (o GetRoleRoleOutput) AccessRules() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRoleRole) *string { return v.AccessRules }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Role.
func (o GetRoleRoleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRoleRole) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Managed By is a read only field for what service manages this role, e.g. StrongDM, Okta, Azure.
func (o GetRoleRoleOutput) ManagedBy() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoleRole) string { return v.ManagedBy }).(pulumi.StringOutput)
}

// Unique human-readable name of the Role.
func (o GetRoleRoleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRoleRole) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetRoleRoleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetRoleRole) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetRoleRoleArrayOutput struct{ *pulumi.OutputState }

func (GetRoleRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRoleRole)(nil)).Elem()
}

func (o GetRoleRoleArrayOutput) ToGetRoleRoleArrayOutput() GetRoleRoleArrayOutput {
	return o
}

func (o GetRoleRoleArrayOutput) ToGetRoleRoleArrayOutputWithContext(ctx context.Context) GetRoleRoleArrayOutput {
	return o
}

func (o GetRoleRoleArrayOutput) Index(i pulumi.IntInput) GetRoleRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRoleRole {
		return vs[0].([]GetRoleRole)[vs[1].(int)]
	}).(GetRoleRoleOutput)
}

type GetSecretStoreSecretStore struct {
	ActiveDirectoryStores    []GetSecretStoreSecretStoreActiveDirectoryStore    `pulumi:"activeDirectoryStores"`
	Aws                      []GetSecretStoreSecretStoreAw                      `pulumi:"aws"`
	AwsCertX509s             []GetSecretStoreSecretStoreAwsCertX509             `pulumi:"awsCertX509s"`
	AzureStores              []GetSecretStoreSecretStoreAzureStore              `pulumi:"azureStores"`
	CyberarkConjurs          []GetSecretStoreSecretStoreCyberarkConjur          `pulumi:"cyberarkConjurs"`
	CyberarkPamExperimentals []GetSecretStoreSecretStoreCyberarkPamExperimental `pulumi:"cyberarkPamExperimentals"`
	CyberarkPams             []GetSecretStoreSecretStoreCyberarkPam             `pulumi:"cyberarkPams"`
	DelineaStores            []GetSecretStoreSecretStoreDelineaStore            `pulumi:"delineaStores"`
	GcpCertX509Stores        []GetSecretStoreSecretStoreGcpCertX509Store        `pulumi:"gcpCertX509Stores"`
	GcpStores                []GetSecretStoreSecretStoreGcpStore                `pulumi:"gcpStores"`
	KeyfactorSshStores       []GetSecretStoreSecretStoreKeyfactorSshStore       `pulumi:"keyfactorSshStores"`
	KeyfactorX509Stores      []GetSecretStoreSecretStoreKeyfactorX509Store      `pulumi:"keyfactorX509Stores"`
	VaultApproleCertSshes    []GetSecretStoreSecretStoreVaultApproleCertSsh     `pulumi:"vaultApproleCertSshes"`
	VaultApproleCertX509s    []GetSecretStoreSecretStoreVaultApproleCertX509    `pulumi:"vaultApproleCertX509s"`
	VaultApproles            []GetSecretStoreSecretStoreVaultApprole            `pulumi:"vaultApproles"`
	VaultAwsEc2s             []GetSecretStoreSecretStoreVaultAwsEc2             `pulumi:"vaultAwsEc2s"`
	VaultAwsIams             []GetSecretStoreSecretStoreVaultAwsIam             `pulumi:"vaultAwsIams"`
	VaultTls                 []GetSecretStoreSecretStoreVaultTl                 `pulumi:"vaultTls"`
	VaultTlsCertSshes        []GetSecretStoreSecretStoreVaultTlsCertSsh         `pulumi:"vaultTlsCertSshes"`
	VaultTlsCertX509s        []GetSecretStoreSecretStoreVaultTlsCertX509        `pulumi:"vaultTlsCertX509s"`
	VaultTokenCertSshes      []GetSecretStoreSecretStoreVaultTokenCertSsh       `pulumi:"vaultTokenCertSshes"`
	VaultTokenCertX509s      []GetSecretStoreSecretStoreVaultTokenCertX509      `pulumi:"vaultTokenCertX509s"`
	VaultTokens              []GetSecretStoreSecretStoreVaultToken              `pulumi:"vaultTokens"`
}

// GetSecretStoreSecretStoreInput is an input type that accepts GetSecretStoreSecretStoreArgs and GetSecretStoreSecretStoreOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreInput` via:
//
//	GetSecretStoreSecretStoreArgs{...}
type GetSecretStoreSecretStoreInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreOutput() GetSecretStoreSecretStoreOutput
	ToGetSecretStoreSecretStoreOutputWithContext(context.Context) GetSecretStoreSecretStoreOutput
}

type GetSecretStoreSecretStoreArgs struct {
	ActiveDirectoryStores    GetSecretStoreSecretStoreActiveDirectoryStoreArrayInput    `pulumi:"activeDirectoryStores"`
	Aws                      GetSecretStoreSecretStoreAwArrayInput                      `pulumi:"aws"`
	AwsCertX509s             GetSecretStoreSecretStoreAwsCertX509ArrayInput             `pulumi:"awsCertX509s"`
	AzureStores              GetSecretStoreSecretStoreAzureStoreArrayInput              `pulumi:"azureStores"`
	CyberarkConjurs          GetSecretStoreSecretStoreCyberarkConjurArrayInput          `pulumi:"cyberarkConjurs"`
	CyberarkPamExperimentals GetSecretStoreSecretStoreCyberarkPamExperimentalArrayInput `pulumi:"cyberarkPamExperimentals"`
	CyberarkPams             GetSecretStoreSecretStoreCyberarkPamArrayInput             `pulumi:"cyberarkPams"`
	DelineaStores            GetSecretStoreSecretStoreDelineaStoreArrayInput            `pulumi:"delineaStores"`
	GcpCertX509Stores        GetSecretStoreSecretStoreGcpCertX509StoreArrayInput        `pulumi:"gcpCertX509Stores"`
	GcpStores                GetSecretStoreSecretStoreGcpStoreArrayInput                `pulumi:"gcpStores"`
	KeyfactorSshStores       GetSecretStoreSecretStoreKeyfactorSshStoreArrayInput       `pulumi:"keyfactorSshStores"`
	KeyfactorX509Stores      GetSecretStoreSecretStoreKeyfactorX509StoreArrayInput      `pulumi:"keyfactorX509Stores"`
	VaultApproleCertSshes    GetSecretStoreSecretStoreVaultApproleCertSshArrayInput     `pulumi:"vaultApproleCertSshes"`
	VaultApproleCertX509s    GetSecretStoreSecretStoreVaultApproleCertX509ArrayInput    `pulumi:"vaultApproleCertX509s"`
	VaultApproles            GetSecretStoreSecretStoreVaultApproleArrayInput            `pulumi:"vaultApproles"`
	VaultAwsEc2s             GetSecretStoreSecretStoreVaultAwsEc2ArrayInput             `pulumi:"vaultAwsEc2s"`
	VaultAwsIams             GetSecretStoreSecretStoreVaultAwsIamArrayInput             `pulumi:"vaultAwsIams"`
	VaultTls                 GetSecretStoreSecretStoreVaultTlArrayInput                 `pulumi:"vaultTls"`
	VaultTlsCertSshes        GetSecretStoreSecretStoreVaultTlsCertSshArrayInput         `pulumi:"vaultTlsCertSshes"`
	VaultTlsCertX509s        GetSecretStoreSecretStoreVaultTlsCertX509ArrayInput        `pulumi:"vaultTlsCertX509s"`
	VaultTokenCertSshes      GetSecretStoreSecretStoreVaultTokenCertSshArrayInput       `pulumi:"vaultTokenCertSshes"`
	VaultTokenCertX509s      GetSecretStoreSecretStoreVaultTokenCertX509ArrayInput      `pulumi:"vaultTokenCertX509s"`
	VaultTokens              GetSecretStoreSecretStoreVaultTokenArrayInput              `pulumi:"vaultTokens"`
}

func (GetSecretStoreSecretStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStore)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreArgs) ToGetSecretStoreSecretStoreOutput() GetSecretStoreSecretStoreOutput {
	return i.ToGetSecretStoreSecretStoreOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreArgs) ToGetSecretStoreSecretStoreOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreOutput)
}

// GetSecretStoreSecretStoreArrayInput is an input type that accepts GetSecretStoreSecretStoreArray and GetSecretStoreSecretStoreArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreArrayInput` via:
//
//	GetSecretStoreSecretStoreArray{ GetSecretStoreSecretStoreArgs{...} }
type GetSecretStoreSecretStoreArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreArrayOutput() GetSecretStoreSecretStoreArrayOutput
	ToGetSecretStoreSecretStoreArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreArrayOutput
}

type GetSecretStoreSecretStoreArray []GetSecretStoreSecretStoreInput

func (GetSecretStoreSecretStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStore)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreArray) ToGetSecretStoreSecretStoreArrayOutput() GetSecretStoreSecretStoreArrayOutput {
	return i.ToGetSecretStoreSecretStoreArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreArray) ToGetSecretStoreSecretStoreArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreArrayOutput)
}

type GetSecretStoreSecretStoreOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStore)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreOutput) ToGetSecretStoreSecretStoreOutput() GetSecretStoreSecretStoreOutput {
	return o
}

func (o GetSecretStoreSecretStoreOutput) ToGetSecretStoreSecretStoreOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreOutput {
	return o
}

func (o GetSecretStoreSecretStoreOutput) ActiveDirectoryStores() GetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreActiveDirectoryStore {
		return v.ActiveDirectoryStores
	}).(GetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) Aws() GetSecretStoreSecretStoreAwArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreAw { return v.Aws }).(GetSecretStoreSecretStoreAwArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) AwsCertX509s() GetSecretStoreSecretStoreAwsCertX509ArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreAwsCertX509 { return v.AwsCertX509s }).(GetSecretStoreSecretStoreAwsCertX509ArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) AzureStores() GetSecretStoreSecretStoreAzureStoreArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreAzureStore { return v.AzureStores }).(GetSecretStoreSecretStoreAzureStoreArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) CyberarkConjurs() GetSecretStoreSecretStoreCyberarkConjurArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreCyberarkConjur { return v.CyberarkConjurs }).(GetSecretStoreSecretStoreCyberarkConjurArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) CyberarkPamExperimentals() GetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreCyberarkPamExperimental {
		return v.CyberarkPamExperimentals
	}).(GetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) CyberarkPams() GetSecretStoreSecretStoreCyberarkPamArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreCyberarkPam { return v.CyberarkPams }).(GetSecretStoreSecretStoreCyberarkPamArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) DelineaStores() GetSecretStoreSecretStoreDelineaStoreArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreDelineaStore { return v.DelineaStores }).(GetSecretStoreSecretStoreDelineaStoreArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) GcpCertX509Stores() GetSecretStoreSecretStoreGcpCertX509StoreArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreGcpCertX509Store {
		return v.GcpCertX509Stores
	}).(GetSecretStoreSecretStoreGcpCertX509StoreArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) GcpStores() GetSecretStoreSecretStoreGcpStoreArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreGcpStore { return v.GcpStores }).(GetSecretStoreSecretStoreGcpStoreArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) KeyfactorSshStores() GetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreKeyfactorSshStore {
		return v.KeyfactorSshStores
	}).(GetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) KeyfactorX509Stores() GetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreKeyfactorX509Store {
		return v.KeyfactorX509Stores
	}).(GetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) VaultApproleCertSshes() GetSecretStoreSecretStoreVaultApproleCertSshArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreVaultApproleCertSsh {
		return v.VaultApproleCertSshes
	}).(GetSecretStoreSecretStoreVaultApproleCertSshArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) VaultApproleCertX509s() GetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreVaultApproleCertX509 {
		return v.VaultApproleCertX509s
	}).(GetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) VaultApproles() GetSecretStoreSecretStoreVaultApproleArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreVaultApprole { return v.VaultApproles }).(GetSecretStoreSecretStoreVaultApproleArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) VaultAwsEc2s() GetSecretStoreSecretStoreVaultAwsEc2ArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreVaultAwsEc2 { return v.VaultAwsEc2s }).(GetSecretStoreSecretStoreVaultAwsEc2ArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) VaultAwsIams() GetSecretStoreSecretStoreVaultAwsIamArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreVaultAwsIam { return v.VaultAwsIams }).(GetSecretStoreSecretStoreVaultAwsIamArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) VaultTls() GetSecretStoreSecretStoreVaultTlArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreVaultTl { return v.VaultTls }).(GetSecretStoreSecretStoreVaultTlArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) VaultTlsCertSshes() GetSecretStoreSecretStoreVaultTlsCertSshArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreVaultTlsCertSsh {
		return v.VaultTlsCertSshes
	}).(GetSecretStoreSecretStoreVaultTlsCertSshArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) VaultTlsCertX509s() GetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreVaultTlsCertX509 {
		return v.VaultTlsCertX509s
	}).(GetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) VaultTokenCertSshes() GetSecretStoreSecretStoreVaultTokenCertSshArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreVaultTokenCertSsh {
		return v.VaultTokenCertSshes
	}).(GetSecretStoreSecretStoreVaultTokenCertSshArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) VaultTokenCertX509s() GetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreVaultTokenCertX509 {
		return v.VaultTokenCertX509s
	}).(GetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput)
}

func (o GetSecretStoreSecretStoreOutput) VaultTokens() GetSecretStoreSecretStoreVaultTokenArrayOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStore) []GetSecretStoreSecretStoreVaultToken { return v.VaultTokens }).(GetSecretStoreSecretStoreVaultTokenArrayOutput)
}

type GetSecretStoreSecretStoreArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStore)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreArrayOutput) ToGetSecretStoreSecretStoreArrayOutput() GetSecretStoreSecretStoreArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreArrayOutput) ToGetSecretStoreSecretStoreArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStore {
		return vs[0].([]GetSecretStoreSecretStore)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreOutput)
}

type GetSecretStoreSecretStoreActiveDirectoryStore struct {
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The URL of the Vault to target
	ServerAddress *string `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreActiveDirectoryStoreInput is an input type that accepts GetSecretStoreSecretStoreActiveDirectoryStoreArgs and GetSecretStoreSecretStoreActiveDirectoryStoreOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreActiveDirectoryStoreInput` via:
//
//	GetSecretStoreSecretStoreActiveDirectoryStoreArgs{...}
type GetSecretStoreSecretStoreActiveDirectoryStoreInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreActiveDirectoryStoreOutput() GetSecretStoreSecretStoreActiveDirectoryStoreOutput
	ToGetSecretStoreSecretStoreActiveDirectoryStoreOutputWithContext(context.Context) GetSecretStoreSecretStoreActiveDirectoryStoreOutput
}

type GetSecretStoreSecretStoreActiveDirectoryStoreArgs struct {
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringPtrInput `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreActiveDirectoryStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreActiveDirectoryStore)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreActiveDirectoryStoreArgs) ToGetSecretStoreSecretStoreActiveDirectoryStoreOutput() GetSecretStoreSecretStoreActiveDirectoryStoreOutput {
	return i.ToGetSecretStoreSecretStoreActiveDirectoryStoreOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreActiveDirectoryStoreArgs) ToGetSecretStoreSecretStoreActiveDirectoryStoreOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreActiveDirectoryStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreActiveDirectoryStoreOutput)
}

// GetSecretStoreSecretStoreActiveDirectoryStoreArrayInput is an input type that accepts GetSecretStoreSecretStoreActiveDirectoryStoreArray and GetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreActiveDirectoryStoreArrayInput` via:
//
//	GetSecretStoreSecretStoreActiveDirectoryStoreArray{ GetSecretStoreSecretStoreActiveDirectoryStoreArgs{...} }
type GetSecretStoreSecretStoreActiveDirectoryStoreArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput() GetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput
	ToGetSecretStoreSecretStoreActiveDirectoryStoreArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput
}

type GetSecretStoreSecretStoreActiveDirectoryStoreArray []GetSecretStoreSecretStoreActiveDirectoryStoreInput

func (GetSecretStoreSecretStoreActiveDirectoryStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreActiveDirectoryStore)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreActiveDirectoryStoreArray) ToGetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput() GetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput {
	return i.ToGetSecretStoreSecretStoreActiveDirectoryStoreArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreActiveDirectoryStoreArray) ToGetSecretStoreSecretStoreActiveDirectoryStoreArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput)
}

type GetSecretStoreSecretStoreActiveDirectoryStoreOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreActiveDirectoryStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreActiveDirectoryStore)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreActiveDirectoryStoreOutput) ToGetSecretStoreSecretStoreActiveDirectoryStoreOutput() GetSecretStoreSecretStoreActiveDirectoryStoreOutput {
	return o
}

func (o GetSecretStoreSecretStoreActiveDirectoryStoreOutput) ToGetSecretStoreSecretStoreActiveDirectoryStoreOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreActiveDirectoryStoreOutput {
	return o
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreActiveDirectoryStoreOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreActiveDirectoryStore) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreActiveDirectoryStoreOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreActiveDirectoryStore) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o GetSecretStoreSecretStoreActiveDirectoryStoreOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreActiveDirectoryStore) *string { return v.ServerAddress }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreActiveDirectoryStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreActiveDirectoryStore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreActiveDirectoryStore)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput) ToGetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput() GetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput) ToGetSecretStoreSecretStoreActiveDirectoryStoreArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreActiveDirectoryStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreActiveDirectoryStore {
		return vs[0].([]GetSecretStoreSecretStoreActiveDirectoryStore)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreActiveDirectoryStoreOutput)
}

type GetSecretStoreSecretStoreAw struct {
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The AWS region to target e.g. us-east-1
	Region *string `pulumi:"region"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreAwInput is an input type that accepts GetSecretStoreSecretStoreAwArgs and GetSecretStoreSecretStoreAwOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreAwInput` via:
//
//	GetSecretStoreSecretStoreAwArgs{...}
type GetSecretStoreSecretStoreAwInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreAwOutput() GetSecretStoreSecretStoreAwOutput
	ToGetSecretStoreSecretStoreAwOutputWithContext(context.Context) GetSecretStoreSecretStoreAwOutput
}

type GetSecretStoreSecretStoreAwArgs struct {
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The AWS region to target e.g. us-east-1
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreAwArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreAw)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreAwArgs) ToGetSecretStoreSecretStoreAwOutput() GetSecretStoreSecretStoreAwOutput {
	return i.ToGetSecretStoreSecretStoreAwOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreAwArgs) ToGetSecretStoreSecretStoreAwOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreAwOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreAwOutput)
}

// GetSecretStoreSecretStoreAwArrayInput is an input type that accepts GetSecretStoreSecretStoreAwArray and GetSecretStoreSecretStoreAwArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreAwArrayInput` via:
//
//	GetSecretStoreSecretStoreAwArray{ GetSecretStoreSecretStoreAwArgs{...} }
type GetSecretStoreSecretStoreAwArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreAwArrayOutput() GetSecretStoreSecretStoreAwArrayOutput
	ToGetSecretStoreSecretStoreAwArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreAwArrayOutput
}

type GetSecretStoreSecretStoreAwArray []GetSecretStoreSecretStoreAwInput

func (GetSecretStoreSecretStoreAwArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreAw)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreAwArray) ToGetSecretStoreSecretStoreAwArrayOutput() GetSecretStoreSecretStoreAwArrayOutput {
	return i.ToGetSecretStoreSecretStoreAwArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreAwArray) ToGetSecretStoreSecretStoreAwArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreAwArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreAwArrayOutput)
}

type GetSecretStoreSecretStoreAwOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreAwOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreAw)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreAwOutput) ToGetSecretStoreSecretStoreAwOutput() GetSecretStoreSecretStoreAwOutput {
	return o
}

func (o GetSecretStoreSecretStoreAwOutput) ToGetSecretStoreSecretStoreAwOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreAwOutput {
	return o
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreAwOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreAw) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreAwOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreAw) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The AWS region to target e.g. us-east-1
func (o GetSecretStoreSecretStoreAwOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreAw) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreAwOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreAw) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreAwArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreAwArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreAw)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreAwArrayOutput) ToGetSecretStoreSecretStoreAwArrayOutput() GetSecretStoreSecretStoreAwArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreAwArrayOutput) ToGetSecretStoreSecretStoreAwArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreAwArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreAwArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreAwOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreAw {
		return vs[0].([]GetSecretStoreSecretStoreAw)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreAwOutput)
}

type GetSecretStoreSecretStoreAwsCertX509 struct {
	// The ARN of the CA in AWS Private CA
	CaArn *string `pulumi:"caArn"`
	// The ARN of the AWS certificate template for requested certificates. Must allow SAN, key usage, and ext key usage passthrough from CSR
	CertificateTemplateArn *string `pulumi:"certificateTemplateArn"`
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes *int `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The AWS region to target e.g. us-east-1
	Region *string `pulumi:"region"`
	// The specified signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key. e.g. SHA256WITHRSA
	SigningAlgo *string `pulumi:"signingAlgo"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreAwsCertX509Input is an input type that accepts GetSecretStoreSecretStoreAwsCertX509Args and GetSecretStoreSecretStoreAwsCertX509Output values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreAwsCertX509Input` via:
//
//	GetSecretStoreSecretStoreAwsCertX509Args{...}
type GetSecretStoreSecretStoreAwsCertX509Input interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreAwsCertX509Output() GetSecretStoreSecretStoreAwsCertX509Output
	ToGetSecretStoreSecretStoreAwsCertX509OutputWithContext(context.Context) GetSecretStoreSecretStoreAwsCertX509Output
}

type GetSecretStoreSecretStoreAwsCertX509Args struct {
	// The ARN of the CA in AWS Private CA
	CaArn pulumi.StringPtrInput `pulumi:"caArn"`
	// The ARN of the AWS certificate template for requested certificates. Must allow SAN, key usage, and ext key usage passthrough from CSR
	CertificateTemplateArn pulumi.StringPtrInput `pulumi:"certificateTemplateArn"`
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes pulumi.IntPtrInput `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The AWS region to target e.g. us-east-1
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The specified signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key. e.g. SHA256WITHRSA
	SigningAlgo pulumi.StringPtrInput `pulumi:"signingAlgo"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreAwsCertX509Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreAwsCertX509)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreAwsCertX509Args) ToGetSecretStoreSecretStoreAwsCertX509Output() GetSecretStoreSecretStoreAwsCertX509Output {
	return i.ToGetSecretStoreSecretStoreAwsCertX509OutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreAwsCertX509Args) ToGetSecretStoreSecretStoreAwsCertX509OutputWithContext(ctx context.Context) GetSecretStoreSecretStoreAwsCertX509Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreAwsCertX509Output)
}

// GetSecretStoreSecretStoreAwsCertX509ArrayInput is an input type that accepts GetSecretStoreSecretStoreAwsCertX509Array and GetSecretStoreSecretStoreAwsCertX509ArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreAwsCertX509ArrayInput` via:
//
//	GetSecretStoreSecretStoreAwsCertX509Array{ GetSecretStoreSecretStoreAwsCertX509Args{...} }
type GetSecretStoreSecretStoreAwsCertX509ArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreAwsCertX509ArrayOutput() GetSecretStoreSecretStoreAwsCertX509ArrayOutput
	ToGetSecretStoreSecretStoreAwsCertX509ArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreAwsCertX509ArrayOutput
}

type GetSecretStoreSecretStoreAwsCertX509Array []GetSecretStoreSecretStoreAwsCertX509Input

func (GetSecretStoreSecretStoreAwsCertX509Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreAwsCertX509)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreAwsCertX509Array) ToGetSecretStoreSecretStoreAwsCertX509ArrayOutput() GetSecretStoreSecretStoreAwsCertX509ArrayOutput {
	return i.ToGetSecretStoreSecretStoreAwsCertX509ArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreAwsCertX509Array) ToGetSecretStoreSecretStoreAwsCertX509ArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreAwsCertX509ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreAwsCertX509ArrayOutput)
}

type GetSecretStoreSecretStoreAwsCertX509Output struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreAwsCertX509Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreAwsCertX509)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreAwsCertX509Output) ToGetSecretStoreSecretStoreAwsCertX509Output() GetSecretStoreSecretStoreAwsCertX509Output {
	return o
}

func (o GetSecretStoreSecretStoreAwsCertX509Output) ToGetSecretStoreSecretStoreAwsCertX509OutputWithContext(ctx context.Context) GetSecretStoreSecretStoreAwsCertX509Output {
	return o
}

// The ARN of the CA in AWS Private CA
func (o GetSecretStoreSecretStoreAwsCertX509Output) CaArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreAwsCertX509) *string { return v.CaArn }).(pulumi.StringPtrOutput)
}

// The ARN of the AWS certificate template for requested certificates. Must allow SAN, key usage, and ext key usage passthrough from CSR
func (o GetSecretStoreSecretStoreAwsCertX509Output) CertificateTemplateArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreAwsCertX509) *string { return v.CertificateTemplateArn }).(pulumi.StringPtrOutput)
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreAwsCertX509Output) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreAwsCertX509) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o GetSecretStoreSecretStoreAwsCertX509Output) IssuedCertTtlMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreAwsCertX509) *int { return v.IssuedCertTtlMinutes }).(pulumi.IntPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreAwsCertX509Output) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreAwsCertX509) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The AWS region to target e.g. us-east-1
func (o GetSecretStoreSecretStoreAwsCertX509Output) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreAwsCertX509) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The specified signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key. e.g. SHA256WITHRSA
func (o GetSecretStoreSecretStoreAwsCertX509Output) SigningAlgo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreAwsCertX509) *string { return v.SigningAlgo }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreAwsCertX509Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreAwsCertX509) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreAwsCertX509ArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreAwsCertX509ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreAwsCertX509)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreAwsCertX509ArrayOutput) ToGetSecretStoreSecretStoreAwsCertX509ArrayOutput() GetSecretStoreSecretStoreAwsCertX509ArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreAwsCertX509ArrayOutput) ToGetSecretStoreSecretStoreAwsCertX509ArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreAwsCertX509ArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreAwsCertX509ArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreAwsCertX509Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreAwsCertX509 {
		return vs[0].([]GetSecretStoreSecretStoreAwsCertX509)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreAwsCertX509Output)
}

type GetSecretStoreSecretStoreAzureStore struct {
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The URI of the key vault to target e.g. https://myvault.vault.azure.net
	// * cyberark_conjur:
	VaultUri *string `pulumi:"vaultUri"`
}

// GetSecretStoreSecretStoreAzureStoreInput is an input type that accepts GetSecretStoreSecretStoreAzureStoreArgs and GetSecretStoreSecretStoreAzureStoreOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreAzureStoreInput` via:
//
//	GetSecretStoreSecretStoreAzureStoreArgs{...}
type GetSecretStoreSecretStoreAzureStoreInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreAzureStoreOutput() GetSecretStoreSecretStoreAzureStoreOutput
	ToGetSecretStoreSecretStoreAzureStoreOutputWithContext(context.Context) GetSecretStoreSecretStoreAzureStoreOutput
}

type GetSecretStoreSecretStoreAzureStoreArgs struct {
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The URI of the key vault to target e.g. https://myvault.vault.azure.net
	// * cyberark_conjur:
	VaultUri pulumi.StringPtrInput `pulumi:"vaultUri"`
}

func (GetSecretStoreSecretStoreAzureStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreAzureStore)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreAzureStoreArgs) ToGetSecretStoreSecretStoreAzureStoreOutput() GetSecretStoreSecretStoreAzureStoreOutput {
	return i.ToGetSecretStoreSecretStoreAzureStoreOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreAzureStoreArgs) ToGetSecretStoreSecretStoreAzureStoreOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreAzureStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreAzureStoreOutput)
}

// GetSecretStoreSecretStoreAzureStoreArrayInput is an input type that accepts GetSecretStoreSecretStoreAzureStoreArray and GetSecretStoreSecretStoreAzureStoreArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreAzureStoreArrayInput` via:
//
//	GetSecretStoreSecretStoreAzureStoreArray{ GetSecretStoreSecretStoreAzureStoreArgs{...} }
type GetSecretStoreSecretStoreAzureStoreArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreAzureStoreArrayOutput() GetSecretStoreSecretStoreAzureStoreArrayOutput
	ToGetSecretStoreSecretStoreAzureStoreArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreAzureStoreArrayOutput
}

type GetSecretStoreSecretStoreAzureStoreArray []GetSecretStoreSecretStoreAzureStoreInput

func (GetSecretStoreSecretStoreAzureStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreAzureStore)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreAzureStoreArray) ToGetSecretStoreSecretStoreAzureStoreArrayOutput() GetSecretStoreSecretStoreAzureStoreArrayOutput {
	return i.ToGetSecretStoreSecretStoreAzureStoreArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreAzureStoreArray) ToGetSecretStoreSecretStoreAzureStoreArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreAzureStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreAzureStoreArrayOutput)
}

type GetSecretStoreSecretStoreAzureStoreOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreAzureStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreAzureStore)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreAzureStoreOutput) ToGetSecretStoreSecretStoreAzureStoreOutput() GetSecretStoreSecretStoreAzureStoreOutput {
	return o
}

func (o GetSecretStoreSecretStoreAzureStoreOutput) ToGetSecretStoreSecretStoreAzureStoreOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreAzureStoreOutput {
	return o
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreAzureStoreOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreAzureStore) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreAzureStoreOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreAzureStore) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreAzureStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreAzureStore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The URI of the key vault to target e.g. https://myvault.vault.azure.net
// * cyberark_conjur:
func (o GetSecretStoreSecretStoreAzureStoreOutput) VaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreAzureStore) *string { return v.VaultUri }).(pulumi.StringPtrOutput)
}

type GetSecretStoreSecretStoreAzureStoreArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreAzureStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreAzureStore)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreAzureStoreArrayOutput) ToGetSecretStoreSecretStoreAzureStoreArrayOutput() GetSecretStoreSecretStoreAzureStoreArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreAzureStoreArrayOutput) ToGetSecretStoreSecretStoreAzureStoreArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreAzureStoreArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreAzureStoreArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreAzureStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreAzureStore {
		return vs[0].([]GetSecretStoreSecretStoreAzureStore)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreAzureStoreOutput)
}

type GetSecretStoreSecretStoreCyberarkConjur struct {
	// The URL of the Cyberark instance
	AppUrl *string `pulumi:"appUrl"`
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreCyberarkConjurInput is an input type that accepts GetSecretStoreSecretStoreCyberarkConjurArgs and GetSecretStoreSecretStoreCyberarkConjurOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreCyberarkConjurInput` via:
//
//	GetSecretStoreSecretStoreCyberarkConjurArgs{...}
type GetSecretStoreSecretStoreCyberarkConjurInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreCyberarkConjurOutput() GetSecretStoreSecretStoreCyberarkConjurOutput
	ToGetSecretStoreSecretStoreCyberarkConjurOutputWithContext(context.Context) GetSecretStoreSecretStoreCyberarkConjurOutput
}

type GetSecretStoreSecretStoreCyberarkConjurArgs struct {
	// The URL of the Cyberark instance
	AppUrl pulumi.StringPtrInput `pulumi:"appUrl"`
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreCyberarkConjurArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreCyberarkConjur)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreCyberarkConjurArgs) ToGetSecretStoreSecretStoreCyberarkConjurOutput() GetSecretStoreSecretStoreCyberarkConjurOutput {
	return i.ToGetSecretStoreSecretStoreCyberarkConjurOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreCyberarkConjurArgs) ToGetSecretStoreSecretStoreCyberarkConjurOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreCyberarkConjurOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreCyberarkConjurOutput)
}

// GetSecretStoreSecretStoreCyberarkConjurArrayInput is an input type that accepts GetSecretStoreSecretStoreCyberarkConjurArray and GetSecretStoreSecretStoreCyberarkConjurArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreCyberarkConjurArrayInput` via:
//
//	GetSecretStoreSecretStoreCyberarkConjurArray{ GetSecretStoreSecretStoreCyberarkConjurArgs{...} }
type GetSecretStoreSecretStoreCyberarkConjurArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreCyberarkConjurArrayOutput() GetSecretStoreSecretStoreCyberarkConjurArrayOutput
	ToGetSecretStoreSecretStoreCyberarkConjurArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreCyberarkConjurArrayOutput
}

type GetSecretStoreSecretStoreCyberarkConjurArray []GetSecretStoreSecretStoreCyberarkConjurInput

func (GetSecretStoreSecretStoreCyberarkConjurArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreCyberarkConjur)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreCyberarkConjurArray) ToGetSecretStoreSecretStoreCyberarkConjurArrayOutput() GetSecretStoreSecretStoreCyberarkConjurArrayOutput {
	return i.ToGetSecretStoreSecretStoreCyberarkConjurArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreCyberarkConjurArray) ToGetSecretStoreSecretStoreCyberarkConjurArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreCyberarkConjurArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreCyberarkConjurArrayOutput)
}

type GetSecretStoreSecretStoreCyberarkConjurOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreCyberarkConjurOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreCyberarkConjur)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreCyberarkConjurOutput) ToGetSecretStoreSecretStoreCyberarkConjurOutput() GetSecretStoreSecretStoreCyberarkConjurOutput {
	return o
}

func (o GetSecretStoreSecretStoreCyberarkConjurOutput) ToGetSecretStoreSecretStoreCyberarkConjurOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreCyberarkConjurOutput {
	return o
}

// The URL of the Cyberark instance
func (o GetSecretStoreSecretStoreCyberarkConjurOutput) AppUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreCyberarkConjur) *string { return v.AppUrl }).(pulumi.StringPtrOutput)
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreCyberarkConjurOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreCyberarkConjur) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreCyberarkConjurOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreCyberarkConjur) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreCyberarkConjurOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreCyberarkConjur) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreCyberarkConjurArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreCyberarkConjurArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreCyberarkConjur)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreCyberarkConjurArrayOutput) ToGetSecretStoreSecretStoreCyberarkConjurArrayOutput() GetSecretStoreSecretStoreCyberarkConjurArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreCyberarkConjurArrayOutput) ToGetSecretStoreSecretStoreCyberarkConjurArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreCyberarkConjurArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreCyberarkConjurArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreCyberarkConjurOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreCyberarkConjur {
		return vs[0].([]GetSecretStoreSecretStoreCyberarkConjur)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreCyberarkConjurOutput)
}

type GetSecretStoreSecretStoreCyberarkPam struct {
	// The URL of the Cyberark instance
	AppUrl *string `pulumi:"appUrl"`
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreCyberarkPamInput is an input type that accepts GetSecretStoreSecretStoreCyberarkPamArgs and GetSecretStoreSecretStoreCyberarkPamOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreCyberarkPamInput` via:
//
//	GetSecretStoreSecretStoreCyberarkPamArgs{...}
type GetSecretStoreSecretStoreCyberarkPamInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreCyberarkPamOutput() GetSecretStoreSecretStoreCyberarkPamOutput
	ToGetSecretStoreSecretStoreCyberarkPamOutputWithContext(context.Context) GetSecretStoreSecretStoreCyberarkPamOutput
}

type GetSecretStoreSecretStoreCyberarkPamArgs struct {
	// The URL of the Cyberark instance
	AppUrl pulumi.StringPtrInput `pulumi:"appUrl"`
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreCyberarkPamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreCyberarkPam)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreCyberarkPamArgs) ToGetSecretStoreSecretStoreCyberarkPamOutput() GetSecretStoreSecretStoreCyberarkPamOutput {
	return i.ToGetSecretStoreSecretStoreCyberarkPamOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreCyberarkPamArgs) ToGetSecretStoreSecretStoreCyberarkPamOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreCyberarkPamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreCyberarkPamOutput)
}

// GetSecretStoreSecretStoreCyberarkPamArrayInput is an input type that accepts GetSecretStoreSecretStoreCyberarkPamArray and GetSecretStoreSecretStoreCyberarkPamArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreCyberarkPamArrayInput` via:
//
//	GetSecretStoreSecretStoreCyberarkPamArray{ GetSecretStoreSecretStoreCyberarkPamArgs{...} }
type GetSecretStoreSecretStoreCyberarkPamArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreCyberarkPamArrayOutput() GetSecretStoreSecretStoreCyberarkPamArrayOutput
	ToGetSecretStoreSecretStoreCyberarkPamArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreCyberarkPamArrayOutput
}

type GetSecretStoreSecretStoreCyberarkPamArray []GetSecretStoreSecretStoreCyberarkPamInput

func (GetSecretStoreSecretStoreCyberarkPamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreCyberarkPam)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreCyberarkPamArray) ToGetSecretStoreSecretStoreCyberarkPamArrayOutput() GetSecretStoreSecretStoreCyberarkPamArrayOutput {
	return i.ToGetSecretStoreSecretStoreCyberarkPamArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreCyberarkPamArray) ToGetSecretStoreSecretStoreCyberarkPamArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreCyberarkPamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreCyberarkPamArrayOutput)
}

type GetSecretStoreSecretStoreCyberarkPamOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreCyberarkPamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreCyberarkPam)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreCyberarkPamOutput) ToGetSecretStoreSecretStoreCyberarkPamOutput() GetSecretStoreSecretStoreCyberarkPamOutput {
	return o
}

func (o GetSecretStoreSecretStoreCyberarkPamOutput) ToGetSecretStoreSecretStoreCyberarkPamOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreCyberarkPamOutput {
	return o
}

// The URL of the Cyberark instance
func (o GetSecretStoreSecretStoreCyberarkPamOutput) AppUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreCyberarkPam) *string { return v.AppUrl }).(pulumi.StringPtrOutput)
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreCyberarkPamOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreCyberarkPam) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreCyberarkPamOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreCyberarkPam) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreCyberarkPamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreCyberarkPam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreCyberarkPamArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreCyberarkPamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreCyberarkPam)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreCyberarkPamArrayOutput) ToGetSecretStoreSecretStoreCyberarkPamArrayOutput() GetSecretStoreSecretStoreCyberarkPamArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreCyberarkPamArrayOutput) ToGetSecretStoreSecretStoreCyberarkPamArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreCyberarkPamArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreCyberarkPamArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreCyberarkPamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreCyberarkPam {
		return vs[0].([]GetSecretStoreSecretStoreCyberarkPam)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreCyberarkPamOutput)
}

type GetSecretStoreSecretStoreCyberarkPamExperimental struct {
	// The URL of the Cyberark instance
	AppUrl *string `pulumi:"appUrl"`
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreCyberarkPamExperimentalInput is an input type that accepts GetSecretStoreSecretStoreCyberarkPamExperimentalArgs and GetSecretStoreSecretStoreCyberarkPamExperimentalOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreCyberarkPamExperimentalInput` via:
//
//	GetSecretStoreSecretStoreCyberarkPamExperimentalArgs{...}
type GetSecretStoreSecretStoreCyberarkPamExperimentalInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreCyberarkPamExperimentalOutput() GetSecretStoreSecretStoreCyberarkPamExperimentalOutput
	ToGetSecretStoreSecretStoreCyberarkPamExperimentalOutputWithContext(context.Context) GetSecretStoreSecretStoreCyberarkPamExperimentalOutput
}

type GetSecretStoreSecretStoreCyberarkPamExperimentalArgs struct {
	// The URL of the Cyberark instance
	AppUrl pulumi.StringPtrInput `pulumi:"appUrl"`
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreCyberarkPamExperimentalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreCyberarkPamExperimental)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreCyberarkPamExperimentalArgs) ToGetSecretStoreSecretStoreCyberarkPamExperimentalOutput() GetSecretStoreSecretStoreCyberarkPamExperimentalOutput {
	return i.ToGetSecretStoreSecretStoreCyberarkPamExperimentalOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreCyberarkPamExperimentalArgs) ToGetSecretStoreSecretStoreCyberarkPamExperimentalOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreCyberarkPamExperimentalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreCyberarkPamExperimentalOutput)
}

// GetSecretStoreSecretStoreCyberarkPamExperimentalArrayInput is an input type that accepts GetSecretStoreSecretStoreCyberarkPamExperimentalArray and GetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreCyberarkPamExperimentalArrayInput` via:
//
//	GetSecretStoreSecretStoreCyberarkPamExperimentalArray{ GetSecretStoreSecretStoreCyberarkPamExperimentalArgs{...} }
type GetSecretStoreSecretStoreCyberarkPamExperimentalArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput() GetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput
	ToGetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput
}

type GetSecretStoreSecretStoreCyberarkPamExperimentalArray []GetSecretStoreSecretStoreCyberarkPamExperimentalInput

func (GetSecretStoreSecretStoreCyberarkPamExperimentalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreCyberarkPamExperimental)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreCyberarkPamExperimentalArray) ToGetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput() GetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput {
	return i.ToGetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreCyberarkPamExperimentalArray) ToGetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput)
}

type GetSecretStoreSecretStoreCyberarkPamExperimentalOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreCyberarkPamExperimentalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreCyberarkPamExperimental)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreCyberarkPamExperimentalOutput) ToGetSecretStoreSecretStoreCyberarkPamExperimentalOutput() GetSecretStoreSecretStoreCyberarkPamExperimentalOutput {
	return o
}

func (o GetSecretStoreSecretStoreCyberarkPamExperimentalOutput) ToGetSecretStoreSecretStoreCyberarkPamExperimentalOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreCyberarkPamExperimentalOutput {
	return o
}

// The URL of the Cyberark instance
func (o GetSecretStoreSecretStoreCyberarkPamExperimentalOutput) AppUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreCyberarkPamExperimental) *string { return v.AppUrl }).(pulumi.StringPtrOutput)
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreCyberarkPamExperimentalOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreCyberarkPamExperimental) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreCyberarkPamExperimentalOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreCyberarkPamExperimental) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreCyberarkPamExperimentalOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreCyberarkPamExperimental) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreCyberarkPamExperimental)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput) ToGetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput() GetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput) ToGetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreCyberarkPamExperimentalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreCyberarkPamExperimental {
		return vs[0].([]GetSecretStoreSecretStoreCyberarkPamExperimental)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreCyberarkPamExperimentalOutput)
}

type GetSecretStoreSecretStoreDelineaStore struct {
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The URL of the Delinea instance
	ServerUrl *string `pulumi:"serverUrl"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The tenant name to target
	// * gcp_store:
	TenantName *string `pulumi:"tenantName"`
}

// GetSecretStoreSecretStoreDelineaStoreInput is an input type that accepts GetSecretStoreSecretStoreDelineaStoreArgs and GetSecretStoreSecretStoreDelineaStoreOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreDelineaStoreInput` via:
//
//	GetSecretStoreSecretStoreDelineaStoreArgs{...}
type GetSecretStoreSecretStoreDelineaStoreInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreDelineaStoreOutput() GetSecretStoreSecretStoreDelineaStoreOutput
	ToGetSecretStoreSecretStoreDelineaStoreOutputWithContext(context.Context) GetSecretStoreSecretStoreDelineaStoreOutput
}

type GetSecretStoreSecretStoreDelineaStoreArgs struct {
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The URL of the Delinea instance
	ServerUrl pulumi.StringPtrInput `pulumi:"serverUrl"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The tenant name to target
	// * gcp_store:
	TenantName pulumi.StringPtrInput `pulumi:"tenantName"`
}

func (GetSecretStoreSecretStoreDelineaStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreDelineaStore)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreDelineaStoreArgs) ToGetSecretStoreSecretStoreDelineaStoreOutput() GetSecretStoreSecretStoreDelineaStoreOutput {
	return i.ToGetSecretStoreSecretStoreDelineaStoreOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreDelineaStoreArgs) ToGetSecretStoreSecretStoreDelineaStoreOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreDelineaStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreDelineaStoreOutput)
}

// GetSecretStoreSecretStoreDelineaStoreArrayInput is an input type that accepts GetSecretStoreSecretStoreDelineaStoreArray and GetSecretStoreSecretStoreDelineaStoreArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreDelineaStoreArrayInput` via:
//
//	GetSecretStoreSecretStoreDelineaStoreArray{ GetSecretStoreSecretStoreDelineaStoreArgs{...} }
type GetSecretStoreSecretStoreDelineaStoreArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreDelineaStoreArrayOutput() GetSecretStoreSecretStoreDelineaStoreArrayOutput
	ToGetSecretStoreSecretStoreDelineaStoreArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreDelineaStoreArrayOutput
}

type GetSecretStoreSecretStoreDelineaStoreArray []GetSecretStoreSecretStoreDelineaStoreInput

func (GetSecretStoreSecretStoreDelineaStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreDelineaStore)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreDelineaStoreArray) ToGetSecretStoreSecretStoreDelineaStoreArrayOutput() GetSecretStoreSecretStoreDelineaStoreArrayOutput {
	return i.ToGetSecretStoreSecretStoreDelineaStoreArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreDelineaStoreArray) ToGetSecretStoreSecretStoreDelineaStoreArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreDelineaStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreDelineaStoreArrayOutput)
}

type GetSecretStoreSecretStoreDelineaStoreOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreDelineaStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreDelineaStore)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreDelineaStoreOutput) ToGetSecretStoreSecretStoreDelineaStoreOutput() GetSecretStoreSecretStoreDelineaStoreOutput {
	return o
}

func (o GetSecretStoreSecretStoreDelineaStoreOutput) ToGetSecretStoreSecretStoreDelineaStoreOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreDelineaStoreOutput {
	return o
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreDelineaStoreOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreDelineaStore) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreDelineaStoreOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreDelineaStore) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The URL of the Delinea instance
func (o GetSecretStoreSecretStoreDelineaStoreOutput) ServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreDelineaStore) *string { return v.ServerUrl }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreDelineaStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreDelineaStore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The tenant name to target
// * gcp_store:
func (o GetSecretStoreSecretStoreDelineaStoreOutput) TenantName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreDelineaStore) *string { return v.TenantName }).(pulumi.StringPtrOutput)
}

type GetSecretStoreSecretStoreDelineaStoreArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreDelineaStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreDelineaStore)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreDelineaStoreArrayOutput) ToGetSecretStoreSecretStoreDelineaStoreArrayOutput() GetSecretStoreSecretStoreDelineaStoreArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreDelineaStoreArrayOutput) ToGetSecretStoreSecretStoreDelineaStoreArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreDelineaStoreArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreDelineaStoreArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreDelineaStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreDelineaStore {
		return vs[0].([]GetSecretStoreSecretStoreDelineaStore)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreDelineaStoreOutput)
}

type GetSecretStoreSecretStoreGcpCertX509Store struct {
	// The ID of the target CA
	CaId *string `pulumi:"caId"`
	// The ID of the target CA pool
	CaPoolId *string `pulumi:"caPoolId"`
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes *int `pulumi:"issuedCertTtlMinutes"`
	// The Region for the CA in GCP format e.g. us-west1
	Location *string `pulumi:"location"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The GCP project ID to target.
	ProjectId *string `pulumi:"projectId"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreGcpCertX509StoreInput is an input type that accepts GetSecretStoreSecretStoreGcpCertX509StoreArgs and GetSecretStoreSecretStoreGcpCertX509StoreOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreGcpCertX509StoreInput` via:
//
//	GetSecretStoreSecretStoreGcpCertX509StoreArgs{...}
type GetSecretStoreSecretStoreGcpCertX509StoreInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreGcpCertX509StoreOutput() GetSecretStoreSecretStoreGcpCertX509StoreOutput
	ToGetSecretStoreSecretStoreGcpCertX509StoreOutputWithContext(context.Context) GetSecretStoreSecretStoreGcpCertX509StoreOutput
}

type GetSecretStoreSecretStoreGcpCertX509StoreArgs struct {
	// The ID of the target CA
	CaId pulumi.StringPtrInput `pulumi:"caId"`
	// The ID of the target CA pool
	CaPoolId pulumi.StringPtrInput `pulumi:"caPoolId"`
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes pulumi.IntPtrInput `pulumi:"issuedCertTtlMinutes"`
	// The Region for the CA in GCP format e.g. us-west1
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The GCP project ID to target.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreGcpCertX509StoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreGcpCertX509Store)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreGcpCertX509StoreArgs) ToGetSecretStoreSecretStoreGcpCertX509StoreOutput() GetSecretStoreSecretStoreGcpCertX509StoreOutput {
	return i.ToGetSecretStoreSecretStoreGcpCertX509StoreOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreGcpCertX509StoreArgs) ToGetSecretStoreSecretStoreGcpCertX509StoreOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreGcpCertX509StoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreGcpCertX509StoreOutput)
}

// GetSecretStoreSecretStoreGcpCertX509StoreArrayInput is an input type that accepts GetSecretStoreSecretStoreGcpCertX509StoreArray and GetSecretStoreSecretStoreGcpCertX509StoreArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreGcpCertX509StoreArrayInput` via:
//
//	GetSecretStoreSecretStoreGcpCertX509StoreArray{ GetSecretStoreSecretStoreGcpCertX509StoreArgs{...} }
type GetSecretStoreSecretStoreGcpCertX509StoreArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreGcpCertX509StoreArrayOutput() GetSecretStoreSecretStoreGcpCertX509StoreArrayOutput
	ToGetSecretStoreSecretStoreGcpCertX509StoreArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreGcpCertX509StoreArrayOutput
}

type GetSecretStoreSecretStoreGcpCertX509StoreArray []GetSecretStoreSecretStoreGcpCertX509StoreInput

func (GetSecretStoreSecretStoreGcpCertX509StoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreGcpCertX509Store)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreGcpCertX509StoreArray) ToGetSecretStoreSecretStoreGcpCertX509StoreArrayOutput() GetSecretStoreSecretStoreGcpCertX509StoreArrayOutput {
	return i.ToGetSecretStoreSecretStoreGcpCertX509StoreArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreGcpCertX509StoreArray) ToGetSecretStoreSecretStoreGcpCertX509StoreArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreGcpCertX509StoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreGcpCertX509StoreArrayOutput)
}

type GetSecretStoreSecretStoreGcpCertX509StoreOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreGcpCertX509StoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreGcpCertX509Store)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreGcpCertX509StoreOutput) ToGetSecretStoreSecretStoreGcpCertX509StoreOutput() GetSecretStoreSecretStoreGcpCertX509StoreOutput {
	return o
}

func (o GetSecretStoreSecretStoreGcpCertX509StoreOutput) ToGetSecretStoreSecretStoreGcpCertX509StoreOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreGcpCertX509StoreOutput {
	return o
}

// The ID of the target CA
func (o GetSecretStoreSecretStoreGcpCertX509StoreOutput) CaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreGcpCertX509Store) *string { return v.CaId }).(pulumi.StringPtrOutput)
}

// The ID of the target CA pool
func (o GetSecretStoreSecretStoreGcpCertX509StoreOutput) CaPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreGcpCertX509Store) *string { return v.CaPoolId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreGcpCertX509StoreOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreGcpCertX509Store) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o GetSecretStoreSecretStoreGcpCertX509StoreOutput) IssuedCertTtlMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreGcpCertX509Store) *int { return v.IssuedCertTtlMinutes }).(pulumi.IntPtrOutput)
}

// The Region for the CA in GCP format e.g. us-west1
func (o GetSecretStoreSecretStoreGcpCertX509StoreOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreGcpCertX509Store) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreGcpCertX509StoreOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreGcpCertX509Store) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The GCP project ID to target.
func (o GetSecretStoreSecretStoreGcpCertX509StoreOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreGcpCertX509Store) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreGcpCertX509StoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreGcpCertX509Store) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreGcpCertX509StoreArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreGcpCertX509StoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreGcpCertX509Store)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreGcpCertX509StoreArrayOutput) ToGetSecretStoreSecretStoreGcpCertX509StoreArrayOutput() GetSecretStoreSecretStoreGcpCertX509StoreArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreGcpCertX509StoreArrayOutput) ToGetSecretStoreSecretStoreGcpCertX509StoreArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreGcpCertX509StoreArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreGcpCertX509StoreArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreGcpCertX509StoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreGcpCertX509Store {
		return vs[0].([]GetSecretStoreSecretStoreGcpCertX509Store)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreGcpCertX509StoreOutput)
}

type GetSecretStoreSecretStoreGcpStore struct {
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The GCP project ID to target.
	ProjectId *string `pulumi:"projectId"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreGcpStoreInput is an input type that accepts GetSecretStoreSecretStoreGcpStoreArgs and GetSecretStoreSecretStoreGcpStoreOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreGcpStoreInput` via:
//
//	GetSecretStoreSecretStoreGcpStoreArgs{...}
type GetSecretStoreSecretStoreGcpStoreInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreGcpStoreOutput() GetSecretStoreSecretStoreGcpStoreOutput
	ToGetSecretStoreSecretStoreGcpStoreOutputWithContext(context.Context) GetSecretStoreSecretStoreGcpStoreOutput
}

type GetSecretStoreSecretStoreGcpStoreArgs struct {
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The GCP project ID to target.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreGcpStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreGcpStore)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreGcpStoreArgs) ToGetSecretStoreSecretStoreGcpStoreOutput() GetSecretStoreSecretStoreGcpStoreOutput {
	return i.ToGetSecretStoreSecretStoreGcpStoreOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreGcpStoreArgs) ToGetSecretStoreSecretStoreGcpStoreOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreGcpStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreGcpStoreOutput)
}

// GetSecretStoreSecretStoreGcpStoreArrayInput is an input type that accepts GetSecretStoreSecretStoreGcpStoreArray and GetSecretStoreSecretStoreGcpStoreArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreGcpStoreArrayInput` via:
//
//	GetSecretStoreSecretStoreGcpStoreArray{ GetSecretStoreSecretStoreGcpStoreArgs{...} }
type GetSecretStoreSecretStoreGcpStoreArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreGcpStoreArrayOutput() GetSecretStoreSecretStoreGcpStoreArrayOutput
	ToGetSecretStoreSecretStoreGcpStoreArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreGcpStoreArrayOutput
}

type GetSecretStoreSecretStoreGcpStoreArray []GetSecretStoreSecretStoreGcpStoreInput

func (GetSecretStoreSecretStoreGcpStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreGcpStore)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreGcpStoreArray) ToGetSecretStoreSecretStoreGcpStoreArrayOutput() GetSecretStoreSecretStoreGcpStoreArrayOutput {
	return i.ToGetSecretStoreSecretStoreGcpStoreArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreGcpStoreArray) ToGetSecretStoreSecretStoreGcpStoreArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreGcpStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreGcpStoreArrayOutput)
}

type GetSecretStoreSecretStoreGcpStoreOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreGcpStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreGcpStore)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreGcpStoreOutput) ToGetSecretStoreSecretStoreGcpStoreOutput() GetSecretStoreSecretStoreGcpStoreOutput {
	return o
}

func (o GetSecretStoreSecretStoreGcpStoreOutput) ToGetSecretStoreSecretStoreGcpStoreOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreGcpStoreOutput {
	return o
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreGcpStoreOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreGcpStore) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreGcpStoreOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreGcpStore) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The GCP project ID to target.
func (o GetSecretStoreSecretStoreGcpStoreOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreGcpStore) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreGcpStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreGcpStore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreGcpStoreArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreGcpStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreGcpStore)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreGcpStoreArrayOutput) ToGetSecretStoreSecretStoreGcpStoreArrayOutput() GetSecretStoreSecretStoreGcpStoreArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreGcpStoreArrayOutput) ToGetSecretStoreSecretStoreGcpStoreArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreGcpStoreArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreGcpStoreArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreGcpStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreGcpStore {
		return vs[0].([]GetSecretStoreSecretStoreGcpStore)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreGcpStoreOutput)
}

type GetSecretStoreSecretStoreKeyfactorSshStore struct {
	// Path to the root CA that signed the certificate passed to the client for HTTPS connection. This is not required if the CA is trusted by the host operating system. This should be a PEM formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
	CaFilePath *string `pulumi:"caFilePath"`
	// Path to client certificate in PEM format. This certificate must contain a client certificate that is recognized by the EJBCA instance represented by Hostname. This PEM file may also contain the private key associated with the certificate, but KeyFile can also be set to configure the private key.
	CertificateFilePath *string `pulumi:"certificateFilePath"`
	// Name of EJBCA certificate authority that will enroll CSR.
	DefaultCertificateAuthorityName *string `pulumi:"defaultCertificateAuthorityName"`
	// Certificate profile name that EJBCA will enroll the CSR with.
	DefaultCertificateProfileName *string `pulumi:"defaultCertificateProfileName"`
	// End entity profile that EJBCA will enroll the CSR with.
	DefaultEndEntityProfileName *string `pulumi:"defaultEndEntityProfileName"`
	// code used by EJBCA during enrollment. May be left blank if no code is required.
	EnrollmentCodeEnvVar *string `pulumi:"enrollmentCodeEnvVar"`
	// username that used by the EJBCA during enrollment. This can be left out.  If so, the username must be auto-generated on the Keyfactor side.
	EnrollmentUsernameEnvVar *string `pulumi:"enrollmentUsernameEnvVar"`
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// Path to private key in PEM format. This file should contain the private key associated with the client certificate configured in CertificateFile.
	KeyFilePath *string `pulumi:"keyFilePath"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The URL of the Vault to target
	ServerAddress *string `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreKeyfactorSshStoreInput is an input type that accepts GetSecretStoreSecretStoreKeyfactorSshStoreArgs and GetSecretStoreSecretStoreKeyfactorSshStoreOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreKeyfactorSshStoreInput` via:
//
//	GetSecretStoreSecretStoreKeyfactorSshStoreArgs{...}
type GetSecretStoreSecretStoreKeyfactorSshStoreInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreKeyfactorSshStoreOutput() GetSecretStoreSecretStoreKeyfactorSshStoreOutput
	ToGetSecretStoreSecretStoreKeyfactorSshStoreOutputWithContext(context.Context) GetSecretStoreSecretStoreKeyfactorSshStoreOutput
}

type GetSecretStoreSecretStoreKeyfactorSshStoreArgs struct {
	// Path to the root CA that signed the certificate passed to the client for HTTPS connection. This is not required if the CA is trusted by the host operating system. This should be a PEM formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
	CaFilePath pulumi.StringPtrInput `pulumi:"caFilePath"`
	// Path to client certificate in PEM format. This certificate must contain a client certificate that is recognized by the EJBCA instance represented by Hostname. This PEM file may also contain the private key associated with the certificate, but KeyFile can also be set to configure the private key.
	CertificateFilePath pulumi.StringPtrInput `pulumi:"certificateFilePath"`
	// Name of EJBCA certificate authority that will enroll CSR.
	DefaultCertificateAuthorityName pulumi.StringPtrInput `pulumi:"defaultCertificateAuthorityName"`
	// Certificate profile name that EJBCA will enroll the CSR with.
	DefaultCertificateProfileName pulumi.StringPtrInput `pulumi:"defaultCertificateProfileName"`
	// End entity profile that EJBCA will enroll the CSR with.
	DefaultEndEntityProfileName pulumi.StringPtrInput `pulumi:"defaultEndEntityProfileName"`
	// code used by EJBCA during enrollment. May be left blank if no code is required.
	EnrollmentCodeEnvVar pulumi.StringPtrInput `pulumi:"enrollmentCodeEnvVar"`
	// username that used by the EJBCA during enrollment. This can be left out.  If so, the username must be auto-generated on the Keyfactor side.
	EnrollmentUsernameEnvVar pulumi.StringPtrInput `pulumi:"enrollmentUsernameEnvVar"`
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Path to private key in PEM format. This file should contain the private key associated with the client certificate configured in CertificateFile.
	KeyFilePath pulumi.StringPtrInput `pulumi:"keyFilePath"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringPtrInput `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreKeyfactorSshStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreKeyfactorSshStore)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreKeyfactorSshStoreArgs) ToGetSecretStoreSecretStoreKeyfactorSshStoreOutput() GetSecretStoreSecretStoreKeyfactorSshStoreOutput {
	return i.ToGetSecretStoreSecretStoreKeyfactorSshStoreOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreKeyfactorSshStoreArgs) ToGetSecretStoreSecretStoreKeyfactorSshStoreOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreKeyfactorSshStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreKeyfactorSshStoreOutput)
}

// GetSecretStoreSecretStoreKeyfactorSshStoreArrayInput is an input type that accepts GetSecretStoreSecretStoreKeyfactorSshStoreArray and GetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreKeyfactorSshStoreArrayInput` via:
//
//	GetSecretStoreSecretStoreKeyfactorSshStoreArray{ GetSecretStoreSecretStoreKeyfactorSshStoreArgs{...} }
type GetSecretStoreSecretStoreKeyfactorSshStoreArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput() GetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput
	ToGetSecretStoreSecretStoreKeyfactorSshStoreArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput
}

type GetSecretStoreSecretStoreKeyfactorSshStoreArray []GetSecretStoreSecretStoreKeyfactorSshStoreInput

func (GetSecretStoreSecretStoreKeyfactorSshStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreKeyfactorSshStore)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreKeyfactorSshStoreArray) ToGetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput() GetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput {
	return i.ToGetSecretStoreSecretStoreKeyfactorSshStoreArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreKeyfactorSshStoreArray) ToGetSecretStoreSecretStoreKeyfactorSshStoreArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput)
}

type GetSecretStoreSecretStoreKeyfactorSshStoreOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreKeyfactorSshStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreKeyfactorSshStore)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreKeyfactorSshStoreOutput) ToGetSecretStoreSecretStoreKeyfactorSshStoreOutput() GetSecretStoreSecretStoreKeyfactorSshStoreOutput {
	return o
}

func (o GetSecretStoreSecretStoreKeyfactorSshStoreOutput) ToGetSecretStoreSecretStoreKeyfactorSshStoreOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreKeyfactorSshStoreOutput {
	return o
}

// Path to the root CA that signed the certificate passed to the client for HTTPS connection. This is not required if the CA is trusted by the host operating system. This should be a PEM formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
func (o GetSecretStoreSecretStoreKeyfactorSshStoreOutput) CaFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorSshStore) *string { return v.CaFilePath }).(pulumi.StringPtrOutput)
}

// Path to client certificate in PEM format. This certificate must contain a client certificate that is recognized by the EJBCA instance represented by Hostname. This PEM file may also contain the private key associated with the certificate, but KeyFile can also be set to configure the private key.
func (o GetSecretStoreSecretStoreKeyfactorSshStoreOutput) CertificateFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorSshStore) *string { return v.CertificateFilePath }).(pulumi.StringPtrOutput)
}

// Name of EJBCA certificate authority that will enroll CSR.
func (o GetSecretStoreSecretStoreKeyfactorSshStoreOutput) DefaultCertificateAuthorityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorSshStore) *string { return v.DefaultCertificateAuthorityName }).(pulumi.StringPtrOutput)
}

// Certificate profile name that EJBCA will enroll the CSR with.
func (o GetSecretStoreSecretStoreKeyfactorSshStoreOutput) DefaultCertificateProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorSshStore) *string { return v.DefaultCertificateProfileName }).(pulumi.StringPtrOutput)
}

// End entity profile that EJBCA will enroll the CSR with.
func (o GetSecretStoreSecretStoreKeyfactorSshStoreOutput) DefaultEndEntityProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorSshStore) *string { return v.DefaultEndEntityProfileName }).(pulumi.StringPtrOutput)
}

// code used by EJBCA during enrollment. May be left blank if no code is required.
func (o GetSecretStoreSecretStoreKeyfactorSshStoreOutput) EnrollmentCodeEnvVar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorSshStore) *string { return v.EnrollmentCodeEnvVar }).(pulumi.StringPtrOutput)
}

// username that used by the EJBCA during enrollment. This can be left out.  If so, the username must be auto-generated on the Keyfactor side.
func (o GetSecretStoreSecretStoreKeyfactorSshStoreOutput) EnrollmentUsernameEnvVar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorSshStore) *string { return v.EnrollmentUsernameEnvVar }).(pulumi.StringPtrOutput)
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreKeyfactorSshStoreOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorSshStore) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Path to private key in PEM format. This file should contain the private key associated with the client certificate configured in CertificateFile.
func (o GetSecretStoreSecretStoreKeyfactorSshStoreOutput) KeyFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorSshStore) *string { return v.KeyFilePath }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreKeyfactorSshStoreOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorSshStore) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o GetSecretStoreSecretStoreKeyfactorSshStoreOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorSshStore) *string { return v.ServerAddress }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreKeyfactorSshStoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorSshStore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreKeyfactorSshStore)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput) ToGetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput() GetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput) ToGetSecretStoreSecretStoreKeyfactorSshStoreArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreKeyfactorSshStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreKeyfactorSshStore {
		return vs[0].([]GetSecretStoreSecretStoreKeyfactorSshStore)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreKeyfactorSshStoreOutput)
}

type GetSecretStoreSecretStoreKeyfactorX509Store struct {
	// Path to the root CA that signed the certificate passed to the client for HTTPS connection. This is not required if the CA is trusted by the host operating system. This should be a PEM formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
	CaFilePath *string `pulumi:"caFilePath"`
	// Path to client certificate in PEM format. This certificate must contain a client certificate that is recognized by the EJBCA instance represented by Hostname. This PEM file may also contain the private key associated with the certificate, but KeyFile can also be set to configure the private key.
	CertificateFilePath *string `pulumi:"certificateFilePath"`
	// Name of EJBCA certificate authority that will enroll CSR.
	DefaultCertificateAuthorityName *string `pulumi:"defaultCertificateAuthorityName"`
	// Certificate profile name that EJBCA will enroll the CSR with.
	DefaultCertificateProfileName *string `pulumi:"defaultCertificateProfileName"`
	// End entity profile that EJBCA will enroll the CSR with.
	DefaultEndEntityProfileName *string `pulumi:"defaultEndEntityProfileName"`
	// code used by EJBCA during enrollment. May be left blank if no code is required.
	EnrollmentCodeEnvVar *string `pulumi:"enrollmentCodeEnvVar"`
	// username that used by the EJBCA during enrollment. This can be left out.  If so, the username must be auto-generated on the Keyfactor side.
	EnrollmentUsernameEnvVar *string `pulumi:"enrollmentUsernameEnvVar"`
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// Path to private key in PEM format. This file should contain the private key associated with the client certificate configured in CertificateFile.
	KeyFilePath *string `pulumi:"keyFilePath"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The URL of the Vault to target
	ServerAddress *string `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreKeyfactorX509StoreInput is an input type that accepts GetSecretStoreSecretStoreKeyfactorX509StoreArgs and GetSecretStoreSecretStoreKeyfactorX509StoreOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreKeyfactorX509StoreInput` via:
//
//	GetSecretStoreSecretStoreKeyfactorX509StoreArgs{...}
type GetSecretStoreSecretStoreKeyfactorX509StoreInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreKeyfactorX509StoreOutput() GetSecretStoreSecretStoreKeyfactorX509StoreOutput
	ToGetSecretStoreSecretStoreKeyfactorX509StoreOutputWithContext(context.Context) GetSecretStoreSecretStoreKeyfactorX509StoreOutput
}

type GetSecretStoreSecretStoreKeyfactorX509StoreArgs struct {
	// Path to the root CA that signed the certificate passed to the client for HTTPS connection. This is not required if the CA is trusted by the host operating system. This should be a PEM formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
	CaFilePath pulumi.StringPtrInput `pulumi:"caFilePath"`
	// Path to client certificate in PEM format. This certificate must contain a client certificate that is recognized by the EJBCA instance represented by Hostname. This PEM file may also contain the private key associated with the certificate, but KeyFile can also be set to configure the private key.
	CertificateFilePath pulumi.StringPtrInput `pulumi:"certificateFilePath"`
	// Name of EJBCA certificate authority that will enroll CSR.
	DefaultCertificateAuthorityName pulumi.StringPtrInput `pulumi:"defaultCertificateAuthorityName"`
	// Certificate profile name that EJBCA will enroll the CSR with.
	DefaultCertificateProfileName pulumi.StringPtrInput `pulumi:"defaultCertificateProfileName"`
	// End entity profile that EJBCA will enroll the CSR with.
	DefaultEndEntityProfileName pulumi.StringPtrInput `pulumi:"defaultEndEntityProfileName"`
	// code used by EJBCA during enrollment. May be left blank if no code is required.
	EnrollmentCodeEnvVar pulumi.StringPtrInput `pulumi:"enrollmentCodeEnvVar"`
	// username that used by the EJBCA during enrollment. This can be left out.  If so, the username must be auto-generated on the Keyfactor side.
	EnrollmentUsernameEnvVar pulumi.StringPtrInput `pulumi:"enrollmentUsernameEnvVar"`
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Path to private key in PEM format. This file should contain the private key associated with the client certificate configured in CertificateFile.
	KeyFilePath pulumi.StringPtrInput `pulumi:"keyFilePath"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringPtrInput `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreKeyfactorX509StoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreKeyfactorX509Store)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreKeyfactorX509StoreArgs) ToGetSecretStoreSecretStoreKeyfactorX509StoreOutput() GetSecretStoreSecretStoreKeyfactorX509StoreOutput {
	return i.ToGetSecretStoreSecretStoreKeyfactorX509StoreOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreKeyfactorX509StoreArgs) ToGetSecretStoreSecretStoreKeyfactorX509StoreOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreKeyfactorX509StoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreKeyfactorX509StoreOutput)
}

// GetSecretStoreSecretStoreKeyfactorX509StoreArrayInput is an input type that accepts GetSecretStoreSecretStoreKeyfactorX509StoreArray and GetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreKeyfactorX509StoreArrayInput` via:
//
//	GetSecretStoreSecretStoreKeyfactorX509StoreArray{ GetSecretStoreSecretStoreKeyfactorX509StoreArgs{...} }
type GetSecretStoreSecretStoreKeyfactorX509StoreArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput() GetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput
	ToGetSecretStoreSecretStoreKeyfactorX509StoreArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput
}

type GetSecretStoreSecretStoreKeyfactorX509StoreArray []GetSecretStoreSecretStoreKeyfactorX509StoreInput

func (GetSecretStoreSecretStoreKeyfactorX509StoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreKeyfactorX509Store)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreKeyfactorX509StoreArray) ToGetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput() GetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput {
	return i.ToGetSecretStoreSecretStoreKeyfactorX509StoreArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreKeyfactorX509StoreArray) ToGetSecretStoreSecretStoreKeyfactorX509StoreArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput)
}

type GetSecretStoreSecretStoreKeyfactorX509StoreOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreKeyfactorX509StoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreKeyfactorX509Store)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreKeyfactorX509StoreOutput) ToGetSecretStoreSecretStoreKeyfactorX509StoreOutput() GetSecretStoreSecretStoreKeyfactorX509StoreOutput {
	return o
}

func (o GetSecretStoreSecretStoreKeyfactorX509StoreOutput) ToGetSecretStoreSecretStoreKeyfactorX509StoreOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreKeyfactorX509StoreOutput {
	return o
}

// Path to the root CA that signed the certificate passed to the client for HTTPS connection. This is not required if the CA is trusted by the host operating system. This should be a PEM formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
func (o GetSecretStoreSecretStoreKeyfactorX509StoreOutput) CaFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorX509Store) *string { return v.CaFilePath }).(pulumi.StringPtrOutput)
}

// Path to client certificate in PEM format. This certificate must contain a client certificate that is recognized by the EJBCA instance represented by Hostname. This PEM file may also contain the private key associated with the certificate, but KeyFile can also be set to configure the private key.
func (o GetSecretStoreSecretStoreKeyfactorX509StoreOutput) CertificateFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorX509Store) *string { return v.CertificateFilePath }).(pulumi.StringPtrOutput)
}

// Name of EJBCA certificate authority that will enroll CSR.
func (o GetSecretStoreSecretStoreKeyfactorX509StoreOutput) DefaultCertificateAuthorityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorX509Store) *string { return v.DefaultCertificateAuthorityName }).(pulumi.StringPtrOutput)
}

// Certificate profile name that EJBCA will enroll the CSR with.
func (o GetSecretStoreSecretStoreKeyfactorX509StoreOutput) DefaultCertificateProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorX509Store) *string { return v.DefaultCertificateProfileName }).(pulumi.StringPtrOutput)
}

// End entity profile that EJBCA will enroll the CSR with.
func (o GetSecretStoreSecretStoreKeyfactorX509StoreOutput) DefaultEndEntityProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorX509Store) *string { return v.DefaultEndEntityProfileName }).(pulumi.StringPtrOutput)
}

// code used by EJBCA during enrollment. May be left blank if no code is required.
func (o GetSecretStoreSecretStoreKeyfactorX509StoreOutput) EnrollmentCodeEnvVar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorX509Store) *string { return v.EnrollmentCodeEnvVar }).(pulumi.StringPtrOutput)
}

// username that used by the EJBCA during enrollment. This can be left out.  If so, the username must be auto-generated on the Keyfactor side.
func (o GetSecretStoreSecretStoreKeyfactorX509StoreOutput) EnrollmentUsernameEnvVar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorX509Store) *string { return v.EnrollmentUsernameEnvVar }).(pulumi.StringPtrOutput)
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreKeyfactorX509StoreOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorX509Store) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Path to private key in PEM format. This file should contain the private key associated with the client certificate configured in CertificateFile.
func (o GetSecretStoreSecretStoreKeyfactorX509StoreOutput) KeyFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorX509Store) *string { return v.KeyFilePath }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreKeyfactorX509StoreOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorX509Store) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o GetSecretStoreSecretStoreKeyfactorX509StoreOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorX509Store) *string { return v.ServerAddress }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreKeyfactorX509StoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreKeyfactorX509Store) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreKeyfactorX509Store)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput) ToGetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput() GetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput) ToGetSecretStoreSecretStoreKeyfactorX509StoreArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreKeyfactorX509StoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreKeyfactorX509Store {
		return vs[0].([]GetSecretStoreSecretStoreKeyfactorX509Store)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreKeyfactorX509StoreOutput)
}

type GetSecretStoreSecretStoreVaultApprole struct {
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress *string `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreVaultApproleInput is an input type that accepts GetSecretStoreSecretStoreVaultApproleArgs and GetSecretStoreSecretStoreVaultApproleOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultApproleInput` via:
//
//	GetSecretStoreSecretStoreVaultApproleArgs{...}
type GetSecretStoreSecretStoreVaultApproleInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultApproleOutput() GetSecretStoreSecretStoreVaultApproleOutput
	ToGetSecretStoreSecretStoreVaultApproleOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultApproleOutput
}

type GetSecretStoreSecretStoreVaultApproleArgs struct {
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringPtrInput `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreVaultApproleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultApprole)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultApproleArgs) ToGetSecretStoreSecretStoreVaultApproleOutput() GetSecretStoreSecretStoreVaultApproleOutput {
	return i.ToGetSecretStoreSecretStoreVaultApproleOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultApproleArgs) ToGetSecretStoreSecretStoreVaultApproleOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultApproleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultApproleOutput)
}

// GetSecretStoreSecretStoreVaultApproleArrayInput is an input type that accepts GetSecretStoreSecretStoreVaultApproleArray and GetSecretStoreSecretStoreVaultApproleArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultApproleArrayInput` via:
//
//	GetSecretStoreSecretStoreVaultApproleArray{ GetSecretStoreSecretStoreVaultApproleArgs{...} }
type GetSecretStoreSecretStoreVaultApproleArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultApproleArrayOutput() GetSecretStoreSecretStoreVaultApproleArrayOutput
	ToGetSecretStoreSecretStoreVaultApproleArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultApproleArrayOutput
}

type GetSecretStoreSecretStoreVaultApproleArray []GetSecretStoreSecretStoreVaultApproleInput

func (GetSecretStoreSecretStoreVaultApproleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultApprole)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultApproleArray) ToGetSecretStoreSecretStoreVaultApproleArrayOutput() GetSecretStoreSecretStoreVaultApproleArrayOutput {
	return i.ToGetSecretStoreSecretStoreVaultApproleArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultApproleArray) ToGetSecretStoreSecretStoreVaultApproleArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultApproleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultApproleArrayOutput)
}

type GetSecretStoreSecretStoreVaultApproleOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultApproleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultApprole)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultApproleOutput) ToGetSecretStoreSecretStoreVaultApproleOutput() GetSecretStoreSecretStoreVaultApproleOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultApproleOutput) ToGetSecretStoreSecretStoreVaultApproleOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultApproleOutput {
	return o
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreVaultApproleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApprole) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreVaultApproleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApprole) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o GetSecretStoreSecretStoreVaultApproleOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApprole) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o GetSecretStoreSecretStoreVaultApproleOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApprole) *string { return v.ServerAddress }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreVaultApproleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApprole) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreVaultApproleArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultApproleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultApprole)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultApproleArrayOutput) ToGetSecretStoreSecretStoreVaultApproleArrayOutput() GetSecretStoreSecretStoreVaultApproleArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultApproleArrayOutput) ToGetSecretStoreSecretStoreVaultApproleArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultApproleArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultApproleArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreVaultApproleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreVaultApprole {
		return vs[0].([]GetSecretStoreSecretStoreVaultApprole)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreVaultApproleOutput)
}

type GetSecretStoreSecretStoreVaultApproleCertSsh struct {
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes *int `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress *string `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole *string `pulumi:"signingRole"`
	// The mount point of the SSH engine configured with the desired CA
	SshMountPoint *string `pulumi:"sshMountPoint"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreVaultApproleCertSshInput is an input type that accepts GetSecretStoreSecretStoreVaultApproleCertSshArgs and GetSecretStoreSecretStoreVaultApproleCertSshOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultApproleCertSshInput` via:
//
//	GetSecretStoreSecretStoreVaultApproleCertSshArgs{...}
type GetSecretStoreSecretStoreVaultApproleCertSshInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultApproleCertSshOutput() GetSecretStoreSecretStoreVaultApproleCertSshOutput
	ToGetSecretStoreSecretStoreVaultApproleCertSshOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultApproleCertSshOutput
}

type GetSecretStoreSecretStoreVaultApproleCertSshArgs struct {
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes pulumi.IntPtrInput `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringPtrInput `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole pulumi.StringPtrInput `pulumi:"signingRole"`
	// The mount point of the SSH engine configured with the desired CA
	SshMountPoint pulumi.StringPtrInput `pulumi:"sshMountPoint"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreVaultApproleCertSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultApproleCertSsh)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultApproleCertSshArgs) ToGetSecretStoreSecretStoreVaultApproleCertSshOutput() GetSecretStoreSecretStoreVaultApproleCertSshOutput {
	return i.ToGetSecretStoreSecretStoreVaultApproleCertSshOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultApproleCertSshArgs) ToGetSecretStoreSecretStoreVaultApproleCertSshOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultApproleCertSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultApproleCertSshOutput)
}

// GetSecretStoreSecretStoreVaultApproleCertSshArrayInput is an input type that accepts GetSecretStoreSecretStoreVaultApproleCertSshArray and GetSecretStoreSecretStoreVaultApproleCertSshArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultApproleCertSshArrayInput` via:
//
//	GetSecretStoreSecretStoreVaultApproleCertSshArray{ GetSecretStoreSecretStoreVaultApproleCertSshArgs{...} }
type GetSecretStoreSecretStoreVaultApproleCertSshArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultApproleCertSshArrayOutput() GetSecretStoreSecretStoreVaultApproleCertSshArrayOutput
	ToGetSecretStoreSecretStoreVaultApproleCertSshArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultApproleCertSshArrayOutput
}

type GetSecretStoreSecretStoreVaultApproleCertSshArray []GetSecretStoreSecretStoreVaultApproleCertSshInput

func (GetSecretStoreSecretStoreVaultApproleCertSshArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultApproleCertSsh)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultApproleCertSshArray) ToGetSecretStoreSecretStoreVaultApproleCertSshArrayOutput() GetSecretStoreSecretStoreVaultApproleCertSshArrayOutput {
	return i.ToGetSecretStoreSecretStoreVaultApproleCertSshArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultApproleCertSshArray) ToGetSecretStoreSecretStoreVaultApproleCertSshArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultApproleCertSshArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultApproleCertSshArrayOutput)
}

type GetSecretStoreSecretStoreVaultApproleCertSshOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultApproleCertSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultApproleCertSsh)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultApproleCertSshOutput) ToGetSecretStoreSecretStoreVaultApproleCertSshOutput() GetSecretStoreSecretStoreVaultApproleCertSshOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultApproleCertSshOutput) ToGetSecretStoreSecretStoreVaultApproleCertSshOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultApproleCertSshOutput {
	return o
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreVaultApproleCertSshOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApproleCertSsh) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o GetSecretStoreSecretStoreVaultApproleCertSshOutput) IssuedCertTtlMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApproleCertSsh) *int { return v.IssuedCertTtlMinutes }).(pulumi.IntPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreVaultApproleCertSshOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApproleCertSsh) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o GetSecretStoreSecretStoreVaultApproleCertSshOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApproleCertSsh) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o GetSecretStoreSecretStoreVaultApproleCertSshOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApproleCertSsh) *string { return v.ServerAddress }).(pulumi.StringPtrOutput)
}

// The signing role to be used for signing certificates
func (o GetSecretStoreSecretStoreVaultApproleCertSshOutput) SigningRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApproleCertSsh) *string { return v.SigningRole }).(pulumi.StringPtrOutput)
}

// The mount point of the SSH engine configured with the desired CA
func (o GetSecretStoreSecretStoreVaultApproleCertSshOutput) SshMountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApproleCertSsh) *string { return v.SshMountPoint }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreVaultApproleCertSshOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApproleCertSsh) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreVaultApproleCertSshArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultApproleCertSshArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultApproleCertSsh)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultApproleCertSshArrayOutput) ToGetSecretStoreSecretStoreVaultApproleCertSshArrayOutput() GetSecretStoreSecretStoreVaultApproleCertSshArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultApproleCertSshArrayOutput) ToGetSecretStoreSecretStoreVaultApproleCertSshArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultApproleCertSshArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultApproleCertSshArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreVaultApproleCertSshOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreVaultApproleCertSsh {
		return vs[0].([]GetSecretStoreSecretStoreVaultApproleCertSsh)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreVaultApproleCertSshOutput)
}

type GetSecretStoreSecretStoreVaultApproleCertX509 struct {
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes *int `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The mount point of the PKI engine configured with the desired CA
	PkiMountPoint *string `pulumi:"pkiMountPoint"`
	// The URL of the Vault to target
	ServerAddress *string `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole *string `pulumi:"signingRole"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreVaultApproleCertX509Input is an input type that accepts GetSecretStoreSecretStoreVaultApproleCertX509Args and GetSecretStoreSecretStoreVaultApproleCertX509Output values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultApproleCertX509Input` via:
//
//	GetSecretStoreSecretStoreVaultApproleCertX509Args{...}
type GetSecretStoreSecretStoreVaultApproleCertX509Input interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultApproleCertX509Output() GetSecretStoreSecretStoreVaultApproleCertX509Output
	ToGetSecretStoreSecretStoreVaultApproleCertX509OutputWithContext(context.Context) GetSecretStoreSecretStoreVaultApproleCertX509Output
}

type GetSecretStoreSecretStoreVaultApproleCertX509Args struct {
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes pulumi.IntPtrInput `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The mount point of the PKI engine configured with the desired CA
	PkiMountPoint pulumi.StringPtrInput `pulumi:"pkiMountPoint"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringPtrInput `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole pulumi.StringPtrInput `pulumi:"signingRole"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreVaultApproleCertX509Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultApproleCertX509)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultApproleCertX509Args) ToGetSecretStoreSecretStoreVaultApproleCertX509Output() GetSecretStoreSecretStoreVaultApproleCertX509Output {
	return i.ToGetSecretStoreSecretStoreVaultApproleCertX509OutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultApproleCertX509Args) ToGetSecretStoreSecretStoreVaultApproleCertX509OutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultApproleCertX509Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultApproleCertX509Output)
}

// GetSecretStoreSecretStoreVaultApproleCertX509ArrayInput is an input type that accepts GetSecretStoreSecretStoreVaultApproleCertX509Array and GetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultApproleCertX509ArrayInput` via:
//
//	GetSecretStoreSecretStoreVaultApproleCertX509Array{ GetSecretStoreSecretStoreVaultApproleCertX509Args{...} }
type GetSecretStoreSecretStoreVaultApproleCertX509ArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput() GetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput
	ToGetSecretStoreSecretStoreVaultApproleCertX509ArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput
}

type GetSecretStoreSecretStoreVaultApproleCertX509Array []GetSecretStoreSecretStoreVaultApproleCertX509Input

func (GetSecretStoreSecretStoreVaultApproleCertX509Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultApproleCertX509)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultApproleCertX509Array) ToGetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput() GetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput {
	return i.ToGetSecretStoreSecretStoreVaultApproleCertX509ArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultApproleCertX509Array) ToGetSecretStoreSecretStoreVaultApproleCertX509ArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput)
}

type GetSecretStoreSecretStoreVaultApproleCertX509Output struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultApproleCertX509Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultApproleCertX509)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultApproleCertX509Output) ToGetSecretStoreSecretStoreVaultApproleCertX509Output() GetSecretStoreSecretStoreVaultApproleCertX509Output {
	return o
}

func (o GetSecretStoreSecretStoreVaultApproleCertX509Output) ToGetSecretStoreSecretStoreVaultApproleCertX509OutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultApproleCertX509Output {
	return o
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreVaultApproleCertX509Output) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApproleCertX509) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o GetSecretStoreSecretStoreVaultApproleCertX509Output) IssuedCertTtlMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApproleCertX509) *int { return v.IssuedCertTtlMinutes }).(pulumi.IntPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreVaultApproleCertX509Output) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApproleCertX509) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o GetSecretStoreSecretStoreVaultApproleCertX509Output) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApproleCertX509) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The mount point of the PKI engine configured with the desired CA
func (o GetSecretStoreSecretStoreVaultApproleCertX509Output) PkiMountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApproleCertX509) *string { return v.PkiMountPoint }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o GetSecretStoreSecretStoreVaultApproleCertX509Output) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApproleCertX509) *string { return v.ServerAddress }).(pulumi.StringPtrOutput)
}

// The signing role to be used for signing certificates
func (o GetSecretStoreSecretStoreVaultApproleCertX509Output) SigningRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApproleCertX509) *string { return v.SigningRole }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreVaultApproleCertX509Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultApproleCertX509) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultApproleCertX509)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput) ToGetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput() GetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput) ToGetSecretStoreSecretStoreVaultApproleCertX509ArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreVaultApproleCertX509Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreVaultApproleCertX509 {
		return vs[0].([]GetSecretStoreSecretStoreVaultApproleCertX509)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreVaultApproleCertX509Output)
}

type GetSecretStoreSecretStoreVaultAwsEc2 struct {
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress *string `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreVaultAwsEc2Input is an input type that accepts GetSecretStoreSecretStoreVaultAwsEc2Args and GetSecretStoreSecretStoreVaultAwsEc2Output values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultAwsEc2Input` via:
//
//	GetSecretStoreSecretStoreVaultAwsEc2Args{...}
type GetSecretStoreSecretStoreVaultAwsEc2Input interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultAwsEc2Output() GetSecretStoreSecretStoreVaultAwsEc2Output
	ToGetSecretStoreSecretStoreVaultAwsEc2OutputWithContext(context.Context) GetSecretStoreSecretStoreVaultAwsEc2Output
}

type GetSecretStoreSecretStoreVaultAwsEc2Args struct {
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringPtrInput `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreVaultAwsEc2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultAwsEc2)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultAwsEc2Args) ToGetSecretStoreSecretStoreVaultAwsEc2Output() GetSecretStoreSecretStoreVaultAwsEc2Output {
	return i.ToGetSecretStoreSecretStoreVaultAwsEc2OutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultAwsEc2Args) ToGetSecretStoreSecretStoreVaultAwsEc2OutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultAwsEc2Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultAwsEc2Output)
}

// GetSecretStoreSecretStoreVaultAwsEc2ArrayInput is an input type that accepts GetSecretStoreSecretStoreVaultAwsEc2Array and GetSecretStoreSecretStoreVaultAwsEc2ArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultAwsEc2ArrayInput` via:
//
//	GetSecretStoreSecretStoreVaultAwsEc2Array{ GetSecretStoreSecretStoreVaultAwsEc2Args{...} }
type GetSecretStoreSecretStoreVaultAwsEc2ArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultAwsEc2ArrayOutput() GetSecretStoreSecretStoreVaultAwsEc2ArrayOutput
	ToGetSecretStoreSecretStoreVaultAwsEc2ArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultAwsEc2ArrayOutput
}

type GetSecretStoreSecretStoreVaultAwsEc2Array []GetSecretStoreSecretStoreVaultAwsEc2Input

func (GetSecretStoreSecretStoreVaultAwsEc2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultAwsEc2)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultAwsEc2Array) ToGetSecretStoreSecretStoreVaultAwsEc2ArrayOutput() GetSecretStoreSecretStoreVaultAwsEc2ArrayOutput {
	return i.ToGetSecretStoreSecretStoreVaultAwsEc2ArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultAwsEc2Array) ToGetSecretStoreSecretStoreVaultAwsEc2ArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultAwsEc2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultAwsEc2ArrayOutput)
}

type GetSecretStoreSecretStoreVaultAwsEc2Output struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultAwsEc2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultAwsEc2)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultAwsEc2Output) ToGetSecretStoreSecretStoreVaultAwsEc2Output() GetSecretStoreSecretStoreVaultAwsEc2Output {
	return o
}

func (o GetSecretStoreSecretStoreVaultAwsEc2Output) ToGetSecretStoreSecretStoreVaultAwsEc2OutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultAwsEc2Output {
	return o
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreVaultAwsEc2Output) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultAwsEc2) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreVaultAwsEc2Output) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultAwsEc2) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o GetSecretStoreSecretStoreVaultAwsEc2Output) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultAwsEc2) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o GetSecretStoreSecretStoreVaultAwsEc2Output) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultAwsEc2) *string { return v.ServerAddress }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreVaultAwsEc2Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultAwsEc2) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreVaultAwsEc2ArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultAwsEc2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultAwsEc2)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultAwsEc2ArrayOutput) ToGetSecretStoreSecretStoreVaultAwsEc2ArrayOutput() GetSecretStoreSecretStoreVaultAwsEc2ArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultAwsEc2ArrayOutput) ToGetSecretStoreSecretStoreVaultAwsEc2ArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultAwsEc2ArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultAwsEc2ArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreVaultAwsEc2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreVaultAwsEc2 {
		return vs[0].([]GetSecretStoreSecretStoreVaultAwsEc2)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreVaultAwsEc2Output)
}

type GetSecretStoreSecretStoreVaultAwsIam struct {
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress *string `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreVaultAwsIamInput is an input type that accepts GetSecretStoreSecretStoreVaultAwsIamArgs and GetSecretStoreSecretStoreVaultAwsIamOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultAwsIamInput` via:
//
//	GetSecretStoreSecretStoreVaultAwsIamArgs{...}
type GetSecretStoreSecretStoreVaultAwsIamInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultAwsIamOutput() GetSecretStoreSecretStoreVaultAwsIamOutput
	ToGetSecretStoreSecretStoreVaultAwsIamOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultAwsIamOutput
}

type GetSecretStoreSecretStoreVaultAwsIamArgs struct {
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringPtrInput `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreVaultAwsIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultAwsIam)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultAwsIamArgs) ToGetSecretStoreSecretStoreVaultAwsIamOutput() GetSecretStoreSecretStoreVaultAwsIamOutput {
	return i.ToGetSecretStoreSecretStoreVaultAwsIamOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultAwsIamArgs) ToGetSecretStoreSecretStoreVaultAwsIamOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultAwsIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultAwsIamOutput)
}

// GetSecretStoreSecretStoreVaultAwsIamArrayInput is an input type that accepts GetSecretStoreSecretStoreVaultAwsIamArray and GetSecretStoreSecretStoreVaultAwsIamArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultAwsIamArrayInput` via:
//
//	GetSecretStoreSecretStoreVaultAwsIamArray{ GetSecretStoreSecretStoreVaultAwsIamArgs{...} }
type GetSecretStoreSecretStoreVaultAwsIamArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultAwsIamArrayOutput() GetSecretStoreSecretStoreVaultAwsIamArrayOutput
	ToGetSecretStoreSecretStoreVaultAwsIamArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultAwsIamArrayOutput
}

type GetSecretStoreSecretStoreVaultAwsIamArray []GetSecretStoreSecretStoreVaultAwsIamInput

func (GetSecretStoreSecretStoreVaultAwsIamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultAwsIam)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultAwsIamArray) ToGetSecretStoreSecretStoreVaultAwsIamArrayOutput() GetSecretStoreSecretStoreVaultAwsIamArrayOutput {
	return i.ToGetSecretStoreSecretStoreVaultAwsIamArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultAwsIamArray) ToGetSecretStoreSecretStoreVaultAwsIamArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultAwsIamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultAwsIamArrayOutput)
}

type GetSecretStoreSecretStoreVaultAwsIamOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultAwsIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultAwsIam)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultAwsIamOutput) ToGetSecretStoreSecretStoreVaultAwsIamOutput() GetSecretStoreSecretStoreVaultAwsIamOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultAwsIamOutput) ToGetSecretStoreSecretStoreVaultAwsIamOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultAwsIamOutput {
	return o
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreVaultAwsIamOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultAwsIam) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreVaultAwsIamOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultAwsIam) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o GetSecretStoreSecretStoreVaultAwsIamOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultAwsIam) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o GetSecretStoreSecretStoreVaultAwsIamOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultAwsIam) *string { return v.ServerAddress }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreVaultAwsIamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultAwsIam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreVaultAwsIamArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultAwsIamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultAwsIam)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultAwsIamArrayOutput) ToGetSecretStoreSecretStoreVaultAwsIamArrayOutput() GetSecretStoreSecretStoreVaultAwsIamArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultAwsIamArrayOutput) ToGetSecretStoreSecretStoreVaultAwsIamArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultAwsIamArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultAwsIamArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreVaultAwsIamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreVaultAwsIam {
		return vs[0].([]GetSecretStoreSecretStoreVaultAwsIam)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreVaultAwsIamOutput)
}

type GetSecretStoreSecretStoreVaultTl struct {
	// A path to a CA file accessible by a Node
	CaCertPath *string `pulumi:"caCertPath"`
	// A path to a client certificate file accessible by a Node
	ClientCertPath *string `pulumi:"clientCertPath"`
	// A path to a client key file accessible by a Node
	ClientKeyPath *string `pulumi:"clientKeyPath"`
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress *string `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreVaultTlInput is an input type that accepts GetSecretStoreSecretStoreVaultTlArgs and GetSecretStoreSecretStoreVaultTlOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultTlInput` via:
//
//	GetSecretStoreSecretStoreVaultTlArgs{...}
type GetSecretStoreSecretStoreVaultTlInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultTlOutput() GetSecretStoreSecretStoreVaultTlOutput
	ToGetSecretStoreSecretStoreVaultTlOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultTlOutput
}

type GetSecretStoreSecretStoreVaultTlArgs struct {
	// A path to a CA file accessible by a Node
	CaCertPath pulumi.StringPtrInput `pulumi:"caCertPath"`
	// A path to a client certificate file accessible by a Node
	ClientCertPath pulumi.StringPtrInput `pulumi:"clientCertPath"`
	// A path to a client key file accessible by a Node
	ClientKeyPath pulumi.StringPtrInput `pulumi:"clientKeyPath"`
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringPtrInput `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreVaultTlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultTl)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultTlArgs) ToGetSecretStoreSecretStoreVaultTlOutput() GetSecretStoreSecretStoreVaultTlOutput {
	return i.ToGetSecretStoreSecretStoreVaultTlOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultTlArgs) ToGetSecretStoreSecretStoreVaultTlOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultTlOutput)
}

// GetSecretStoreSecretStoreVaultTlArrayInput is an input type that accepts GetSecretStoreSecretStoreVaultTlArray and GetSecretStoreSecretStoreVaultTlArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultTlArrayInput` via:
//
//	GetSecretStoreSecretStoreVaultTlArray{ GetSecretStoreSecretStoreVaultTlArgs{...} }
type GetSecretStoreSecretStoreVaultTlArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultTlArrayOutput() GetSecretStoreSecretStoreVaultTlArrayOutput
	ToGetSecretStoreSecretStoreVaultTlArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultTlArrayOutput
}

type GetSecretStoreSecretStoreVaultTlArray []GetSecretStoreSecretStoreVaultTlInput

func (GetSecretStoreSecretStoreVaultTlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultTl)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultTlArray) ToGetSecretStoreSecretStoreVaultTlArrayOutput() GetSecretStoreSecretStoreVaultTlArrayOutput {
	return i.ToGetSecretStoreSecretStoreVaultTlArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultTlArray) ToGetSecretStoreSecretStoreVaultTlArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultTlArrayOutput)
}

type GetSecretStoreSecretStoreVaultTlOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultTlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultTl)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultTlOutput) ToGetSecretStoreSecretStoreVaultTlOutput() GetSecretStoreSecretStoreVaultTlOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultTlOutput) ToGetSecretStoreSecretStoreVaultTlOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTlOutput {
	return o
}

// A path to a CA file accessible by a Node
func (o GetSecretStoreSecretStoreVaultTlOutput) CaCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTl) *string { return v.CaCertPath }).(pulumi.StringPtrOutput)
}

// A path to a client certificate file accessible by a Node
func (o GetSecretStoreSecretStoreVaultTlOutput) ClientCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTl) *string { return v.ClientCertPath }).(pulumi.StringPtrOutput)
}

// A path to a client key file accessible by a Node
func (o GetSecretStoreSecretStoreVaultTlOutput) ClientKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTl) *string { return v.ClientKeyPath }).(pulumi.StringPtrOutput)
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreVaultTlOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTl) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreVaultTlOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTl) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o GetSecretStoreSecretStoreVaultTlOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTl) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o GetSecretStoreSecretStoreVaultTlOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTl) *string { return v.ServerAddress }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreVaultTlOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTl) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreVaultTlArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultTlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultTl)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultTlArrayOutput) ToGetSecretStoreSecretStoreVaultTlArrayOutput() GetSecretStoreSecretStoreVaultTlArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultTlArrayOutput) ToGetSecretStoreSecretStoreVaultTlArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTlArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultTlArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreVaultTlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreVaultTl {
		return vs[0].([]GetSecretStoreSecretStoreVaultTl)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreVaultTlOutput)
}

type GetSecretStoreSecretStoreVaultTlsCertSsh struct {
	// A path to a CA file accessible by a Node
	CaCertPath *string `pulumi:"caCertPath"`
	// A path to a client certificate file accessible by a Node
	ClientCertPath *string `pulumi:"clientCertPath"`
	// A path to a client key file accessible by a Node
	ClientKeyPath *string `pulumi:"clientKeyPath"`
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes *int `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress *string `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole *string `pulumi:"signingRole"`
	// The mount point of the SSH engine configured with the desired CA
	SshMountPoint *string `pulumi:"sshMountPoint"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreVaultTlsCertSshInput is an input type that accepts GetSecretStoreSecretStoreVaultTlsCertSshArgs and GetSecretStoreSecretStoreVaultTlsCertSshOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultTlsCertSshInput` via:
//
//	GetSecretStoreSecretStoreVaultTlsCertSshArgs{...}
type GetSecretStoreSecretStoreVaultTlsCertSshInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultTlsCertSshOutput() GetSecretStoreSecretStoreVaultTlsCertSshOutput
	ToGetSecretStoreSecretStoreVaultTlsCertSshOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultTlsCertSshOutput
}

type GetSecretStoreSecretStoreVaultTlsCertSshArgs struct {
	// A path to a CA file accessible by a Node
	CaCertPath pulumi.StringPtrInput `pulumi:"caCertPath"`
	// A path to a client certificate file accessible by a Node
	ClientCertPath pulumi.StringPtrInput `pulumi:"clientCertPath"`
	// A path to a client key file accessible by a Node
	ClientKeyPath pulumi.StringPtrInput `pulumi:"clientKeyPath"`
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes pulumi.IntPtrInput `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringPtrInput `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole pulumi.StringPtrInput `pulumi:"signingRole"`
	// The mount point of the SSH engine configured with the desired CA
	SshMountPoint pulumi.StringPtrInput `pulumi:"sshMountPoint"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreVaultTlsCertSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultTlsCertSsh)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultTlsCertSshArgs) ToGetSecretStoreSecretStoreVaultTlsCertSshOutput() GetSecretStoreSecretStoreVaultTlsCertSshOutput {
	return i.ToGetSecretStoreSecretStoreVaultTlsCertSshOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultTlsCertSshArgs) ToGetSecretStoreSecretStoreVaultTlsCertSshOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTlsCertSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultTlsCertSshOutput)
}

// GetSecretStoreSecretStoreVaultTlsCertSshArrayInput is an input type that accepts GetSecretStoreSecretStoreVaultTlsCertSshArray and GetSecretStoreSecretStoreVaultTlsCertSshArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultTlsCertSshArrayInput` via:
//
//	GetSecretStoreSecretStoreVaultTlsCertSshArray{ GetSecretStoreSecretStoreVaultTlsCertSshArgs{...} }
type GetSecretStoreSecretStoreVaultTlsCertSshArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultTlsCertSshArrayOutput() GetSecretStoreSecretStoreVaultTlsCertSshArrayOutput
	ToGetSecretStoreSecretStoreVaultTlsCertSshArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultTlsCertSshArrayOutput
}

type GetSecretStoreSecretStoreVaultTlsCertSshArray []GetSecretStoreSecretStoreVaultTlsCertSshInput

func (GetSecretStoreSecretStoreVaultTlsCertSshArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultTlsCertSsh)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultTlsCertSshArray) ToGetSecretStoreSecretStoreVaultTlsCertSshArrayOutput() GetSecretStoreSecretStoreVaultTlsCertSshArrayOutput {
	return i.ToGetSecretStoreSecretStoreVaultTlsCertSshArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultTlsCertSshArray) ToGetSecretStoreSecretStoreVaultTlsCertSshArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTlsCertSshArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultTlsCertSshArrayOutput)
}

type GetSecretStoreSecretStoreVaultTlsCertSshOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultTlsCertSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultTlsCertSsh)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultTlsCertSshOutput) ToGetSecretStoreSecretStoreVaultTlsCertSshOutput() GetSecretStoreSecretStoreVaultTlsCertSshOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultTlsCertSshOutput) ToGetSecretStoreSecretStoreVaultTlsCertSshOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTlsCertSshOutput {
	return o
}

// A path to a CA file accessible by a Node
func (o GetSecretStoreSecretStoreVaultTlsCertSshOutput) CaCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertSsh) *string { return v.CaCertPath }).(pulumi.StringPtrOutput)
}

// A path to a client certificate file accessible by a Node
func (o GetSecretStoreSecretStoreVaultTlsCertSshOutput) ClientCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertSsh) *string { return v.ClientCertPath }).(pulumi.StringPtrOutput)
}

// A path to a client key file accessible by a Node
func (o GetSecretStoreSecretStoreVaultTlsCertSshOutput) ClientKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertSsh) *string { return v.ClientKeyPath }).(pulumi.StringPtrOutput)
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreVaultTlsCertSshOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertSsh) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o GetSecretStoreSecretStoreVaultTlsCertSshOutput) IssuedCertTtlMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertSsh) *int { return v.IssuedCertTtlMinutes }).(pulumi.IntPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreVaultTlsCertSshOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertSsh) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o GetSecretStoreSecretStoreVaultTlsCertSshOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertSsh) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o GetSecretStoreSecretStoreVaultTlsCertSshOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertSsh) *string { return v.ServerAddress }).(pulumi.StringPtrOutput)
}

// The signing role to be used for signing certificates
func (o GetSecretStoreSecretStoreVaultTlsCertSshOutput) SigningRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertSsh) *string { return v.SigningRole }).(pulumi.StringPtrOutput)
}

// The mount point of the SSH engine configured with the desired CA
func (o GetSecretStoreSecretStoreVaultTlsCertSshOutput) SshMountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertSsh) *string { return v.SshMountPoint }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreVaultTlsCertSshOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertSsh) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreVaultTlsCertSshArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultTlsCertSshArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultTlsCertSsh)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultTlsCertSshArrayOutput) ToGetSecretStoreSecretStoreVaultTlsCertSshArrayOutput() GetSecretStoreSecretStoreVaultTlsCertSshArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultTlsCertSshArrayOutput) ToGetSecretStoreSecretStoreVaultTlsCertSshArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTlsCertSshArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultTlsCertSshArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreVaultTlsCertSshOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreVaultTlsCertSsh {
		return vs[0].([]GetSecretStoreSecretStoreVaultTlsCertSsh)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreVaultTlsCertSshOutput)
}

type GetSecretStoreSecretStoreVaultTlsCertX509 struct {
	// A path to a CA file accessible by a Node
	CaCertPath *string `pulumi:"caCertPath"`
	// A path to a client certificate file accessible by a Node
	ClientCertPath *string `pulumi:"clientCertPath"`
	// A path to a client key file accessible by a Node
	ClientKeyPath *string `pulumi:"clientKeyPath"`
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes *int `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The mount point of the PKI engine configured with the desired CA
	PkiMountPoint *string `pulumi:"pkiMountPoint"`
	// The URL of the Vault to target
	ServerAddress *string `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole *string `pulumi:"signingRole"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreVaultTlsCertX509Input is an input type that accepts GetSecretStoreSecretStoreVaultTlsCertX509Args and GetSecretStoreSecretStoreVaultTlsCertX509Output values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultTlsCertX509Input` via:
//
//	GetSecretStoreSecretStoreVaultTlsCertX509Args{...}
type GetSecretStoreSecretStoreVaultTlsCertX509Input interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultTlsCertX509Output() GetSecretStoreSecretStoreVaultTlsCertX509Output
	ToGetSecretStoreSecretStoreVaultTlsCertX509OutputWithContext(context.Context) GetSecretStoreSecretStoreVaultTlsCertX509Output
}

type GetSecretStoreSecretStoreVaultTlsCertX509Args struct {
	// A path to a CA file accessible by a Node
	CaCertPath pulumi.StringPtrInput `pulumi:"caCertPath"`
	// A path to a client certificate file accessible by a Node
	ClientCertPath pulumi.StringPtrInput `pulumi:"clientCertPath"`
	// A path to a client key file accessible by a Node
	ClientKeyPath pulumi.StringPtrInput `pulumi:"clientKeyPath"`
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes pulumi.IntPtrInput `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The mount point of the PKI engine configured with the desired CA
	PkiMountPoint pulumi.StringPtrInput `pulumi:"pkiMountPoint"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringPtrInput `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole pulumi.StringPtrInput `pulumi:"signingRole"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreVaultTlsCertX509Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultTlsCertX509)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultTlsCertX509Args) ToGetSecretStoreSecretStoreVaultTlsCertX509Output() GetSecretStoreSecretStoreVaultTlsCertX509Output {
	return i.ToGetSecretStoreSecretStoreVaultTlsCertX509OutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultTlsCertX509Args) ToGetSecretStoreSecretStoreVaultTlsCertX509OutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTlsCertX509Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultTlsCertX509Output)
}

// GetSecretStoreSecretStoreVaultTlsCertX509ArrayInput is an input type that accepts GetSecretStoreSecretStoreVaultTlsCertX509Array and GetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultTlsCertX509ArrayInput` via:
//
//	GetSecretStoreSecretStoreVaultTlsCertX509Array{ GetSecretStoreSecretStoreVaultTlsCertX509Args{...} }
type GetSecretStoreSecretStoreVaultTlsCertX509ArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput() GetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput
	ToGetSecretStoreSecretStoreVaultTlsCertX509ArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput
}

type GetSecretStoreSecretStoreVaultTlsCertX509Array []GetSecretStoreSecretStoreVaultTlsCertX509Input

func (GetSecretStoreSecretStoreVaultTlsCertX509Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultTlsCertX509)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultTlsCertX509Array) ToGetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput() GetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput {
	return i.ToGetSecretStoreSecretStoreVaultTlsCertX509ArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultTlsCertX509Array) ToGetSecretStoreSecretStoreVaultTlsCertX509ArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput)
}

type GetSecretStoreSecretStoreVaultTlsCertX509Output struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultTlsCertX509Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultTlsCertX509)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultTlsCertX509Output) ToGetSecretStoreSecretStoreVaultTlsCertX509Output() GetSecretStoreSecretStoreVaultTlsCertX509Output {
	return o
}

func (o GetSecretStoreSecretStoreVaultTlsCertX509Output) ToGetSecretStoreSecretStoreVaultTlsCertX509OutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTlsCertX509Output {
	return o
}

// A path to a CA file accessible by a Node
func (o GetSecretStoreSecretStoreVaultTlsCertX509Output) CaCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertX509) *string { return v.CaCertPath }).(pulumi.StringPtrOutput)
}

// A path to a client certificate file accessible by a Node
func (o GetSecretStoreSecretStoreVaultTlsCertX509Output) ClientCertPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertX509) *string { return v.ClientCertPath }).(pulumi.StringPtrOutput)
}

// A path to a client key file accessible by a Node
func (o GetSecretStoreSecretStoreVaultTlsCertX509Output) ClientKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertX509) *string { return v.ClientKeyPath }).(pulumi.StringPtrOutput)
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreVaultTlsCertX509Output) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertX509) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o GetSecretStoreSecretStoreVaultTlsCertX509Output) IssuedCertTtlMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertX509) *int { return v.IssuedCertTtlMinutes }).(pulumi.IntPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreVaultTlsCertX509Output) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertX509) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o GetSecretStoreSecretStoreVaultTlsCertX509Output) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertX509) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The mount point of the PKI engine configured with the desired CA
func (o GetSecretStoreSecretStoreVaultTlsCertX509Output) PkiMountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertX509) *string { return v.PkiMountPoint }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o GetSecretStoreSecretStoreVaultTlsCertX509Output) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertX509) *string { return v.ServerAddress }).(pulumi.StringPtrOutput)
}

// The signing role to be used for signing certificates
func (o GetSecretStoreSecretStoreVaultTlsCertX509Output) SigningRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertX509) *string { return v.SigningRole }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreVaultTlsCertX509Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTlsCertX509) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultTlsCertX509)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput) ToGetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput() GetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput) ToGetSecretStoreSecretStoreVaultTlsCertX509ArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreVaultTlsCertX509Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreVaultTlsCertX509 {
		return vs[0].([]GetSecretStoreSecretStoreVaultTlsCertX509)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreVaultTlsCertX509Output)
}

type GetSecretStoreSecretStoreVaultToken struct {
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress *string `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreVaultTokenInput is an input type that accepts GetSecretStoreSecretStoreVaultTokenArgs and GetSecretStoreSecretStoreVaultTokenOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultTokenInput` via:
//
//	GetSecretStoreSecretStoreVaultTokenArgs{...}
type GetSecretStoreSecretStoreVaultTokenInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultTokenOutput() GetSecretStoreSecretStoreVaultTokenOutput
	ToGetSecretStoreSecretStoreVaultTokenOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultTokenOutput
}

type GetSecretStoreSecretStoreVaultTokenArgs struct {
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringPtrInput `pulumi:"serverAddress"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreVaultTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultToken)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultTokenArgs) ToGetSecretStoreSecretStoreVaultTokenOutput() GetSecretStoreSecretStoreVaultTokenOutput {
	return i.ToGetSecretStoreSecretStoreVaultTokenOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultTokenArgs) ToGetSecretStoreSecretStoreVaultTokenOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultTokenOutput)
}

// GetSecretStoreSecretStoreVaultTokenArrayInput is an input type that accepts GetSecretStoreSecretStoreVaultTokenArray and GetSecretStoreSecretStoreVaultTokenArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultTokenArrayInput` via:
//
//	GetSecretStoreSecretStoreVaultTokenArray{ GetSecretStoreSecretStoreVaultTokenArgs{...} }
type GetSecretStoreSecretStoreVaultTokenArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultTokenArrayOutput() GetSecretStoreSecretStoreVaultTokenArrayOutput
	ToGetSecretStoreSecretStoreVaultTokenArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultTokenArrayOutput
}

type GetSecretStoreSecretStoreVaultTokenArray []GetSecretStoreSecretStoreVaultTokenInput

func (GetSecretStoreSecretStoreVaultTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultToken)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultTokenArray) ToGetSecretStoreSecretStoreVaultTokenArrayOutput() GetSecretStoreSecretStoreVaultTokenArrayOutput {
	return i.ToGetSecretStoreSecretStoreVaultTokenArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultTokenArray) ToGetSecretStoreSecretStoreVaultTokenArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultTokenArrayOutput)
}

type GetSecretStoreSecretStoreVaultTokenOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultToken)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultTokenOutput) ToGetSecretStoreSecretStoreVaultTokenOutput() GetSecretStoreSecretStoreVaultTokenOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultTokenOutput) ToGetSecretStoreSecretStoreVaultTokenOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTokenOutput {
	return o
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreVaultTokenOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultToken) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreVaultTokenOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultToken) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o GetSecretStoreSecretStoreVaultTokenOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultToken) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o GetSecretStoreSecretStoreVaultTokenOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultToken) *string { return v.ServerAddress }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreVaultTokenOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultToken) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreVaultTokenArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultToken)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultTokenArrayOutput) ToGetSecretStoreSecretStoreVaultTokenArrayOutput() GetSecretStoreSecretStoreVaultTokenArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultTokenArrayOutput) ToGetSecretStoreSecretStoreVaultTokenArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTokenArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultTokenArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreVaultTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreVaultToken {
		return vs[0].([]GetSecretStoreSecretStoreVaultToken)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreVaultTokenOutput)
}

type GetSecretStoreSecretStoreVaultTokenCertSsh struct {
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes *int `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress *string `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole *string `pulumi:"signingRole"`
	// The mount point of the SSH engine configured with the desired CA
	SshMountPoint *string `pulumi:"sshMountPoint"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreVaultTokenCertSshInput is an input type that accepts GetSecretStoreSecretStoreVaultTokenCertSshArgs and GetSecretStoreSecretStoreVaultTokenCertSshOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultTokenCertSshInput` via:
//
//	GetSecretStoreSecretStoreVaultTokenCertSshArgs{...}
type GetSecretStoreSecretStoreVaultTokenCertSshInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultTokenCertSshOutput() GetSecretStoreSecretStoreVaultTokenCertSshOutput
	ToGetSecretStoreSecretStoreVaultTokenCertSshOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultTokenCertSshOutput
}

type GetSecretStoreSecretStoreVaultTokenCertSshArgs struct {
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes pulumi.IntPtrInput `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringPtrInput `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole pulumi.StringPtrInput `pulumi:"signingRole"`
	// The mount point of the SSH engine configured with the desired CA
	SshMountPoint pulumi.StringPtrInput `pulumi:"sshMountPoint"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreVaultTokenCertSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultTokenCertSsh)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultTokenCertSshArgs) ToGetSecretStoreSecretStoreVaultTokenCertSshOutput() GetSecretStoreSecretStoreVaultTokenCertSshOutput {
	return i.ToGetSecretStoreSecretStoreVaultTokenCertSshOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultTokenCertSshArgs) ToGetSecretStoreSecretStoreVaultTokenCertSshOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTokenCertSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultTokenCertSshOutput)
}

// GetSecretStoreSecretStoreVaultTokenCertSshArrayInput is an input type that accepts GetSecretStoreSecretStoreVaultTokenCertSshArray and GetSecretStoreSecretStoreVaultTokenCertSshArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultTokenCertSshArrayInput` via:
//
//	GetSecretStoreSecretStoreVaultTokenCertSshArray{ GetSecretStoreSecretStoreVaultTokenCertSshArgs{...} }
type GetSecretStoreSecretStoreVaultTokenCertSshArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultTokenCertSshArrayOutput() GetSecretStoreSecretStoreVaultTokenCertSshArrayOutput
	ToGetSecretStoreSecretStoreVaultTokenCertSshArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultTokenCertSshArrayOutput
}

type GetSecretStoreSecretStoreVaultTokenCertSshArray []GetSecretStoreSecretStoreVaultTokenCertSshInput

func (GetSecretStoreSecretStoreVaultTokenCertSshArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultTokenCertSsh)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultTokenCertSshArray) ToGetSecretStoreSecretStoreVaultTokenCertSshArrayOutput() GetSecretStoreSecretStoreVaultTokenCertSshArrayOutput {
	return i.ToGetSecretStoreSecretStoreVaultTokenCertSshArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultTokenCertSshArray) ToGetSecretStoreSecretStoreVaultTokenCertSshArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTokenCertSshArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultTokenCertSshArrayOutput)
}

type GetSecretStoreSecretStoreVaultTokenCertSshOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultTokenCertSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultTokenCertSsh)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultTokenCertSshOutput) ToGetSecretStoreSecretStoreVaultTokenCertSshOutput() GetSecretStoreSecretStoreVaultTokenCertSshOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultTokenCertSshOutput) ToGetSecretStoreSecretStoreVaultTokenCertSshOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTokenCertSshOutput {
	return o
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreVaultTokenCertSshOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTokenCertSsh) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o GetSecretStoreSecretStoreVaultTokenCertSshOutput) IssuedCertTtlMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTokenCertSsh) *int { return v.IssuedCertTtlMinutes }).(pulumi.IntPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreVaultTokenCertSshOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTokenCertSsh) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o GetSecretStoreSecretStoreVaultTokenCertSshOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTokenCertSsh) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o GetSecretStoreSecretStoreVaultTokenCertSshOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTokenCertSsh) *string { return v.ServerAddress }).(pulumi.StringPtrOutput)
}

// The signing role to be used for signing certificates
func (o GetSecretStoreSecretStoreVaultTokenCertSshOutput) SigningRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTokenCertSsh) *string { return v.SigningRole }).(pulumi.StringPtrOutput)
}

// The mount point of the SSH engine configured with the desired CA
func (o GetSecretStoreSecretStoreVaultTokenCertSshOutput) SshMountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTokenCertSsh) *string { return v.SshMountPoint }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreVaultTokenCertSshOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTokenCertSsh) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreVaultTokenCertSshArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultTokenCertSshArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultTokenCertSsh)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultTokenCertSshArrayOutput) ToGetSecretStoreSecretStoreVaultTokenCertSshArrayOutput() GetSecretStoreSecretStoreVaultTokenCertSshArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultTokenCertSshArrayOutput) ToGetSecretStoreSecretStoreVaultTokenCertSshArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTokenCertSshArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultTokenCertSshArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreVaultTokenCertSshOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreVaultTokenCertSsh {
		return vs[0].([]GetSecretStoreSecretStoreVaultTokenCertSsh)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreVaultTokenCertSshOutput)
}

type GetSecretStoreSecretStoreVaultTokenCertX509 struct {
	// Unique identifier of the SecretStore.
	Id *string `pulumi:"id"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes *int `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name *string `pulumi:"name"`
	// The namespace to make requests within
	Namespace *string `pulumi:"namespace"`
	// The mount point of the PKI engine configured with the desired CA
	PkiMountPoint *string `pulumi:"pkiMountPoint"`
	// The URL of the Vault to target
	ServerAddress *string `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole *string `pulumi:"signingRole"`
	// Tags is a map of key, value pairs.
	Tags map[string]string `pulumi:"tags"`
}

// GetSecretStoreSecretStoreVaultTokenCertX509Input is an input type that accepts GetSecretStoreSecretStoreVaultTokenCertX509Args and GetSecretStoreSecretStoreVaultTokenCertX509Output values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultTokenCertX509Input` via:
//
//	GetSecretStoreSecretStoreVaultTokenCertX509Args{...}
type GetSecretStoreSecretStoreVaultTokenCertX509Input interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultTokenCertX509Output() GetSecretStoreSecretStoreVaultTokenCertX509Output
	ToGetSecretStoreSecretStoreVaultTokenCertX509OutputWithContext(context.Context) GetSecretStoreSecretStoreVaultTokenCertX509Output
}

type GetSecretStoreSecretStoreVaultTokenCertX509Args struct {
	// Unique identifier of the SecretStore.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTtlMinutes pulumi.IntPtrInput `pulumi:"issuedCertTtlMinutes"`
	// Unique human-readable name of the SecretStore.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace to make requests within
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The mount point of the PKI engine configured with the desired CA
	PkiMountPoint pulumi.StringPtrInput `pulumi:"pkiMountPoint"`
	// The URL of the Vault to target
	ServerAddress pulumi.StringPtrInput `pulumi:"serverAddress"`
	// The signing role to be used for signing certificates
	SigningRole pulumi.StringPtrInput `pulumi:"signingRole"`
	// Tags is a map of key, value pairs.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetSecretStoreSecretStoreVaultTokenCertX509Args) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultTokenCertX509)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultTokenCertX509Args) ToGetSecretStoreSecretStoreVaultTokenCertX509Output() GetSecretStoreSecretStoreVaultTokenCertX509Output {
	return i.ToGetSecretStoreSecretStoreVaultTokenCertX509OutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultTokenCertX509Args) ToGetSecretStoreSecretStoreVaultTokenCertX509OutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTokenCertX509Output {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultTokenCertX509Output)
}

// GetSecretStoreSecretStoreVaultTokenCertX509ArrayInput is an input type that accepts GetSecretStoreSecretStoreVaultTokenCertX509Array and GetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput values.
// You can construct a concrete instance of `GetSecretStoreSecretStoreVaultTokenCertX509ArrayInput` via:
//
//	GetSecretStoreSecretStoreVaultTokenCertX509Array{ GetSecretStoreSecretStoreVaultTokenCertX509Args{...} }
type GetSecretStoreSecretStoreVaultTokenCertX509ArrayInput interface {
	pulumi.Input

	ToGetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput() GetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput
	ToGetSecretStoreSecretStoreVaultTokenCertX509ArrayOutputWithContext(context.Context) GetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput
}

type GetSecretStoreSecretStoreVaultTokenCertX509Array []GetSecretStoreSecretStoreVaultTokenCertX509Input

func (GetSecretStoreSecretStoreVaultTokenCertX509Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultTokenCertX509)(nil)).Elem()
}

func (i GetSecretStoreSecretStoreVaultTokenCertX509Array) ToGetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput() GetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput {
	return i.ToGetSecretStoreSecretStoreVaultTokenCertX509ArrayOutputWithContext(context.Background())
}

func (i GetSecretStoreSecretStoreVaultTokenCertX509Array) ToGetSecretStoreSecretStoreVaultTokenCertX509ArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput)
}

type GetSecretStoreSecretStoreVaultTokenCertX509Output struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultTokenCertX509Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretStoreSecretStoreVaultTokenCertX509)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultTokenCertX509Output) ToGetSecretStoreSecretStoreVaultTokenCertX509Output() GetSecretStoreSecretStoreVaultTokenCertX509Output {
	return o
}

func (o GetSecretStoreSecretStoreVaultTokenCertX509Output) ToGetSecretStoreSecretStoreVaultTokenCertX509OutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTokenCertX509Output {
	return o
}

// Unique identifier of the SecretStore.
func (o GetSecretStoreSecretStoreVaultTokenCertX509Output) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTokenCertX509) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The lifetime of certificates issued by this CA represented in minutes.
func (o GetSecretStoreSecretStoreVaultTokenCertX509Output) IssuedCertTtlMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTokenCertX509) *int { return v.IssuedCertTtlMinutes }).(pulumi.IntPtrOutput)
}

// Unique human-readable name of the SecretStore.
func (o GetSecretStoreSecretStoreVaultTokenCertX509Output) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTokenCertX509) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace to make requests within
func (o GetSecretStoreSecretStoreVaultTokenCertX509Output) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTokenCertX509) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The mount point of the PKI engine configured with the desired CA
func (o GetSecretStoreSecretStoreVaultTokenCertX509Output) PkiMountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTokenCertX509) *string { return v.PkiMountPoint }).(pulumi.StringPtrOutput)
}

// The URL of the Vault to target
func (o GetSecretStoreSecretStoreVaultTokenCertX509Output) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTokenCertX509) *string { return v.ServerAddress }).(pulumi.StringPtrOutput)
}

// The signing role to be used for signing certificates
func (o GetSecretStoreSecretStoreVaultTokenCertX509Output) SigningRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTokenCertX509) *string { return v.SigningRole }).(pulumi.StringPtrOutput)
}

// Tags is a map of key, value pairs.
func (o GetSecretStoreSecretStoreVaultTokenCertX509Output) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetSecretStoreSecretStoreVaultTokenCertX509) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput struct{ *pulumi.OutputState }

func (GetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretStoreSecretStoreVaultTokenCertX509)(nil)).Elem()
}

func (o GetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput) ToGetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput() GetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput) ToGetSecretStoreSecretStoreVaultTokenCertX509ArrayOutputWithContext(ctx context.Context) GetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput {
	return o
}

func (o GetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput) Index(i pulumi.IntInput) GetSecretStoreSecretStoreVaultTokenCertX509Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretStoreSecretStoreVaultTokenCertX509 {
		return vs[0].([]GetSecretStoreSecretStoreVaultTokenCertX509)[vs[1].(int)]
	}).(GetSecretStoreSecretStoreVaultTokenCertX509Output)
}

type GetWorkflowApproverWorkflowApprover struct {
	// The approver account id.
	AccountId *string `pulumi:"accountId"`
	// Unique identifier of the WorkflowApprover.
	Id *string `pulumi:"id"`
	// The approver role id
	RoleId *string `pulumi:"roleId"`
	// The workflow id.
	WorkflowId *string `pulumi:"workflowId"`
}

// GetWorkflowApproverWorkflowApproverInput is an input type that accepts GetWorkflowApproverWorkflowApproverArgs and GetWorkflowApproverWorkflowApproverOutput values.
// You can construct a concrete instance of `GetWorkflowApproverWorkflowApproverInput` via:
//
//	GetWorkflowApproverWorkflowApproverArgs{...}
type GetWorkflowApproverWorkflowApproverInput interface {
	pulumi.Input

	ToGetWorkflowApproverWorkflowApproverOutput() GetWorkflowApproverWorkflowApproverOutput
	ToGetWorkflowApproverWorkflowApproverOutputWithContext(context.Context) GetWorkflowApproverWorkflowApproverOutput
}

type GetWorkflowApproverWorkflowApproverArgs struct {
	// The approver account id.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// Unique identifier of the WorkflowApprover.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The approver role id
	RoleId pulumi.StringPtrInput `pulumi:"roleId"`
	// The workflow id.
	WorkflowId pulumi.StringPtrInput `pulumi:"workflowId"`
}

func (GetWorkflowApproverWorkflowApproverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkflowApproverWorkflowApprover)(nil)).Elem()
}

func (i GetWorkflowApproverWorkflowApproverArgs) ToGetWorkflowApproverWorkflowApproverOutput() GetWorkflowApproverWorkflowApproverOutput {
	return i.ToGetWorkflowApproverWorkflowApproverOutputWithContext(context.Background())
}

func (i GetWorkflowApproverWorkflowApproverArgs) ToGetWorkflowApproverWorkflowApproverOutputWithContext(ctx context.Context) GetWorkflowApproverWorkflowApproverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkflowApproverWorkflowApproverOutput)
}

// GetWorkflowApproverWorkflowApproverArrayInput is an input type that accepts GetWorkflowApproverWorkflowApproverArray and GetWorkflowApproverWorkflowApproverArrayOutput values.
// You can construct a concrete instance of `GetWorkflowApproverWorkflowApproverArrayInput` via:
//
//	GetWorkflowApproverWorkflowApproverArray{ GetWorkflowApproverWorkflowApproverArgs{...} }
type GetWorkflowApproverWorkflowApproverArrayInput interface {
	pulumi.Input

	ToGetWorkflowApproverWorkflowApproverArrayOutput() GetWorkflowApproverWorkflowApproverArrayOutput
	ToGetWorkflowApproverWorkflowApproverArrayOutputWithContext(context.Context) GetWorkflowApproverWorkflowApproverArrayOutput
}

type GetWorkflowApproverWorkflowApproverArray []GetWorkflowApproverWorkflowApproverInput

func (GetWorkflowApproverWorkflowApproverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWorkflowApproverWorkflowApprover)(nil)).Elem()
}

func (i GetWorkflowApproverWorkflowApproverArray) ToGetWorkflowApproverWorkflowApproverArrayOutput() GetWorkflowApproverWorkflowApproverArrayOutput {
	return i.ToGetWorkflowApproverWorkflowApproverArrayOutputWithContext(context.Background())
}

func (i GetWorkflowApproverWorkflowApproverArray) ToGetWorkflowApproverWorkflowApproverArrayOutputWithContext(ctx context.Context) GetWorkflowApproverWorkflowApproverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkflowApproverWorkflowApproverArrayOutput)
}

type GetWorkflowApproverWorkflowApproverOutput struct{ *pulumi.OutputState }

func (GetWorkflowApproverWorkflowApproverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkflowApproverWorkflowApprover)(nil)).Elem()
}

func (o GetWorkflowApproverWorkflowApproverOutput) ToGetWorkflowApproverWorkflowApproverOutput() GetWorkflowApproverWorkflowApproverOutput {
	return o
}

func (o GetWorkflowApproverWorkflowApproverOutput) ToGetWorkflowApproverWorkflowApproverOutputWithContext(ctx context.Context) GetWorkflowApproverWorkflowApproverOutput {
	return o
}

// The approver account id.
func (o GetWorkflowApproverWorkflowApproverOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkflowApproverWorkflowApprover) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the WorkflowApprover.
func (o GetWorkflowApproverWorkflowApproverOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkflowApproverWorkflowApprover) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The approver role id
func (o GetWorkflowApproverWorkflowApproverOutput) RoleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkflowApproverWorkflowApprover) *string { return v.RoleId }).(pulumi.StringPtrOutput)
}

// The workflow id.
func (o GetWorkflowApproverWorkflowApproverOutput) WorkflowId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkflowApproverWorkflowApprover) *string { return v.WorkflowId }).(pulumi.StringPtrOutput)
}

type GetWorkflowApproverWorkflowApproverArrayOutput struct{ *pulumi.OutputState }

func (GetWorkflowApproverWorkflowApproverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWorkflowApproverWorkflowApprover)(nil)).Elem()
}

func (o GetWorkflowApproverWorkflowApproverArrayOutput) ToGetWorkflowApproverWorkflowApproverArrayOutput() GetWorkflowApproverWorkflowApproverArrayOutput {
	return o
}

func (o GetWorkflowApproverWorkflowApproverArrayOutput) ToGetWorkflowApproverWorkflowApproverArrayOutputWithContext(ctx context.Context) GetWorkflowApproverWorkflowApproverArrayOutput {
	return o
}

func (o GetWorkflowApproverWorkflowApproverArrayOutput) Index(i pulumi.IntInput) GetWorkflowApproverWorkflowApproverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWorkflowApproverWorkflowApprover {
		return vs[0].([]GetWorkflowApproverWorkflowApprover)[vs[1].(int)]
	}).(GetWorkflowApproverWorkflowApproverOutput)
}

type GetWorkflowRoleWorkflowRole struct {
	// Unique identifier of the WorkflowRole.
	Id *string `pulumi:"id"`
	// The role id.
	RoleId *string `pulumi:"roleId"`
	// The workflow id.
	WorkflowId *string `pulumi:"workflowId"`
}

// GetWorkflowRoleWorkflowRoleInput is an input type that accepts GetWorkflowRoleWorkflowRoleArgs and GetWorkflowRoleWorkflowRoleOutput values.
// You can construct a concrete instance of `GetWorkflowRoleWorkflowRoleInput` via:
//
//	GetWorkflowRoleWorkflowRoleArgs{...}
type GetWorkflowRoleWorkflowRoleInput interface {
	pulumi.Input

	ToGetWorkflowRoleWorkflowRoleOutput() GetWorkflowRoleWorkflowRoleOutput
	ToGetWorkflowRoleWorkflowRoleOutputWithContext(context.Context) GetWorkflowRoleWorkflowRoleOutput
}

type GetWorkflowRoleWorkflowRoleArgs struct {
	// Unique identifier of the WorkflowRole.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The role id.
	RoleId pulumi.StringPtrInput `pulumi:"roleId"`
	// The workflow id.
	WorkflowId pulumi.StringPtrInput `pulumi:"workflowId"`
}

func (GetWorkflowRoleWorkflowRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkflowRoleWorkflowRole)(nil)).Elem()
}

func (i GetWorkflowRoleWorkflowRoleArgs) ToGetWorkflowRoleWorkflowRoleOutput() GetWorkflowRoleWorkflowRoleOutput {
	return i.ToGetWorkflowRoleWorkflowRoleOutputWithContext(context.Background())
}

func (i GetWorkflowRoleWorkflowRoleArgs) ToGetWorkflowRoleWorkflowRoleOutputWithContext(ctx context.Context) GetWorkflowRoleWorkflowRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkflowRoleWorkflowRoleOutput)
}

// GetWorkflowRoleWorkflowRoleArrayInput is an input type that accepts GetWorkflowRoleWorkflowRoleArray and GetWorkflowRoleWorkflowRoleArrayOutput values.
// You can construct a concrete instance of `GetWorkflowRoleWorkflowRoleArrayInput` via:
//
//	GetWorkflowRoleWorkflowRoleArray{ GetWorkflowRoleWorkflowRoleArgs{...} }
type GetWorkflowRoleWorkflowRoleArrayInput interface {
	pulumi.Input

	ToGetWorkflowRoleWorkflowRoleArrayOutput() GetWorkflowRoleWorkflowRoleArrayOutput
	ToGetWorkflowRoleWorkflowRoleArrayOutputWithContext(context.Context) GetWorkflowRoleWorkflowRoleArrayOutput
}

type GetWorkflowRoleWorkflowRoleArray []GetWorkflowRoleWorkflowRoleInput

func (GetWorkflowRoleWorkflowRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWorkflowRoleWorkflowRole)(nil)).Elem()
}

func (i GetWorkflowRoleWorkflowRoleArray) ToGetWorkflowRoleWorkflowRoleArrayOutput() GetWorkflowRoleWorkflowRoleArrayOutput {
	return i.ToGetWorkflowRoleWorkflowRoleArrayOutputWithContext(context.Background())
}

func (i GetWorkflowRoleWorkflowRoleArray) ToGetWorkflowRoleWorkflowRoleArrayOutputWithContext(ctx context.Context) GetWorkflowRoleWorkflowRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkflowRoleWorkflowRoleArrayOutput)
}

type GetWorkflowRoleWorkflowRoleOutput struct{ *pulumi.OutputState }

func (GetWorkflowRoleWorkflowRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkflowRoleWorkflowRole)(nil)).Elem()
}

func (o GetWorkflowRoleWorkflowRoleOutput) ToGetWorkflowRoleWorkflowRoleOutput() GetWorkflowRoleWorkflowRoleOutput {
	return o
}

func (o GetWorkflowRoleWorkflowRoleOutput) ToGetWorkflowRoleWorkflowRoleOutputWithContext(ctx context.Context) GetWorkflowRoleWorkflowRoleOutput {
	return o
}

// Unique identifier of the WorkflowRole.
func (o GetWorkflowRoleWorkflowRoleOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkflowRoleWorkflowRole) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The role id.
func (o GetWorkflowRoleWorkflowRoleOutput) RoleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkflowRoleWorkflowRole) *string { return v.RoleId }).(pulumi.StringPtrOutput)
}

// The workflow id.
func (o GetWorkflowRoleWorkflowRoleOutput) WorkflowId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkflowRoleWorkflowRole) *string { return v.WorkflowId }).(pulumi.StringPtrOutput)
}

type GetWorkflowRoleWorkflowRoleArrayOutput struct{ *pulumi.OutputState }

func (GetWorkflowRoleWorkflowRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWorkflowRoleWorkflowRole)(nil)).Elem()
}

func (o GetWorkflowRoleWorkflowRoleArrayOutput) ToGetWorkflowRoleWorkflowRoleArrayOutput() GetWorkflowRoleWorkflowRoleArrayOutput {
	return o
}

func (o GetWorkflowRoleWorkflowRoleArrayOutput) ToGetWorkflowRoleWorkflowRoleArrayOutputWithContext(ctx context.Context) GetWorkflowRoleWorkflowRoleArrayOutput {
	return o
}

func (o GetWorkflowRoleWorkflowRoleArrayOutput) Index(i pulumi.IntInput) GetWorkflowRoleWorkflowRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWorkflowRoleWorkflowRole {
		return vs[0].([]GetWorkflowRoleWorkflowRole)[vs[1].(int)]
	}).(GetWorkflowRoleWorkflowRoleOutput)
}

type GetWorkflowWorkflow struct {
	// Fixed Duration of access requests bound to this workflow. If fixed duration is provided, max duration must be empty. If neither max nor fixed duration are provided, requests that bind to this workflow will use the organization-level settings.
	AccessRequestFixedDuration *string `pulumi:"accessRequestFixedDuration"`
	// Maximum Duration of access requests bound to this workflow. If max duration is provided, fixed duration must be empty. If neither max nor fixed duration are provided, requests that bind to this workflow will use the organization-level settings.
	AccessRequestMaxDuration *string `pulumi:"accessRequestMaxDuration"`
	// AccessRules is a list of access rules defining the resources this Workflow provides access to.
	AccessRules *string `pulumi:"accessRules"`
	// Optional approval flow ID identifies an approval flow that linked to the workflow
	ApprovalFlowId *string `pulumi:"approvalFlowId"`
	// Optional auto grant setting to automatically approve requests or not, defaults to false.
	AutoGrant *bool `pulumi:"autoGrant"`
	// Optional description of the Workflow.
	Description *string `pulumi:"description"`
	// Optional enabled state for workflow. This setting may be overridden by the system if the workflow doesn't meet the requirements to be enabled or if other conditions prevent enabling the workflow. The requirements to enable a workflow are that the workflow must be either set up for with auto grant enabled or have one or more WorkflowApprovers created for the workflow.
	Enabled *bool `pulumi:"enabled"`
	// Unique identifier of the Workflow.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Workflow.
	Name *string `pulumi:"name"`
	// Optional weight for workflow to specify it's priority in matching a request.
	Weight *int `pulumi:"weight"`
}

// GetWorkflowWorkflowInput is an input type that accepts GetWorkflowWorkflowArgs and GetWorkflowWorkflowOutput values.
// You can construct a concrete instance of `GetWorkflowWorkflowInput` via:
//
//	GetWorkflowWorkflowArgs{...}
type GetWorkflowWorkflowInput interface {
	pulumi.Input

	ToGetWorkflowWorkflowOutput() GetWorkflowWorkflowOutput
	ToGetWorkflowWorkflowOutputWithContext(context.Context) GetWorkflowWorkflowOutput
}

type GetWorkflowWorkflowArgs struct {
	// Fixed Duration of access requests bound to this workflow. If fixed duration is provided, max duration must be empty. If neither max nor fixed duration are provided, requests that bind to this workflow will use the organization-level settings.
	AccessRequestFixedDuration pulumi.StringPtrInput `pulumi:"accessRequestFixedDuration"`
	// Maximum Duration of access requests bound to this workflow. If max duration is provided, fixed duration must be empty. If neither max nor fixed duration are provided, requests that bind to this workflow will use the organization-level settings.
	AccessRequestMaxDuration pulumi.StringPtrInput `pulumi:"accessRequestMaxDuration"`
	// AccessRules is a list of access rules defining the resources this Workflow provides access to.
	AccessRules pulumi.StringPtrInput `pulumi:"accessRules"`
	// Optional approval flow ID identifies an approval flow that linked to the workflow
	ApprovalFlowId pulumi.StringPtrInput `pulumi:"approvalFlowId"`
	// Optional auto grant setting to automatically approve requests or not, defaults to false.
	AutoGrant pulumi.BoolPtrInput `pulumi:"autoGrant"`
	// Optional description of the Workflow.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Optional enabled state for workflow. This setting may be overridden by the system if the workflow doesn't meet the requirements to be enabled or if other conditions prevent enabling the workflow. The requirements to enable a workflow are that the workflow must be either set up for with auto grant enabled or have one or more WorkflowApprovers created for the workflow.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Unique identifier of the Workflow.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Workflow.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Optional weight for workflow to specify it's priority in matching a request.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (GetWorkflowWorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkflowWorkflow)(nil)).Elem()
}

func (i GetWorkflowWorkflowArgs) ToGetWorkflowWorkflowOutput() GetWorkflowWorkflowOutput {
	return i.ToGetWorkflowWorkflowOutputWithContext(context.Background())
}

func (i GetWorkflowWorkflowArgs) ToGetWorkflowWorkflowOutputWithContext(ctx context.Context) GetWorkflowWorkflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkflowWorkflowOutput)
}

// GetWorkflowWorkflowArrayInput is an input type that accepts GetWorkflowWorkflowArray and GetWorkflowWorkflowArrayOutput values.
// You can construct a concrete instance of `GetWorkflowWorkflowArrayInput` via:
//
//	GetWorkflowWorkflowArray{ GetWorkflowWorkflowArgs{...} }
type GetWorkflowWorkflowArrayInput interface {
	pulumi.Input

	ToGetWorkflowWorkflowArrayOutput() GetWorkflowWorkflowArrayOutput
	ToGetWorkflowWorkflowArrayOutputWithContext(context.Context) GetWorkflowWorkflowArrayOutput
}

type GetWorkflowWorkflowArray []GetWorkflowWorkflowInput

func (GetWorkflowWorkflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWorkflowWorkflow)(nil)).Elem()
}

func (i GetWorkflowWorkflowArray) ToGetWorkflowWorkflowArrayOutput() GetWorkflowWorkflowArrayOutput {
	return i.ToGetWorkflowWorkflowArrayOutputWithContext(context.Background())
}

func (i GetWorkflowWorkflowArray) ToGetWorkflowWorkflowArrayOutputWithContext(ctx context.Context) GetWorkflowWorkflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkflowWorkflowArrayOutput)
}

type GetWorkflowWorkflowOutput struct{ *pulumi.OutputState }

func (GetWorkflowWorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkflowWorkflow)(nil)).Elem()
}

func (o GetWorkflowWorkflowOutput) ToGetWorkflowWorkflowOutput() GetWorkflowWorkflowOutput {
	return o
}

func (o GetWorkflowWorkflowOutput) ToGetWorkflowWorkflowOutputWithContext(ctx context.Context) GetWorkflowWorkflowOutput {
	return o
}

// Fixed Duration of access requests bound to this workflow. If fixed duration is provided, max duration must be empty. If neither max nor fixed duration are provided, requests that bind to this workflow will use the organization-level settings.
func (o GetWorkflowWorkflowOutput) AccessRequestFixedDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkflowWorkflow) *string { return v.AccessRequestFixedDuration }).(pulumi.StringPtrOutput)
}

// Maximum Duration of access requests bound to this workflow. If max duration is provided, fixed duration must be empty. If neither max nor fixed duration are provided, requests that bind to this workflow will use the organization-level settings.
func (o GetWorkflowWorkflowOutput) AccessRequestMaxDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkflowWorkflow) *string { return v.AccessRequestMaxDuration }).(pulumi.StringPtrOutput)
}

// AccessRules is a list of access rules defining the resources this Workflow provides access to.
func (o GetWorkflowWorkflowOutput) AccessRules() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkflowWorkflow) *string { return v.AccessRules }).(pulumi.StringPtrOutput)
}

// Optional approval flow ID identifies an approval flow that linked to the workflow
func (o GetWorkflowWorkflowOutput) ApprovalFlowId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkflowWorkflow) *string { return v.ApprovalFlowId }).(pulumi.StringPtrOutput)
}

// Optional auto grant setting to automatically approve requests or not, defaults to false.
func (o GetWorkflowWorkflowOutput) AutoGrant() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetWorkflowWorkflow) *bool { return v.AutoGrant }).(pulumi.BoolPtrOutput)
}

// Optional description of the Workflow.
func (o GetWorkflowWorkflowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkflowWorkflow) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional enabled state for workflow. This setting may be overridden by the system if the workflow doesn't meet the requirements to be enabled or if other conditions prevent enabling the workflow. The requirements to enable a workflow are that the workflow must be either set up for with auto grant enabled or have one or more WorkflowApprovers created for the workflow.
func (o GetWorkflowWorkflowOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetWorkflowWorkflow) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Unique identifier of the Workflow.
func (o GetWorkflowWorkflowOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkflowWorkflow) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Unique human-readable name of the Workflow.
func (o GetWorkflowWorkflowOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWorkflowWorkflow) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Optional weight for workflow to specify it's priority in matching a request.
func (o GetWorkflowWorkflowOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetWorkflowWorkflow) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type GetWorkflowWorkflowArrayOutput struct{ *pulumi.OutputState }

func (GetWorkflowWorkflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWorkflowWorkflow)(nil)).Elem()
}

func (o GetWorkflowWorkflowArrayOutput) ToGetWorkflowWorkflowArrayOutput() GetWorkflowWorkflowArrayOutput {
	return o
}

func (o GetWorkflowWorkflowArrayOutput) ToGetWorkflowWorkflowArrayOutputWithContext(ctx context.Context) GetWorkflowWorkflowArrayOutput {
	return o
}

func (o GetWorkflowWorkflowArrayOutput) Index(i pulumi.IntInput) GetWorkflowWorkflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWorkflowWorkflow {
		return vs[0].([]GetWorkflowWorkflow)[vs[1].(int)]
	}).(GetWorkflowWorkflowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountServiceInput)(nil)).Elem(), AccountServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountServicePtrInput)(nil)).Elem(), AccountServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountUserInput)(nil)).Elem(), AccountUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountUserPtrInput)(nil)).Elem(), AccountUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeGatewayInput)(nil)).Elem(), NodeGatewayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeGatewayPtrInput)(nil)).Elem(), NodeGatewayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeGatewayMaintenanceWindowInput)(nil)).Elem(), NodeGatewayMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeGatewayMaintenanceWindowArrayInput)(nil)).Elem(), NodeGatewayMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeProxyClusterInput)(nil)).Elem(), NodeProxyClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeProxyClusterPtrInput)(nil)).Elem(), NodeProxyClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeProxyClusterMaintenanceWindowInput)(nil)).Elem(), NodeProxyClusterMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeProxyClusterMaintenanceWindowArrayInput)(nil)).Elem(), NodeProxyClusterMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeRelayInput)(nil)).Elem(), NodeRelayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeRelayPtrInput)(nil)).Elem(), NodeRelayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeRelayMaintenanceWindowInput)(nil)).Elem(), NodeRelayMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeRelayMaintenanceWindowArrayInput)(nil)).Elem(), NodeRelayMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAksInput)(nil)).Elem(), ResourceAksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAksPtrInput)(nil)).Elem(), ResourceAksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAksBasicAuthInput)(nil)).Elem(), ResourceAksBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAksBasicAuthPtrInput)(nil)).Elem(), ResourceAksBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAksServiceAccountInput)(nil)).Elem(), ResourceAksServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAksServiceAccountPtrInput)(nil)).Elem(), ResourceAksServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAksServiceAccountUserImpersonationInput)(nil)).Elem(), ResourceAksServiceAccountUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAksServiceAccountUserImpersonationPtrInput)(nil)).Elem(), ResourceAksServiceAccountUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAksUserImpersonationInput)(nil)).Elem(), ResourceAksUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAksUserImpersonationPtrInput)(nil)).Elem(), ResourceAksUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAmazonEksInput)(nil)).Elem(), ResourceAmazonEksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAmazonEksPtrInput)(nil)).Elem(), ResourceAmazonEksArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAmazonEksInstanceProfileInput)(nil)).Elem(), ResourceAmazonEksInstanceProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAmazonEksInstanceProfilePtrInput)(nil)).Elem(), ResourceAmazonEksInstanceProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAmazonEksInstanceProfileUserImpersonationInput)(nil)).Elem(), ResourceAmazonEksInstanceProfileUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAmazonEksInstanceProfileUserImpersonationPtrInput)(nil)).Elem(), ResourceAmazonEksInstanceProfileUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAmazonEksUserImpersonationInput)(nil)).Elem(), ResourceAmazonEksUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAmazonEksUserImpersonationPtrInput)(nil)).Elem(), ResourceAmazonEksUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAmazonEsInput)(nil)).Elem(), ResourceAmazonEsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAmazonEsPtrInput)(nil)).Elem(), ResourceAmazonEsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAmazonmqAmqp091Input)(nil)).Elem(), ResourceAmazonmqAmqp091Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAmazonmqAmqp091PtrInput)(nil)).Elem(), ResourceAmazonmqAmqp091Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAthenaInput)(nil)).Elem(), ResourceAthenaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAthenaPtrInput)(nil)).Elem(), ResourceAthenaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAthenaIamInput)(nil)).Elem(), ResourceAthenaIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAthenaIamPtrInput)(nil)).Elem(), ResourceAthenaIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAuroraMysqlInput)(nil)).Elem(), ResourceAuroraMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAuroraMysqlPtrInput)(nil)).Elem(), ResourceAuroraMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAuroraMysqlIamInput)(nil)).Elem(), ResourceAuroraMysqlIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAuroraMysqlIamPtrInput)(nil)).Elem(), ResourceAuroraMysqlIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAuroraPostgresInput)(nil)).Elem(), ResourceAuroraPostgresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAuroraPostgresPtrInput)(nil)).Elem(), ResourceAuroraPostgresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAuroraPostgresIamInput)(nil)).Elem(), ResourceAuroraPostgresIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAuroraPostgresIamPtrInput)(nil)).Elem(), ResourceAuroraPostgresIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAwsInput)(nil)).Elem(), ResourceAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAwsPtrInput)(nil)).Elem(), ResourceAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAwsConsoleInput)(nil)).Elem(), ResourceAwsConsoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAwsConsolePtrInput)(nil)).Elem(), ResourceAwsConsoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAwsConsoleStaticKeyPairInput)(nil)).Elem(), ResourceAwsConsoleStaticKeyPairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAwsConsoleStaticKeyPairPtrInput)(nil)).Elem(), ResourceAwsConsoleStaticKeyPairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAwsInstanceProfileInput)(nil)).Elem(), ResourceAwsInstanceProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAwsInstanceProfilePtrInput)(nil)).Elem(), ResourceAwsInstanceProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAzureInput)(nil)).Elem(), ResourceAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAzurePtrInput)(nil)).Elem(), ResourceAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAzureCertificateInput)(nil)).Elem(), ResourceAzureCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAzureCertificatePtrInput)(nil)).Elem(), ResourceAzureCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAzureMysqlInput)(nil)).Elem(), ResourceAzureMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAzureMysqlPtrInput)(nil)).Elem(), ResourceAzureMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAzurePostgresInput)(nil)).Elem(), ResourceAzurePostgresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAzurePostgresPtrInput)(nil)).Elem(), ResourceAzurePostgresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAzurePostgresManagedIdentityInput)(nil)).Elem(), ResourceAzurePostgresManagedIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceAzurePostgresManagedIdentityPtrInput)(nil)).Elem(), ResourceAzurePostgresManagedIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceBigQueryInput)(nil)).Elem(), ResourceBigQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceBigQueryPtrInput)(nil)).Elem(), ResourceBigQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceCassandraInput)(nil)).Elem(), ResourceCassandraArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceCassandraPtrInput)(nil)).Elem(), ResourceCassandraArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceCitusInput)(nil)).Elem(), ResourceCitusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceCitusPtrInput)(nil)).Elem(), ResourceCitusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClickHouseHttpInput)(nil)).Elem(), ResourceClickHouseHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClickHouseHttpPtrInput)(nil)).Elem(), ResourceClickHouseHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClickHouseMySqlInput)(nil)).Elem(), ResourceClickHouseMySqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClickHouseMySqlPtrInput)(nil)).Elem(), ResourceClickHouseMySqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClickHouseTcpInput)(nil)).Elem(), ResourceClickHouseTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClickHouseTcpPtrInput)(nil)).Elem(), ResourceClickHouseTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClustrixInput)(nil)).Elem(), ResourceClustrixArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClustrixPtrInput)(nil)).Elem(), ResourceClustrixArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceCockroachInput)(nil)).Elem(), ResourceCockroachArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceCockroachPtrInput)(nil)).Elem(), ResourceCockroachArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceCouchbaseDatabaseInput)(nil)).Elem(), ResourceCouchbaseDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceCouchbaseDatabasePtrInput)(nil)).Elem(), ResourceCouchbaseDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceCouchbaseWebUiInput)(nil)).Elem(), ResourceCouchbaseWebUiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceCouchbaseWebUiPtrInput)(nil)).Elem(), ResourceCouchbaseWebUiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDb2IInput)(nil)).Elem(), ResourceDb2IArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDb2IPtrInput)(nil)).Elem(), ResourceDb2IArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDb2LuwInput)(nil)).Elem(), ResourceDb2LuwArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDb2LuwPtrInput)(nil)).Elem(), ResourceDb2LuwArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDocumentDbHostInput)(nil)).Elem(), ResourceDocumentDbHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDocumentDbHostPtrInput)(nil)).Elem(), ResourceDocumentDbHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDocumentDbHostIamInput)(nil)).Elem(), ResourceDocumentDbHostIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDocumentDbHostIamPtrInput)(nil)).Elem(), ResourceDocumentDbHostIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDocumentDbReplicaSetInput)(nil)).Elem(), ResourceDocumentDbReplicaSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDocumentDbReplicaSetPtrInput)(nil)).Elem(), ResourceDocumentDbReplicaSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDruidInput)(nil)).Elem(), ResourceDruidArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDruidPtrInput)(nil)).Elem(), ResourceDruidArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDynamoDbInput)(nil)).Elem(), ResourceDynamoDbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDynamoDbPtrInput)(nil)).Elem(), ResourceDynamoDbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDynamoDbiamInput)(nil)).Elem(), ResourceDynamoDbiamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceDynamoDbiamPtrInput)(nil)).Elem(), ResourceDynamoDbiamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceElasticInput)(nil)).Elem(), ResourceElasticArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceElasticPtrInput)(nil)).Elem(), ResourceElasticArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceElasticacheRedisInput)(nil)).Elem(), ResourceElasticacheRedisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceElasticacheRedisPtrInput)(nil)).Elem(), ResourceElasticacheRedisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGcpInput)(nil)).Elem(), ResourceGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGcpPtrInput)(nil)).Elem(), ResourceGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGcpConsoleInput)(nil)).Elem(), ResourceGcpConsoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGcpConsolePtrInput)(nil)).Elem(), ResourceGcpConsoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGcpwifInput)(nil)).Elem(), ResourceGcpwifArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGcpwifPtrInput)(nil)).Elem(), ResourceGcpwifArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGoogleGkeInput)(nil)).Elem(), ResourceGoogleGkeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGoogleGkePtrInput)(nil)).Elem(), ResourceGoogleGkeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGoogleGkeUserImpersonationInput)(nil)).Elem(), ResourceGoogleGkeUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGoogleGkeUserImpersonationPtrInput)(nil)).Elem(), ResourceGoogleGkeUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGreenplumInput)(nil)).Elem(), ResourceGreenplumArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceGreenplumPtrInput)(nil)).Elem(), ResourceGreenplumArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceHttpAuthInput)(nil)).Elem(), ResourceHttpAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceHttpAuthPtrInput)(nil)).Elem(), ResourceHttpAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceHttpBasicAuthInput)(nil)).Elem(), ResourceHttpBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceHttpBasicAuthPtrInput)(nil)).Elem(), ResourceHttpBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceHttpNoAuthInput)(nil)).Elem(), ResourceHttpNoAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceHttpNoAuthPtrInput)(nil)).Elem(), ResourceHttpNoAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceKubernetesInput)(nil)).Elem(), ResourceKubernetesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceKubernetesPtrInput)(nil)).Elem(), ResourceKubernetesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceKubernetesBasicAuthInput)(nil)).Elem(), ResourceKubernetesBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceKubernetesBasicAuthPtrInput)(nil)).Elem(), ResourceKubernetesBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceKubernetesServiceAccountInput)(nil)).Elem(), ResourceKubernetesServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceKubernetesServiceAccountPtrInput)(nil)).Elem(), ResourceKubernetesServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceKubernetesServiceAccountUserImpersonationInput)(nil)).Elem(), ResourceKubernetesServiceAccountUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceKubernetesServiceAccountUserImpersonationPtrInput)(nil)).Elem(), ResourceKubernetesServiceAccountUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceKubernetesUserImpersonationInput)(nil)).Elem(), ResourceKubernetesUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceKubernetesUserImpersonationPtrInput)(nil)).Elem(), ResourceKubernetesUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMariaInput)(nil)).Elem(), ResourceMariaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMariaPtrInput)(nil)).Elem(), ResourceMariaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMemcachedInput)(nil)).Elem(), ResourceMemcachedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMemcachedPtrInput)(nil)).Elem(), ResourceMemcachedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMemsqlInput)(nil)).Elem(), ResourceMemsqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMemsqlPtrInput)(nil)).Elem(), ResourceMemsqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMongoHostInput)(nil)).Elem(), ResourceMongoHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMongoHostPtrInput)(nil)).Elem(), ResourceMongoHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMongoLegacyHostInput)(nil)).Elem(), ResourceMongoLegacyHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMongoLegacyHostPtrInput)(nil)).Elem(), ResourceMongoLegacyHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMongoLegacyReplicasetInput)(nil)).Elem(), ResourceMongoLegacyReplicasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMongoLegacyReplicasetPtrInput)(nil)).Elem(), ResourceMongoLegacyReplicasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMongoReplicaSetInput)(nil)).Elem(), ResourceMongoReplicaSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMongoReplicaSetPtrInput)(nil)).Elem(), ResourceMongoReplicaSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMongoShardedClusterInput)(nil)).Elem(), ResourceMongoShardedClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMongoShardedClusterPtrInput)(nil)).Elem(), ResourceMongoShardedClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMtlsMysqlInput)(nil)).Elem(), ResourceMtlsMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMtlsMysqlPtrInput)(nil)).Elem(), ResourceMtlsMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMtlsPostgresInput)(nil)).Elem(), ResourceMtlsPostgresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMtlsPostgresPtrInput)(nil)).Elem(), ResourceMtlsPostgresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMysqlInput)(nil)).Elem(), ResourceMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMysqlPtrInput)(nil)).Elem(), ResourceMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceNeptuneInput)(nil)).Elem(), ResourceNeptuneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceNeptunePtrInput)(nil)).Elem(), ResourceNeptuneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceNeptuneIamInput)(nil)).Elem(), ResourceNeptuneIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceNeptuneIamPtrInput)(nil)).Elem(), ResourceNeptuneIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceOracleInput)(nil)).Elem(), ResourceOracleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceOraclePtrInput)(nil)).Elem(), ResourceOracleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePostgresInput)(nil)).Elem(), ResourcePostgresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePostgresPtrInput)(nil)).Elem(), ResourcePostgresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePrestoInput)(nil)).Elem(), ResourcePrestoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePrestoPtrInput)(nil)).Elem(), ResourcePrestoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRabbitmqAmqp091Input)(nil)).Elem(), ResourceRabbitmqAmqp091Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRabbitmqAmqp091PtrInput)(nil)).Elem(), ResourceRabbitmqAmqp091Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRawTcpInput)(nil)).Elem(), ResourceRawTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRawTcpPtrInput)(nil)).Elem(), ResourceRawTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRdpInput)(nil)).Elem(), ResourceRdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRdpPtrInput)(nil)).Elem(), ResourceRdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRdpCertInput)(nil)).Elem(), ResourceRdpCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRdpCertPtrInput)(nil)).Elem(), ResourceRdpCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRdsPostgresIamInput)(nil)).Elem(), ResourceRdsPostgresIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRdsPostgresIamPtrInput)(nil)).Elem(), ResourceRdsPostgresIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRedisInput)(nil)).Elem(), ResourceRedisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRedisPtrInput)(nil)).Elem(), ResourceRedisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRedshiftInput)(nil)).Elem(), ResourceRedshiftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceRedshiftPtrInput)(nil)).Elem(), ResourceRedshiftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSingleStoreInput)(nil)).Elem(), ResourceSingleStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSingleStorePtrInput)(nil)).Elem(), ResourceSingleStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSnowflakeInput)(nil)).Elem(), ResourceSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSnowflakePtrInput)(nil)).Elem(), ResourceSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSnowsightInput)(nil)).Elem(), ResourceSnowsightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSnowsightPtrInput)(nil)).Elem(), ResourceSnowsightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSqlServerInput)(nil)).Elem(), ResourceSqlServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSqlServerPtrInput)(nil)).Elem(), ResourceSqlServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSqlServerAzureAdInput)(nil)).Elem(), ResourceSqlServerAzureAdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSqlServerAzureAdPtrInput)(nil)).Elem(), ResourceSqlServerAzureAdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSqlServerKerberosAdInput)(nil)).Elem(), ResourceSqlServerKerberosAdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSqlServerKerberosAdPtrInput)(nil)).Elem(), ResourceSqlServerKerberosAdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSshInput)(nil)).Elem(), ResourceSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSshPtrInput)(nil)).Elem(), ResourceSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSshCertInput)(nil)).Elem(), ResourceSshCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSshCertPtrInput)(nil)).Elem(), ResourceSshCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSshCustomerKeyInput)(nil)).Elem(), ResourceSshCustomerKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSshCustomerKeyPtrInput)(nil)).Elem(), ResourceSshCustomerKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSshPasswordInput)(nil)).Elem(), ResourceSshPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSshPasswordPtrInput)(nil)).Elem(), ResourceSshPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSybaseInput)(nil)).Elem(), ResourceSybaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSybasePtrInput)(nil)).Elem(), ResourceSybaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSybaseIqInput)(nil)).Elem(), ResourceSybaseIqArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceSybaseIqPtrInput)(nil)).Elem(), ResourceSybaseIqArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceTeradataInput)(nil)).Elem(), ResourceTeradataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceTeradataPtrInput)(nil)).Elem(), ResourceTeradataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceTrinoInput)(nil)).Elem(), ResourceTrinoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceTrinoPtrInput)(nil)).Elem(), ResourceTrinoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreActiveDirectoryStoreInput)(nil)).Elem(), SecretStoreActiveDirectoryStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreActiveDirectoryStorePtrInput)(nil)).Elem(), SecretStoreActiveDirectoryStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreAwsInput)(nil)).Elem(), SecretStoreAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreAwsPtrInput)(nil)).Elem(), SecretStoreAwsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreAwsCertX509Input)(nil)).Elem(), SecretStoreAwsCertX509Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreAwsCertX509PtrInput)(nil)).Elem(), SecretStoreAwsCertX509Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreAzureStoreInput)(nil)).Elem(), SecretStoreAzureStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreAzureStorePtrInput)(nil)).Elem(), SecretStoreAzureStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreCyberarkConjurInput)(nil)).Elem(), SecretStoreCyberarkConjurArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreCyberarkConjurPtrInput)(nil)).Elem(), SecretStoreCyberarkConjurArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreCyberarkPamInput)(nil)).Elem(), SecretStoreCyberarkPamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreCyberarkPamPtrInput)(nil)).Elem(), SecretStoreCyberarkPamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreCyberarkPamExperimentalInput)(nil)).Elem(), SecretStoreCyberarkPamExperimentalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreCyberarkPamExperimentalPtrInput)(nil)).Elem(), SecretStoreCyberarkPamExperimentalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreDelineaStoreInput)(nil)).Elem(), SecretStoreDelineaStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreDelineaStorePtrInput)(nil)).Elem(), SecretStoreDelineaStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreGcpCertX509StoreInput)(nil)).Elem(), SecretStoreGcpCertX509StoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreGcpCertX509StorePtrInput)(nil)).Elem(), SecretStoreGcpCertX509StoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreGcpStoreInput)(nil)).Elem(), SecretStoreGcpStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreGcpStorePtrInput)(nil)).Elem(), SecretStoreGcpStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreKeyfactorSshStoreInput)(nil)).Elem(), SecretStoreKeyfactorSshStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreKeyfactorSshStorePtrInput)(nil)).Elem(), SecretStoreKeyfactorSshStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreKeyfactorX509StoreInput)(nil)).Elem(), SecretStoreKeyfactorX509StoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreKeyfactorX509StorePtrInput)(nil)).Elem(), SecretStoreKeyfactorX509StoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultApproleInput)(nil)).Elem(), SecretStoreVaultApproleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultApprolePtrInput)(nil)).Elem(), SecretStoreVaultApproleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultApproleCertSshInput)(nil)).Elem(), SecretStoreVaultApproleCertSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultApproleCertSshPtrInput)(nil)).Elem(), SecretStoreVaultApproleCertSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultApproleCertX509Input)(nil)).Elem(), SecretStoreVaultApproleCertX509Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultApproleCertX509PtrInput)(nil)).Elem(), SecretStoreVaultApproleCertX509Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultAwsEc2Input)(nil)).Elem(), SecretStoreVaultAwsEc2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultAwsEc2PtrInput)(nil)).Elem(), SecretStoreVaultAwsEc2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultAwsIamInput)(nil)).Elem(), SecretStoreVaultAwsIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultAwsIamPtrInput)(nil)).Elem(), SecretStoreVaultAwsIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultTlsInput)(nil)).Elem(), SecretStoreVaultTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultTlsPtrInput)(nil)).Elem(), SecretStoreVaultTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultTlsCertSshInput)(nil)).Elem(), SecretStoreVaultTlsCertSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultTlsCertSshPtrInput)(nil)).Elem(), SecretStoreVaultTlsCertSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultTlsCertX509Input)(nil)).Elem(), SecretStoreVaultTlsCertX509Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultTlsCertX509PtrInput)(nil)).Elem(), SecretStoreVaultTlsCertX509Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultTokenInput)(nil)).Elem(), SecretStoreVaultTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultTokenPtrInput)(nil)).Elem(), SecretStoreVaultTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultTokenCertSshInput)(nil)).Elem(), SecretStoreVaultTokenCertSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultTokenCertSshPtrInput)(nil)).Elem(), SecretStoreVaultTokenCertSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultTokenCertX509Input)(nil)).Elem(), SecretStoreVaultTokenCertX509Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreVaultTokenCertX509PtrInput)(nil)).Elem(), SecretStoreVaultTokenCertX509Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountAccountInput)(nil)).Elem(), GetAccountAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountAccountArrayInput)(nil)).Elem(), GetAccountAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountAccountServiceInput)(nil)).Elem(), GetAccountAccountServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountAccountServiceArrayInput)(nil)).Elem(), GetAccountAccountServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountAccountTokenInput)(nil)).Elem(), GetAccountAccountTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountAccountTokenArrayInput)(nil)).Elem(), GetAccountAccountTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountAccountUserInput)(nil)).Elem(), GetAccountAccountUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountAccountUserArrayInput)(nil)).Elem(), GetAccountAccountUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountAttachmentAccountAttachmentInput)(nil)).Elem(), GetAccountAttachmentAccountAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountAttachmentAccountAttachmentArrayInput)(nil)).Elem(), GetAccountAttachmentAccountAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApprovalWorkflowApprovalWorkflowInput)(nil)).Elem(), GetApprovalWorkflowApprovalWorkflowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApprovalWorkflowApprovalWorkflowArrayInput)(nil)).Elem(), GetApprovalWorkflowApprovalWorkflowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApprovalWorkflowApproverApprovalWorkflowApproverInput)(nil)).Elem(), GetApprovalWorkflowApproverApprovalWorkflowApproverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApprovalWorkflowApproverApprovalWorkflowApproverArrayInput)(nil)).Elem(), GetApprovalWorkflowApproverApprovalWorkflowApproverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApprovalWorkflowStepApprovalWorkflowStepInput)(nil)).Elem(), GetApprovalWorkflowStepApprovalWorkflowStepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetApprovalWorkflowStepApprovalWorkflowStepArrayInput)(nil)).Elem(), GetApprovalWorkflowStepApprovalWorkflowStepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIdentityAliasIdentityAliasInput)(nil)).Elem(), GetIdentityAliasIdentityAliasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIdentityAliasIdentityAliasArrayInput)(nil)).Elem(), GetIdentityAliasIdentityAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIdentitySetIdentitySetInput)(nil)).Elem(), GetIdentitySetIdentitySetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIdentitySetIdentitySetArrayInput)(nil)).Elem(), GetIdentitySetIdentitySetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeNodeInput)(nil)).Elem(), GetNodeNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeNodeArrayInput)(nil)).Elem(), GetNodeNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeNodeGatewayInput)(nil)).Elem(), GetNodeNodeGatewayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeNodeGatewayArrayInput)(nil)).Elem(), GetNodeNodeGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeNodeGatewayMaintenanceWindowInput)(nil)).Elem(), GetNodeNodeGatewayMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeNodeGatewayMaintenanceWindowArrayInput)(nil)).Elem(), GetNodeNodeGatewayMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeNodeProxyClusterInput)(nil)).Elem(), GetNodeNodeProxyClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeNodeProxyClusterArrayInput)(nil)).Elem(), GetNodeNodeProxyClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeNodeProxyClusterMaintenanceWindowInput)(nil)).Elem(), GetNodeNodeProxyClusterMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeNodeProxyClusterMaintenanceWindowArrayInput)(nil)).Elem(), GetNodeNodeProxyClusterMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeNodeRelayInput)(nil)).Elem(), GetNodeNodeRelayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeNodeRelayArrayInput)(nil)).Elem(), GetNodeNodeRelayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeNodeRelayMaintenanceWindowInput)(nil)).Elem(), GetNodeNodeRelayMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeNodeRelayMaintenanceWindowArrayInput)(nil)).Elem(), GetNodeNodeRelayMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPeeringGroupNodePeeringGroupNodeInput)(nil)).Elem(), GetPeeringGroupNodePeeringGroupNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPeeringGroupNodePeeringGroupNodeArrayInput)(nil)).Elem(), GetPeeringGroupNodePeeringGroupNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPeeringGroupPeerPeeringGroupPeerInput)(nil)).Elem(), GetPeeringGroupPeerPeeringGroupPeerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPeeringGroupPeerPeeringGroupPeerArrayInput)(nil)).Elem(), GetPeeringGroupPeerPeeringGroupPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPeeringGroupPeeringGroupInput)(nil)).Elem(), GetPeeringGroupPeeringGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPeeringGroupPeeringGroupArrayInput)(nil)).Elem(), GetPeeringGroupPeeringGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPeeringGroupResourcePeeringGroupResourceInput)(nil)).Elem(), GetPeeringGroupResourcePeeringGroupResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPeeringGroupResourcePeeringGroupResourceArrayInput)(nil)).Elem(), GetPeeringGroupResourcePeeringGroupResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyPolicyInput)(nil)).Elem(), GetPolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyPolicyArrayInput)(nil)).Elem(), GetPolicyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProxyClusterKeyProxyClusterKeyInput)(nil)).Elem(), GetProxyClusterKeyProxyClusterKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProxyClusterKeyProxyClusterKeyArrayInput)(nil)).Elem(), GetProxyClusterKeyProxyClusterKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRemoteIdentityGroupRemoteIdentityGroupInput)(nil)).Elem(), GetRemoteIdentityGroupRemoteIdentityGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRemoteIdentityGroupRemoteIdentityGroupArrayInput)(nil)).Elem(), GetRemoteIdentityGroupRemoteIdentityGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRemoteIdentityRemoteIdentityInput)(nil)).Elem(), GetRemoteIdentityRemoteIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRemoteIdentityRemoteIdentityArrayInput)(nil)).Elem(), GetRemoteIdentityRemoteIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceInput)(nil)).Elem(), GetResourceResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceArrayInput)(nil)).Elem(), GetResourceResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAkInput)(nil)).Elem(), GetResourceResourceAkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAkArrayInput)(nil)).Elem(), GetResourceResourceAkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAksBasicAuthInput)(nil)).Elem(), GetResourceResourceAksBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAksBasicAuthArrayInput)(nil)).Elem(), GetResourceResourceAksBasicAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAksServiceAccountInput)(nil)).Elem(), GetResourceResourceAksServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAksServiceAccountArrayInput)(nil)).Elem(), GetResourceResourceAksServiceAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAksServiceAccountUserImpersonationInput)(nil)).Elem(), GetResourceResourceAksServiceAccountUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAksServiceAccountUserImpersonationArrayInput)(nil)).Elem(), GetResourceResourceAksServiceAccountUserImpersonationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAksUserImpersonationInput)(nil)).Elem(), GetResourceResourceAksUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAksUserImpersonationArrayInput)(nil)).Elem(), GetResourceResourceAksUserImpersonationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAmazonEInput)(nil)).Elem(), GetResourceResourceAmazonEArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAmazonEArrayInput)(nil)).Elem(), GetResourceResourceAmazonEArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAmazonEkInput)(nil)).Elem(), GetResourceResourceAmazonEkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAmazonEkArrayInput)(nil)).Elem(), GetResourceResourceAmazonEkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAmazonEksInstanceProfileInput)(nil)).Elem(), GetResourceResourceAmazonEksInstanceProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAmazonEksInstanceProfileArrayInput)(nil)).Elem(), GetResourceResourceAmazonEksInstanceProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAmazonEksInstanceProfileUserImpersonationInput)(nil)).Elem(), GetResourceResourceAmazonEksInstanceProfileUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayInput)(nil)).Elem(), GetResourceResourceAmazonEksInstanceProfileUserImpersonationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAmazonEksUserImpersonationInput)(nil)).Elem(), GetResourceResourceAmazonEksUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAmazonEksUserImpersonationArrayInput)(nil)).Elem(), GetResourceResourceAmazonEksUserImpersonationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAmazonmqAmqp091Input)(nil)).Elem(), GetResourceResourceAmazonmqAmqp091Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAmazonmqAmqp091ArrayInput)(nil)).Elem(), GetResourceResourceAmazonmqAmqp091Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAthenaInput)(nil)).Elem(), GetResourceResourceAthenaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAthenaArrayInput)(nil)).Elem(), GetResourceResourceAthenaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAthenaIamInput)(nil)).Elem(), GetResourceResourceAthenaIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAthenaIamArrayInput)(nil)).Elem(), GetResourceResourceAthenaIamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAuroraMysqlInput)(nil)).Elem(), GetResourceResourceAuroraMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAuroraMysqlArrayInput)(nil)).Elem(), GetResourceResourceAuroraMysqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAuroraMysqlIamInput)(nil)).Elem(), GetResourceResourceAuroraMysqlIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAuroraMysqlIamArrayInput)(nil)).Elem(), GetResourceResourceAuroraMysqlIamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAuroraPostgreInput)(nil)).Elem(), GetResourceResourceAuroraPostgreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAuroraPostgreArrayInput)(nil)).Elem(), GetResourceResourceAuroraPostgreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAuroraPostgresIamInput)(nil)).Elem(), GetResourceResourceAuroraPostgresIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAuroraPostgresIamArrayInput)(nil)).Elem(), GetResourceResourceAuroraPostgresIamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAwInput)(nil)).Elem(), GetResourceResourceAwArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAwArrayInput)(nil)).Elem(), GetResourceResourceAwArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAwsConsoleInput)(nil)).Elem(), GetResourceResourceAwsConsoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAwsConsoleArrayInput)(nil)).Elem(), GetResourceResourceAwsConsoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAwsConsoleStaticKeyPairInput)(nil)).Elem(), GetResourceResourceAwsConsoleStaticKeyPairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAwsConsoleStaticKeyPairArrayInput)(nil)).Elem(), GetResourceResourceAwsConsoleStaticKeyPairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAwsInstanceProfileInput)(nil)).Elem(), GetResourceResourceAwsInstanceProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAwsInstanceProfileArrayInput)(nil)).Elem(), GetResourceResourceAwsInstanceProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAzureInput)(nil)).Elem(), GetResourceResourceAzureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAzureArrayInput)(nil)).Elem(), GetResourceResourceAzureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAzureCertificateInput)(nil)).Elem(), GetResourceResourceAzureCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAzureCertificateArrayInput)(nil)).Elem(), GetResourceResourceAzureCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAzureMysqlInput)(nil)).Elem(), GetResourceResourceAzureMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAzureMysqlArrayInput)(nil)).Elem(), GetResourceResourceAzureMysqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAzurePostgreInput)(nil)).Elem(), GetResourceResourceAzurePostgreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAzurePostgreArrayInput)(nil)).Elem(), GetResourceResourceAzurePostgreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAzurePostgresManagedIdentityInput)(nil)).Elem(), GetResourceResourceAzurePostgresManagedIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceAzurePostgresManagedIdentityArrayInput)(nil)).Elem(), GetResourceResourceAzurePostgresManagedIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceBigQueryInput)(nil)).Elem(), GetResourceResourceBigQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceBigQueryArrayInput)(nil)).Elem(), GetResourceResourceBigQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceCassandraInput)(nil)).Elem(), GetResourceResourceCassandraArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceCassandraArrayInput)(nil)).Elem(), GetResourceResourceCassandraArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceCitusInput)(nil)).Elem(), GetResourceResourceCitusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceCitusArrayInput)(nil)).Elem(), GetResourceResourceCitusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceClickHouseHttpInput)(nil)).Elem(), GetResourceResourceClickHouseHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceClickHouseHttpArrayInput)(nil)).Elem(), GetResourceResourceClickHouseHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceClickHouseMySqlInput)(nil)).Elem(), GetResourceResourceClickHouseMySqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceClickHouseMySqlArrayInput)(nil)).Elem(), GetResourceResourceClickHouseMySqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceClickHouseTcpInput)(nil)).Elem(), GetResourceResourceClickHouseTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceClickHouseTcpArrayInput)(nil)).Elem(), GetResourceResourceClickHouseTcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceClustrixInput)(nil)).Elem(), GetResourceResourceClustrixArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceClustrixArrayInput)(nil)).Elem(), GetResourceResourceClustrixArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceCockroachInput)(nil)).Elem(), GetResourceResourceCockroachArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceCockroachArrayInput)(nil)).Elem(), GetResourceResourceCockroachArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceCouchbaseDatabaseInput)(nil)).Elem(), GetResourceResourceCouchbaseDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceCouchbaseDatabaseArrayInput)(nil)).Elem(), GetResourceResourceCouchbaseDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceCouchbaseWebUiInput)(nil)).Elem(), GetResourceResourceCouchbaseWebUiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceCouchbaseWebUiArrayInput)(nil)).Elem(), GetResourceResourceCouchbaseWebUiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceDb2IInput)(nil)).Elem(), GetResourceResourceDb2IArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceDb2IArrayInput)(nil)).Elem(), GetResourceResourceDb2IArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceDb2LuwInput)(nil)).Elem(), GetResourceResourceDb2LuwArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceDb2LuwArrayInput)(nil)).Elem(), GetResourceResourceDb2LuwArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceDocumentDbHostInput)(nil)).Elem(), GetResourceResourceDocumentDbHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceDocumentDbHostArrayInput)(nil)).Elem(), GetResourceResourceDocumentDbHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceDocumentDbHostIamInput)(nil)).Elem(), GetResourceResourceDocumentDbHostIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceDocumentDbHostIamArrayInput)(nil)).Elem(), GetResourceResourceDocumentDbHostIamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceDocumentDbReplicaSetInput)(nil)).Elem(), GetResourceResourceDocumentDbReplicaSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceDocumentDbReplicaSetArrayInput)(nil)).Elem(), GetResourceResourceDocumentDbReplicaSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceDruidInput)(nil)).Elem(), GetResourceResourceDruidArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceDruidArrayInput)(nil)).Elem(), GetResourceResourceDruidArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceDynamoDbInput)(nil)).Elem(), GetResourceResourceDynamoDbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceDynamoDbArrayInput)(nil)).Elem(), GetResourceResourceDynamoDbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceDynamoDbiamInput)(nil)).Elem(), GetResourceResourceDynamoDbiamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceDynamoDbiamArrayInput)(nil)).Elem(), GetResourceResourceDynamoDbiamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceElasticInput)(nil)).Elem(), GetResourceResourceElasticArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceElasticArrayInput)(nil)).Elem(), GetResourceResourceElasticArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceElasticacheRediInput)(nil)).Elem(), GetResourceResourceElasticacheRediArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceElasticacheRediArrayInput)(nil)).Elem(), GetResourceResourceElasticacheRediArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceGcpInput)(nil)).Elem(), GetResourceResourceGcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceGcpArrayInput)(nil)).Elem(), GetResourceResourceGcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceGcpConsoleInput)(nil)).Elem(), GetResourceResourceGcpConsoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceGcpConsoleArrayInput)(nil)).Elem(), GetResourceResourceGcpConsoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceGcpwifInput)(nil)).Elem(), GetResourceResourceGcpwifArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceGcpwifArrayInput)(nil)).Elem(), GetResourceResourceGcpwifArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceGoogleGkeInput)(nil)).Elem(), GetResourceResourceGoogleGkeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceGoogleGkeArrayInput)(nil)).Elem(), GetResourceResourceGoogleGkeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceGoogleGkeUserImpersonationInput)(nil)).Elem(), GetResourceResourceGoogleGkeUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceGoogleGkeUserImpersonationArrayInput)(nil)).Elem(), GetResourceResourceGoogleGkeUserImpersonationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceGreenplumInput)(nil)).Elem(), GetResourceResourceGreenplumArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceGreenplumArrayInput)(nil)).Elem(), GetResourceResourceGreenplumArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceHttpAuthInput)(nil)).Elem(), GetResourceResourceHttpAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceHttpAuthArrayInput)(nil)).Elem(), GetResourceResourceHttpAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceHttpBasicAuthInput)(nil)).Elem(), GetResourceResourceHttpBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceHttpBasicAuthArrayInput)(nil)).Elem(), GetResourceResourceHttpBasicAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceHttpNoAuthInput)(nil)).Elem(), GetResourceResourceHttpNoAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceHttpNoAuthArrayInput)(nil)).Elem(), GetResourceResourceHttpNoAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceKuberneteInput)(nil)).Elem(), GetResourceResourceKuberneteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceKuberneteArrayInput)(nil)).Elem(), GetResourceResourceKuberneteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceKubernetesBasicAuthInput)(nil)).Elem(), GetResourceResourceKubernetesBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceKubernetesBasicAuthArrayInput)(nil)).Elem(), GetResourceResourceKubernetesBasicAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceKubernetesServiceAccountInput)(nil)).Elem(), GetResourceResourceKubernetesServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceKubernetesServiceAccountArrayInput)(nil)).Elem(), GetResourceResourceKubernetesServiceAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceKubernetesServiceAccountUserImpersonationInput)(nil)).Elem(), GetResourceResourceKubernetesServiceAccountUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceKubernetesServiceAccountUserImpersonationArrayInput)(nil)).Elem(), GetResourceResourceKubernetesServiceAccountUserImpersonationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceKubernetesUserImpersonationInput)(nil)).Elem(), GetResourceResourceKubernetesUserImpersonationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceKubernetesUserImpersonationArrayInput)(nil)).Elem(), GetResourceResourceKubernetesUserImpersonationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMariaInput)(nil)).Elem(), GetResourceResourceMariaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMariaArrayInput)(nil)).Elem(), GetResourceResourceMariaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMemcachedInput)(nil)).Elem(), GetResourceResourceMemcachedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMemcachedArrayInput)(nil)).Elem(), GetResourceResourceMemcachedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMemsqlInput)(nil)).Elem(), GetResourceResourceMemsqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMemsqlArrayInput)(nil)).Elem(), GetResourceResourceMemsqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMongoHostInput)(nil)).Elem(), GetResourceResourceMongoHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMongoHostArrayInput)(nil)).Elem(), GetResourceResourceMongoHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMongoLegacyHostInput)(nil)).Elem(), GetResourceResourceMongoLegacyHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMongoLegacyHostArrayInput)(nil)).Elem(), GetResourceResourceMongoLegacyHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMongoLegacyReplicasetInput)(nil)).Elem(), GetResourceResourceMongoLegacyReplicasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMongoLegacyReplicasetArrayInput)(nil)).Elem(), GetResourceResourceMongoLegacyReplicasetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMongoReplicaSetInput)(nil)).Elem(), GetResourceResourceMongoReplicaSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMongoReplicaSetArrayInput)(nil)).Elem(), GetResourceResourceMongoReplicaSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMongoShardedClusterInput)(nil)).Elem(), GetResourceResourceMongoShardedClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMongoShardedClusterArrayInput)(nil)).Elem(), GetResourceResourceMongoShardedClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMtlsMysqlInput)(nil)).Elem(), GetResourceResourceMtlsMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMtlsMysqlArrayInput)(nil)).Elem(), GetResourceResourceMtlsMysqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMtlsPostgreInput)(nil)).Elem(), GetResourceResourceMtlsPostgreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMtlsPostgreArrayInput)(nil)).Elem(), GetResourceResourceMtlsPostgreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMysqlInput)(nil)).Elem(), GetResourceResourceMysqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceMysqlArrayInput)(nil)).Elem(), GetResourceResourceMysqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceNeptuneInput)(nil)).Elem(), GetResourceResourceNeptuneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceNeptuneArrayInput)(nil)).Elem(), GetResourceResourceNeptuneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceNeptuneIamInput)(nil)).Elem(), GetResourceResourceNeptuneIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceNeptuneIamArrayInput)(nil)).Elem(), GetResourceResourceNeptuneIamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceOracleInput)(nil)).Elem(), GetResourceResourceOracleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceOracleArrayInput)(nil)).Elem(), GetResourceResourceOracleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourcePostgreInput)(nil)).Elem(), GetResourceResourcePostgreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourcePostgreArrayInput)(nil)).Elem(), GetResourceResourcePostgreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourcePrestoInput)(nil)).Elem(), GetResourceResourcePrestoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourcePrestoArrayInput)(nil)).Elem(), GetResourceResourcePrestoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceRabbitmqAmqp091Input)(nil)).Elem(), GetResourceResourceRabbitmqAmqp091Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceRabbitmqAmqp091ArrayInput)(nil)).Elem(), GetResourceResourceRabbitmqAmqp091Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceRawTcpInput)(nil)).Elem(), GetResourceResourceRawTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceRawTcpArrayInput)(nil)).Elem(), GetResourceResourceRawTcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceRdpInput)(nil)).Elem(), GetResourceResourceRdpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceRdpArrayInput)(nil)).Elem(), GetResourceResourceRdpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceRdpCertInput)(nil)).Elem(), GetResourceResourceRdpCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceRdpCertArrayInput)(nil)).Elem(), GetResourceResourceRdpCertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceRdsPostgresIamInput)(nil)).Elem(), GetResourceResourceRdsPostgresIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceRdsPostgresIamArrayInput)(nil)).Elem(), GetResourceResourceRdsPostgresIamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceRediInput)(nil)).Elem(), GetResourceResourceRediArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceRediArrayInput)(nil)).Elem(), GetResourceResourceRediArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceRedshiftInput)(nil)).Elem(), GetResourceResourceRedshiftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceRedshiftArrayInput)(nil)).Elem(), GetResourceResourceRedshiftArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSingleStoreInput)(nil)).Elem(), GetResourceResourceSingleStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSingleStoreArrayInput)(nil)).Elem(), GetResourceResourceSingleStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSnowflakeInput)(nil)).Elem(), GetResourceResourceSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSnowflakeArrayInput)(nil)).Elem(), GetResourceResourceSnowflakeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSnowsightInput)(nil)).Elem(), GetResourceResourceSnowsightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSnowsightArrayInput)(nil)).Elem(), GetResourceResourceSnowsightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSqlServerInput)(nil)).Elem(), GetResourceResourceSqlServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSqlServerArrayInput)(nil)).Elem(), GetResourceResourceSqlServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSqlServerAzureAdInput)(nil)).Elem(), GetResourceResourceSqlServerAzureAdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSqlServerAzureAdArrayInput)(nil)).Elem(), GetResourceResourceSqlServerAzureAdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSqlServerKerberosAdInput)(nil)).Elem(), GetResourceResourceSqlServerKerberosAdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSqlServerKerberosAdArrayInput)(nil)).Elem(), GetResourceResourceSqlServerKerberosAdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSshInput)(nil)).Elem(), GetResourceResourceSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSshArrayInput)(nil)).Elem(), GetResourceResourceSshArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSshCertInput)(nil)).Elem(), GetResourceResourceSshCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSshCertArrayInput)(nil)).Elem(), GetResourceResourceSshCertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSshCustomerKeyInput)(nil)).Elem(), GetResourceResourceSshCustomerKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSshCustomerKeyArrayInput)(nil)).Elem(), GetResourceResourceSshCustomerKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSshPasswordInput)(nil)).Elem(), GetResourceResourceSshPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSshPasswordArrayInput)(nil)).Elem(), GetResourceResourceSshPasswordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSybaseInput)(nil)).Elem(), GetResourceResourceSybaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSybaseArrayInput)(nil)).Elem(), GetResourceResourceSybaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSybaseIqInput)(nil)).Elem(), GetResourceResourceSybaseIqArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceSybaseIqArrayInput)(nil)).Elem(), GetResourceResourceSybaseIqArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceTeradataInput)(nil)).Elem(), GetResourceResourceTeradataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceTeradataArrayInput)(nil)).Elem(), GetResourceResourceTeradataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceTrinoInput)(nil)).Elem(), GetResourceResourceTrinoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResourceResourceTrinoArrayInput)(nil)).Elem(), GetResourceResourceTrinoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoleRoleInput)(nil)).Elem(), GetRoleRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoleRoleArrayInput)(nil)).Elem(), GetRoleRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreInput)(nil)).Elem(), GetSecretStoreSecretStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreActiveDirectoryStoreInput)(nil)).Elem(), GetSecretStoreSecretStoreActiveDirectoryStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreActiveDirectoryStoreArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreActiveDirectoryStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreAwInput)(nil)).Elem(), GetSecretStoreSecretStoreAwArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreAwArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreAwArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreAwsCertX509Input)(nil)).Elem(), GetSecretStoreSecretStoreAwsCertX509Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreAwsCertX509ArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreAwsCertX509Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreAzureStoreInput)(nil)).Elem(), GetSecretStoreSecretStoreAzureStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreAzureStoreArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreAzureStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreCyberarkConjurInput)(nil)).Elem(), GetSecretStoreSecretStoreCyberarkConjurArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreCyberarkConjurArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreCyberarkConjurArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreCyberarkPamInput)(nil)).Elem(), GetSecretStoreSecretStoreCyberarkPamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreCyberarkPamArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreCyberarkPamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreCyberarkPamExperimentalInput)(nil)).Elem(), GetSecretStoreSecretStoreCyberarkPamExperimentalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreCyberarkPamExperimentalArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreCyberarkPamExperimentalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreDelineaStoreInput)(nil)).Elem(), GetSecretStoreSecretStoreDelineaStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreDelineaStoreArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreDelineaStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreGcpCertX509StoreInput)(nil)).Elem(), GetSecretStoreSecretStoreGcpCertX509StoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreGcpCertX509StoreArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreGcpCertX509StoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreGcpStoreInput)(nil)).Elem(), GetSecretStoreSecretStoreGcpStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreGcpStoreArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreGcpStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreKeyfactorSshStoreInput)(nil)).Elem(), GetSecretStoreSecretStoreKeyfactorSshStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreKeyfactorSshStoreArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreKeyfactorSshStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreKeyfactorX509StoreInput)(nil)).Elem(), GetSecretStoreSecretStoreKeyfactorX509StoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreKeyfactorX509StoreArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreKeyfactorX509StoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultApproleInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultApproleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultApproleArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultApproleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultApproleCertSshInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultApproleCertSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultApproleCertSshArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultApproleCertSshArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultApproleCertX509Input)(nil)).Elem(), GetSecretStoreSecretStoreVaultApproleCertX509Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultApproleCertX509ArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultApproleCertX509Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultAwsEc2Input)(nil)).Elem(), GetSecretStoreSecretStoreVaultAwsEc2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultAwsEc2ArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultAwsEc2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultAwsIamInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultAwsIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultAwsIamArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultAwsIamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultTlInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultTlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultTlArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultTlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultTlsCertSshInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultTlsCertSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultTlsCertSshArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultTlsCertSshArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultTlsCertX509Input)(nil)).Elem(), GetSecretStoreSecretStoreVaultTlsCertX509Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultTlsCertX509ArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultTlsCertX509Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultTokenInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultTokenArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultTokenCertSshInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultTokenCertSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultTokenCertSshArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultTokenCertSshArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultTokenCertX509Input)(nil)).Elem(), GetSecretStoreSecretStoreVaultTokenCertX509Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretStoreSecretStoreVaultTokenCertX509ArrayInput)(nil)).Elem(), GetSecretStoreSecretStoreVaultTokenCertX509Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWorkflowApproverWorkflowApproverInput)(nil)).Elem(), GetWorkflowApproverWorkflowApproverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWorkflowApproverWorkflowApproverArrayInput)(nil)).Elem(), GetWorkflowApproverWorkflowApproverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWorkflowRoleWorkflowRoleInput)(nil)).Elem(), GetWorkflowRoleWorkflowRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWorkflowRoleWorkflowRoleArrayInput)(nil)).Elem(), GetWorkflowRoleWorkflowRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWorkflowWorkflowInput)(nil)).Elem(), GetWorkflowWorkflowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWorkflowWorkflowArrayInput)(nil)).Elem(), GetWorkflowWorkflowArray{})
	pulumi.RegisterOutputType(AccountServiceOutput{})
	pulumi.RegisterOutputType(AccountServicePtrOutput{})
	pulumi.RegisterOutputType(AccountUserOutput{})
	pulumi.RegisterOutputType(AccountUserPtrOutput{})
	pulumi.RegisterOutputType(NodeGatewayOutput{})
	pulumi.RegisterOutputType(NodeGatewayPtrOutput{})
	pulumi.RegisterOutputType(NodeGatewayMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(NodeGatewayMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(NodeProxyClusterOutput{})
	pulumi.RegisterOutputType(NodeProxyClusterPtrOutput{})
	pulumi.RegisterOutputType(NodeProxyClusterMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(NodeProxyClusterMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(NodeRelayOutput{})
	pulumi.RegisterOutputType(NodeRelayPtrOutput{})
	pulumi.RegisterOutputType(NodeRelayMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(NodeRelayMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(ResourceAksOutput{})
	pulumi.RegisterOutputType(ResourceAksPtrOutput{})
	pulumi.RegisterOutputType(ResourceAksBasicAuthOutput{})
	pulumi.RegisterOutputType(ResourceAksBasicAuthPtrOutput{})
	pulumi.RegisterOutputType(ResourceAksServiceAccountOutput{})
	pulumi.RegisterOutputType(ResourceAksServiceAccountPtrOutput{})
	pulumi.RegisterOutputType(ResourceAksServiceAccountUserImpersonationOutput{})
	pulumi.RegisterOutputType(ResourceAksServiceAccountUserImpersonationPtrOutput{})
	pulumi.RegisterOutputType(ResourceAksUserImpersonationOutput{})
	pulumi.RegisterOutputType(ResourceAksUserImpersonationPtrOutput{})
	pulumi.RegisterOutputType(ResourceAmazonEksOutput{})
	pulumi.RegisterOutputType(ResourceAmazonEksPtrOutput{})
	pulumi.RegisterOutputType(ResourceAmazonEksInstanceProfileOutput{})
	pulumi.RegisterOutputType(ResourceAmazonEksInstanceProfilePtrOutput{})
	pulumi.RegisterOutputType(ResourceAmazonEksInstanceProfileUserImpersonationOutput{})
	pulumi.RegisterOutputType(ResourceAmazonEksInstanceProfileUserImpersonationPtrOutput{})
	pulumi.RegisterOutputType(ResourceAmazonEksUserImpersonationOutput{})
	pulumi.RegisterOutputType(ResourceAmazonEksUserImpersonationPtrOutput{})
	pulumi.RegisterOutputType(ResourceAmazonEsOutput{})
	pulumi.RegisterOutputType(ResourceAmazonEsPtrOutput{})
	pulumi.RegisterOutputType(ResourceAmazonmqAmqp091Output{})
	pulumi.RegisterOutputType(ResourceAmazonmqAmqp091PtrOutput{})
	pulumi.RegisterOutputType(ResourceAthenaOutput{})
	pulumi.RegisterOutputType(ResourceAthenaPtrOutput{})
	pulumi.RegisterOutputType(ResourceAthenaIamOutput{})
	pulumi.RegisterOutputType(ResourceAthenaIamPtrOutput{})
	pulumi.RegisterOutputType(ResourceAuroraMysqlOutput{})
	pulumi.RegisterOutputType(ResourceAuroraMysqlPtrOutput{})
	pulumi.RegisterOutputType(ResourceAuroraMysqlIamOutput{})
	pulumi.RegisterOutputType(ResourceAuroraMysqlIamPtrOutput{})
	pulumi.RegisterOutputType(ResourceAuroraPostgresOutput{})
	pulumi.RegisterOutputType(ResourceAuroraPostgresPtrOutput{})
	pulumi.RegisterOutputType(ResourceAuroraPostgresIamOutput{})
	pulumi.RegisterOutputType(ResourceAuroraPostgresIamPtrOutput{})
	pulumi.RegisterOutputType(ResourceAwsOutput{})
	pulumi.RegisterOutputType(ResourceAwsPtrOutput{})
	pulumi.RegisterOutputType(ResourceAwsConsoleOutput{})
	pulumi.RegisterOutputType(ResourceAwsConsolePtrOutput{})
	pulumi.RegisterOutputType(ResourceAwsConsoleStaticKeyPairOutput{})
	pulumi.RegisterOutputType(ResourceAwsConsoleStaticKeyPairPtrOutput{})
	pulumi.RegisterOutputType(ResourceAwsInstanceProfileOutput{})
	pulumi.RegisterOutputType(ResourceAwsInstanceProfilePtrOutput{})
	pulumi.RegisterOutputType(ResourceAzureOutput{})
	pulumi.RegisterOutputType(ResourceAzurePtrOutput{})
	pulumi.RegisterOutputType(ResourceAzureCertificateOutput{})
	pulumi.RegisterOutputType(ResourceAzureCertificatePtrOutput{})
	pulumi.RegisterOutputType(ResourceAzureMysqlOutput{})
	pulumi.RegisterOutputType(ResourceAzureMysqlPtrOutput{})
	pulumi.RegisterOutputType(ResourceAzurePostgresOutput{})
	pulumi.RegisterOutputType(ResourceAzurePostgresPtrOutput{})
	pulumi.RegisterOutputType(ResourceAzurePostgresManagedIdentityOutput{})
	pulumi.RegisterOutputType(ResourceAzurePostgresManagedIdentityPtrOutput{})
	pulumi.RegisterOutputType(ResourceBigQueryOutput{})
	pulumi.RegisterOutputType(ResourceBigQueryPtrOutput{})
	pulumi.RegisterOutputType(ResourceCassandraOutput{})
	pulumi.RegisterOutputType(ResourceCassandraPtrOutput{})
	pulumi.RegisterOutputType(ResourceCitusOutput{})
	pulumi.RegisterOutputType(ResourceCitusPtrOutput{})
	pulumi.RegisterOutputType(ResourceClickHouseHttpOutput{})
	pulumi.RegisterOutputType(ResourceClickHouseHttpPtrOutput{})
	pulumi.RegisterOutputType(ResourceClickHouseMySqlOutput{})
	pulumi.RegisterOutputType(ResourceClickHouseMySqlPtrOutput{})
	pulumi.RegisterOutputType(ResourceClickHouseTcpOutput{})
	pulumi.RegisterOutputType(ResourceClickHouseTcpPtrOutput{})
	pulumi.RegisterOutputType(ResourceClustrixOutput{})
	pulumi.RegisterOutputType(ResourceClustrixPtrOutput{})
	pulumi.RegisterOutputType(ResourceCockroachOutput{})
	pulumi.RegisterOutputType(ResourceCockroachPtrOutput{})
	pulumi.RegisterOutputType(ResourceCouchbaseDatabaseOutput{})
	pulumi.RegisterOutputType(ResourceCouchbaseDatabasePtrOutput{})
	pulumi.RegisterOutputType(ResourceCouchbaseWebUiOutput{})
	pulumi.RegisterOutputType(ResourceCouchbaseWebUiPtrOutput{})
	pulumi.RegisterOutputType(ResourceDb2IOutput{})
	pulumi.RegisterOutputType(ResourceDb2IPtrOutput{})
	pulumi.RegisterOutputType(ResourceDb2LuwOutput{})
	pulumi.RegisterOutputType(ResourceDb2LuwPtrOutput{})
	pulumi.RegisterOutputType(ResourceDocumentDbHostOutput{})
	pulumi.RegisterOutputType(ResourceDocumentDbHostPtrOutput{})
	pulumi.RegisterOutputType(ResourceDocumentDbHostIamOutput{})
	pulumi.RegisterOutputType(ResourceDocumentDbHostIamPtrOutput{})
	pulumi.RegisterOutputType(ResourceDocumentDbReplicaSetOutput{})
	pulumi.RegisterOutputType(ResourceDocumentDbReplicaSetPtrOutput{})
	pulumi.RegisterOutputType(ResourceDruidOutput{})
	pulumi.RegisterOutputType(ResourceDruidPtrOutput{})
	pulumi.RegisterOutputType(ResourceDynamoDbOutput{})
	pulumi.RegisterOutputType(ResourceDynamoDbPtrOutput{})
	pulumi.RegisterOutputType(ResourceDynamoDbiamOutput{})
	pulumi.RegisterOutputType(ResourceDynamoDbiamPtrOutput{})
	pulumi.RegisterOutputType(ResourceElasticOutput{})
	pulumi.RegisterOutputType(ResourceElasticPtrOutput{})
	pulumi.RegisterOutputType(ResourceElasticacheRedisOutput{})
	pulumi.RegisterOutputType(ResourceElasticacheRedisPtrOutput{})
	pulumi.RegisterOutputType(ResourceGcpOutput{})
	pulumi.RegisterOutputType(ResourceGcpPtrOutput{})
	pulumi.RegisterOutputType(ResourceGcpConsoleOutput{})
	pulumi.RegisterOutputType(ResourceGcpConsolePtrOutput{})
	pulumi.RegisterOutputType(ResourceGcpwifOutput{})
	pulumi.RegisterOutputType(ResourceGcpwifPtrOutput{})
	pulumi.RegisterOutputType(ResourceGoogleGkeOutput{})
	pulumi.RegisterOutputType(ResourceGoogleGkePtrOutput{})
	pulumi.RegisterOutputType(ResourceGoogleGkeUserImpersonationOutput{})
	pulumi.RegisterOutputType(ResourceGoogleGkeUserImpersonationPtrOutput{})
	pulumi.RegisterOutputType(ResourceGreenplumOutput{})
	pulumi.RegisterOutputType(ResourceGreenplumPtrOutput{})
	pulumi.RegisterOutputType(ResourceHttpAuthOutput{})
	pulumi.RegisterOutputType(ResourceHttpAuthPtrOutput{})
	pulumi.RegisterOutputType(ResourceHttpBasicAuthOutput{})
	pulumi.RegisterOutputType(ResourceHttpBasicAuthPtrOutput{})
	pulumi.RegisterOutputType(ResourceHttpNoAuthOutput{})
	pulumi.RegisterOutputType(ResourceHttpNoAuthPtrOutput{})
	pulumi.RegisterOutputType(ResourceKubernetesOutput{})
	pulumi.RegisterOutputType(ResourceKubernetesPtrOutput{})
	pulumi.RegisterOutputType(ResourceKubernetesBasicAuthOutput{})
	pulumi.RegisterOutputType(ResourceKubernetesBasicAuthPtrOutput{})
	pulumi.RegisterOutputType(ResourceKubernetesServiceAccountOutput{})
	pulumi.RegisterOutputType(ResourceKubernetesServiceAccountPtrOutput{})
	pulumi.RegisterOutputType(ResourceKubernetesServiceAccountUserImpersonationOutput{})
	pulumi.RegisterOutputType(ResourceKubernetesServiceAccountUserImpersonationPtrOutput{})
	pulumi.RegisterOutputType(ResourceKubernetesUserImpersonationOutput{})
	pulumi.RegisterOutputType(ResourceKubernetesUserImpersonationPtrOutput{})
	pulumi.RegisterOutputType(ResourceMariaOutput{})
	pulumi.RegisterOutputType(ResourceMariaPtrOutput{})
	pulumi.RegisterOutputType(ResourceMemcachedOutput{})
	pulumi.RegisterOutputType(ResourceMemcachedPtrOutput{})
	pulumi.RegisterOutputType(ResourceMemsqlOutput{})
	pulumi.RegisterOutputType(ResourceMemsqlPtrOutput{})
	pulumi.RegisterOutputType(ResourceMongoHostOutput{})
	pulumi.RegisterOutputType(ResourceMongoHostPtrOutput{})
	pulumi.RegisterOutputType(ResourceMongoLegacyHostOutput{})
	pulumi.RegisterOutputType(ResourceMongoLegacyHostPtrOutput{})
	pulumi.RegisterOutputType(ResourceMongoLegacyReplicasetOutput{})
	pulumi.RegisterOutputType(ResourceMongoLegacyReplicasetPtrOutput{})
	pulumi.RegisterOutputType(ResourceMongoReplicaSetOutput{})
	pulumi.RegisterOutputType(ResourceMongoReplicaSetPtrOutput{})
	pulumi.RegisterOutputType(ResourceMongoShardedClusterOutput{})
	pulumi.RegisterOutputType(ResourceMongoShardedClusterPtrOutput{})
	pulumi.RegisterOutputType(ResourceMtlsMysqlOutput{})
	pulumi.RegisterOutputType(ResourceMtlsMysqlPtrOutput{})
	pulumi.RegisterOutputType(ResourceMtlsPostgresOutput{})
	pulumi.RegisterOutputType(ResourceMtlsPostgresPtrOutput{})
	pulumi.RegisterOutputType(ResourceMysqlOutput{})
	pulumi.RegisterOutputType(ResourceMysqlPtrOutput{})
	pulumi.RegisterOutputType(ResourceNeptuneOutput{})
	pulumi.RegisterOutputType(ResourceNeptunePtrOutput{})
	pulumi.RegisterOutputType(ResourceNeptuneIamOutput{})
	pulumi.RegisterOutputType(ResourceNeptuneIamPtrOutput{})
	pulumi.RegisterOutputType(ResourceOracleOutput{})
	pulumi.RegisterOutputType(ResourceOraclePtrOutput{})
	pulumi.RegisterOutputType(ResourcePostgresOutput{})
	pulumi.RegisterOutputType(ResourcePostgresPtrOutput{})
	pulumi.RegisterOutputType(ResourcePrestoOutput{})
	pulumi.RegisterOutputType(ResourcePrestoPtrOutput{})
	pulumi.RegisterOutputType(ResourceRabbitmqAmqp091Output{})
	pulumi.RegisterOutputType(ResourceRabbitmqAmqp091PtrOutput{})
	pulumi.RegisterOutputType(ResourceRawTcpOutput{})
	pulumi.RegisterOutputType(ResourceRawTcpPtrOutput{})
	pulumi.RegisterOutputType(ResourceRdpOutput{})
	pulumi.RegisterOutputType(ResourceRdpPtrOutput{})
	pulumi.RegisterOutputType(ResourceRdpCertOutput{})
	pulumi.RegisterOutputType(ResourceRdpCertPtrOutput{})
	pulumi.RegisterOutputType(ResourceRdsPostgresIamOutput{})
	pulumi.RegisterOutputType(ResourceRdsPostgresIamPtrOutput{})
	pulumi.RegisterOutputType(ResourceRedisOutput{})
	pulumi.RegisterOutputType(ResourceRedisPtrOutput{})
	pulumi.RegisterOutputType(ResourceRedshiftOutput{})
	pulumi.RegisterOutputType(ResourceRedshiftPtrOutput{})
	pulumi.RegisterOutputType(ResourceSingleStoreOutput{})
	pulumi.RegisterOutputType(ResourceSingleStorePtrOutput{})
	pulumi.RegisterOutputType(ResourceSnowflakeOutput{})
	pulumi.RegisterOutputType(ResourceSnowflakePtrOutput{})
	pulumi.RegisterOutputType(ResourceSnowsightOutput{})
	pulumi.RegisterOutputType(ResourceSnowsightPtrOutput{})
	pulumi.RegisterOutputType(ResourceSqlServerOutput{})
	pulumi.RegisterOutputType(ResourceSqlServerPtrOutput{})
	pulumi.RegisterOutputType(ResourceSqlServerAzureAdOutput{})
	pulumi.RegisterOutputType(ResourceSqlServerAzureAdPtrOutput{})
	pulumi.RegisterOutputType(ResourceSqlServerKerberosAdOutput{})
	pulumi.RegisterOutputType(ResourceSqlServerKerberosAdPtrOutput{})
	pulumi.RegisterOutputType(ResourceSshOutput{})
	pulumi.RegisterOutputType(ResourceSshPtrOutput{})
	pulumi.RegisterOutputType(ResourceSshCertOutput{})
	pulumi.RegisterOutputType(ResourceSshCertPtrOutput{})
	pulumi.RegisterOutputType(ResourceSshCustomerKeyOutput{})
	pulumi.RegisterOutputType(ResourceSshCustomerKeyPtrOutput{})
	pulumi.RegisterOutputType(ResourceSshPasswordOutput{})
	pulumi.RegisterOutputType(ResourceSshPasswordPtrOutput{})
	pulumi.RegisterOutputType(ResourceSybaseOutput{})
	pulumi.RegisterOutputType(ResourceSybasePtrOutput{})
	pulumi.RegisterOutputType(ResourceSybaseIqOutput{})
	pulumi.RegisterOutputType(ResourceSybaseIqPtrOutput{})
	pulumi.RegisterOutputType(ResourceTeradataOutput{})
	pulumi.RegisterOutputType(ResourceTeradataPtrOutput{})
	pulumi.RegisterOutputType(ResourceTrinoOutput{})
	pulumi.RegisterOutputType(ResourceTrinoPtrOutput{})
	pulumi.RegisterOutputType(SecretStoreActiveDirectoryStoreOutput{})
	pulumi.RegisterOutputType(SecretStoreActiveDirectoryStorePtrOutput{})
	pulumi.RegisterOutputType(SecretStoreAwsOutput{})
	pulumi.RegisterOutputType(SecretStoreAwsPtrOutput{})
	pulumi.RegisterOutputType(SecretStoreAwsCertX509Output{})
	pulumi.RegisterOutputType(SecretStoreAwsCertX509PtrOutput{})
	pulumi.RegisterOutputType(SecretStoreAzureStoreOutput{})
	pulumi.RegisterOutputType(SecretStoreAzureStorePtrOutput{})
	pulumi.RegisterOutputType(SecretStoreCyberarkConjurOutput{})
	pulumi.RegisterOutputType(SecretStoreCyberarkConjurPtrOutput{})
	pulumi.RegisterOutputType(SecretStoreCyberarkPamOutput{})
	pulumi.RegisterOutputType(SecretStoreCyberarkPamPtrOutput{})
	pulumi.RegisterOutputType(SecretStoreCyberarkPamExperimentalOutput{})
	pulumi.RegisterOutputType(SecretStoreCyberarkPamExperimentalPtrOutput{})
	pulumi.RegisterOutputType(SecretStoreDelineaStoreOutput{})
	pulumi.RegisterOutputType(SecretStoreDelineaStorePtrOutput{})
	pulumi.RegisterOutputType(SecretStoreGcpCertX509StoreOutput{})
	pulumi.RegisterOutputType(SecretStoreGcpCertX509StorePtrOutput{})
	pulumi.RegisterOutputType(SecretStoreGcpStoreOutput{})
	pulumi.RegisterOutputType(SecretStoreGcpStorePtrOutput{})
	pulumi.RegisterOutputType(SecretStoreKeyfactorSshStoreOutput{})
	pulumi.RegisterOutputType(SecretStoreKeyfactorSshStorePtrOutput{})
	pulumi.RegisterOutputType(SecretStoreKeyfactorX509StoreOutput{})
	pulumi.RegisterOutputType(SecretStoreKeyfactorX509StorePtrOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultApproleOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultApprolePtrOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultApproleCertSshOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultApproleCertSshPtrOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultApproleCertX509Output{})
	pulumi.RegisterOutputType(SecretStoreVaultApproleCertX509PtrOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultAwsEc2Output{})
	pulumi.RegisterOutputType(SecretStoreVaultAwsEc2PtrOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultAwsIamOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultAwsIamPtrOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultTlsOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultTlsPtrOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultTlsCertSshOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultTlsCertSshPtrOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultTlsCertX509Output{})
	pulumi.RegisterOutputType(SecretStoreVaultTlsCertX509PtrOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultTokenOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultTokenPtrOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultTokenCertSshOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultTokenCertSshPtrOutput{})
	pulumi.RegisterOutputType(SecretStoreVaultTokenCertX509Output{})
	pulumi.RegisterOutputType(SecretStoreVaultTokenCertX509PtrOutput{})
	pulumi.RegisterOutputType(GetAccountAccountOutput{})
	pulumi.RegisterOutputType(GetAccountAccountArrayOutput{})
	pulumi.RegisterOutputType(GetAccountAccountServiceOutput{})
	pulumi.RegisterOutputType(GetAccountAccountServiceArrayOutput{})
	pulumi.RegisterOutputType(GetAccountAccountTokenOutput{})
	pulumi.RegisterOutputType(GetAccountAccountTokenArrayOutput{})
	pulumi.RegisterOutputType(GetAccountAccountUserOutput{})
	pulumi.RegisterOutputType(GetAccountAccountUserArrayOutput{})
	pulumi.RegisterOutputType(GetAccountAttachmentAccountAttachmentOutput{})
	pulumi.RegisterOutputType(GetAccountAttachmentAccountAttachmentArrayOutput{})
	pulumi.RegisterOutputType(GetApprovalWorkflowApprovalWorkflowOutput{})
	pulumi.RegisterOutputType(GetApprovalWorkflowApprovalWorkflowArrayOutput{})
	pulumi.RegisterOutputType(GetApprovalWorkflowApproverApprovalWorkflowApproverOutput{})
	pulumi.RegisterOutputType(GetApprovalWorkflowApproverApprovalWorkflowApproverArrayOutput{})
	pulumi.RegisterOutputType(GetApprovalWorkflowStepApprovalWorkflowStepOutput{})
	pulumi.RegisterOutputType(GetApprovalWorkflowStepApprovalWorkflowStepArrayOutput{})
	pulumi.RegisterOutputType(GetIdentityAliasIdentityAliasOutput{})
	pulumi.RegisterOutputType(GetIdentityAliasIdentityAliasArrayOutput{})
	pulumi.RegisterOutputType(GetIdentitySetIdentitySetOutput{})
	pulumi.RegisterOutputType(GetIdentitySetIdentitySetArrayOutput{})
	pulumi.RegisterOutputType(GetNodeNodeOutput{})
	pulumi.RegisterOutputType(GetNodeNodeArrayOutput{})
	pulumi.RegisterOutputType(GetNodeNodeGatewayOutput{})
	pulumi.RegisterOutputType(GetNodeNodeGatewayArrayOutput{})
	pulumi.RegisterOutputType(GetNodeNodeGatewayMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(GetNodeNodeGatewayMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(GetNodeNodeProxyClusterOutput{})
	pulumi.RegisterOutputType(GetNodeNodeProxyClusterArrayOutput{})
	pulumi.RegisterOutputType(GetNodeNodeProxyClusterMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(GetNodeNodeProxyClusterMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(GetNodeNodeRelayOutput{})
	pulumi.RegisterOutputType(GetNodeNodeRelayArrayOutput{})
	pulumi.RegisterOutputType(GetNodeNodeRelayMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(GetNodeNodeRelayMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(GetPeeringGroupNodePeeringGroupNodeOutput{})
	pulumi.RegisterOutputType(GetPeeringGroupNodePeeringGroupNodeArrayOutput{})
	pulumi.RegisterOutputType(GetPeeringGroupPeerPeeringGroupPeerOutput{})
	pulumi.RegisterOutputType(GetPeeringGroupPeerPeeringGroupPeerArrayOutput{})
	pulumi.RegisterOutputType(GetPeeringGroupPeeringGroupOutput{})
	pulumi.RegisterOutputType(GetPeeringGroupPeeringGroupArrayOutput{})
	pulumi.RegisterOutputType(GetPeeringGroupResourcePeeringGroupResourceOutput{})
	pulumi.RegisterOutputType(GetPeeringGroupResourcePeeringGroupResourceArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyPolicyOutput{})
	pulumi.RegisterOutputType(GetPolicyPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetProxyClusterKeyProxyClusterKeyOutput{})
	pulumi.RegisterOutputType(GetProxyClusterKeyProxyClusterKeyArrayOutput{})
	pulumi.RegisterOutputType(GetRemoteIdentityGroupRemoteIdentityGroupOutput{})
	pulumi.RegisterOutputType(GetRemoteIdentityGroupRemoteIdentityGroupArrayOutput{})
	pulumi.RegisterOutputType(GetRemoteIdentityRemoteIdentityOutput{})
	pulumi.RegisterOutputType(GetRemoteIdentityRemoteIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceOutput{})
	pulumi.RegisterOutputType(GetResourceResourceArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAkOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAkArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAksBasicAuthOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAksBasicAuthArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAksServiceAccountOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAksServiceAccountArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAksServiceAccountUserImpersonationOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAksServiceAccountUserImpersonationArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAksUserImpersonationOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAksUserImpersonationArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAmazonEOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAmazonEArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAmazonEkOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAmazonEkArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAmazonEksInstanceProfileOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAmazonEksInstanceProfileArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAmazonEksInstanceProfileUserImpersonationOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAmazonEksInstanceProfileUserImpersonationArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAmazonEksUserImpersonationOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAmazonEksUserImpersonationArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAmazonmqAmqp091Output{})
	pulumi.RegisterOutputType(GetResourceResourceAmazonmqAmqp091ArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAthenaOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAthenaArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAthenaIamOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAthenaIamArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAuroraMysqlOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAuroraMysqlArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAuroraMysqlIamOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAuroraMysqlIamArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAuroraPostgreOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAuroraPostgreArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAuroraPostgresIamOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAuroraPostgresIamArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAwOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAwArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAwsConsoleOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAwsConsoleArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAwsConsoleStaticKeyPairOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAwsConsoleStaticKeyPairArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAwsInstanceProfileOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAwsInstanceProfileArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAzureOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAzureArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAzureCertificateOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAzureCertificateArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAzureMysqlOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAzureMysqlArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAzurePostgreOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAzurePostgreArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAzurePostgresManagedIdentityOutput{})
	pulumi.RegisterOutputType(GetResourceResourceAzurePostgresManagedIdentityArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceBigQueryOutput{})
	pulumi.RegisterOutputType(GetResourceResourceBigQueryArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceCassandraOutput{})
	pulumi.RegisterOutputType(GetResourceResourceCassandraArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceCitusOutput{})
	pulumi.RegisterOutputType(GetResourceResourceCitusArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceClickHouseHttpOutput{})
	pulumi.RegisterOutputType(GetResourceResourceClickHouseHttpArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceClickHouseMySqlOutput{})
	pulumi.RegisterOutputType(GetResourceResourceClickHouseMySqlArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceClickHouseTcpOutput{})
	pulumi.RegisterOutputType(GetResourceResourceClickHouseTcpArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceClustrixOutput{})
	pulumi.RegisterOutputType(GetResourceResourceClustrixArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceCockroachOutput{})
	pulumi.RegisterOutputType(GetResourceResourceCockroachArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceCouchbaseDatabaseOutput{})
	pulumi.RegisterOutputType(GetResourceResourceCouchbaseDatabaseArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceCouchbaseWebUiOutput{})
	pulumi.RegisterOutputType(GetResourceResourceCouchbaseWebUiArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceDb2IOutput{})
	pulumi.RegisterOutputType(GetResourceResourceDb2IArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceDb2LuwOutput{})
	pulumi.RegisterOutputType(GetResourceResourceDb2LuwArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceDocumentDbHostOutput{})
	pulumi.RegisterOutputType(GetResourceResourceDocumentDbHostArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceDocumentDbHostIamOutput{})
	pulumi.RegisterOutputType(GetResourceResourceDocumentDbHostIamArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceDocumentDbReplicaSetOutput{})
	pulumi.RegisterOutputType(GetResourceResourceDocumentDbReplicaSetArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceDruidOutput{})
	pulumi.RegisterOutputType(GetResourceResourceDruidArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceDynamoDbOutput{})
	pulumi.RegisterOutputType(GetResourceResourceDynamoDbArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceDynamoDbiamOutput{})
	pulumi.RegisterOutputType(GetResourceResourceDynamoDbiamArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceElasticOutput{})
	pulumi.RegisterOutputType(GetResourceResourceElasticArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceElasticacheRediOutput{})
	pulumi.RegisterOutputType(GetResourceResourceElasticacheRediArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceGcpOutput{})
	pulumi.RegisterOutputType(GetResourceResourceGcpArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceGcpConsoleOutput{})
	pulumi.RegisterOutputType(GetResourceResourceGcpConsoleArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceGcpwifOutput{})
	pulumi.RegisterOutputType(GetResourceResourceGcpwifArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceGoogleGkeOutput{})
	pulumi.RegisterOutputType(GetResourceResourceGoogleGkeArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceGoogleGkeUserImpersonationOutput{})
	pulumi.RegisterOutputType(GetResourceResourceGoogleGkeUserImpersonationArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceGreenplumOutput{})
	pulumi.RegisterOutputType(GetResourceResourceGreenplumArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceHttpAuthOutput{})
	pulumi.RegisterOutputType(GetResourceResourceHttpAuthArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceHttpBasicAuthOutput{})
	pulumi.RegisterOutputType(GetResourceResourceHttpBasicAuthArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceHttpNoAuthOutput{})
	pulumi.RegisterOutputType(GetResourceResourceHttpNoAuthArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceKuberneteOutput{})
	pulumi.RegisterOutputType(GetResourceResourceKuberneteArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceKubernetesBasicAuthOutput{})
	pulumi.RegisterOutputType(GetResourceResourceKubernetesBasicAuthArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceKubernetesServiceAccountOutput{})
	pulumi.RegisterOutputType(GetResourceResourceKubernetesServiceAccountArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceKubernetesServiceAccountUserImpersonationOutput{})
	pulumi.RegisterOutputType(GetResourceResourceKubernetesServiceAccountUserImpersonationArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceKubernetesUserImpersonationOutput{})
	pulumi.RegisterOutputType(GetResourceResourceKubernetesUserImpersonationArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMariaOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMariaArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMemcachedOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMemcachedArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMemsqlOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMemsqlArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMongoHostOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMongoHostArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMongoLegacyHostOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMongoLegacyHostArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMongoLegacyReplicasetOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMongoLegacyReplicasetArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMongoReplicaSetOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMongoReplicaSetArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMongoShardedClusterOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMongoShardedClusterArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMtlsMysqlOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMtlsMysqlArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMtlsPostgreOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMtlsPostgreArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMysqlOutput{})
	pulumi.RegisterOutputType(GetResourceResourceMysqlArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceNeptuneOutput{})
	pulumi.RegisterOutputType(GetResourceResourceNeptuneArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceNeptuneIamOutput{})
	pulumi.RegisterOutputType(GetResourceResourceNeptuneIamArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceOracleOutput{})
	pulumi.RegisterOutputType(GetResourceResourceOracleArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourcePostgreOutput{})
	pulumi.RegisterOutputType(GetResourceResourcePostgreArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourcePrestoOutput{})
	pulumi.RegisterOutputType(GetResourceResourcePrestoArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceRabbitmqAmqp091Output{})
	pulumi.RegisterOutputType(GetResourceResourceRabbitmqAmqp091ArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceRawTcpOutput{})
	pulumi.RegisterOutputType(GetResourceResourceRawTcpArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceRdpOutput{})
	pulumi.RegisterOutputType(GetResourceResourceRdpArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceRdpCertOutput{})
	pulumi.RegisterOutputType(GetResourceResourceRdpCertArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceRdsPostgresIamOutput{})
	pulumi.RegisterOutputType(GetResourceResourceRdsPostgresIamArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceRediOutput{})
	pulumi.RegisterOutputType(GetResourceResourceRediArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceRedshiftOutput{})
	pulumi.RegisterOutputType(GetResourceResourceRedshiftArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSingleStoreOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSingleStoreArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSnowflakeOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSnowflakeArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSnowsightOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSnowsightArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSqlServerOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSqlServerArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSqlServerAzureAdOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSqlServerAzureAdArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSqlServerKerberosAdOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSqlServerKerberosAdArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSshOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSshArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSshCertOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSshCertArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSshCustomerKeyOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSshCustomerKeyArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSshPasswordOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSshPasswordArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSybaseOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSybaseArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSybaseIqOutput{})
	pulumi.RegisterOutputType(GetResourceResourceSybaseIqArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceTeradataOutput{})
	pulumi.RegisterOutputType(GetResourceResourceTeradataArrayOutput{})
	pulumi.RegisterOutputType(GetResourceResourceTrinoOutput{})
	pulumi.RegisterOutputType(GetResourceResourceTrinoArrayOutput{})
	pulumi.RegisterOutputType(GetRoleRoleOutput{})
	pulumi.RegisterOutputType(GetRoleRoleArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreActiveDirectoryStoreOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreActiveDirectoryStoreArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreAwOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreAwArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreAwsCertX509Output{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreAwsCertX509ArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreAzureStoreOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreAzureStoreArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreCyberarkConjurOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreCyberarkConjurArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreCyberarkPamOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreCyberarkPamArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreCyberarkPamExperimentalOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreCyberarkPamExperimentalArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreDelineaStoreOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreDelineaStoreArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreGcpCertX509StoreOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreGcpCertX509StoreArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreGcpStoreOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreGcpStoreArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreKeyfactorSshStoreOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreKeyfactorSshStoreArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreKeyfactorX509StoreOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreKeyfactorX509StoreArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultApproleOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultApproleArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultApproleCertSshOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultApproleCertSshArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultApproleCertX509Output{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultApproleCertX509ArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultAwsEc2Output{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultAwsEc2ArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultAwsIamOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultAwsIamArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultTlOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultTlArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultTlsCertSshOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultTlsCertSshArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultTlsCertX509Output{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultTlsCertX509ArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultTokenOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultTokenArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultTokenCertSshOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultTokenCertSshArrayOutput{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultTokenCertX509Output{})
	pulumi.RegisterOutputType(GetSecretStoreSecretStoreVaultTokenCertX509ArrayOutput{})
	pulumi.RegisterOutputType(GetWorkflowApproverWorkflowApproverOutput{})
	pulumi.RegisterOutputType(GetWorkflowApproverWorkflowApproverArrayOutput{})
	pulumi.RegisterOutputType(GetWorkflowRoleWorkflowRoleOutput{})
	pulumi.RegisterOutputType(GetWorkflowRoleWorkflowRoleArrayOutput{})
	pulumi.RegisterOutputType(GetWorkflowWorkflowOutput{})
	pulumi.RegisterOutputType(GetWorkflowWorkflowArrayOutput{})
}

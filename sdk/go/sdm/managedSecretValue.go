// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ManagedSecretValue struct {
	pulumi.CustomResourceState

	// encrypted value
	Encrypted pulumi.StringOutput `pulumi:"encrypted"`
	// secret engine's public key used for encryption in PEM format
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// value object
	Value pulumi.StringMapOutput `pulumi:"value"`
}

// NewManagedSecretValue registers a new resource with the given unique name, arguments, and options.
func NewManagedSecretValue(ctx *pulumi.Context,
	name string, args *ManagedSecretValueArgs, opts ...pulumi.ResourceOption) (*ManagedSecretValue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedSecretValue
	err := ctx.RegisterResource("sdm:index/managedSecretValue:ManagedSecretValue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedSecretValue gets an existing ManagedSecretValue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedSecretValue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedSecretValueState, opts ...pulumi.ResourceOption) (*ManagedSecretValue, error) {
	var resource ManagedSecretValue
	err := ctx.ReadResource("sdm:index/managedSecretValue:ManagedSecretValue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedSecretValue resources.
type managedSecretValueState struct {
	// encrypted value
	Encrypted *string `pulumi:"encrypted"`
	// secret engine's public key used for encryption in PEM format
	PublicKey *string `pulumi:"publicKey"`
	// value object
	Value map[string]string `pulumi:"value"`
}

type ManagedSecretValueState struct {
	// encrypted value
	Encrypted pulumi.StringPtrInput
	// secret engine's public key used for encryption in PEM format
	PublicKey pulumi.StringPtrInput
	// value object
	Value pulumi.StringMapInput
}

func (ManagedSecretValueState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedSecretValueState)(nil)).Elem()
}

type managedSecretValueArgs struct {
	// secret engine's public key used for encryption in PEM format
	PublicKey string `pulumi:"publicKey"`
	// value object
	Value map[string]string `pulumi:"value"`
}

// The set of arguments for constructing a ManagedSecretValue resource.
type ManagedSecretValueArgs struct {
	// secret engine's public key used for encryption in PEM format
	PublicKey pulumi.StringInput
	// value object
	Value pulumi.StringMapInput
}

func (ManagedSecretValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedSecretValueArgs)(nil)).Elem()
}

type ManagedSecretValueInput interface {
	pulumi.Input

	ToManagedSecretValueOutput() ManagedSecretValueOutput
	ToManagedSecretValueOutputWithContext(ctx context.Context) ManagedSecretValueOutput
}

func (*ManagedSecretValue) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedSecretValue)(nil)).Elem()
}

func (i *ManagedSecretValue) ToManagedSecretValueOutput() ManagedSecretValueOutput {
	return i.ToManagedSecretValueOutputWithContext(context.Background())
}

func (i *ManagedSecretValue) ToManagedSecretValueOutputWithContext(ctx context.Context) ManagedSecretValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedSecretValueOutput)
}

// ManagedSecretValueArrayInput is an input type that accepts ManagedSecretValueArray and ManagedSecretValueArrayOutput values.
// You can construct a concrete instance of `ManagedSecretValueArrayInput` via:
//
//	ManagedSecretValueArray{ ManagedSecretValueArgs{...} }
type ManagedSecretValueArrayInput interface {
	pulumi.Input

	ToManagedSecretValueArrayOutput() ManagedSecretValueArrayOutput
	ToManagedSecretValueArrayOutputWithContext(context.Context) ManagedSecretValueArrayOutput
}

type ManagedSecretValueArray []ManagedSecretValueInput

func (ManagedSecretValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedSecretValue)(nil)).Elem()
}

func (i ManagedSecretValueArray) ToManagedSecretValueArrayOutput() ManagedSecretValueArrayOutput {
	return i.ToManagedSecretValueArrayOutputWithContext(context.Background())
}

func (i ManagedSecretValueArray) ToManagedSecretValueArrayOutputWithContext(ctx context.Context) ManagedSecretValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedSecretValueArrayOutput)
}

// ManagedSecretValueMapInput is an input type that accepts ManagedSecretValueMap and ManagedSecretValueMapOutput values.
// You can construct a concrete instance of `ManagedSecretValueMapInput` via:
//
//	ManagedSecretValueMap{ "key": ManagedSecretValueArgs{...} }
type ManagedSecretValueMapInput interface {
	pulumi.Input

	ToManagedSecretValueMapOutput() ManagedSecretValueMapOutput
	ToManagedSecretValueMapOutputWithContext(context.Context) ManagedSecretValueMapOutput
}

type ManagedSecretValueMap map[string]ManagedSecretValueInput

func (ManagedSecretValueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedSecretValue)(nil)).Elem()
}

func (i ManagedSecretValueMap) ToManagedSecretValueMapOutput() ManagedSecretValueMapOutput {
	return i.ToManagedSecretValueMapOutputWithContext(context.Background())
}

func (i ManagedSecretValueMap) ToManagedSecretValueMapOutputWithContext(ctx context.Context) ManagedSecretValueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedSecretValueMapOutput)
}

type ManagedSecretValueOutput struct{ *pulumi.OutputState }

func (ManagedSecretValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedSecretValue)(nil)).Elem()
}

func (o ManagedSecretValueOutput) ToManagedSecretValueOutput() ManagedSecretValueOutput {
	return o
}

func (o ManagedSecretValueOutput) ToManagedSecretValueOutputWithContext(ctx context.Context) ManagedSecretValueOutput {
	return o
}

// encrypted value
func (o ManagedSecretValueOutput) Encrypted() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedSecretValue) pulumi.StringOutput { return v.Encrypted }).(pulumi.StringOutput)
}

// secret engine's public key used for encryption in PEM format
func (o ManagedSecretValueOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedSecretValue) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// value object
func (o ManagedSecretValueOutput) Value() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ManagedSecretValue) pulumi.StringMapOutput { return v.Value }).(pulumi.StringMapOutput)
}

type ManagedSecretValueArrayOutput struct{ *pulumi.OutputState }

func (ManagedSecretValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedSecretValue)(nil)).Elem()
}

func (o ManagedSecretValueArrayOutput) ToManagedSecretValueArrayOutput() ManagedSecretValueArrayOutput {
	return o
}

func (o ManagedSecretValueArrayOutput) ToManagedSecretValueArrayOutputWithContext(ctx context.Context) ManagedSecretValueArrayOutput {
	return o
}

func (o ManagedSecretValueArrayOutput) Index(i pulumi.IntInput) ManagedSecretValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedSecretValue {
		return vs[0].([]*ManagedSecretValue)[vs[1].(int)]
	}).(ManagedSecretValueOutput)
}

type ManagedSecretValueMapOutput struct{ *pulumi.OutputState }

func (ManagedSecretValueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedSecretValue)(nil)).Elem()
}

func (o ManagedSecretValueMapOutput) ToManagedSecretValueMapOutput() ManagedSecretValueMapOutput {
	return o
}

func (o ManagedSecretValueMapOutput) ToManagedSecretValueMapOutputWithContext(ctx context.Context) ManagedSecretValueMapOutput {
	return o
}

func (o ManagedSecretValueMapOutput) MapIndex(k pulumi.StringInput) ManagedSecretValueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedSecretValue {
		return vs[0].(map[string]*ManagedSecretValue)[vs[1].(string)]
	}).(ManagedSecretValueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedSecretValueInput)(nil)).Elem(), &ManagedSecretValue{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedSecretValueArrayInput)(nil)).Elem(), ManagedSecretValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedSecretValueMapInput)(nil)).Elem(), ManagedSecretValueMap{})
	pulumi.RegisterOutputType(ManagedSecretValueOutput{})
	pulumi.RegisterOutputType(ManagedSecretValueArrayOutput{})
	pulumi.RegisterOutputType(ManagedSecretValueMapOutput{})
}

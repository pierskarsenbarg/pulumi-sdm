// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdm

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PeeringGroupNode represents the attachment between a PeeringGroup and a Node.
func LookupPeeringGroupNode(ctx *pulumi.Context, args *LookupPeeringGroupNodeArgs, opts ...pulumi.InvokeOption) (*LookupPeeringGroupNodeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPeeringGroupNodeResult
	err := ctx.Invoke("sdm:index/getPeeringGroupNode:getPeeringGroupNode", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPeeringGroupNode.
type LookupPeeringGroupNodeArgs struct {
	// Peering Group ID to which the node will be attached to.
	GroupId *string `pulumi:"groupId"`
	// Unique identifier of the Attachment.
	Id *string `pulumi:"id"`
	// Node ID to be attached.
	NodeId *string `pulumi:"nodeId"`
}

// A collection of values returned by getPeeringGroupNode.
type LookupPeeringGroupNodeResult struct {
	// Peering Group ID to which the node will be attached to.
	GroupId *string `pulumi:"groupId"`
	// Unique identifier of the Attachment.
	Id *string `pulumi:"id"`
	// a list of strings of ids of data sources that match the given arguments.
	Ids []string `pulumi:"ids"`
	// Node ID to be attached.
	NodeId *string `pulumi:"nodeId"`
	// A list where each element has the following attributes:
	PeeringGroupNodes []GetPeeringGroupNodePeeringGroupNode `pulumi:"peeringGroupNodes"`
}

func LookupPeeringGroupNodeOutput(ctx *pulumi.Context, args LookupPeeringGroupNodeOutputArgs, opts ...pulumi.InvokeOption) LookupPeeringGroupNodeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPeeringGroupNodeResult, error) {
			args := v.(LookupPeeringGroupNodeArgs)
			r, err := LookupPeeringGroupNode(ctx, &args, opts...)
			var s LookupPeeringGroupNodeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPeeringGroupNodeResultOutput)
}

// A collection of arguments for invoking getPeeringGroupNode.
type LookupPeeringGroupNodeOutputArgs struct {
	// Peering Group ID to which the node will be attached to.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Unique identifier of the Attachment.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Node ID to be attached.
	NodeId pulumi.StringPtrInput `pulumi:"nodeId"`
}

func (LookupPeeringGroupNodeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPeeringGroupNodeArgs)(nil)).Elem()
}

// A collection of values returned by getPeeringGroupNode.
type LookupPeeringGroupNodeResultOutput struct{ *pulumi.OutputState }

func (LookupPeeringGroupNodeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPeeringGroupNodeResult)(nil)).Elem()
}

func (o LookupPeeringGroupNodeResultOutput) ToLookupPeeringGroupNodeResultOutput() LookupPeeringGroupNodeResultOutput {
	return o
}

func (o LookupPeeringGroupNodeResultOutput) ToLookupPeeringGroupNodeResultOutputWithContext(ctx context.Context) LookupPeeringGroupNodeResultOutput {
	return o
}

// Peering Group ID to which the node will be attached to.
func (o LookupPeeringGroupNodeResultOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPeeringGroupNodeResult) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Unique identifier of the Attachment.
func (o LookupPeeringGroupNodeResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPeeringGroupNodeResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// a list of strings of ids of data sources that match the given arguments.
func (o LookupPeeringGroupNodeResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPeeringGroupNodeResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// Node ID to be attached.
func (o LookupPeeringGroupNodeResultOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPeeringGroupNodeResult) *string { return v.NodeId }).(pulumi.StringPtrOutput)
}

// A list where each element has the following attributes:
func (o LookupPeeringGroupNodeResultOutput) PeeringGroupNodes() GetPeeringGroupNodePeeringGroupNodeArrayOutput {
	return o.ApplyT(func(v LookupPeeringGroupNodeResult) []GetPeeringGroupNodePeeringGroupNode { return v.PeeringGroupNodes }).(GetPeeringGroupNodePeeringGroupNodeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPeeringGroupNodeResultOutput{})
}

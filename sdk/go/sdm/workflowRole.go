// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// WorkflowRole links a role to a workflow. The linked roles indicate which roles a user must be a part of
//
//	to request access to a resource via the workflow.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdm.NewWorkflowRole(ctx, "workflowRoleExample", &sdm.WorkflowRoleArgs{
//				RoleId:     pulumi.String("r-243561"),
//				WorkflowId: pulumi.String("aw-343865"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// This resource can be imported using the import command.
//
// ## Import
//
// A WorkflowRole can be imported using the id, e.g.,
//
// ```sh
// $ pulumi import sdm:index/workflowRole:WorkflowRole example wr-12345678
// ```
type WorkflowRole struct {
	pulumi.CustomResourceState

	// The role id.
	RoleId pulumi.StringOutput `pulumi:"roleId"`
	// The workflow id.
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowRole registers a new resource with the given unique name, arguments, and options.
func NewWorkflowRole(ctx *pulumi.Context,
	name string, args *WorkflowRoleArgs, opts ...pulumi.ResourceOption) (*WorkflowRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowRole
	err := ctx.RegisterResource("sdm:index/workflowRole:WorkflowRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowRole gets an existing WorkflowRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowRoleState, opts ...pulumi.ResourceOption) (*WorkflowRole, error) {
	var resource WorkflowRole
	err := ctx.ReadResource("sdm:index/workflowRole:WorkflowRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowRole resources.
type workflowRoleState struct {
	// The role id.
	RoleId *string `pulumi:"roleId"`
	// The workflow id.
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowRoleState struct {
	// The role id.
	RoleId pulumi.StringPtrInput
	// The workflow id.
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowRoleState)(nil)).Elem()
}

type workflowRoleArgs struct {
	// The role id.
	RoleId string `pulumi:"roleId"`
	// The workflow id.
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowRole resource.
type WorkflowRoleArgs struct {
	// The role id.
	RoleId pulumi.StringInput
	// The workflow id.
	WorkflowId pulumi.StringInput
}

func (WorkflowRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowRoleArgs)(nil)).Elem()
}

type WorkflowRoleInput interface {
	pulumi.Input

	ToWorkflowRoleOutput() WorkflowRoleOutput
	ToWorkflowRoleOutputWithContext(ctx context.Context) WorkflowRoleOutput
}

func (*WorkflowRole) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowRole)(nil)).Elem()
}

func (i *WorkflowRole) ToWorkflowRoleOutput() WorkflowRoleOutput {
	return i.ToWorkflowRoleOutputWithContext(context.Background())
}

func (i *WorkflowRole) ToWorkflowRoleOutputWithContext(ctx context.Context) WorkflowRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowRoleOutput)
}

// WorkflowRoleArrayInput is an input type that accepts WorkflowRoleArray and WorkflowRoleArrayOutput values.
// You can construct a concrete instance of `WorkflowRoleArrayInput` via:
//
//	WorkflowRoleArray{ WorkflowRoleArgs{...} }
type WorkflowRoleArrayInput interface {
	pulumi.Input

	ToWorkflowRoleArrayOutput() WorkflowRoleArrayOutput
	ToWorkflowRoleArrayOutputWithContext(context.Context) WorkflowRoleArrayOutput
}

type WorkflowRoleArray []WorkflowRoleInput

func (WorkflowRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowRole)(nil)).Elem()
}

func (i WorkflowRoleArray) ToWorkflowRoleArrayOutput() WorkflowRoleArrayOutput {
	return i.ToWorkflowRoleArrayOutputWithContext(context.Background())
}

func (i WorkflowRoleArray) ToWorkflowRoleArrayOutputWithContext(ctx context.Context) WorkflowRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowRoleArrayOutput)
}

// WorkflowRoleMapInput is an input type that accepts WorkflowRoleMap and WorkflowRoleMapOutput values.
// You can construct a concrete instance of `WorkflowRoleMapInput` via:
//
//	WorkflowRoleMap{ "key": WorkflowRoleArgs{...} }
type WorkflowRoleMapInput interface {
	pulumi.Input

	ToWorkflowRoleMapOutput() WorkflowRoleMapOutput
	ToWorkflowRoleMapOutputWithContext(context.Context) WorkflowRoleMapOutput
}

type WorkflowRoleMap map[string]WorkflowRoleInput

func (WorkflowRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowRole)(nil)).Elem()
}

func (i WorkflowRoleMap) ToWorkflowRoleMapOutput() WorkflowRoleMapOutput {
	return i.ToWorkflowRoleMapOutputWithContext(context.Background())
}

func (i WorkflowRoleMap) ToWorkflowRoleMapOutputWithContext(ctx context.Context) WorkflowRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowRoleMapOutput)
}

type WorkflowRoleOutput struct{ *pulumi.OutputState }

func (WorkflowRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowRole)(nil)).Elem()
}

func (o WorkflowRoleOutput) ToWorkflowRoleOutput() WorkflowRoleOutput {
	return o
}

func (o WorkflowRoleOutput) ToWorkflowRoleOutputWithContext(ctx context.Context) WorkflowRoleOutput {
	return o
}

// The role id.
func (o WorkflowRoleOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowRole) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

// The workflow id.
func (o WorkflowRoleOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowRole) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowRoleArrayOutput struct{ *pulumi.OutputState }

func (WorkflowRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowRole)(nil)).Elem()
}

func (o WorkflowRoleArrayOutput) ToWorkflowRoleArrayOutput() WorkflowRoleArrayOutput {
	return o
}

func (o WorkflowRoleArrayOutput) ToWorkflowRoleArrayOutputWithContext(ctx context.Context) WorkflowRoleArrayOutput {
	return o
}

func (o WorkflowRoleArrayOutput) Index(i pulumi.IntInput) WorkflowRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowRole {
		return vs[0].([]*WorkflowRole)[vs[1].(int)]
	}).(WorkflowRoleOutput)
}

type WorkflowRoleMapOutput struct{ *pulumi.OutputState }

func (WorkflowRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowRole)(nil)).Elem()
}

func (o WorkflowRoleMapOutput) ToWorkflowRoleMapOutput() WorkflowRoleMapOutput {
	return o
}

func (o WorkflowRoleMapOutput) ToWorkflowRoleMapOutputWithContext(ctx context.Context) WorkflowRoleMapOutput {
	return o
}

func (o WorkflowRoleMapOutput) MapIndex(k pulumi.StringInput) WorkflowRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowRole {
		return vs[0].(map[string]*WorkflowRole)[vs[1].(string)]
	}).(WorkflowRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowRoleInput)(nil)).Elem(), &WorkflowRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowRoleArrayInput)(nil)).Elem(), WorkflowRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowRoleMapInput)(nil)).Elem(), WorkflowRoleMap{})
	pulumi.RegisterOutputType(WorkflowRoleOutput{})
	pulumi.RegisterOutputType(WorkflowRoleArrayOutput{})
	pulumi.RegisterOutputType(WorkflowRoleMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IdentityAliases define the username to be used for a specific account
//
//	when connecting to a remote resource using that identity set.
//
// ## Import
//
// A IdentityAlias can be imported using the id, e.g.,
//
// ```sh
// $ pulumi import sdm:index/identityAlias:IdentityAlias example i-12345678
// ```
type IdentityAlias struct {
	pulumi.CustomResourceState

	// The account for this identity alias.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The identity set.
	IdentitySetId pulumi.StringOutput `pulumi:"identitySetId"`
	// The username to be used as the identity alias for this account.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewIdentityAlias registers a new resource with the given unique name, arguments, and options.
func NewIdentityAlias(ctx *pulumi.Context,
	name string, args *IdentityAliasArgs, opts ...pulumi.ResourceOption) (*IdentityAlias, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.IdentitySetId == nil {
		return nil, errors.New("invalid value for required argument 'IdentitySetId'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityAlias
	err := ctx.RegisterResource("sdm:index/identityAlias:IdentityAlias", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityAlias gets an existing IdentityAlias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityAlias(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityAliasState, opts ...pulumi.ResourceOption) (*IdentityAlias, error) {
	var resource IdentityAlias
	err := ctx.ReadResource("sdm:index/identityAlias:IdentityAlias", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityAlias resources.
type identityAliasState struct {
	// The account for this identity alias.
	AccountId *string `pulumi:"accountId"`
	// The identity set.
	IdentitySetId *string `pulumi:"identitySetId"`
	// The username to be used as the identity alias for this account.
	Username *string `pulumi:"username"`
}

type IdentityAliasState struct {
	// The account for this identity alias.
	AccountId pulumi.StringPtrInput
	// The identity set.
	IdentitySetId pulumi.StringPtrInput
	// The username to be used as the identity alias for this account.
	Username pulumi.StringPtrInput
}

func (IdentityAliasState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityAliasState)(nil)).Elem()
}

type identityAliasArgs struct {
	// The account for this identity alias.
	AccountId string `pulumi:"accountId"`
	// The identity set.
	IdentitySetId string `pulumi:"identitySetId"`
	// The username to be used as the identity alias for this account.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a IdentityAlias resource.
type IdentityAliasArgs struct {
	// The account for this identity alias.
	AccountId pulumi.StringInput
	// The identity set.
	IdentitySetId pulumi.StringInput
	// The username to be used as the identity alias for this account.
	Username pulumi.StringInput
}

func (IdentityAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityAliasArgs)(nil)).Elem()
}

type IdentityAliasInput interface {
	pulumi.Input

	ToIdentityAliasOutput() IdentityAliasOutput
	ToIdentityAliasOutputWithContext(ctx context.Context) IdentityAliasOutput
}

func (*IdentityAlias) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityAlias)(nil)).Elem()
}

func (i *IdentityAlias) ToIdentityAliasOutput() IdentityAliasOutput {
	return i.ToIdentityAliasOutputWithContext(context.Background())
}

func (i *IdentityAlias) ToIdentityAliasOutputWithContext(ctx context.Context) IdentityAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityAliasOutput)
}

// IdentityAliasArrayInput is an input type that accepts IdentityAliasArray and IdentityAliasArrayOutput values.
// You can construct a concrete instance of `IdentityAliasArrayInput` via:
//
//	IdentityAliasArray{ IdentityAliasArgs{...} }
type IdentityAliasArrayInput interface {
	pulumi.Input

	ToIdentityAliasArrayOutput() IdentityAliasArrayOutput
	ToIdentityAliasArrayOutputWithContext(context.Context) IdentityAliasArrayOutput
}

type IdentityAliasArray []IdentityAliasInput

func (IdentityAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityAlias)(nil)).Elem()
}

func (i IdentityAliasArray) ToIdentityAliasArrayOutput() IdentityAliasArrayOutput {
	return i.ToIdentityAliasArrayOutputWithContext(context.Background())
}

func (i IdentityAliasArray) ToIdentityAliasArrayOutputWithContext(ctx context.Context) IdentityAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityAliasArrayOutput)
}

// IdentityAliasMapInput is an input type that accepts IdentityAliasMap and IdentityAliasMapOutput values.
// You can construct a concrete instance of `IdentityAliasMapInput` via:
//
//	IdentityAliasMap{ "key": IdentityAliasArgs{...} }
type IdentityAliasMapInput interface {
	pulumi.Input

	ToIdentityAliasMapOutput() IdentityAliasMapOutput
	ToIdentityAliasMapOutputWithContext(context.Context) IdentityAliasMapOutput
}

type IdentityAliasMap map[string]IdentityAliasInput

func (IdentityAliasMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityAlias)(nil)).Elem()
}

func (i IdentityAliasMap) ToIdentityAliasMapOutput() IdentityAliasMapOutput {
	return i.ToIdentityAliasMapOutputWithContext(context.Background())
}

func (i IdentityAliasMap) ToIdentityAliasMapOutputWithContext(ctx context.Context) IdentityAliasMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityAliasMapOutput)
}

type IdentityAliasOutput struct{ *pulumi.OutputState }

func (IdentityAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityAlias)(nil)).Elem()
}

func (o IdentityAliasOutput) ToIdentityAliasOutput() IdentityAliasOutput {
	return o
}

func (o IdentityAliasOutput) ToIdentityAliasOutputWithContext(ctx context.Context) IdentityAliasOutput {
	return o
}

// The account for this identity alias.
func (o IdentityAliasOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityAlias) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The identity set.
func (o IdentityAliasOutput) IdentitySetId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityAlias) pulumi.StringOutput { return v.IdentitySetId }).(pulumi.StringOutput)
}

// The username to be used as the identity alias for this account.
func (o IdentityAliasOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityAlias) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type IdentityAliasArrayOutput struct{ *pulumi.OutputState }

func (IdentityAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityAlias)(nil)).Elem()
}

func (o IdentityAliasArrayOutput) ToIdentityAliasArrayOutput() IdentityAliasArrayOutput {
	return o
}

func (o IdentityAliasArrayOutput) ToIdentityAliasArrayOutputWithContext(ctx context.Context) IdentityAliasArrayOutput {
	return o
}

func (o IdentityAliasArrayOutput) Index(i pulumi.IntInput) IdentityAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityAlias {
		return vs[0].([]*IdentityAlias)[vs[1].(int)]
	}).(IdentityAliasOutput)
}

type IdentityAliasMapOutput struct{ *pulumi.OutputState }

func (IdentityAliasMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityAlias)(nil)).Elem()
}

func (o IdentityAliasMapOutput) ToIdentityAliasMapOutput() IdentityAliasMapOutput {
	return o
}

func (o IdentityAliasMapOutput) ToIdentityAliasMapOutputWithContext(ctx context.Context) IdentityAliasMapOutput {
	return o
}

func (o IdentityAliasMapOutput) MapIndex(k pulumi.StringInput) IdentityAliasOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityAlias {
		return vs[0].(map[string]*IdentityAlias)[vs[1].(string)]
	}).(IdentityAliasOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityAliasInput)(nil)).Elem(), &IdentityAlias{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityAliasArrayInput)(nil)).Elem(), IdentityAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityAliasMapInput)(nil)).Elem(), IdentityAliasMap{})
	pulumi.RegisterOutputType(IdentityAliasOutput{})
	pulumi.RegisterOutputType(IdentityAliasArrayOutput{})
	pulumi.RegisterOutputType(IdentityAliasMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdm

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A IdentitySet defines a group of identity aliases.
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdm.NewIdentitySet(ctx, "default", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// This resource can be imported using the import command.
//
// ## Import
//
// A IdentitySet can be imported using the id, e.g.,
//
// ```sh
// $ pulumi import sdm:index/identitySet:IdentitySet example ig-12345678
// ```
type IdentitySet struct {
	pulumi.CustomResourceState

	// Unique human-readable name of the IdentitySet.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewIdentitySet registers a new resource with the given unique name, arguments, and options.
func NewIdentitySet(ctx *pulumi.Context,
	name string, args *IdentitySetArgs, opts ...pulumi.ResourceOption) (*IdentitySet, error) {
	if args == nil {
		args = &IdentitySetArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentitySet
	err := ctx.RegisterResource("sdm:index/identitySet:IdentitySet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentitySet gets an existing IdentitySet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentitySet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentitySetState, opts ...pulumi.ResourceOption) (*IdentitySet, error) {
	var resource IdentitySet
	err := ctx.ReadResource("sdm:index/identitySet:IdentitySet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentitySet resources.
type identitySetState struct {
	// Unique human-readable name of the IdentitySet.
	Name *string `pulumi:"name"`
}

type IdentitySetState struct {
	// Unique human-readable name of the IdentitySet.
	Name pulumi.StringPtrInput
}

func (IdentitySetState) ElementType() reflect.Type {
	return reflect.TypeOf((*identitySetState)(nil)).Elem()
}

type identitySetArgs struct {
	// Unique human-readable name of the IdentitySet.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a IdentitySet resource.
type IdentitySetArgs struct {
	// Unique human-readable name of the IdentitySet.
	Name pulumi.StringPtrInput
}

func (IdentitySetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identitySetArgs)(nil)).Elem()
}

type IdentitySetInput interface {
	pulumi.Input

	ToIdentitySetOutput() IdentitySetOutput
	ToIdentitySetOutputWithContext(ctx context.Context) IdentitySetOutput
}

func (*IdentitySet) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentitySet)(nil)).Elem()
}

func (i *IdentitySet) ToIdentitySetOutput() IdentitySetOutput {
	return i.ToIdentitySetOutputWithContext(context.Background())
}

func (i *IdentitySet) ToIdentitySetOutputWithContext(ctx context.Context) IdentitySetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySetOutput)
}

// IdentitySetArrayInput is an input type that accepts IdentitySetArray and IdentitySetArrayOutput values.
// You can construct a concrete instance of `IdentitySetArrayInput` via:
//
//	IdentitySetArray{ IdentitySetArgs{...} }
type IdentitySetArrayInput interface {
	pulumi.Input

	ToIdentitySetArrayOutput() IdentitySetArrayOutput
	ToIdentitySetArrayOutputWithContext(context.Context) IdentitySetArrayOutput
}

type IdentitySetArray []IdentitySetInput

func (IdentitySetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentitySet)(nil)).Elem()
}

func (i IdentitySetArray) ToIdentitySetArrayOutput() IdentitySetArrayOutput {
	return i.ToIdentitySetArrayOutputWithContext(context.Background())
}

func (i IdentitySetArray) ToIdentitySetArrayOutputWithContext(ctx context.Context) IdentitySetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySetArrayOutput)
}

// IdentitySetMapInput is an input type that accepts IdentitySetMap and IdentitySetMapOutput values.
// You can construct a concrete instance of `IdentitySetMapInput` via:
//
//	IdentitySetMap{ "key": IdentitySetArgs{...} }
type IdentitySetMapInput interface {
	pulumi.Input

	ToIdentitySetMapOutput() IdentitySetMapOutput
	ToIdentitySetMapOutputWithContext(context.Context) IdentitySetMapOutput
}

type IdentitySetMap map[string]IdentitySetInput

func (IdentitySetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentitySet)(nil)).Elem()
}

func (i IdentitySetMap) ToIdentitySetMapOutput() IdentitySetMapOutput {
	return i.ToIdentitySetMapOutputWithContext(context.Background())
}

func (i IdentitySetMap) ToIdentitySetMapOutputWithContext(ctx context.Context) IdentitySetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySetMapOutput)
}

type IdentitySetOutput struct{ *pulumi.OutputState }

func (IdentitySetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentitySet)(nil)).Elem()
}

func (o IdentitySetOutput) ToIdentitySetOutput() IdentitySetOutput {
	return o
}

func (o IdentitySetOutput) ToIdentitySetOutputWithContext(ctx context.Context) IdentitySetOutput {
	return o
}

// Unique human-readable name of the IdentitySet.
func (o IdentitySetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentitySet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type IdentitySetArrayOutput struct{ *pulumi.OutputState }

func (IdentitySetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentitySet)(nil)).Elem()
}

func (o IdentitySetArrayOutput) ToIdentitySetArrayOutput() IdentitySetArrayOutput {
	return o
}

func (o IdentitySetArrayOutput) ToIdentitySetArrayOutputWithContext(ctx context.Context) IdentitySetArrayOutput {
	return o
}

func (o IdentitySetArrayOutput) Index(i pulumi.IntInput) IdentitySetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentitySet {
		return vs[0].([]*IdentitySet)[vs[1].(int)]
	}).(IdentitySetOutput)
}

type IdentitySetMapOutput struct{ *pulumi.OutputState }

func (IdentitySetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentitySet)(nil)).Elem()
}

func (o IdentitySetMapOutput) ToIdentitySetMapOutput() IdentitySetMapOutput {
	return o
}

func (o IdentitySetMapOutput) ToIdentitySetMapOutputWithContext(ctx context.Context) IdentitySetMapOutput {
	return o
}

func (o IdentitySetMapOutput) MapIndex(k pulumi.StringInput) IdentitySetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentitySet {
		return vs[0].(map[string]*IdentitySet)[vs[1].(string)]
	}).(IdentitySetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentitySetInput)(nil)).Elem(), &IdentitySet{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentitySetArrayInput)(nil)).Elem(), IdentitySetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentitySetMapInput)(nil)).Elem(), IdentitySetMap{})
	pulumi.RegisterOutputType(IdentitySetOutput{})
	pulumi.RegisterOutputType(IdentitySetArrayOutput{})
	pulumi.RegisterOutputType(IdentitySetMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// RoleGrant can be imported using the id, e.g.,
//
// ```sh
//  $ pulumi import sdm:index/roleGrant:RoleGrant example rg-12345678
// ```
type RoleGrant struct {
	pulumi.CustomResourceState

	// The id of the resource of this RoleGrant.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// The id of the attached role of this RoleGrant.
	RoleId pulumi.StringOutput `pulumi:"roleId"`
}

// NewRoleGrant registers a new resource with the given unique name, arguments, and options.
func NewRoleGrant(ctx *pulumi.Context,
	name string, args *RoleGrantArgs, opts ...pulumi.ResourceOption) (*RoleGrant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RoleGrant
	err := ctx.RegisterResource("sdm:index/roleGrant:RoleGrant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleGrant gets an existing RoleGrant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleGrant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleGrantState, opts ...pulumi.ResourceOption) (*RoleGrant, error) {
	var resource RoleGrant
	err := ctx.ReadResource("sdm:index/roleGrant:RoleGrant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleGrant resources.
type roleGrantState struct {
	// The id of the resource of this RoleGrant.
	ResourceId *string `pulumi:"resourceId"`
	// The id of the attached role of this RoleGrant.
	RoleId *string `pulumi:"roleId"`
}

type RoleGrantState struct {
	// The id of the resource of this RoleGrant.
	ResourceId pulumi.StringPtrInput
	// The id of the attached role of this RoleGrant.
	RoleId pulumi.StringPtrInput
}

func (RoleGrantState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleGrantState)(nil)).Elem()
}

type roleGrantArgs struct {
	// The id of the resource of this RoleGrant.
	ResourceId string `pulumi:"resourceId"`
	// The id of the attached role of this RoleGrant.
	RoleId string `pulumi:"roleId"`
}

// The set of arguments for constructing a RoleGrant resource.
type RoleGrantArgs struct {
	// The id of the resource of this RoleGrant.
	ResourceId pulumi.StringInput
	// The id of the attached role of this RoleGrant.
	RoleId pulumi.StringInput
}

func (RoleGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleGrantArgs)(nil)).Elem()
}

type RoleGrantInput interface {
	pulumi.Input

	ToRoleGrantOutput() RoleGrantOutput
	ToRoleGrantOutputWithContext(ctx context.Context) RoleGrantOutput
}

func (*RoleGrant) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleGrant)(nil)).Elem()
}

func (i *RoleGrant) ToRoleGrantOutput() RoleGrantOutput {
	return i.ToRoleGrantOutputWithContext(context.Background())
}

func (i *RoleGrant) ToRoleGrantOutputWithContext(ctx context.Context) RoleGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleGrantOutput)
}

// RoleGrantArrayInput is an input type that accepts RoleGrantArray and RoleGrantArrayOutput values.
// You can construct a concrete instance of `RoleGrantArrayInput` via:
//
//          RoleGrantArray{ RoleGrantArgs{...} }
type RoleGrantArrayInput interface {
	pulumi.Input

	ToRoleGrantArrayOutput() RoleGrantArrayOutput
	ToRoleGrantArrayOutputWithContext(context.Context) RoleGrantArrayOutput
}

type RoleGrantArray []RoleGrantInput

func (RoleGrantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleGrant)(nil)).Elem()
}

func (i RoleGrantArray) ToRoleGrantArrayOutput() RoleGrantArrayOutput {
	return i.ToRoleGrantArrayOutputWithContext(context.Background())
}

func (i RoleGrantArray) ToRoleGrantArrayOutputWithContext(ctx context.Context) RoleGrantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleGrantArrayOutput)
}

// RoleGrantMapInput is an input type that accepts RoleGrantMap and RoleGrantMapOutput values.
// You can construct a concrete instance of `RoleGrantMapInput` via:
//
//          RoleGrantMap{ "key": RoleGrantArgs{...} }
type RoleGrantMapInput interface {
	pulumi.Input

	ToRoleGrantMapOutput() RoleGrantMapOutput
	ToRoleGrantMapOutputWithContext(context.Context) RoleGrantMapOutput
}

type RoleGrantMap map[string]RoleGrantInput

func (RoleGrantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleGrant)(nil)).Elem()
}

func (i RoleGrantMap) ToRoleGrantMapOutput() RoleGrantMapOutput {
	return i.ToRoleGrantMapOutputWithContext(context.Background())
}

func (i RoleGrantMap) ToRoleGrantMapOutputWithContext(ctx context.Context) RoleGrantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleGrantMapOutput)
}

type RoleGrantOutput struct{ *pulumi.OutputState }

func (RoleGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleGrant)(nil)).Elem()
}

func (o RoleGrantOutput) ToRoleGrantOutput() RoleGrantOutput {
	return o
}

func (o RoleGrantOutput) ToRoleGrantOutputWithContext(ctx context.Context) RoleGrantOutput {
	return o
}

// The id of the resource of this RoleGrant.
func (o RoleGrantOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleGrant) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// The id of the attached role of this RoleGrant.
func (o RoleGrantOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleGrant) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

type RoleGrantArrayOutput struct{ *pulumi.OutputState }

func (RoleGrantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleGrant)(nil)).Elem()
}

func (o RoleGrantArrayOutput) ToRoleGrantArrayOutput() RoleGrantArrayOutput {
	return o
}

func (o RoleGrantArrayOutput) ToRoleGrantArrayOutputWithContext(ctx context.Context) RoleGrantArrayOutput {
	return o
}

func (o RoleGrantArrayOutput) Index(i pulumi.IntInput) RoleGrantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoleGrant {
		return vs[0].([]*RoleGrant)[vs[1].(int)]
	}).(RoleGrantOutput)
}

type RoleGrantMapOutput struct{ *pulumi.OutputState }

func (RoleGrantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleGrant)(nil)).Elem()
}

func (o RoleGrantMapOutput) ToRoleGrantMapOutput() RoleGrantMapOutput {
	return o
}

func (o RoleGrantMapOutput) ToRoleGrantMapOutputWithContext(ctx context.Context) RoleGrantMapOutput {
	return o
}

func (o RoleGrantMapOutput) MapIndex(k pulumi.StringInput) RoleGrantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoleGrant {
		return vs[0].(map[string]*RoleGrant)[vs[1].(string)]
	}).(RoleGrantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleGrantInput)(nil)).Elem(), &RoleGrant{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleGrantArrayInput)(nil)).Elem(), RoleGrantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleGrantMapInput)(nil)).Elem(), RoleGrantMap{})
	pulumi.RegisterOutputType(RoleGrantOutput{})
	pulumi.RegisterOutputType(RoleGrantArrayOutput{})
	pulumi.RegisterOutputType(RoleGrantMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdm

import (
	"context"
	"reflect"

	"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Workflows are the collection of rules that define the resources to which access can be requested,
//
//	the users that can request that access, and the mechanism for approving those requests which can either
//	but automatic approval or a set of users authorized to approve the requests.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pierskarsenbarg/pulumi-sdm/sdk/go/sdm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdm.LookupWorkflow(ctx, &sdm.LookupWorkflowArgs{
//				AutoGrant: pulumi.BoolRef(true),
//				Name:      pulumi.StringRef("workflow example"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupWorkflow(ctx *pulumi.Context, args *LookupWorkflowArgs, opts ...pulumi.InvokeOption) (*LookupWorkflowResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkflowResult
	err := ctx.Invoke("sdm:index/getWorkflow:getWorkflow", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWorkflow.
type LookupWorkflowArgs struct {
	// Optional approval flow ID identifies an approval flow that linked to the workflow
	ApprovalFlowId *string `pulumi:"approvalFlowId"`
	// Optional auto grant setting to automatically approve requests or not, defaults to false.
	AutoGrant *bool `pulumi:"autoGrant"`
	// Optional description of the Workflow.
	Description *string `pulumi:"description"`
	// Optional enabled state for workflow. This setting may be overridden by the system if the workflow doesn't meet the requirements to be enabled or if other conditions prevent enabling the workflow. The requirements to enable a workflow are that the workflow must be either set up for with auto grant enabled or have one or more WorkflowApprovers created for the workflow.
	Enabled *bool `pulumi:"enabled"`
	// Unique identifier of the Workflow.
	Id *string `pulumi:"id"`
	// Unique human-readable name of the Workflow.
	Name *string `pulumi:"name"`
	// Optional weight for workflow to specify it's priority in matching a request.
	Weight *int `pulumi:"weight"`
}

// A collection of values returned by getWorkflow.
type LookupWorkflowResult struct {
	// Optional approval flow ID identifies an approval flow that linked to the workflow
	ApprovalFlowId *string `pulumi:"approvalFlowId"`
	// Optional auto grant setting to automatically approve requests or not, defaults to false.
	AutoGrant *bool `pulumi:"autoGrant"`
	// Optional description of the Workflow.
	Description *string `pulumi:"description"`
	// Optional enabled state for workflow. This setting may be overridden by the system if the workflow doesn't meet the requirements to be enabled or if other conditions prevent enabling the workflow. The requirements to enable a workflow are that the workflow must be either set up for with auto grant enabled or have one or more WorkflowApprovers created for the workflow.
	Enabled *bool `pulumi:"enabled"`
	// Unique identifier of the Workflow.
	Id *string `pulumi:"id"`
	// a list of strings of ids of data sources that match the given arguments.
	Ids []string `pulumi:"ids"`
	// Unique human-readable name of the Workflow.
	Name *string `pulumi:"name"`
	// Optional weight for workflow to specify it's priority in matching a request.
	Weight *int `pulumi:"weight"`
	// A list where each element has the following attributes:
	Workflows []GetWorkflowWorkflow `pulumi:"workflows"`
}

func LookupWorkflowOutput(ctx *pulumi.Context, args LookupWorkflowOutputArgs, opts ...pulumi.InvokeOption) LookupWorkflowResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupWorkflowResult, error) {
			args := v.(LookupWorkflowArgs)
			r, err := LookupWorkflow(ctx, &args, opts...)
			var s LookupWorkflowResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupWorkflowResultOutput)
}

// A collection of arguments for invoking getWorkflow.
type LookupWorkflowOutputArgs struct {
	// Optional approval flow ID identifies an approval flow that linked to the workflow
	ApprovalFlowId pulumi.StringPtrInput `pulumi:"approvalFlowId"`
	// Optional auto grant setting to automatically approve requests or not, defaults to false.
	AutoGrant pulumi.BoolPtrInput `pulumi:"autoGrant"`
	// Optional description of the Workflow.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Optional enabled state for workflow. This setting may be overridden by the system if the workflow doesn't meet the requirements to be enabled or if other conditions prevent enabling the workflow. The requirements to enable a workflow are that the workflow must be either set up for with auto grant enabled or have one or more WorkflowApprovers created for the workflow.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Unique identifier of the Workflow.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Unique human-readable name of the Workflow.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Optional weight for workflow to specify it's priority in matching a request.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (LookupWorkflowOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkflowArgs)(nil)).Elem()
}

// A collection of values returned by getWorkflow.
type LookupWorkflowResultOutput struct{ *pulumi.OutputState }

func (LookupWorkflowResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkflowResult)(nil)).Elem()
}

func (o LookupWorkflowResultOutput) ToLookupWorkflowResultOutput() LookupWorkflowResultOutput {
	return o
}

func (o LookupWorkflowResultOutput) ToLookupWorkflowResultOutputWithContext(ctx context.Context) LookupWorkflowResultOutput {
	return o
}

// Optional approval flow ID identifies an approval flow that linked to the workflow
func (o LookupWorkflowResultOutput) ApprovalFlowId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkflowResult) *string { return v.ApprovalFlowId }).(pulumi.StringPtrOutput)
}

// Optional auto grant setting to automatically approve requests or not, defaults to false.
func (o LookupWorkflowResultOutput) AutoGrant() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWorkflowResult) *bool { return v.AutoGrant }).(pulumi.BoolPtrOutput)
}

// Optional description of the Workflow.
func (o LookupWorkflowResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkflowResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional enabled state for workflow. This setting may be overridden by the system if the workflow doesn't meet the requirements to be enabled or if other conditions prevent enabling the workflow. The requirements to enable a workflow are that the workflow must be either set up for with auto grant enabled or have one or more WorkflowApprovers created for the workflow.
func (o LookupWorkflowResultOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupWorkflowResult) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Unique identifier of the Workflow.
func (o LookupWorkflowResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkflowResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// a list of strings of ids of data sources that match the given arguments.
func (o LookupWorkflowResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupWorkflowResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// Unique human-readable name of the Workflow.
func (o LookupWorkflowResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkflowResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Optional weight for workflow to specify it's priority in matching a request.
func (o LookupWorkflowResultOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupWorkflowResult) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

// A list where each element has the following attributes:
func (o LookupWorkflowResultOutput) Workflows() GetWorkflowWorkflowArrayOutput {
	return o.ApplyT(func(v LookupWorkflowResult) []GetWorkflowWorkflow { return v.Workflows }).(GetWorkflowWorkflowArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkflowResultOutput{})
}

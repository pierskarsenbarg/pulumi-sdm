# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResourceArgs', 'Resource']

@pulumi.input_type
class ResourceArgs:
    def __init__(__self__, *,
                 aks: Optional[pulumi.Input['ResourceAksArgs']] = None,
                 aks_basic_auth: Optional[pulumi.Input['ResourceAksBasicAuthArgs']] = None,
                 aks_service_account: Optional[pulumi.Input['ResourceAksServiceAccountArgs']] = None,
                 aks_service_account_user_impersonation: Optional[pulumi.Input['ResourceAksServiceAccountUserImpersonationArgs']] = None,
                 aks_user_impersonation: Optional[pulumi.Input['ResourceAksUserImpersonationArgs']] = None,
                 amazon_eks: Optional[pulumi.Input['ResourceAmazonEksArgs']] = None,
                 amazon_eks_instance_profile: Optional[pulumi.Input['ResourceAmazonEksInstanceProfileArgs']] = None,
                 amazon_eks_instance_profile_user_impersonation: Optional[pulumi.Input['ResourceAmazonEksInstanceProfileUserImpersonationArgs']] = None,
                 amazon_eks_user_impersonation: Optional[pulumi.Input['ResourceAmazonEksUserImpersonationArgs']] = None,
                 amazon_es: Optional[pulumi.Input['ResourceAmazonEsArgs']] = None,
                 amazonmq_amqp091: Optional[pulumi.Input['ResourceAmazonmqAmqp091Args']] = None,
                 athena: Optional[pulumi.Input['ResourceAthenaArgs']] = None,
                 aurora_mysql: Optional[pulumi.Input['ResourceAuroraMysqlArgs']] = None,
                 aurora_postgres: Optional[pulumi.Input['ResourceAuroraPostgresArgs']] = None,
                 aurora_postgres_iam: Optional[pulumi.Input['ResourceAuroraPostgresIamArgs']] = None,
                 aws: Optional[pulumi.Input['ResourceAwsArgs']] = None,
                 aws_console: Optional[pulumi.Input['ResourceAwsConsoleArgs']] = None,
                 aws_console_static_key_pair: Optional[pulumi.Input['ResourceAwsConsoleStaticKeyPairArgs']] = None,
                 azure: Optional[pulumi.Input['ResourceAzureArgs']] = None,
                 azure_certificate: Optional[pulumi.Input['ResourceAzureCertificateArgs']] = None,
                 azure_mysql: Optional[pulumi.Input['ResourceAzureMysqlArgs']] = None,
                 azure_postgres: Optional[pulumi.Input['ResourceAzurePostgresArgs']] = None,
                 azure_postgres_managed_identity: Optional[pulumi.Input['ResourceAzurePostgresManagedIdentityArgs']] = None,
                 big_query: Optional[pulumi.Input['ResourceBigQueryArgs']] = None,
                 cassandra: Optional[pulumi.Input['ResourceCassandraArgs']] = None,
                 citus: Optional[pulumi.Input['ResourceCitusArgs']] = None,
                 clustrix: Optional[pulumi.Input['ResourceClustrixArgs']] = None,
                 cockroach: Optional[pulumi.Input['ResourceCockroachArgs']] = None,
                 db2_i: Optional[pulumi.Input['ResourceDb2IArgs']] = None,
                 db2_luw: Optional[pulumi.Input['ResourceDb2LuwArgs']] = None,
                 document_db_host: Optional[pulumi.Input['ResourceDocumentDbHostArgs']] = None,
                 document_db_replica_set: Optional[pulumi.Input['ResourceDocumentDbReplicaSetArgs']] = None,
                 druid: Optional[pulumi.Input['ResourceDruidArgs']] = None,
                 dynamo_db: Optional[pulumi.Input['ResourceDynamoDbArgs']] = None,
                 elastic: Optional[pulumi.Input['ResourceElasticArgs']] = None,
                 elasticache_redis: Optional[pulumi.Input['ResourceElasticacheRedisArgs']] = None,
                 gcp: Optional[pulumi.Input['ResourceGcpArgs']] = None,
                 google_gke: Optional[pulumi.Input['ResourceGoogleGkeArgs']] = None,
                 google_gke_user_impersonation: Optional[pulumi.Input['ResourceGoogleGkeUserImpersonationArgs']] = None,
                 greenplum: Optional[pulumi.Input['ResourceGreenplumArgs']] = None,
                 http_auth: Optional[pulumi.Input['ResourceHttpAuthArgs']] = None,
                 http_basic_auth: Optional[pulumi.Input['ResourceHttpBasicAuthArgs']] = None,
                 http_no_auth: Optional[pulumi.Input['ResourceHttpNoAuthArgs']] = None,
                 kubernetes: Optional[pulumi.Input['ResourceKubernetesArgs']] = None,
                 kubernetes_basic_auth: Optional[pulumi.Input['ResourceKubernetesBasicAuthArgs']] = None,
                 kubernetes_service_account: Optional[pulumi.Input['ResourceKubernetesServiceAccountArgs']] = None,
                 kubernetes_service_account_user_impersonation: Optional[pulumi.Input['ResourceKubernetesServiceAccountUserImpersonationArgs']] = None,
                 kubernetes_user_impersonation: Optional[pulumi.Input['ResourceKubernetesUserImpersonationArgs']] = None,
                 maria: Optional[pulumi.Input['ResourceMariaArgs']] = None,
                 memcached: Optional[pulumi.Input['ResourceMemcachedArgs']] = None,
                 memsql: Optional[pulumi.Input['ResourceMemsqlArgs']] = None,
                 mongo_host: Optional[pulumi.Input['ResourceMongoHostArgs']] = None,
                 mongo_legacy_host: Optional[pulumi.Input['ResourceMongoLegacyHostArgs']] = None,
                 mongo_legacy_replicaset: Optional[pulumi.Input['ResourceMongoLegacyReplicasetArgs']] = None,
                 mongo_replica_set: Optional[pulumi.Input['ResourceMongoReplicaSetArgs']] = None,
                 mongo_sharded_cluster: Optional[pulumi.Input['ResourceMongoShardedClusterArgs']] = None,
                 mtls_mysql: Optional[pulumi.Input['ResourceMtlsMysqlArgs']] = None,
                 mtls_postgres: Optional[pulumi.Input['ResourceMtlsPostgresArgs']] = None,
                 mysql: Optional[pulumi.Input['ResourceMysqlArgs']] = None,
                 neptune: Optional[pulumi.Input['ResourceNeptuneArgs']] = None,
                 neptune_iam: Optional[pulumi.Input['ResourceNeptuneIamArgs']] = None,
                 oracle: Optional[pulumi.Input['ResourceOracleArgs']] = None,
                 postgres: Optional[pulumi.Input['ResourcePostgresArgs']] = None,
                 presto: Optional[pulumi.Input['ResourcePrestoArgs']] = None,
                 rabbitmq_amqp091: Optional[pulumi.Input['ResourceRabbitmqAmqp091Args']] = None,
                 raw_tcp: Optional[pulumi.Input['ResourceRawTcpArgs']] = None,
                 rdp: Optional[pulumi.Input['ResourceRdpArgs']] = None,
                 rds_postgres_iam: Optional[pulumi.Input['ResourceRdsPostgresIamArgs']] = None,
                 redis: Optional[pulumi.Input['ResourceRedisArgs']] = None,
                 redshift: Optional[pulumi.Input['ResourceRedshiftArgs']] = None,
                 single_store: Optional[pulumi.Input['ResourceSingleStoreArgs']] = None,
                 snowflake: Optional[pulumi.Input['ResourceSnowflakeArgs']] = None,
                 snowsight: Optional[pulumi.Input['ResourceSnowsightArgs']] = None,
                 sql_server: Optional[pulumi.Input['ResourceSqlServerArgs']] = None,
                 sql_server_azure_ad: Optional[pulumi.Input['ResourceSqlServerAzureAdArgs']] = None,
                 sql_server_kerberos_ad: Optional[pulumi.Input['ResourceSqlServerKerberosAdArgs']] = None,
                 ssh: Optional[pulumi.Input['ResourceSshArgs']] = None,
                 ssh_cert: Optional[pulumi.Input['ResourceSshCertArgs']] = None,
                 ssh_customer_key: Optional[pulumi.Input['ResourceSshCustomerKeyArgs']] = None,
                 sybase: Optional[pulumi.Input['ResourceSybaseArgs']] = None,
                 sybase_iq: Optional[pulumi.Input['ResourceSybaseIqArgs']] = None,
                 teradata: Optional[pulumi.Input['ResourceTeradataArgs']] = None,
                 trino: Optional[pulumi.Input['ResourceTrinoArgs']] = None):
        """
        The set of arguments for constructing a Resource resource.
        :param pulumi.Input['ResourceAuroraPostgresIamArgs'] aurora_postgres_iam: AuroraPostgresIAM is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input['ResourceMongoHostArgs'] mongo_host: MongoHost is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input['ResourceMongoReplicaSetArgs'] mongo_replica_set: MongoReplicaSet is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input['ResourceMongoShardedClusterArgs'] mongo_sharded_cluster: MongoShardedCluster is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input['ResourceMtlsMysqlArgs'] mtls_mysql: MTLSMysql is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input['ResourceRdsPostgresIamArgs'] rds_postgres_iam: RDSPostgresIAM is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input['ResourceTrinoArgs'] trino: Trino is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        if aks is not None:
            pulumi.set(__self__, "aks", aks)
        if aks_basic_auth is not None:
            pulumi.set(__self__, "aks_basic_auth", aks_basic_auth)
        if aks_service_account is not None:
            pulumi.set(__self__, "aks_service_account", aks_service_account)
        if aks_service_account_user_impersonation is not None:
            pulumi.set(__self__, "aks_service_account_user_impersonation", aks_service_account_user_impersonation)
        if aks_user_impersonation is not None:
            pulumi.set(__self__, "aks_user_impersonation", aks_user_impersonation)
        if amazon_eks is not None:
            pulumi.set(__self__, "amazon_eks", amazon_eks)
        if amazon_eks_instance_profile is not None:
            pulumi.set(__self__, "amazon_eks_instance_profile", amazon_eks_instance_profile)
        if amazon_eks_instance_profile_user_impersonation is not None:
            pulumi.set(__self__, "amazon_eks_instance_profile_user_impersonation", amazon_eks_instance_profile_user_impersonation)
        if amazon_eks_user_impersonation is not None:
            pulumi.set(__self__, "amazon_eks_user_impersonation", amazon_eks_user_impersonation)
        if amazon_es is not None:
            pulumi.set(__self__, "amazon_es", amazon_es)
        if amazonmq_amqp091 is not None:
            pulumi.set(__self__, "amazonmq_amqp091", amazonmq_amqp091)
        if athena is not None:
            pulumi.set(__self__, "athena", athena)
        if aurora_mysql is not None:
            pulumi.set(__self__, "aurora_mysql", aurora_mysql)
        if aurora_postgres is not None:
            pulumi.set(__self__, "aurora_postgres", aurora_postgres)
        if aurora_postgres_iam is not None:
            pulumi.set(__self__, "aurora_postgres_iam", aurora_postgres_iam)
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if aws_console is not None:
            pulumi.set(__self__, "aws_console", aws_console)
        if aws_console_static_key_pair is not None:
            pulumi.set(__self__, "aws_console_static_key_pair", aws_console_static_key_pair)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if azure_certificate is not None:
            pulumi.set(__self__, "azure_certificate", azure_certificate)
        if azure_mysql is not None:
            pulumi.set(__self__, "azure_mysql", azure_mysql)
        if azure_postgres is not None:
            pulumi.set(__self__, "azure_postgres", azure_postgres)
        if azure_postgres_managed_identity is not None:
            pulumi.set(__self__, "azure_postgres_managed_identity", azure_postgres_managed_identity)
        if big_query is not None:
            pulumi.set(__self__, "big_query", big_query)
        if cassandra is not None:
            pulumi.set(__self__, "cassandra", cassandra)
        if citus is not None:
            pulumi.set(__self__, "citus", citus)
        if clustrix is not None:
            pulumi.set(__self__, "clustrix", clustrix)
        if cockroach is not None:
            pulumi.set(__self__, "cockroach", cockroach)
        if db2_i is not None:
            pulumi.set(__self__, "db2_i", db2_i)
        if db2_luw is not None:
            pulumi.set(__self__, "db2_luw", db2_luw)
        if document_db_host is not None:
            pulumi.set(__self__, "document_db_host", document_db_host)
        if document_db_replica_set is not None:
            pulumi.set(__self__, "document_db_replica_set", document_db_replica_set)
        if druid is not None:
            pulumi.set(__self__, "druid", druid)
        if dynamo_db is not None:
            pulumi.set(__self__, "dynamo_db", dynamo_db)
        if elastic is not None:
            pulumi.set(__self__, "elastic", elastic)
        if elasticache_redis is not None:
            pulumi.set(__self__, "elasticache_redis", elasticache_redis)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if google_gke is not None:
            pulumi.set(__self__, "google_gke", google_gke)
        if google_gke_user_impersonation is not None:
            pulumi.set(__self__, "google_gke_user_impersonation", google_gke_user_impersonation)
        if greenplum is not None:
            pulumi.set(__self__, "greenplum", greenplum)
        if http_auth is not None:
            pulumi.set(__self__, "http_auth", http_auth)
        if http_basic_auth is not None:
            pulumi.set(__self__, "http_basic_auth", http_basic_auth)
        if http_no_auth is not None:
            pulumi.set(__self__, "http_no_auth", http_no_auth)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if kubernetes_basic_auth is not None:
            pulumi.set(__self__, "kubernetes_basic_auth", kubernetes_basic_auth)
        if kubernetes_service_account is not None:
            pulumi.set(__self__, "kubernetes_service_account", kubernetes_service_account)
        if kubernetes_service_account_user_impersonation is not None:
            pulumi.set(__self__, "kubernetes_service_account_user_impersonation", kubernetes_service_account_user_impersonation)
        if kubernetes_user_impersonation is not None:
            pulumi.set(__self__, "kubernetes_user_impersonation", kubernetes_user_impersonation)
        if maria is not None:
            pulumi.set(__self__, "maria", maria)
        if memcached is not None:
            pulumi.set(__self__, "memcached", memcached)
        if memsql is not None:
            pulumi.set(__self__, "memsql", memsql)
        if mongo_host is not None:
            pulumi.set(__self__, "mongo_host", mongo_host)
        if mongo_legacy_host is not None:
            pulumi.set(__self__, "mongo_legacy_host", mongo_legacy_host)
        if mongo_legacy_replicaset is not None:
            pulumi.set(__self__, "mongo_legacy_replicaset", mongo_legacy_replicaset)
        if mongo_replica_set is not None:
            pulumi.set(__self__, "mongo_replica_set", mongo_replica_set)
        if mongo_sharded_cluster is not None:
            pulumi.set(__self__, "mongo_sharded_cluster", mongo_sharded_cluster)
        if mtls_mysql is not None:
            pulumi.set(__self__, "mtls_mysql", mtls_mysql)
        if mtls_postgres is not None:
            pulumi.set(__self__, "mtls_postgres", mtls_postgres)
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if neptune is not None:
            pulumi.set(__self__, "neptune", neptune)
        if neptune_iam is not None:
            pulumi.set(__self__, "neptune_iam", neptune_iam)
        if oracle is not None:
            pulumi.set(__self__, "oracle", oracle)
        if postgres is not None:
            pulumi.set(__self__, "postgres", postgres)
        if presto is not None:
            pulumi.set(__self__, "presto", presto)
        if rabbitmq_amqp091 is not None:
            pulumi.set(__self__, "rabbitmq_amqp091", rabbitmq_amqp091)
        if raw_tcp is not None:
            pulumi.set(__self__, "raw_tcp", raw_tcp)
        if rdp is not None:
            pulumi.set(__self__, "rdp", rdp)
        if rds_postgres_iam is not None:
            pulumi.set(__self__, "rds_postgres_iam", rds_postgres_iam)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)
        if redshift is not None:
            pulumi.set(__self__, "redshift", redshift)
        if single_store is not None:
            pulumi.set(__self__, "single_store", single_store)
        if snowflake is not None:
            pulumi.set(__self__, "snowflake", snowflake)
        if snowsight is not None:
            pulumi.set(__self__, "snowsight", snowsight)
        if sql_server is not None:
            pulumi.set(__self__, "sql_server", sql_server)
        if sql_server_azure_ad is not None:
            pulumi.set(__self__, "sql_server_azure_ad", sql_server_azure_ad)
        if sql_server_kerberos_ad is not None:
            pulumi.set(__self__, "sql_server_kerberos_ad", sql_server_kerberos_ad)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if ssh_cert is not None:
            pulumi.set(__self__, "ssh_cert", ssh_cert)
        if ssh_customer_key is not None:
            pulumi.set(__self__, "ssh_customer_key", ssh_customer_key)
        if sybase is not None:
            pulumi.set(__self__, "sybase", sybase)
        if sybase_iq is not None:
            pulumi.set(__self__, "sybase_iq", sybase_iq)
        if teradata is not None:
            pulumi.set(__self__, "teradata", teradata)
        if trino is not None:
            pulumi.set(__self__, "trino", trino)

    @property
    @pulumi.getter
    def aks(self) -> Optional[pulumi.Input['ResourceAksArgs']]:
        return pulumi.get(self, "aks")

    @aks.setter
    def aks(self, value: Optional[pulumi.Input['ResourceAksArgs']]):
        pulumi.set(self, "aks", value)

    @property
    @pulumi.getter(name="aksBasicAuth")
    def aks_basic_auth(self) -> Optional[pulumi.Input['ResourceAksBasicAuthArgs']]:
        return pulumi.get(self, "aks_basic_auth")

    @aks_basic_auth.setter
    def aks_basic_auth(self, value: Optional[pulumi.Input['ResourceAksBasicAuthArgs']]):
        pulumi.set(self, "aks_basic_auth", value)

    @property
    @pulumi.getter(name="aksServiceAccount")
    def aks_service_account(self) -> Optional[pulumi.Input['ResourceAksServiceAccountArgs']]:
        return pulumi.get(self, "aks_service_account")

    @aks_service_account.setter
    def aks_service_account(self, value: Optional[pulumi.Input['ResourceAksServiceAccountArgs']]):
        pulumi.set(self, "aks_service_account", value)

    @property
    @pulumi.getter(name="aksServiceAccountUserImpersonation")
    def aks_service_account_user_impersonation(self) -> Optional[pulumi.Input['ResourceAksServiceAccountUserImpersonationArgs']]:
        return pulumi.get(self, "aks_service_account_user_impersonation")

    @aks_service_account_user_impersonation.setter
    def aks_service_account_user_impersonation(self, value: Optional[pulumi.Input['ResourceAksServiceAccountUserImpersonationArgs']]):
        pulumi.set(self, "aks_service_account_user_impersonation", value)

    @property
    @pulumi.getter(name="aksUserImpersonation")
    def aks_user_impersonation(self) -> Optional[pulumi.Input['ResourceAksUserImpersonationArgs']]:
        return pulumi.get(self, "aks_user_impersonation")

    @aks_user_impersonation.setter
    def aks_user_impersonation(self, value: Optional[pulumi.Input['ResourceAksUserImpersonationArgs']]):
        pulumi.set(self, "aks_user_impersonation", value)

    @property
    @pulumi.getter(name="amazonEks")
    def amazon_eks(self) -> Optional[pulumi.Input['ResourceAmazonEksArgs']]:
        return pulumi.get(self, "amazon_eks")

    @amazon_eks.setter
    def amazon_eks(self, value: Optional[pulumi.Input['ResourceAmazonEksArgs']]):
        pulumi.set(self, "amazon_eks", value)

    @property
    @pulumi.getter(name="amazonEksInstanceProfile")
    def amazon_eks_instance_profile(self) -> Optional[pulumi.Input['ResourceAmazonEksInstanceProfileArgs']]:
        return pulumi.get(self, "amazon_eks_instance_profile")

    @amazon_eks_instance_profile.setter
    def amazon_eks_instance_profile(self, value: Optional[pulumi.Input['ResourceAmazonEksInstanceProfileArgs']]):
        pulumi.set(self, "amazon_eks_instance_profile", value)

    @property
    @pulumi.getter(name="amazonEksInstanceProfileUserImpersonation")
    def amazon_eks_instance_profile_user_impersonation(self) -> Optional[pulumi.Input['ResourceAmazonEksInstanceProfileUserImpersonationArgs']]:
        return pulumi.get(self, "amazon_eks_instance_profile_user_impersonation")

    @amazon_eks_instance_profile_user_impersonation.setter
    def amazon_eks_instance_profile_user_impersonation(self, value: Optional[pulumi.Input['ResourceAmazonEksInstanceProfileUserImpersonationArgs']]):
        pulumi.set(self, "amazon_eks_instance_profile_user_impersonation", value)

    @property
    @pulumi.getter(name="amazonEksUserImpersonation")
    def amazon_eks_user_impersonation(self) -> Optional[pulumi.Input['ResourceAmazonEksUserImpersonationArgs']]:
        return pulumi.get(self, "amazon_eks_user_impersonation")

    @amazon_eks_user_impersonation.setter
    def amazon_eks_user_impersonation(self, value: Optional[pulumi.Input['ResourceAmazonEksUserImpersonationArgs']]):
        pulumi.set(self, "amazon_eks_user_impersonation", value)

    @property
    @pulumi.getter(name="amazonEs")
    def amazon_es(self) -> Optional[pulumi.Input['ResourceAmazonEsArgs']]:
        return pulumi.get(self, "amazon_es")

    @amazon_es.setter
    def amazon_es(self, value: Optional[pulumi.Input['ResourceAmazonEsArgs']]):
        pulumi.set(self, "amazon_es", value)

    @property
    @pulumi.getter(name="amazonmqAmqp091")
    def amazonmq_amqp091(self) -> Optional[pulumi.Input['ResourceAmazonmqAmqp091Args']]:
        return pulumi.get(self, "amazonmq_amqp091")

    @amazonmq_amqp091.setter
    def amazonmq_amqp091(self, value: Optional[pulumi.Input['ResourceAmazonmqAmqp091Args']]):
        pulumi.set(self, "amazonmq_amqp091", value)

    @property
    @pulumi.getter
    def athena(self) -> Optional[pulumi.Input['ResourceAthenaArgs']]:
        return pulumi.get(self, "athena")

    @athena.setter
    def athena(self, value: Optional[pulumi.Input['ResourceAthenaArgs']]):
        pulumi.set(self, "athena", value)

    @property
    @pulumi.getter(name="auroraMysql")
    def aurora_mysql(self) -> Optional[pulumi.Input['ResourceAuroraMysqlArgs']]:
        return pulumi.get(self, "aurora_mysql")

    @aurora_mysql.setter
    def aurora_mysql(self, value: Optional[pulumi.Input['ResourceAuroraMysqlArgs']]):
        pulumi.set(self, "aurora_mysql", value)

    @property
    @pulumi.getter(name="auroraPostgres")
    def aurora_postgres(self) -> Optional[pulumi.Input['ResourceAuroraPostgresArgs']]:
        return pulumi.get(self, "aurora_postgres")

    @aurora_postgres.setter
    def aurora_postgres(self, value: Optional[pulumi.Input['ResourceAuroraPostgresArgs']]):
        pulumi.set(self, "aurora_postgres", value)

    @property
    @pulumi.getter(name="auroraPostgresIam")
    def aurora_postgres_iam(self) -> Optional[pulumi.Input['ResourceAuroraPostgresIamArgs']]:
        """
        AuroraPostgresIAM is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "aurora_postgres_iam")

    @aurora_postgres_iam.setter
    def aurora_postgres_iam(self, value: Optional[pulumi.Input['ResourceAuroraPostgresIamArgs']]):
        pulumi.set(self, "aurora_postgres_iam", value)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['ResourceAwsArgs']]:
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['ResourceAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter(name="awsConsole")
    def aws_console(self) -> Optional[pulumi.Input['ResourceAwsConsoleArgs']]:
        return pulumi.get(self, "aws_console")

    @aws_console.setter
    def aws_console(self, value: Optional[pulumi.Input['ResourceAwsConsoleArgs']]):
        pulumi.set(self, "aws_console", value)

    @property
    @pulumi.getter(name="awsConsoleStaticKeyPair")
    def aws_console_static_key_pair(self) -> Optional[pulumi.Input['ResourceAwsConsoleStaticKeyPairArgs']]:
        return pulumi.get(self, "aws_console_static_key_pair")

    @aws_console_static_key_pair.setter
    def aws_console_static_key_pair(self, value: Optional[pulumi.Input['ResourceAwsConsoleStaticKeyPairArgs']]):
        pulumi.set(self, "aws_console_static_key_pair", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['ResourceAzureArgs']]:
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['ResourceAzureArgs']]):
        pulumi.set(self, "azure", value)

    @property
    @pulumi.getter(name="azureCertificate")
    def azure_certificate(self) -> Optional[pulumi.Input['ResourceAzureCertificateArgs']]:
        return pulumi.get(self, "azure_certificate")

    @azure_certificate.setter
    def azure_certificate(self, value: Optional[pulumi.Input['ResourceAzureCertificateArgs']]):
        pulumi.set(self, "azure_certificate", value)

    @property
    @pulumi.getter(name="azureMysql")
    def azure_mysql(self) -> Optional[pulumi.Input['ResourceAzureMysqlArgs']]:
        return pulumi.get(self, "azure_mysql")

    @azure_mysql.setter
    def azure_mysql(self, value: Optional[pulumi.Input['ResourceAzureMysqlArgs']]):
        pulumi.set(self, "azure_mysql", value)

    @property
    @pulumi.getter(name="azurePostgres")
    def azure_postgres(self) -> Optional[pulumi.Input['ResourceAzurePostgresArgs']]:
        return pulumi.get(self, "azure_postgres")

    @azure_postgres.setter
    def azure_postgres(self, value: Optional[pulumi.Input['ResourceAzurePostgresArgs']]):
        pulumi.set(self, "azure_postgres", value)

    @property
    @pulumi.getter(name="azurePostgresManagedIdentity")
    def azure_postgres_managed_identity(self) -> Optional[pulumi.Input['ResourceAzurePostgresManagedIdentityArgs']]:
        return pulumi.get(self, "azure_postgres_managed_identity")

    @azure_postgres_managed_identity.setter
    def azure_postgres_managed_identity(self, value: Optional[pulumi.Input['ResourceAzurePostgresManagedIdentityArgs']]):
        pulumi.set(self, "azure_postgres_managed_identity", value)

    @property
    @pulumi.getter(name="bigQuery")
    def big_query(self) -> Optional[pulumi.Input['ResourceBigQueryArgs']]:
        return pulumi.get(self, "big_query")

    @big_query.setter
    def big_query(self, value: Optional[pulumi.Input['ResourceBigQueryArgs']]):
        pulumi.set(self, "big_query", value)

    @property
    @pulumi.getter
    def cassandra(self) -> Optional[pulumi.Input['ResourceCassandraArgs']]:
        return pulumi.get(self, "cassandra")

    @cassandra.setter
    def cassandra(self, value: Optional[pulumi.Input['ResourceCassandraArgs']]):
        pulumi.set(self, "cassandra", value)

    @property
    @pulumi.getter
    def citus(self) -> Optional[pulumi.Input['ResourceCitusArgs']]:
        return pulumi.get(self, "citus")

    @citus.setter
    def citus(self, value: Optional[pulumi.Input['ResourceCitusArgs']]):
        pulumi.set(self, "citus", value)

    @property
    @pulumi.getter
    def clustrix(self) -> Optional[pulumi.Input['ResourceClustrixArgs']]:
        return pulumi.get(self, "clustrix")

    @clustrix.setter
    def clustrix(self, value: Optional[pulumi.Input['ResourceClustrixArgs']]):
        pulumi.set(self, "clustrix", value)

    @property
    @pulumi.getter
    def cockroach(self) -> Optional[pulumi.Input['ResourceCockroachArgs']]:
        return pulumi.get(self, "cockroach")

    @cockroach.setter
    def cockroach(self, value: Optional[pulumi.Input['ResourceCockroachArgs']]):
        pulumi.set(self, "cockroach", value)

    @property
    @pulumi.getter(name="db2I")
    def db2_i(self) -> Optional[pulumi.Input['ResourceDb2IArgs']]:
        return pulumi.get(self, "db2_i")

    @db2_i.setter
    def db2_i(self, value: Optional[pulumi.Input['ResourceDb2IArgs']]):
        pulumi.set(self, "db2_i", value)

    @property
    @pulumi.getter(name="db2Luw")
    def db2_luw(self) -> Optional[pulumi.Input['ResourceDb2LuwArgs']]:
        return pulumi.get(self, "db2_luw")

    @db2_luw.setter
    def db2_luw(self, value: Optional[pulumi.Input['ResourceDb2LuwArgs']]):
        pulumi.set(self, "db2_luw", value)

    @property
    @pulumi.getter(name="documentDbHost")
    def document_db_host(self) -> Optional[pulumi.Input['ResourceDocumentDbHostArgs']]:
        return pulumi.get(self, "document_db_host")

    @document_db_host.setter
    def document_db_host(self, value: Optional[pulumi.Input['ResourceDocumentDbHostArgs']]):
        pulumi.set(self, "document_db_host", value)

    @property
    @pulumi.getter(name="documentDbReplicaSet")
    def document_db_replica_set(self) -> Optional[pulumi.Input['ResourceDocumentDbReplicaSetArgs']]:
        return pulumi.get(self, "document_db_replica_set")

    @document_db_replica_set.setter
    def document_db_replica_set(self, value: Optional[pulumi.Input['ResourceDocumentDbReplicaSetArgs']]):
        pulumi.set(self, "document_db_replica_set", value)

    @property
    @pulumi.getter
    def druid(self) -> Optional[pulumi.Input['ResourceDruidArgs']]:
        return pulumi.get(self, "druid")

    @druid.setter
    def druid(self, value: Optional[pulumi.Input['ResourceDruidArgs']]):
        pulumi.set(self, "druid", value)

    @property
    @pulumi.getter(name="dynamoDb")
    def dynamo_db(self) -> Optional[pulumi.Input['ResourceDynamoDbArgs']]:
        return pulumi.get(self, "dynamo_db")

    @dynamo_db.setter
    def dynamo_db(self, value: Optional[pulumi.Input['ResourceDynamoDbArgs']]):
        pulumi.set(self, "dynamo_db", value)

    @property
    @pulumi.getter
    def elastic(self) -> Optional[pulumi.Input['ResourceElasticArgs']]:
        return pulumi.get(self, "elastic")

    @elastic.setter
    def elastic(self, value: Optional[pulumi.Input['ResourceElasticArgs']]):
        pulumi.set(self, "elastic", value)

    @property
    @pulumi.getter(name="elasticacheRedis")
    def elasticache_redis(self) -> Optional[pulumi.Input['ResourceElasticacheRedisArgs']]:
        return pulumi.get(self, "elasticache_redis")

    @elasticache_redis.setter
    def elasticache_redis(self, value: Optional[pulumi.Input['ResourceElasticacheRedisArgs']]):
        pulumi.set(self, "elasticache_redis", value)

    @property
    @pulumi.getter
    def gcp(self) -> Optional[pulumi.Input['ResourceGcpArgs']]:
        return pulumi.get(self, "gcp")

    @gcp.setter
    def gcp(self, value: Optional[pulumi.Input['ResourceGcpArgs']]):
        pulumi.set(self, "gcp", value)

    @property
    @pulumi.getter(name="googleGke")
    def google_gke(self) -> Optional[pulumi.Input['ResourceGoogleGkeArgs']]:
        return pulumi.get(self, "google_gke")

    @google_gke.setter
    def google_gke(self, value: Optional[pulumi.Input['ResourceGoogleGkeArgs']]):
        pulumi.set(self, "google_gke", value)

    @property
    @pulumi.getter(name="googleGkeUserImpersonation")
    def google_gke_user_impersonation(self) -> Optional[pulumi.Input['ResourceGoogleGkeUserImpersonationArgs']]:
        return pulumi.get(self, "google_gke_user_impersonation")

    @google_gke_user_impersonation.setter
    def google_gke_user_impersonation(self, value: Optional[pulumi.Input['ResourceGoogleGkeUserImpersonationArgs']]):
        pulumi.set(self, "google_gke_user_impersonation", value)

    @property
    @pulumi.getter
    def greenplum(self) -> Optional[pulumi.Input['ResourceGreenplumArgs']]:
        return pulumi.get(self, "greenplum")

    @greenplum.setter
    def greenplum(self, value: Optional[pulumi.Input['ResourceGreenplumArgs']]):
        pulumi.set(self, "greenplum", value)

    @property
    @pulumi.getter(name="httpAuth")
    def http_auth(self) -> Optional[pulumi.Input['ResourceHttpAuthArgs']]:
        return pulumi.get(self, "http_auth")

    @http_auth.setter
    def http_auth(self, value: Optional[pulumi.Input['ResourceHttpAuthArgs']]):
        pulumi.set(self, "http_auth", value)

    @property
    @pulumi.getter(name="httpBasicAuth")
    def http_basic_auth(self) -> Optional[pulumi.Input['ResourceHttpBasicAuthArgs']]:
        return pulumi.get(self, "http_basic_auth")

    @http_basic_auth.setter
    def http_basic_auth(self, value: Optional[pulumi.Input['ResourceHttpBasicAuthArgs']]):
        pulumi.set(self, "http_basic_auth", value)

    @property
    @pulumi.getter(name="httpNoAuth")
    def http_no_auth(self) -> Optional[pulumi.Input['ResourceHttpNoAuthArgs']]:
        return pulumi.get(self, "http_no_auth")

    @http_no_auth.setter
    def http_no_auth(self, value: Optional[pulumi.Input['ResourceHttpNoAuthArgs']]):
        pulumi.set(self, "http_no_auth", value)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[pulumi.Input['ResourceKubernetesArgs']]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: Optional[pulumi.Input['ResourceKubernetesArgs']]):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter(name="kubernetesBasicAuth")
    def kubernetes_basic_auth(self) -> Optional[pulumi.Input['ResourceKubernetesBasicAuthArgs']]:
        return pulumi.get(self, "kubernetes_basic_auth")

    @kubernetes_basic_auth.setter
    def kubernetes_basic_auth(self, value: Optional[pulumi.Input['ResourceKubernetesBasicAuthArgs']]):
        pulumi.set(self, "kubernetes_basic_auth", value)

    @property
    @pulumi.getter(name="kubernetesServiceAccount")
    def kubernetes_service_account(self) -> Optional[pulumi.Input['ResourceKubernetesServiceAccountArgs']]:
        return pulumi.get(self, "kubernetes_service_account")

    @kubernetes_service_account.setter
    def kubernetes_service_account(self, value: Optional[pulumi.Input['ResourceKubernetesServiceAccountArgs']]):
        pulumi.set(self, "kubernetes_service_account", value)

    @property
    @pulumi.getter(name="kubernetesServiceAccountUserImpersonation")
    def kubernetes_service_account_user_impersonation(self) -> Optional[pulumi.Input['ResourceKubernetesServiceAccountUserImpersonationArgs']]:
        return pulumi.get(self, "kubernetes_service_account_user_impersonation")

    @kubernetes_service_account_user_impersonation.setter
    def kubernetes_service_account_user_impersonation(self, value: Optional[pulumi.Input['ResourceKubernetesServiceAccountUserImpersonationArgs']]):
        pulumi.set(self, "kubernetes_service_account_user_impersonation", value)

    @property
    @pulumi.getter(name="kubernetesUserImpersonation")
    def kubernetes_user_impersonation(self) -> Optional[pulumi.Input['ResourceKubernetesUserImpersonationArgs']]:
        return pulumi.get(self, "kubernetes_user_impersonation")

    @kubernetes_user_impersonation.setter
    def kubernetes_user_impersonation(self, value: Optional[pulumi.Input['ResourceKubernetesUserImpersonationArgs']]):
        pulumi.set(self, "kubernetes_user_impersonation", value)

    @property
    @pulumi.getter
    def maria(self) -> Optional[pulumi.Input['ResourceMariaArgs']]:
        return pulumi.get(self, "maria")

    @maria.setter
    def maria(self, value: Optional[pulumi.Input['ResourceMariaArgs']]):
        pulumi.set(self, "maria", value)

    @property
    @pulumi.getter
    def memcached(self) -> Optional[pulumi.Input['ResourceMemcachedArgs']]:
        return pulumi.get(self, "memcached")

    @memcached.setter
    def memcached(self, value: Optional[pulumi.Input['ResourceMemcachedArgs']]):
        pulumi.set(self, "memcached", value)

    @property
    @pulumi.getter
    def memsql(self) -> Optional[pulumi.Input['ResourceMemsqlArgs']]:
        return pulumi.get(self, "memsql")

    @memsql.setter
    def memsql(self, value: Optional[pulumi.Input['ResourceMemsqlArgs']]):
        pulumi.set(self, "memsql", value)

    @property
    @pulumi.getter(name="mongoHost")
    def mongo_host(self) -> Optional[pulumi.Input['ResourceMongoHostArgs']]:
        """
        MongoHost is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "mongo_host")

    @mongo_host.setter
    def mongo_host(self, value: Optional[pulumi.Input['ResourceMongoHostArgs']]):
        pulumi.set(self, "mongo_host", value)

    @property
    @pulumi.getter(name="mongoLegacyHost")
    def mongo_legacy_host(self) -> Optional[pulumi.Input['ResourceMongoLegacyHostArgs']]:
        return pulumi.get(self, "mongo_legacy_host")

    @mongo_legacy_host.setter
    def mongo_legacy_host(self, value: Optional[pulumi.Input['ResourceMongoLegacyHostArgs']]):
        pulumi.set(self, "mongo_legacy_host", value)

    @property
    @pulumi.getter(name="mongoLegacyReplicaset")
    def mongo_legacy_replicaset(self) -> Optional[pulumi.Input['ResourceMongoLegacyReplicasetArgs']]:
        return pulumi.get(self, "mongo_legacy_replicaset")

    @mongo_legacy_replicaset.setter
    def mongo_legacy_replicaset(self, value: Optional[pulumi.Input['ResourceMongoLegacyReplicasetArgs']]):
        pulumi.set(self, "mongo_legacy_replicaset", value)

    @property
    @pulumi.getter(name="mongoReplicaSet")
    def mongo_replica_set(self) -> Optional[pulumi.Input['ResourceMongoReplicaSetArgs']]:
        """
        MongoReplicaSet is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "mongo_replica_set")

    @mongo_replica_set.setter
    def mongo_replica_set(self, value: Optional[pulumi.Input['ResourceMongoReplicaSetArgs']]):
        pulumi.set(self, "mongo_replica_set", value)

    @property
    @pulumi.getter(name="mongoShardedCluster")
    def mongo_sharded_cluster(self) -> Optional[pulumi.Input['ResourceMongoShardedClusterArgs']]:
        """
        MongoShardedCluster is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "mongo_sharded_cluster")

    @mongo_sharded_cluster.setter
    def mongo_sharded_cluster(self, value: Optional[pulumi.Input['ResourceMongoShardedClusterArgs']]):
        pulumi.set(self, "mongo_sharded_cluster", value)

    @property
    @pulumi.getter(name="mtlsMysql")
    def mtls_mysql(self) -> Optional[pulumi.Input['ResourceMtlsMysqlArgs']]:
        """
        MTLSMysql is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "mtls_mysql")

    @mtls_mysql.setter
    def mtls_mysql(self, value: Optional[pulumi.Input['ResourceMtlsMysqlArgs']]):
        pulumi.set(self, "mtls_mysql", value)

    @property
    @pulumi.getter(name="mtlsPostgres")
    def mtls_postgres(self) -> Optional[pulumi.Input['ResourceMtlsPostgresArgs']]:
        return pulumi.get(self, "mtls_postgres")

    @mtls_postgres.setter
    def mtls_postgres(self, value: Optional[pulumi.Input['ResourceMtlsPostgresArgs']]):
        pulumi.set(self, "mtls_postgres", value)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input['ResourceMysqlArgs']]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input['ResourceMysqlArgs']]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def neptune(self) -> Optional[pulumi.Input['ResourceNeptuneArgs']]:
        return pulumi.get(self, "neptune")

    @neptune.setter
    def neptune(self, value: Optional[pulumi.Input['ResourceNeptuneArgs']]):
        pulumi.set(self, "neptune", value)

    @property
    @pulumi.getter(name="neptuneIam")
    def neptune_iam(self) -> Optional[pulumi.Input['ResourceNeptuneIamArgs']]:
        return pulumi.get(self, "neptune_iam")

    @neptune_iam.setter
    def neptune_iam(self, value: Optional[pulumi.Input['ResourceNeptuneIamArgs']]):
        pulumi.set(self, "neptune_iam", value)

    @property
    @pulumi.getter
    def oracle(self) -> Optional[pulumi.Input['ResourceOracleArgs']]:
        return pulumi.get(self, "oracle")

    @oracle.setter
    def oracle(self, value: Optional[pulumi.Input['ResourceOracleArgs']]):
        pulumi.set(self, "oracle", value)

    @property
    @pulumi.getter
    def postgres(self) -> Optional[pulumi.Input['ResourcePostgresArgs']]:
        return pulumi.get(self, "postgres")

    @postgres.setter
    def postgres(self, value: Optional[pulumi.Input['ResourcePostgresArgs']]):
        pulumi.set(self, "postgres", value)

    @property
    @pulumi.getter
    def presto(self) -> Optional[pulumi.Input['ResourcePrestoArgs']]:
        return pulumi.get(self, "presto")

    @presto.setter
    def presto(self, value: Optional[pulumi.Input['ResourcePrestoArgs']]):
        pulumi.set(self, "presto", value)

    @property
    @pulumi.getter(name="rabbitmqAmqp091")
    def rabbitmq_amqp091(self) -> Optional[pulumi.Input['ResourceRabbitmqAmqp091Args']]:
        return pulumi.get(self, "rabbitmq_amqp091")

    @rabbitmq_amqp091.setter
    def rabbitmq_amqp091(self, value: Optional[pulumi.Input['ResourceRabbitmqAmqp091Args']]):
        pulumi.set(self, "rabbitmq_amqp091", value)

    @property
    @pulumi.getter(name="rawTcp")
    def raw_tcp(self) -> Optional[pulumi.Input['ResourceRawTcpArgs']]:
        return pulumi.get(self, "raw_tcp")

    @raw_tcp.setter
    def raw_tcp(self, value: Optional[pulumi.Input['ResourceRawTcpArgs']]):
        pulumi.set(self, "raw_tcp", value)

    @property
    @pulumi.getter
    def rdp(self) -> Optional[pulumi.Input['ResourceRdpArgs']]:
        return pulumi.get(self, "rdp")

    @rdp.setter
    def rdp(self, value: Optional[pulumi.Input['ResourceRdpArgs']]):
        pulumi.set(self, "rdp", value)

    @property
    @pulumi.getter(name="rdsPostgresIam")
    def rds_postgres_iam(self) -> Optional[pulumi.Input['ResourceRdsPostgresIamArgs']]:
        """
        RDSPostgresIAM is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "rds_postgres_iam")

    @rds_postgres_iam.setter
    def rds_postgres_iam(self, value: Optional[pulumi.Input['ResourceRdsPostgresIamArgs']]):
        pulumi.set(self, "rds_postgres_iam", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[pulumi.Input['ResourceRedisArgs']]:
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[pulumi.Input['ResourceRedisArgs']]):
        pulumi.set(self, "redis", value)

    @property
    @pulumi.getter
    def redshift(self) -> Optional[pulumi.Input['ResourceRedshiftArgs']]:
        return pulumi.get(self, "redshift")

    @redshift.setter
    def redshift(self, value: Optional[pulumi.Input['ResourceRedshiftArgs']]):
        pulumi.set(self, "redshift", value)

    @property
    @pulumi.getter(name="singleStore")
    def single_store(self) -> Optional[pulumi.Input['ResourceSingleStoreArgs']]:
        return pulumi.get(self, "single_store")

    @single_store.setter
    def single_store(self, value: Optional[pulumi.Input['ResourceSingleStoreArgs']]):
        pulumi.set(self, "single_store", value)

    @property
    @pulumi.getter
    def snowflake(self) -> Optional[pulumi.Input['ResourceSnowflakeArgs']]:
        return pulumi.get(self, "snowflake")

    @snowflake.setter
    def snowflake(self, value: Optional[pulumi.Input['ResourceSnowflakeArgs']]):
        pulumi.set(self, "snowflake", value)

    @property
    @pulumi.getter
    def snowsight(self) -> Optional[pulumi.Input['ResourceSnowsightArgs']]:
        return pulumi.get(self, "snowsight")

    @snowsight.setter
    def snowsight(self, value: Optional[pulumi.Input['ResourceSnowsightArgs']]):
        pulumi.set(self, "snowsight", value)

    @property
    @pulumi.getter(name="sqlServer")
    def sql_server(self) -> Optional[pulumi.Input['ResourceSqlServerArgs']]:
        return pulumi.get(self, "sql_server")

    @sql_server.setter
    def sql_server(self, value: Optional[pulumi.Input['ResourceSqlServerArgs']]):
        pulumi.set(self, "sql_server", value)

    @property
    @pulumi.getter(name="sqlServerAzureAd")
    def sql_server_azure_ad(self) -> Optional[pulumi.Input['ResourceSqlServerAzureAdArgs']]:
        return pulumi.get(self, "sql_server_azure_ad")

    @sql_server_azure_ad.setter
    def sql_server_azure_ad(self, value: Optional[pulumi.Input['ResourceSqlServerAzureAdArgs']]):
        pulumi.set(self, "sql_server_azure_ad", value)

    @property
    @pulumi.getter(name="sqlServerKerberosAd")
    def sql_server_kerberos_ad(self) -> Optional[pulumi.Input['ResourceSqlServerKerberosAdArgs']]:
        return pulumi.get(self, "sql_server_kerberos_ad")

    @sql_server_kerberos_ad.setter
    def sql_server_kerberos_ad(self, value: Optional[pulumi.Input['ResourceSqlServerKerberosAdArgs']]):
        pulumi.set(self, "sql_server_kerberos_ad", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['ResourceSshArgs']]:
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['ResourceSshArgs']]):
        pulumi.set(self, "ssh", value)

    @property
    @pulumi.getter(name="sshCert")
    def ssh_cert(self) -> Optional[pulumi.Input['ResourceSshCertArgs']]:
        return pulumi.get(self, "ssh_cert")

    @ssh_cert.setter
    def ssh_cert(self, value: Optional[pulumi.Input['ResourceSshCertArgs']]):
        pulumi.set(self, "ssh_cert", value)

    @property
    @pulumi.getter(name="sshCustomerKey")
    def ssh_customer_key(self) -> Optional[pulumi.Input['ResourceSshCustomerKeyArgs']]:
        return pulumi.get(self, "ssh_customer_key")

    @ssh_customer_key.setter
    def ssh_customer_key(self, value: Optional[pulumi.Input['ResourceSshCustomerKeyArgs']]):
        pulumi.set(self, "ssh_customer_key", value)

    @property
    @pulumi.getter
    def sybase(self) -> Optional[pulumi.Input['ResourceSybaseArgs']]:
        return pulumi.get(self, "sybase")

    @sybase.setter
    def sybase(self, value: Optional[pulumi.Input['ResourceSybaseArgs']]):
        pulumi.set(self, "sybase", value)

    @property
    @pulumi.getter(name="sybaseIq")
    def sybase_iq(self) -> Optional[pulumi.Input['ResourceSybaseIqArgs']]:
        return pulumi.get(self, "sybase_iq")

    @sybase_iq.setter
    def sybase_iq(self, value: Optional[pulumi.Input['ResourceSybaseIqArgs']]):
        pulumi.set(self, "sybase_iq", value)

    @property
    @pulumi.getter
    def teradata(self) -> Optional[pulumi.Input['ResourceTeradataArgs']]:
        return pulumi.get(self, "teradata")

    @teradata.setter
    def teradata(self, value: Optional[pulumi.Input['ResourceTeradataArgs']]):
        pulumi.set(self, "teradata", value)

    @property
    @pulumi.getter
    def trino(self) -> Optional[pulumi.Input['ResourceTrinoArgs']]:
        """
        Trino is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "trino")

    @trino.setter
    def trino(self, value: Optional[pulumi.Input['ResourceTrinoArgs']]):
        pulumi.set(self, "trino", value)


@pulumi.input_type
class _ResourceState:
    def __init__(__self__, *,
                 aks: Optional[pulumi.Input['ResourceAksArgs']] = None,
                 aks_basic_auth: Optional[pulumi.Input['ResourceAksBasicAuthArgs']] = None,
                 aks_service_account: Optional[pulumi.Input['ResourceAksServiceAccountArgs']] = None,
                 aks_service_account_user_impersonation: Optional[pulumi.Input['ResourceAksServiceAccountUserImpersonationArgs']] = None,
                 aks_user_impersonation: Optional[pulumi.Input['ResourceAksUserImpersonationArgs']] = None,
                 amazon_eks: Optional[pulumi.Input['ResourceAmazonEksArgs']] = None,
                 amazon_eks_instance_profile: Optional[pulumi.Input['ResourceAmazonEksInstanceProfileArgs']] = None,
                 amazon_eks_instance_profile_user_impersonation: Optional[pulumi.Input['ResourceAmazonEksInstanceProfileUserImpersonationArgs']] = None,
                 amazon_eks_user_impersonation: Optional[pulumi.Input['ResourceAmazonEksUserImpersonationArgs']] = None,
                 amazon_es: Optional[pulumi.Input['ResourceAmazonEsArgs']] = None,
                 amazonmq_amqp091: Optional[pulumi.Input['ResourceAmazonmqAmqp091Args']] = None,
                 athena: Optional[pulumi.Input['ResourceAthenaArgs']] = None,
                 aurora_mysql: Optional[pulumi.Input['ResourceAuroraMysqlArgs']] = None,
                 aurora_postgres: Optional[pulumi.Input['ResourceAuroraPostgresArgs']] = None,
                 aurora_postgres_iam: Optional[pulumi.Input['ResourceAuroraPostgresIamArgs']] = None,
                 aws: Optional[pulumi.Input['ResourceAwsArgs']] = None,
                 aws_console: Optional[pulumi.Input['ResourceAwsConsoleArgs']] = None,
                 aws_console_static_key_pair: Optional[pulumi.Input['ResourceAwsConsoleStaticKeyPairArgs']] = None,
                 azure: Optional[pulumi.Input['ResourceAzureArgs']] = None,
                 azure_certificate: Optional[pulumi.Input['ResourceAzureCertificateArgs']] = None,
                 azure_mysql: Optional[pulumi.Input['ResourceAzureMysqlArgs']] = None,
                 azure_postgres: Optional[pulumi.Input['ResourceAzurePostgresArgs']] = None,
                 azure_postgres_managed_identity: Optional[pulumi.Input['ResourceAzurePostgresManagedIdentityArgs']] = None,
                 big_query: Optional[pulumi.Input['ResourceBigQueryArgs']] = None,
                 cassandra: Optional[pulumi.Input['ResourceCassandraArgs']] = None,
                 citus: Optional[pulumi.Input['ResourceCitusArgs']] = None,
                 clustrix: Optional[pulumi.Input['ResourceClustrixArgs']] = None,
                 cockroach: Optional[pulumi.Input['ResourceCockroachArgs']] = None,
                 db2_i: Optional[pulumi.Input['ResourceDb2IArgs']] = None,
                 db2_luw: Optional[pulumi.Input['ResourceDb2LuwArgs']] = None,
                 document_db_host: Optional[pulumi.Input['ResourceDocumentDbHostArgs']] = None,
                 document_db_replica_set: Optional[pulumi.Input['ResourceDocumentDbReplicaSetArgs']] = None,
                 druid: Optional[pulumi.Input['ResourceDruidArgs']] = None,
                 dynamo_db: Optional[pulumi.Input['ResourceDynamoDbArgs']] = None,
                 elastic: Optional[pulumi.Input['ResourceElasticArgs']] = None,
                 elasticache_redis: Optional[pulumi.Input['ResourceElasticacheRedisArgs']] = None,
                 gcp: Optional[pulumi.Input['ResourceGcpArgs']] = None,
                 google_gke: Optional[pulumi.Input['ResourceGoogleGkeArgs']] = None,
                 google_gke_user_impersonation: Optional[pulumi.Input['ResourceGoogleGkeUserImpersonationArgs']] = None,
                 greenplum: Optional[pulumi.Input['ResourceGreenplumArgs']] = None,
                 http_auth: Optional[pulumi.Input['ResourceHttpAuthArgs']] = None,
                 http_basic_auth: Optional[pulumi.Input['ResourceHttpBasicAuthArgs']] = None,
                 http_no_auth: Optional[pulumi.Input['ResourceHttpNoAuthArgs']] = None,
                 kubernetes: Optional[pulumi.Input['ResourceKubernetesArgs']] = None,
                 kubernetes_basic_auth: Optional[pulumi.Input['ResourceKubernetesBasicAuthArgs']] = None,
                 kubernetes_service_account: Optional[pulumi.Input['ResourceKubernetesServiceAccountArgs']] = None,
                 kubernetes_service_account_user_impersonation: Optional[pulumi.Input['ResourceKubernetesServiceAccountUserImpersonationArgs']] = None,
                 kubernetes_user_impersonation: Optional[pulumi.Input['ResourceKubernetesUserImpersonationArgs']] = None,
                 maria: Optional[pulumi.Input['ResourceMariaArgs']] = None,
                 memcached: Optional[pulumi.Input['ResourceMemcachedArgs']] = None,
                 memsql: Optional[pulumi.Input['ResourceMemsqlArgs']] = None,
                 mongo_host: Optional[pulumi.Input['ResourceMongoHostArgs']] = None,
                 mongo_legacy_host: Optional[pulumi.Input['ResourceMongoLegacyHostArgs']] = None,
                 mongo_legacy_replicaset: Optional[pulumi.Input['ResourceMongoLegacyReplicasetArgs']] = None,
                 mongo_replica_set: Optional[pulumi.Input['ResourceMongoReplicaSetArgs']] = None,
                 mongo_sharded_cluster: Optional[pulumi.Input['ResourceMongoShardedClusterArgs']] = None,
                 mtls_mysql: Optional[pulumi.Input['ResourceMtlsMysqlArgs']] = None,
                 mtls_postgres: Optional[pulumi.Input['ResourceMtlsPostgresArgs']] = None,
                 mysql: Optional[pulumi.Input['ResourceMysqlArgs']] = None,
                 neptune: Optional[pulumi.Input['ResourceNeptuneArgs']] = None,
                 neptune_iam: Optional[pulumi.Input['ResourceNeptuneIamArgs']] = None,
                 oracle: Optional[pulumi.Input['ResourceOracleArgs']] = None,
                 postgres: Optional[pulumi.Input['ResourcePostgresArgs']] = None,
                 presto: Optional[pulumi.Input['ResourcePrestoArgs']] = None,
                 rabbitmq_amqp091: Optional[pulumi.Input['ResourceRabbitmqAmqp091Args']] = None,
                 raw_tcp: Optional[pulumi.Input['ResourceRawTcpArgs']] = None,
                 rdp: Optional[pulumi.Input['ResourceRdpArgs']] = None,
                 rds_postgres_iam: Optional[pulumi.Input['ResourceRdsPostgresIamArgs']] = None,
                 redis: Optional[pulumi.Input['ResourceRedisArgs']] = None,
                 redshift: Optional[pulumi.Input['ResourceRedshiftArgs']] = None,
                 single_store: Optional[pulumi.Input['ResourceSingleStoreArgs']] = None,
                 snowflake: Optional[pulumi.Input['ResourceSnowflakeArgs']] = None,
                 snowsight: Optional[pulumi.Input['ResourceSnowsightArgs']] = None,
                 sql_server: Optional[pulumi.Input['ResourceSqlServerArgs']] = None,
                 sql_server_azure_ad: Optional[pulumi.Input['ResourceSqlServerAzureAdArgs']] = None,
                 sql_server_kerberos_ad: Optional[pulumi.Input['ResourceSqlServerKerberosAdArgs']] = None,
                 ssh: Optional[pulumi.Input['ResourceSshArgs']] = None,
                 ssh_cert: Optional[pulumi.Input['ResourceSshCertArgs']] = None,
                 ssh_customer_key: Optional[pulumi.Input['ResourceSshCustomerKeyArgs']] = None,
                 sybase: Optional[pulumi.Input['ResourceSybaseArgs']] = None,
                 sybase_iq: Optional[pulumi.Input['ResourceSybaseIqArgs']] = None,
                 teradata: Optional[pulumi.Input['ResourceTeradataArgs']] = None,
                 trino: Optional[pulumi.Input['ResourceTrinoArgs']] = None):
        """
        Input properties used for looking up and filtering Resource resources.
        :param pulumi.Input['ResourceAuroraPostgresIamArgs'] aurora_postgres_iam: AuroraPostgresIAM is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input['ResourceMongoHostArgs'] mongo_host: MongoHost is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input['ResourceMongoReplicaSetArgs'] mongo_replica_set: MongoReplicaSet is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input['ResourceMongoShardedClusterArgs'] mongo_sharded_cluster: MongoShardedCluster is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input['ResourceMtlsMysqlArgs'] mtls_mysql: MTLSMysql is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input['ResourceRdsPostgresIamArgs'] rds_postgres_iam: RDSPostgresIAM is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input['ResourceTrinoArgs'] trino: Trino is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        if aks is not None:
            pulumi.set(__self__, "aks", aks)
        if aks_basic_auth is not None:
            pulumi.set(__self__, "aks_basic_auth", aks_basic_auth)
        if aks_service_account is not None:
            pulumi.set(__self__, "aks_service_account", aks_service_account)
        if aks_service_account_user_impersonation is not None:
            pulumi.set(__self__, "aks_service_account_user_impersonation", aks_service_account_user_impersonation)
        if aks_user_impersonation is not None:
            pulumi.set(__self__, "aks_user_impersonation", aks_user_impersonation)
        if amazon_eks is not None:
            pulumi.set(__self__, "amazon_eks", amazon_eks)
        if amazon_eks_instance_profile is not None:
            pulumi.set(__self__, "amazon_eks_instance_profile", amazon_eks_instance_profile)
        if amazon_eks_instance_profile_user_impersonation is not None:
            pulumi.set(__self__, "amazon_eks_instance_profile_user_impersonation", amazon_eks_instance_profile_user_impersonation)
        if amazon_eks_user_impersonation is not None:
            pulumi.set(__self__, "amazon_eks_user_impersonation", amazon_eks_user_impersonation)
        if amazon_es is not None:
            pulumi.set(__self__, "amazon_es", amazon_es)
        if amazonmq_amqp091 is not None:
            pulumi.set(__self__, "amazonmq_amqp091", amazonmq_amqp091)
        if athena is not None:
            pulumi.set(__self__, "athena", athena)
        if aurora_mysql is not None:
            pulumi.set(__self__, "aurora_mysql", aurora_mysql)
        if aurora_postgres is not None:
            pulumi.set(__self__, "aurora_postgres", aurora_postgres)
        if aurora_postgres_iam is not None:
            pulumi.set(__self__, "aurora_postgres_iam", aurora_postgres_iam)
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if aws_console is not None:
            pulumi.set(__self__, "aws_console", aws_console)
        if aws_console_static_key_pair is not None:
            pulumi.set(__self__, "aws_console_static_key_pair", aws_console_static_key_pair)
        if azure is not None:
            pulumi.set(__self__, "azure", azure)
        if azure_certificate is not None:
            pulumi.set(__self__, "azure_certificate", azure_certificate)
        if azure_mysql is not None:
            pulumi.set(__self__, "azure_mysql", azure_mysql)
        if azure_postgres is not None:
            pulumi.set(__self__, "azure_postgres", azure_postgres)
        if azure_postgres_managed_identity is not None:
            pulumi.set(__self__, "azure_postgres_managed_identity", azure_postgres_managed_identity)
        if big_query is not None:
            pulumi.set(__self__, "big_query", big_query)
        if cassandra is not None:
            pulumi.set(__self__, "cassandra", cassandra)
        if citus is not None:
            pulumi.set(__self__, "citus", citus)
        if clustrix is not None:
            pulumi.set(__self__, "clustrix", clustrix)
        if cockroach is not None:
            pulumi.set(__self__, "cockroach", cockroach)
        if db2_i is not None:
            pulumi.set(__self__, "db2_i", db2_i)
        if db2_luw is not None:
            pulumi.set(__self__, "db2_luw", db2_luw)
        if document_db_host is not None:
            pulumi.set(__self__, "document_db_host", document_db_host)
        if document_db_replica_set is not None:
            pulumi.set(__self__, "document_db_replica_set", document_db_replica_set)
        if druid is not None:
            pulumi.set(__self__, "druid", druid)
        if dynamo_db is not None:
            pulumi.set(__self__, "dynamo_db", dynamo_db)
        if elastic is not None:
            pulumi.set(__self__, "elastic", elastic)
        if elasticache_redis is not None:
            pulumi.set(__self__, "elasticache_redis", elasticache_redis)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)
        if google_gke is not None:
            pulumi.set(__self__, "google_gke", google_gke)
        if google_gke_user_impersonation is not None:
            pulumi.set(__self__, "google_gke_user_impersonation", google_gke_user_impersonation)
        if greenplum is not None:
            pulumi.set(__self__, "greenplum", greenplum)
        if http_auth is not None:
            pulumi.set(__self__, "http_auth", http_auth)
        if http_basic_auth is not None:
            pulumi.set(__self__, "http_basic_auth", http_basic_auth)
        if http_no_auth is not None:
            pulumi.set(__self__, "http_no_auth", http_no_auth)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if kubernetes_basic_auth is not None:
            pulumi.set(__self__, "kubernetes_basic_auth", kubernetes_basic_auth)
        if kubernetes_service_account is not None:
            pulumi.set(__self__, "kubernetes_service_account", kubernetes_service_account)
        if kubernetes_service_account_user_impersonation is not None:
            pulumi.set(__self__, "kubernetes_service_account_user_impersonation", kubernetes_service_account_user_impersonation)
        if kubernetes_user_impersonation is not None:
            pulumi.set(__self__, "kubernetes_user_impersonation", kubernetes_user_impersonation)
        if maria is not None:
            pulumi.set(__self__, "maria", maria)
        if memcached is not None:
            pulumi.set(__self__, "memcached", memcached)
        if memsql is not None:
            pulumi.set(__self__, "memsql", memsql)
        if mongo_host is not None:
            pulumi.set(__self__, "mongo_host", mongo_host)
        if mongo_legacy_host is not None:
            pulumi.set(__self__, "mongo_legacy_host", mongo_legacy_host)
        if mongo_legacy_replicaset is not None:
            pulumi.set(__self__, "mongo_legacy_replicaset", mongo_legacy_replicaset)
        if mongo_replica_set is not None:
            pulumi.set(__self__, "mongo_replica_set", mongo_replica_set)
        if mongo_sharded_cluster is not None:
            pulumi.set(__self__, "mongo_sharded_cluster", mongo_sharded_cluster)
        if mtls_mysql is not None:
            pulumi.set(__self__, "mtls_mysql", mtls_mysql)
        if mtls_postgres is not None:
            pulumi.set(__self__, "mtls_postgres", mtls_postgres)
        if mysql is not None:
            pulumi.set(__self__, "mysql", mysql)
        if neptune is not None:
            pulumi.set(__self__, "neptune", neptune)
        if neptune_iam is not None:
            pulumi.set(__self__, "neptune_iam", neptune_iam)
        if oracle is not None:
            pulumi.set(__self__, "oracle", oracle)
        if postgres is not None:
            pulumi.set(__self__, "postgres", postgres)
        if presto is not None:
            pulumi.set(__self__, "presto", presto)
        if rabbitmq_amqp091 is not None:
            pulumi.set(__self__, "rabbitmq_amqp091", rabbitmq_amqp091)
        if raw_tcp is not None:
            pulumi.set(__self__, "raw_tcp", raw_tcp)
        if rdp is not None:
            pulumi.set(__self__, "rdp", rdp)
        if rds_postgres_iam is not None:
            pulumi.set(__self__, "rds_postgres_iam", rds_postgres_iam)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)
        if redshift is not None:
            pulumi.set(__self__, "redshift", redshift)
        if single_store is not None:
            pulumi.set(__self__, "single_store", single_store)
        if snowflake is not None:
            pulumi.set(__self__, "snowflake", snowflake)
        if snowsight is not None:
            pulumi.set(__self__, "snowsight", snowsight)
        if sql_server is not None:
            pulumi.set(__self__, "sql_server", sql_server)
        if sql_server_azure_ad is not None:
            pulumi.set(__self__, "sql_server_azure_ad", sql_server_azure_ad)
        if sql_server_kerberos_ad is not None:
            pulumi.set(__self__, "sql_server_kerberos_ad", sql_server_kerberos_ad)
        if ssh is not None:
            pulumi.set(__self__, "ssh", ssh)
        if ssh_cert is not None:
            pulumi.set(__self__, "ssh_cert", ssh_cert)
        if ssh_customer_key is not None:
            pulumi.set(__self__, "ssh_customer_key", ssh_customer_key)
        if sybase is not None:
            pulumi.set(__self__, "sybase", sybase)
        if sybase_iq is not None:
            pulumi.set(__self__, "sybase_iq", sybase_iq)
        if teradata is not None:
            pulumi.set(__self__, "teradata", teradata)
        if trino is not None:
            pulumi.set(__self__, "trino", trino)

    @property
    @pulumi.getter
    def aks(self) -> Optional[pulumi.Input['ResourceAksArgs']]:
        return pulumi.get(self, "aks")

    @aks.setter
    def aks(self, value: Optional[pulumi.Input['ResourceAksArgs']]):
        pulumi.set(self, "aks", value)

    @property
    @pulumi.getter(name="aksBasicAuth")
    def aks_basic_auth(self) -> Optional[pulumi.Input['ResourceAksBasicAuthArgs']]:
        return pulumi.get(self, "aks_basic_auth")

    @aks_basic_auth.setter
    def aks_basic_auth(self, value: Optional[pulumi.Input['ResourceAksBasicAuthArgs']]):
        pulumi.set(self, "aks_basic_auth", value)

    @property
    @pulumi.getter(name="aksServiceAccount")
    def aks_service_account(self) -> Optional[pulumi.Input['ResourceAksServiceAccountArgs']]:
        return pulumi.get(self, "aks_service_account")

    @aks_service_account.setter
    def aks_service_account(self, value: Optional[pulumi.Input['ResourceAksServiceAccountArgs']]):
        pulumi.set(self, "aks_service_account", value)

    @property
    @pulumi.getter(name="aksServiceAccountUserImpersonation")
    def aks_service_account_user_impersonation(self) -> Optional[pulumi.Input['ResourceAksServiceAccountUserImpersonationArgs']]:
        return pulumi.get(self, "aks_service_account_user_impersonation")

    @aks_service_account_user_impersonation.setter
    def aks_service_account_user_impersonation(self, value: Optional[pulumi.Input['ResourceAksServiceAccountUserImpersonationArgs']]):
        pulumi.set(self, "aks_service_account_user_impersonation", value)

    @property
    @pulumi.getter(name="aksUserImpersonation")
    def aks_user_impersonation(self) -> Optional[pulumi.Input['ResourceAksUserImpersonationArgs']]:
        return pulumi.get(self, "aks_user_impersonation")

    @aks_user_impersonation.setter
    def aks_user_impersonation(self, value: Optional[pulumi.Input['ResourceAksUserImpersonationArgs']]):
        pulumi.set(self, "aks_user_impersonation", value)

    @property
    @pulumi.getter(name="amazonEks")
    def amazon_eks(self) -> Optional[pulumi.Input['ResourceAmazonEksArgs']]:
        return pulumi.get(self, "amazon_eks")

    @amazon_eks.setter
    def amazon_eks(self, value: Optional[pulumi.Input['ResourceAmazonEksArgs']]):
        pulumi.set(self, "amazon_eks", value)

    @property
    @pulumi.getter(name="amazonEksInstanceProfile")
    def amazon_eks_instance_profile(self) -> Optional[pulumi.Input['ResourceAmazonEksInstanceProfileArgs']]:
        return pulumi.get(self, "amazon_eks_instance_profile")

    @amazon_eks_instance_profile.setter
    def amazon_eks_instance_profile(self, value: Optional[pulumi.Input['ResourceAmazonEksInstanceProfileArgs']]):
        pulumi.set(self, "amazon_eks_instance_profile", value)

    @property
    @pulumi.getter(name="amazonEksInstanceProfileUserImpersonation")
    def amazon_eks_instance_profile_user_impersonation(self) -> Optional[pulumi.Input['ResourceAmazonEksInstanceProfileUserImpersonationArgs']]:
        return pulumi.get(self, "amazon_eks_instance_profile_user_impersonation")

    @amazon_eks_instance_profile_user_impersonation.setter
    def amazon_eks_instance_profile_user_impersonation(self, value: Optional[pulumi.Input['ResourceAmazonEksInstanceProfileUserImpersonationArgs']]):
        pulumi.set(self, "amazon_eks_instance_profile_user_impersonation", value)

    @property
    @pulumi.getter(name="amazonEksUserImpersonation")
    def amazon_eks_user_impersonation(self) -> Optional[pulumi.Input['ResourceAmazonEksUserImpersonationArgs']]:
        return pulumi.get(self, "amazon_eks_user_impersonation")

    @amazon_eks_user_impersonation.setter
    def amazon_eks_user_impersonation(self, value: Optional[pulumi.Input['ResourceAmazonEksUserImpersonationArgs']]):
        pulumi.set(self, "amazon_eks_user_impersonation", value)

    @property
    @pulumi.getter(name="amazonEs")
    def amazon_es(self) -> Optional[pulumi.Input['ResourceAmazonEsArgs']]:
        return pulumi.get(self, "amazon_es")

    @amazon_es.setter
    def amazon_es(self, value: Optional[pulumi.Input['ResourceAmazonEsArgs']]):
        pulumi.set(self, "amazon_es", value)

    @property
    @pulumi.getter(name="amazonmqAmqp091")
    def amazonmq_amqp091(self) -> Optional[pulumi.Input['ResourceAmazonmqAmqp091Args']]:
        return pulumi.get(self, "amazonmq_amqp091")

    @amazonmq_amqp091.setter
    def amazonmq_amqp091(self, value: Optional[pulumi.Input['ResourceAmazonmqAmqp091Args']]):
        pulumi.set(self, "amazonmq_amqp091", value)

    @property
    @pulumi.getter
    def athena(self) -> Optional[pulumi.Input['ResourceAthenaArgs']]:
        return pulumi.get(self, "athena")

    @athena.setter
    def athena(self, value: Optional[pulumi.Input['ResourceAthenaArgs']]):
        pulumi.set(self, "athena", value)

    @property
    @pulumi.getter(name="auroraMysql")
    def aurora_mysql(self) -> Optional[pulumi.Input['ResourceAuroraMysqlArgs']]:
        return pulumi.get(self, "aurora_mysql")

    @aurora_mysql.setter
    def aurora_mysql(self, value: Optional[pulumi.Input['ResourceAuroraMysqlArgs']]):
        pulumi.set(self, "aurora_mysql", value)

    @property
    @pulumi.getter(name="auroraPostgres")
    def aurora_postgres(self) -> Optional[pulumi.Input['ResourceAuroraPostgresArgs']]:
        return pulumi.get(self, "aurora_postgres")

    @aurora_postgres.setter
    def aurora_postgres(self, value: Optional[pulumi.Input['ResourceAuroraPostgresArgs']]):
        pulumi.set(self, "aurora_postgres", value)

    @property
    @pulumi.getter(name="auroraPostgresIam")
    def aurora_postgres_iam(self) -> Optional[pulumi.Input['ResourceAuroraPostgresIamArgs']]:
        """
        AuroraPostgresIAM is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "aurora_postgres_iam")

    @aurora_postgres_iam.setter
    def aurora_postgres_iam(self, value: Optional[pulumi.Input['ResourceAuroraPostgresIamArgs']]):
        pulumi.set(self, "aurora_postgres_iam", value)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['ResourceAwsArgs']]:
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['ResourceAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter(name="awsConsole")
    def aws_console(self) -> Optional[pulumi.Input['ResourceAwsConsoleArgs']]:
        return pulumi.get(self, "aws_console")

    @aws_console.setter
    def aws_console(self, value: Optional[pulumi.Input['ResourceAwsConsoleArgs']]):
        pulumi.set(self, "aws_console", value)

    @property
    @pulumi.getter(name="awsConsoleStaticKeyPair")
    def aws_console_static_key_pair(self) -> Optional[pulumi.Input['ResourceAwsConsoleStaticKeyPairArgs']]:
        return pulumi.get(self, "aws_console_static_key_pair")

    @aws_console_static_key_pair.setter
    def aws_console_static_key_pair(self, value: Optional[pulumi.Input['ResourceAwsConsoleStaticKeyPairArgs']]):
        pulumi.set(self, "aws_console_static_key_pair", value)

    @property
    @pulumi.getter
    def azure(self) -> Optional[pulumi.Input['ResourceAzureArgs']]:
        return pulumi.get(self, "azure")

    @azure.setter
    def azure(self, value: Optional[pulumi.Input['ResourceAzureArgs']]):
        pulumi.set(self, "azure", value)

    @property
    @pulumi.getter(name="azureCertificate")
    def azure_certificate(self) -> Optional[pulumi.Input['ResourceAzureCertificateArgs']]:
        return pulumi.get(self, "azure_certificate")

    @azure_certificate.setter
    def azure_certificate(self, value: Optional[pulumi.Input['ResourceAzureCertificateArgs']]):
        pulumi.set(self, "azure_certificate", value)

    @property
    @pulumi.getter(name="azureMysql")
    def azure_mysql(self) -> Optional[pulumi.Input['ResourceAzureMysqlArgs']]:
        return pulumi.get(self, "azure_mysql")

    @azure_mysql.setter
    def azure_mysql(self, value: Optional[pulumi.Input['ResourceAzureMysqlArgs']]):
        pulumi.set(self, "azure_mysql", value)

    @property
    @pulumi.getter(name="azurePostgres")
    def azure_postgres(self) -> Optional[pulumi.Input['ResourceAzurePostgresArgs']]:
        return pulumi.get(self, "azure_postgres")

    @azure_postgres.setter
    def azure_postgres(self, value: Optional[pulumi.Input['ResourceAzurePostgresArgs']]):
        pulumi.set(self, "azure_postgres", value)

    @property
    @pulumi.getter(name="azurePostgresManagedIdentity")
    def azure_postgres_managed_identity(self) -> Optional[pulumi.Input['ResourceAzurePostgresManagedIdentityArgs']]:
        return pulumi.get(self, "azure_postgres_managed_identity")

    @azure_postgres_managed_identity.setter
    def azure_postgres_managed_identity(self, value: Optional[pulumi.Input['ResourceAzurePostgresManagedIdentityArgs']]):
        pulumi.set(self, "azure_postgres_managed_identity", value)

    @property
    @pulumi.getter(name="bigQuery")
    def big_query(self) -> Optional[pulumi.Input['ResourceBigQueryArgs']]:
        return pulumi.get(self, "big_query")

    @big_query.setter
    def big_query(self, value: Optional[pulumi.Input['ResourceBigQueryArgs']]):
        pulumi.set(self, "big_query", value)

    @property
    @pulumi.getter
    def cassandra(self) -> Optional[pulumi.Input['ResourceCassandraArgs']]:
        return pulumi.get(self, "cassandra")

    @cassandra.setter
    def cassandra(self, value: Optional[pulumi.Input['ResourceCassandraArgs']]):
        pulumi.set(self, "cassandra", value)

    @property
    @pulumi.getter
    def citus(self) -> Optional[pulumi.Input['ResourceCitusArgs']]:
        return pulumi.get(self, "citus")

    @citus.setter
    def citus(self, value: Optional[pulumi.Input['ResourceCitusArgs']]):
        pulumi.set(self, "citus", value)

    @property
    @pulumi.getter
    def clustrix(self) -> Optional[pulumi.Input['ResourceClustrixArgs']]:
        return pulumi.get(self, "clustrix")

    @clustrix.setter
    def clustrix(self, value: Optional[pulumi.Input['ResourceClustrixArgs']]):
        pulumi.set(self, "clustrix", value)

    @property
    @pulumi.getter
    def cockroach(self) -> Optional[pulumi.Input['ResourceCockroachArgs']]:
        return pulumi.get(self, "cockroach")

    @cockroach.setter
    def cockroach(self, value: Optional[pulumi.Input['ResourceCockroachArgs']]):
        pulumi.set(self, "cockroach", value)

    @property
    @pulumi.getter(name="db2I")
    def db2_i(self) -> Optional[pulumi.Input['ResourceDb2IArgs']]:
        return pulumi.get(self, "db2_i")

    @db2_i.setter
    def db2_i(self, value: Optional[pulumi.Input['ResourceDb2IArgs']]):
        pulumi.set(self, "db2_i", value)

    @property
    @pulumi.getter(name="db2Luw")
    def db2_luw(self) -> Optional[pulumi.Input['ResourceDb2LuwArgs']]:
        return pulumi.get(self, "db2_luw")

    @db2_luw.setter
    def db2_luw(self, value: Optional[pulumi.Input['ResourceDb2LuwArgs']]):
        pulumi.set(self, "db2_luw", value)

    @property
    @pulumi.getter(name="documentDbHost")
    def document_db_host(self) -> Optional[pulumi.Input['ResourceDocumentDbHostArgs']]:
        return pulumi.get(self, "document_db_host")

    @document_db_host.setter
    def document_db_host(self, value: Optional[pulumi.Input['ResourceDocumentDbHostArgs']]):
        pulumi.set(self, "document_db_host", value)

    @property
    @pulumi.getter(name="documentDbReplicaSet")
    def document_db_replica_set(self) -> Optional[pulumi.Input['ResourceDocumentDbReplicaSetArgs']]:
        return pulumi.get(self, "document_db_replica_set")

    @document_db_replica_set.setter
    def document_db_replica_set(self, value: Optional[pulumi.Input['ResourceDocumentDbReplicaSetArgs']]):
        pulumi.set(self, "document_db_replica_set", value)

    @property
    @pulumi.getter
    def druid(self) -> Optional[pulumi.Input['ResourceDruidArgs']]:
        return pulumi.get(self, "druid")

    @druid.setter
    def druid(self, value: Optional[pulumi.Input['ResourceDruidArgs']]):
        pulumi.set(self, "druid", value)

    @property
    @pulumi.getter(name="dynamoDb")
    def dynamo_db(self) -> Optional[pulumi.Input['ResourceDynamoDbArgs']]:
        return pulumi.get(self, "dynamo_db")

    @dynamo_db.setter
    def dynamo_db(self, value: Optional[pulumi.Input['ResourceDynamoDbArgs']]):
        pulumi.set(self, "dynamo_db", value)

    @property
    @pulumi.getter
    def elastic(self) -> Optional[pulumi.Input['ResourceElasticArgs']]:
        return pulumi.get(self, "elastic")

    @elastic.setter
    def elastic(self, value: Optional[pulumi.Input['ResourceElasticArgs']]):
        pulumi.set(self, "elastic", value)

    @property
    @pulumi.getter(name="elasticacheRedis")
    def elasticache_redis(self) -> Optional[pulumi.Input['ResourceElasticacheRedisArgs']]:
        return pulumi.get(self, "elasticache_redis")

    @elasticache_redis.setter
    def elasticache_redis(self, value: Optional[pulumi.Input['ResourceElasticacheRedisArgs']]):
        pulumi.set(self, "elasticache_redis", value)

    @property
    @pulumi.getter
    def gcp(self) -> Optional[pulumi.Input['ResourceGcpArgs']]:
        return pulumi.get(self, "gcp")

    @gcp.setter
    def gcp(self, value: Optional[pulumi.Input['ResourceGcpArgs']]):
        pulumi.set(self, "gcp", value)

    @property
    @pulumi.getter(name="googleGke")
    def google_gke(self) -> Optional[pulumi.Input['ResourceGoogleGkeArgs']]:
        return pulumi.get(self, "google_gke")

    @google_gke.setter
    def google_gke(self, value: Optional[pulumi.Input['ResourceGoogleGkeArgs']]):
        pulumi.set(self, "google_gke", value)

    @property
    @pulumi.getter(name="googleGkeUserImpersonation")
    def google_gke_user_impersonation(self) -> Optional[pulumi.Input['ResourceGoogleGkeUserImpersonationArgs']]:
        return pulumi.get(self, "google_gke_user_impersonation")

    @google_gke_user_impersonation.setter
    def google_gke_user_impersonation(self, value: Optional[pulumi.Input['ResourceGoogleGkeUserImpersonationArgs']]):
        pulumi.set(self, "google_gke_user_impersonation", value)

    @property
    @pulumi.getter
    def greenplum(self) -> Optional[pulumi.Input['ResourceGreenplumArgs']]:
        return pulumi.get(self, "greenplum")

    @greenplum.setter
    def greenplum(self, value: Optional[pulumi.Input['ResourceGreenplumArgs']]):
        pulumi.set(self, "greenplum", value)

    @property
    @pulumi.getter(name="httpAuth")
    def http_auth(self) -> Optional[pulumi.Input['ResourceHttpAuthArgs']]:
        return pulumi.get(self, "http_auth")

    @http_auth.setter
    def http_auth(self, value: Optional[pulumi.Input['ResourceHttpAuthArgs']]):
        pulumi.set(self, "http_auth", value)

    @property
    @pulumi.getter(name="httpBasicAuth")
    def http_basic_auth(self) -> Optional[pulumi.Input['ResourceHttpBasicAuthArgs']]:
        return pulumi.get(self, "http_basic_auth")

    @http_basic_auth.setter
    def http_basic_auth(self, value: Optional[pulumi.Input['ResourceHttpBasicAuthArgs']]):
        pulumi.set(self, "http_basic_auth", value)

    @property
    @pulumi.getter(name="httpNoAuth")
    def http_no_auth(self) -> Optional[pulumi.Input['ResourceHttpNoAuthArgs']]:
        return pulumi.get(self, "http_no_auth")

    @http_no_auth.setter
    def http_no_auth(self, value: Optional[pulumi.Input['ResourceHttpNoAuthArgs']]):
        pulumi.set(self, "http_no_auth", value)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[pulumi.Input['ResourceKubernetesArgs']]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: Optional[pulumi.Input['ResourceKubernetesArgs']]):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter(name="kubernetesBasicAuth")
    def kubernetes_basic_auth(self) -> Optional[pulumi.Input['ResourceKubernetesBasicAuthArgs']]:
        return pulumi.get(self, "kubernetes_basic_auth")

    @kubernetes_basic_auth.setter
    def kubernetes_basic_auth(self, value: Optional[pulumi.Input['ResourceKubernetesBasicAuthArgs']]):
        pulumi.set(self, "kubernetes_basic_auth", value)

    @property
    @pulumi.getter(name="kubernetesServiceAccount")
    def kubernetes_service_account(self) -> Optional[pulumi.Input['ResourceKubernetesServiceAccountArgs']]:
        return pulumi.get(self, "kubernetes_service_account")

    @kubernetes_service_account.setter
    def kubernetes_service_account(self, value: Optional[pulumi.Input['ResourceKubernetesServiceAccountArgs']]):
        pulumi.set(self, "kubernetes_service_account", value)

    @property
    @pulumi.getter(name="kubernetesServiceAccountUserImpersonation")
    def kubernetes_service_account_user_impersonation(self) -> Optional[pulumi.Input['ResourceKubernetesServiceAccountUserImpersonationArgs']]:
        return pulumi.get(self, "kubernetes_service_account_user_impersonation")

    @kubernetes_service_account_user_impersonation.setter
    def kubernetes_service_account_user_impersonation(self, value: Optional[pulumi.Input['ResourceKubernetesServiceAccountUserImpersonationArgs']]):
        pulumi.set(self, "kubernetes_service_account_user_impersonation", value)

    @property
    @pulumi.getter(name="kubernetesUserImpersonation")
    def kubernetes_user_impersonation(self) -> Optional[pulumi.Input['ResourceKubernetesUserImpersonationArgs']]:
        return pulumi.get(self, "kubernetes_user_impersonation")

    @kubernetes_user_impersonation.setter
    def kubernetes_user_impersonation(self, value: Optional[pulumi.Input['ResourceKubernetesUserImpersonationArgs']]):
        pulumi.set(self, "kubernetes_user_impersonation", value)

    @property
    @pulumi.getter
    def maria(self) -> Optional[pulumi.Input['ResourceMariaArgs']]:
        return pulumi.get(self, "maria")

    @maria.setter
    def maria(self, value: Optional[pulumi.Input['ResourceMariaArgs']]):
        pulumi.set(self, "maria", value)

    @property
    @pulumi.getter
    def memcached(self) -> Optional[pulumi.Input['ResourceMemcachedArgs']]:
        return pulumi.get(self, "memcached")

    @memcached.setter
    def memcached(self, value: Optional[pulumi.Input['ResourceMemcachedArgs']]):
        pulumi.set(self, "memcached", value)

    @property
    @pulumi.getter
    def memsql(self) -> Optional[pulumi.Input['ResourceMemsqlArgs']]:
        return pulumi.get(self, "memsql")

    @memsql.setter
    def memsql(self, value: Optional[pulumi.Input['ResourceMemsqlArgs']]):
        pulumi.set(self, "memsql", value)

    @property
    @pulumi.getter(name="mongoHost")
    def mongo_host(self) -> Optional[pulumi.Input['ResourceMongoHostArgs']]:
        """
        MongoHost is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "mongo_host")

    @mongo_host.setter
    def mongo_host(self, value: Optional[pulumi.Input['ResourceMongoHostArgs']]):
        pulumi.set(self, "mongo_host", value)

    @property
    @pulumi.getter(name="mongoLegacyHost")
    def mongo_legacy_host(self) -> Optional[pulumi.Input['ResourceMongoLegacyHostArgs']]:
        return pulumi.get(self, "mongo_legacy_host")

    @mongo_legacy_host.setter
    def mongo_legacy_host(self, value: Optional[pulumi.Input['ResourceMongoLegacyHostArgs']]):
        pulumi.set(self, "mongo_legacy_host", value)

    @property
    @pulumi.getter(name="mongoLegacyReplicaset")
    def mongo_legacy_replicaset(self) -> Optional[pulumi.Input['ResourceMongoLegacyReplicasetArgs']]:
        return pulumi.get(self, "mongo_legacy_replicaset")

    @mongo_legacy_replicaset.setter
    def mongo_legacy_replicaset(self, value: Optional[pulumi.Input['ResourceMongoLegacyReplicasetArgs']]):
        pulumi.set(self, "mongo_legacy_replicaset", value)

    @property
    @pulumi.getter(name="mongoReplicaSet")
    def mongo_replica_set(self) -> Optional[pulumi.Input['ResourceMongoReplicaSetArgs']]:
        """
        MongoReplicaSet is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "mongo_replica_set")

    @mongo_replica_set.setter
    def mongo_replica_set(self, value: Optional[pulumi.Input['ResourceMongoReplicaSetArgs']]):
        pulumi.set(self, "mongo_replica_set", value)

    @property
    @pulumi.getter(name="mongoShardedCluster")
    def mongo_sharded_cluster(self) -> Optional[pulumi.Input['ResourceMongoShardedClusterArgs']]:
        """
        MongoShardedCluster is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "mongo_sharded_cluster")

    @mongo_sharded_cluster.setter
    def mongo_sharded_cluster(self, value: Optional[pulumi.Input['ResourceMongoShardedClusterArgs']]):
        pulumi.set(self, "mongo_sharded_cluster", value)

    @property
    @pulumi.getter(name="mtlsMysql")
    def mtls_mysql(self) -> Optional[pulumi.Input['ResourceMtlsMysqlArgs']]:
        """
        MTLSMysql is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "mtls_mysql")

    @mtls_mysql.setter
    def mtls_mysql(self, value: Optional[pulumi.Input['ResourceMtlsMysqlArgs']]):
        pulumi.set(self, "mtls_mysql", value)

    @property
    @pulumi.getter(name="mtlsPostgres")
    def mtls_postgres(self) -> Optional[pulumi.Input['ResourceMtlsPostgresArgs']]:
        return pulumi.get(self, "mtls_postgres")

    @mtls_postgres.setter
    def mtls_postgres(self, value: Optional[pulumi.Input['ResourceMtlsPostgresArgs']]):
        pulumi.set(self, "mtls_postgres", value)

    @property
    @pulumi.getter
    def mysql(self) -> Optional[pulumi.Input['ResourceMysqlArgs']]:
        return pulumi.get(self, "mysql")

    @mysql.setter
    def mysql(self, value: Optional[pulumi.Input['ResourceMysqlArgs']]):
        pulumi.set(self, "mysql", value)

    @property
    @pulumi.getter
    def neptune(self) -> Optional[pulumi.Input['ResourceNeptuneArgs']]:
        return pulumi.get(self, "neptune")

    @neptune.setter
    def neptune(self, value: Optional[pulumi.Input['ResourceNeptuneArgs']]):
        pulumi.set(self, "neptune", value)

    @property
    @pulumi.getter(name="neptuneIam")
    def neptune_iam(self) -> Optional[pulumi.Input['ResourceNeptuneIamArgs']]:
        return pulumi.get(self, "neptune_iam")

    @neptune_iam.setter
    def neptune_iam(self, value: Optional[pulumi.Input['ResourceNeptuneIamArgs']]):
        pulumi.set(self, "neptune_iam", value)

    @property
    @pulumi.getter
    def oracle(self) -> Optional[pulumi.Input['ResourceOracleArgs']]:
        return pulumi.get(self, "oracle")

    @oracle.setter
    def oracle(self, value: Optional[pulumi.Input['ResourceOracleArgs']]):
        pulumi.set(self, "oracle", value)

    @property
    @pulumi.getter
    def postgres(self) -> Optional[pulumi.Input['ResourcePostgresArgs']]:
        return pulumi.get(self, "postgres")

    @postgres.setter
    def postgres(self, value: Optional[pulumi.Input['ResourcePostgresArgs']]):
        pulumi.set(self, "postgres", value)

    @property
    @pulumi.getter
    def presto(self) -> Optional[pulumi.Input['ResourcePrestoArgs']]:
        return pulumi.get(self, "presto")

    @presto.setter
    def presto(self, value: Optional[pulumi.Input['ResourcePrestoArgs']]):
        pulumi.set(self, "presto", value)

    @property
    @pulumi.getter(name="rabbitmqAmqp091")
    def rabbitmq_amqp091(self) -> Optional[pulumi.Input['ResourceRabbitmqAmqp091Args']]:
        return pulumi.get(self, "rabbitmq_amqp091")

    @rabbitmq_amqp091.setter
    def rabbitmq_amqp091(self, value: Optional[pulumi.Input['ResourceRabbitmqAmqp091Args']]):
        pulumi.set(self, "rabbitmq_amqp091", value)

    @property
    @pulumi.getter(name="rawTcp")
    def raw_tcp(self) -> Optional[pulumi.Input['ResourceRawTcpArgs']]:
        return pulumi.get(self, "raw_tcp")

    @raw_tcp.setter
    def raw_tcp(self, value: Optional[pulumi.Input['ResourceRawTcpArgs']]):
        pulumi.set(self, "raw_tcp", value)

    @property
    @pulumi.getter
    def rdp(self) -> Optional[pulumi.Input['ResourceRdpArgs']]:
        return pulumi.get(self, "rdp")

    @rdp.setter
    def rdp(self, value: Optional[pulumi.Input['ResourceRdpArgs']]):
        pulumi.set(self, "rdp", value)

    @property
    @pulumi.getter(name="rdsPostgresIam")
    def rds_postgres_iam(self) -> Optional[pulumi.Input['ResourceRdsPostgresIamArgs']]:
        """
        RDSPostgresIAM is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "rds_postgres_iam")

    @rds_postgres_iam.setter
    def rds_postgres_iam(self, value: Optional[pulumi.Input['ResourceRdsPostgresIamArgs']]):
        pulumi.set(self, "rds_postgres_iam", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[pulumi.Input['ResourceRedisArgs']]:
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[pulumi.Input['ResourceRedisArgs']]):
        pulumi.set(self, "redis", value)

    @property
    @pulumi.getter
    def redshift(self) -> Optional[pulumi.Input['ResourceRedshiftArgs']]:
        return pulumi.get(self, "redshift")

    @redshift.setter
    def redshift(self, value: Optional[pulumi.Input['ResourceRedshiftArgs']]):
        pulumi.set(self, "redshift", value)

    @property
    @pulumi.getter(name="singleStore")
    def single_store(self) -> Optional[pulumi.Input['ResourceSingleStoreArgs']]:
        return pulumi.get(self, "single_store")

    @single_store.setter
    def single_store(self, value: Optional[pulumi.Input['ResourceSingleStoreArgs']]):
        pulumi.set(self, "single_store", value)

    @property
    @pulumi.getter
    def snowflake(self) -> Optional[pulumi.Input['ResourceSnowflakeArgs']]:
        return pulumi.get(self, "snowflake")

    @snowflake.setter
    def snowflake(self, value: Optional[pulumi.Input['ResourceSnowflakeArgs']]):
        pulumi.set(self, "snowflake", value)

    @property
    @pulumi.getter
    def snowsight(self) -> Optional[pulumi.Input['ResourceSnowsightArgs']]:
        return pulumi.get(self, "snowsight")

    @snowsight.setter
    def snowsight(self, value: Optional[pulumi.Input['ResourceSnowsightArgs']]):
        pulumi.set(self, "snowsight", value)

    @property
    @pulumi.getter(name="sqlServer")
    def sql_server(self) -> Optional[pulumi.Input['ResourceSqlServerArgs']]:
        return pulumi.get(self, "sql_server")

    @sql_server.setter
    def sql_server(self, value: Optional[pulumi.Input['ResourceSqlServerArgs']]):
        pulumi.set(self, "sql_server", value)

    @property
    @pulumi.getter(name="sqlServerAzureAd")
    def sql_server_azure_ad(self) -> Optional[pulumi.Input['ResourceSqlServerAzureAdArgs']]:
        return pulumi.get(self, "sql_server_azure_ad")

    @sql_server_azure_ad.setter
    def sql_server_azure_ad(self, value: Optional[pulumi.Input['ResourceSqlServerAzureAdArgs']]):
        pulumi.set(self, "sql_server_azure_ad", value)

    @property
    @pulumi.getter(name="sqlServerKerberosAd")
    def sql_server_kerberos_ad(self) -> Optional[pulumi.Input['ResourceSqlServerKerberosAdArgs']]:
        return pulumi.get(self, "sql_server_kerberos_ad")

    @sql_server_kerberos_ad.setter
    def sql_server_kerberos_ad(self, value: Optional[pulumi.Input['ResourceSqlServerKerberosAdArgs']]):
        pulumi.set(self, "sql_server_kerberos_ad", value)

    @property
    @pulumi.getter
    def ssh(self) -> Optional[pulumi.Input['ResourceSshArgs']]:
        return pulumi.get(self, "ssh")

    @ssh.setter
    def ssh(self, value: Optional[pulumi.Input['ResourceSshArgs']]):
        pulumi.set(self, "ssh", value)

    @property
    @pulumi.getter(name="sshCert")
    def ssh_cert(self) -> Optional[pulumi.Input['ResourceSshCertArgs']]:
        return pulumi.get(self, "ssh_cert")

    @ssh_cert.setter
    def ssh_cert(self, value: Optional[pulumi.Input['ResourceSshCertArgs']]):
        pulumi.set(self, "ssh_cert", value)

    @property
    @pulumi.getter(name="sshCustomerKey")
    def ssh_customer_key(self) -> Optional[pulumi.Input['ResourceSshCustomerKeyArgs']]:
        return pulumi.get(self, "ssh_customer_key")

    @ssh_customer_key.setter
    def ssh_customer_key(self, value: Optional[pulumi.Input['ResourceSshCustomerKeyArgs']]):
        pulumi.set(self, "ssh_customer_key", value)

    @property
    @pulumi.getter
    def sybase(self) -> Optional[pulumi.Input['ResourceSybaseArgs']]:
        return pulumi.get(self, "sybase")

    @sybase.setter
    def sybase(self, value: Optional[pulumi.Input['ResourceSybaseArgs']]):
        pulumi.set(self, "sybase", value)

    @property
    @pulumi.getter(name="sybaseIq")
    def sybase_iq(self) -> Optional[pulumi.Input['ResourceSybaseIqArgs']]:
        return pulumi.get(self, "sybase_iq")

    @sybase_iq.setter
    def sybase_iq(self, value: Optional[pulumi.Input['ResourceSybaseIqArgs']]):
        pulumi.set(self, "sybase_iq", value)

    @property
    @pulumi.getter
    def teradata(self) -> Optional[pulumi.Input['ResourceTeradataArgs']]:
        return pulumi.get(self, "teradata")

    @teradata.setter
    def teradata(self, value: Optional[pulumi.Input['ResourceTeradataArgs']]):
        pulumi.set(self, "teradata", value)

    @property
    @pulumi.getter
    def trino(self) -> Optional[pulumi.Input['ResourceTrinoArgs']]:
        """
        Trino is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "trino")

    @trino.setter
    def trino(self, value: Optional[pulumi.Input['ResourceTrinoArgs']]):
        pulumi.set(self, "trino", value)


class Resource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aks: Optional[pulumi.Input[pulumi.InputType['ResourceAksArgs']]] = None,
                 aks_basic_auth: Optional[pulumi.Input[pulumi.InputType['ResourceAksBasicAuthArgs']]] = None,
                 aks_service_account: Optional[pulumi.Input[pulumi.InputType['ResourceAksServiceAccountArgs']]] = None,
                 aks_service_account_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceAksServiceAccountUserImpersonationArgs']]] = None,
                 aks_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceAksUserImpersonationArgs']]] = None,
                 amazon_eks: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonEksArgs']]] = None,
                 amazon_eks_instance_profile: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonEksInstanceProfileArgs']]] = None,
                 amazon_eks_instance_profile_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonEksInstanceProfileUserImpersonationArgs']]] = None,
                 amazon_eks_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonEksUserImpersonationArgs']]] = None,
                 amazon_es: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonEsArgs']]] = None,
                 amazonmq_amqp091: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonmqAmqp091Args']]] = None,
                 athena: Optional[pulumi.Input[pulumi.InputType['ResourceAthenaArgs']]] = None,
                 aurora_mysql: Optional[pulumi.Input[pulumi.InputType['ResourceAuroraMysqlArgs']]] = None,
                 aurora_postgres: Optional[pulumi.Input[pulumi.InputType['ResourceAuroraPostgresArgs']]] = None,
                 aurora_postgres_iam: Optional[pulumi.Input[pulumi.InputType['ResourceAuroraPostgresIamArgs']]] = None,
                 aws: Optional[pulumi.Input[pulumi.InputType['ResourceAwsArgs']]] = None,
                 aws_console: Optional[pulumi.Input[pulumi.InputType['ResourceAwsConsoleArgs']]] = None,
                 aws_console_static_key_pair: Optional[pulumi.Input[pulumi.InputType['ResourceAwsConsoleStaticKeyPairArgs']]] = None,
                 azure: Optional[pulumi.Input[pulumi.InputType['ResourceAzureArgs']]] = None,
                 azure_certificate: Optional[pulumi.Input[pulumi.InputType['ResourceAzureCertificateArgs']]] = None,
                 azure_mysql: Optional[pulumi.Input[pulumi.InputType['ResourceAzureMysqlArgs']]] = None,
                 azure_postgres: Optional[pulumi.Input[pulumi.InputType['ResourceAzurePostgresArgs']]] = None,
                 azure_postgres_managed_identity: Optional[pulumi.Input[pulumi.InputType['ResourceAzurePostgresManagedIdentityArgs']]] = None,
                 big_query: Optional[pulumi.Input[pulumi.InputType['ResourceBigQueryArgs']]] = None,
                 cassandra: Optional[pulumi.Input[pulumi.InputType['ResourceCassandraArgs']]] = None,
                 citus: Optional[pulumi.Input[pulumi.InputType['ResourceCitusArgs']]] = None,
                 clustrix: Optional[pulumi.Input[pulumi.InputType['ResourceClustrixArgs']]] = None,
                 cockroach: Optional[pulumi.Input[pulumi.InputType['ResourceCockroachArgs']]] = None,
                 db2_i: Optional[pulumi.Input[pulumi.InputType['ResourceDb2IArgs']]] = None,
                 db2_luw: Optional[pulumi.Input[pulumi.InputType['ResourceDb2LuwArgs']]] = None,
                 document_db_host: Optional[pulumi.Input[pulumi.InputType['ResourceDocumentDbHostArgs']]] = None,
                 document_db_replica_set: Optional[pulumi.Input[pulumi.InputType['ResourceDocumentDbReplicaSetArgs']]] = None,
                 druid: Optional[pulumi.Input[pulumi.InputType['ResourceDruidArgs']]] = None,
                 dynamo_db: Optional[pulumi.Input[pulumi.InputType['ResourceDynamoDbArgs']]] = None,
                 elastic: Optional[pulumi.Input[pulumi.InputType['ResourceElasticArgs']]] = None,
                 elasticache_redis: Optional[pulumi.Input[pulumi.InputType['ResourceElasticacheRedisArgs']]] = None,
                 gcp: Optional[pulumi.Input[pulumi.InputType['ResourceGcpArgs']]] = None,
                 google_gke: Optional[pulumi.Input[pulumi.InputType['ResourceGoogleGkeArgs']]] = None,
                 google_gke_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceGoogleGkeUserImpersonationArgs']]] = None,
                 greenplum: Optional[pulumi.Input[pulumi.InputType['ResourceGreenplumArgs']]] = None,
                 http_auth: Optional[pulumi.Input[pulumi.InputType['ResourceHttpAuthArgs']]] = None,
                 http_basic_auth: Optional[pulumi.Input[pulumi.InputType['ResourceHttpBasicAuthArgs']]] = None,
                 http_no_auth: Optional[pulumi.Input[pulumi.InputType['ResourceHttpNoAuthArgs']]] = None,
                 kubernetes: Optional[pulumi.Input[pulumi.InputType['ResourceKubernetesArgs']]] = None,
                 kubernetes_basic_auth: Optional[pulumi.Input[pulumi.InputType['ResourceKubernetesBasicAuthArgs']]] = None,
                 kubernetes_service_account: Optional[pulumi.Input[pulumi.InputType['ResourceKubernetesServiceAccountArgs']]] = None,
                 kubernetes_service_account_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceKubernetesServiceAccountUserImpersonationArgs']]] = None,
                 kubernetes_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceKubernetesUserImpersonationArgs']]] = None,
                 maria: Optional[pulumi.Input[pulumi.InputType['ResourceMariaArgs']]] = None,
                 memcached: Optional[pulumi.Input[pulumi.InputType['ResourceMemcachedArgs']]] = None,
                 memsql: Optional[pulumi.Input[pulumi.InputType['ResourceMemsqlArgs']]] = None,
                 mongo_host: Optional[pulumi.Input[pulumi.InputType['ResourceMongoHostArgs']]] = None,
                 mongo_legacy_host: Optional[pulumi.Input[pulumi.InputType['ResourceMongoLegacyHostArgs']]] = None,
                 mongo_legacy_replicaset: Optional[pulumi.Input[pulumi.InputType['ResourceMongoLegacyReplicasetArgs']]] = None,
                 mongo_replica_set: Optional[pulumi.Input[pulumi.InputType['ResourceMongoReplicaSetArgs']]] = None,
                 mongo_sharded_cluster: Optional[pulumi.Input[pulumi.InputType['ResourceMongoShardedClusterArgs']]] = None,
                 mtls_mysql: Optional[pulumi.Input[pulumi.InputType['ResourceMtlsMysqlArgs']]] = None,
                 mtls_postgres: Optional[pulumi.Input[pulumi.InputType['ResourceMtlsPostgresArgs']]] = None,
                 mysql: Optional[pulumi.Input[pulumi.InputType['ResourceMysqlArgs']]] = None,
                 neptune: Optional[pulumi.Input[pulumi.InputType['ResourceNeptuneArgs']]] = None,
                 neptune_iam: Optional[pulumi.Input[pulumi.InputType['ResourceNeptuneIamArgs']]] = None,
                 oracle: Optional[pulumi.Input[pulumi.InputType['ResourceOracleArgs']]] = None,
                 postgres: Optional[pulumi.Input[pulumi.InputType['ResourcePostgresArgs']]] = None,
                 presto: Optional[pulumi.Input[pulumi.InputType['ResourcePrestoArgs']]] = None,
                 rabbitmq_amqp091: Optional[pulumi.Input[pulumi.InputType['ResourceRabbitmqAmqp091Args']]] = None,
                 raw_tcp: Optional[pulumi.Input[pulumi.InputType['ResourceRawTcpArgs']]] = None,
                 rdp: Optional[pulumi.Input[pulumi.InputType['ResourceRdpArgs']]] = None,
                 rds_postgres_iam: Optional[pulumi.Input[pulumi.InputType['ResourceRdsPostgresIamArgs']]] = None,
                 redis: Optional[pulumi.Input[pulumi.InputType['ResourceRedisArgs']]] = None,
                 redshift: Optional[pulumi.Input[pulumi.InputType['ResourceRedshiftArgs']]] = None,
                 single_store: Optional[pulumi.Input[pulumi.InputType['ResourceSingleStoreArgs']]] = None,
                 snowflake: Optional[pulumi.Input[pulumi.InputType['ResourceSnowflakeArgs']]] = None,
                 snowsight: Optional[pulumi.Input[pulumi.InputType['ResourceSnowsightArgs']]] = None,
                 sql_server: Optional[pulumi.Input[pulumi.InputType['ResourceSqlServerArgs']]] = None,
                 sql_server_azure_ad: Optional[pulumi.Input[pulumi.InputType['ResourceSqlServerAzureAdArgs']]] = None,
                 sql_server_kerberos_ad: Optional[pulumi.Input[pulumi.InputType['ResourceSqlServerKerberosAdArgs']]] = None,
                 ssh: Optional[pulumi.Input[pulumi.InputType['ResourceSshArgs']]] = None,
                 ssh_cert: Optional[pulumi.Input[pulumi.InputType['ResourceSshCertArgs']]] = None,
                 ssh_customer_key: Optional[pulumi.Input[pulumi.InputType['ResourceSshCustomerKeyArgs']]] = None,
                 sybase: Optional[pulumi.Input[pulumi.InputType['ResourceSybaseArgs']]] = None,
                 sybase_iq: Optional[pulumi.Input[pulumi.InputType['ResourceSybaseIqArgs']]] = None,
                 teradata: Optional[pulumi.Input[pulumi.InputType['ResourceTeradataArgs']]] = None,
                 trino: Optional[pulumi.Input[pulumi.InputType['ResourceTrinoArgs']]] = None,
                 __props__=None):
        """
        ## Import

        A Resource can be imported using the id, e.g.,

        ```sh
         $ pulumi import sdm:index/resource:Resource example rs-12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ResourceAuroraPostgresIamArgs']] aurora_postgres_iam: AuroraPostgresIAM is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input[pulumi.InputType['ResourceMongoHostArgs']] mongo_host: MongoHost is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input[pulumi.InputType['ResourceMongoReplicaSetArgs']] mongo_replica_set: MongoReplicaSet is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input[pulumi.InputType['ResourceMongoShardedClusterArgs']] mongo_sharded_cluster: MongoShardedCluster is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input[pulumi.InputType['ResourceMtlsMysqlArgs']] mtls_mysql: MTLSMysql is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input[pulumi.InputType['ResourceRdsPostgresIamArgs']] rds_postgres_iam: RDSPostgresIAM is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input[pulumi.InputType['ResourceTrinoArgs']] trino: Trino is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ResourceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        A Resource can be imported using the id, e.g.,

        ```sh
         $ pulumi import sdm:index/resource:Resource example rs-12345678
        ```

        :param str resource_name: The name of the resource.
        :param ResourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aks: Optional[pulumi.Input[pulumi.InputType['ResourceAksArgs']]] = None,
                 aks_basic_auth: Optional[pulumi.Input[pulumi.InputType['ResourceAksBasicAuthArgs']]] = None,
                 aks_service_account: Optional[pulumi.Input[pulumi.InputType['ResourceAksServiceAccountArgs']]] = None,
                 aks_service_account_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceAksServiceAccountUserImpersonationArgs']]] = None,
                 aks_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceAksUserImpersonationArgs']]] = None,
                 amazon_eks: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonEksArgs']]] = None,
                 amazon_eks_instance_profile: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonEksInstanceProfileArgs']]] = None,
                 amazon_eks_instance_profile_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonEksInstanceProfileUserImpersonationArgs']]] = None,
                 amazon_eks_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonEksUserImpersonationArgs']]] = None,
                 amazon_es: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonEsArgs']]] = None,
                 amazonmq_amqp091: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonmqAmqp091Args']]] = None,
                 athena: Optional[pulumi.Input[pulumi.InputType['ResourceAthenaArgs']]] = None,
                 aurora_mysql: Optional[pulumi.Input[pulumi.InputType['ResourceAuroraMysqlArgs']]] = None,
                 aurora_postgres: Optional[pulumi.Input[pulumi.InputType['ResourceAuroraPostgresArgs']]] = None,
                 aurora_postgres_iam: Optional[pulumi.Input[pulumi.InputType['ResourceAuroraPostgresIamArgs']]] = None,
                 aws: Optional[pulumi.Input[pulumi.InputType['ResourceAwsArgs']]] = None,
                 aws_console: Optional[pulumi.Input[pulumi.InputType['ResourceAwsConsoleArgs']]] = None,
                 aws_console_static_key_pair: Optional[pulumi.Input[pulumi.InputType['ResourceAwsConsoleStaticKeyPairArgs']]] = None,
                 azure: Optional[pulumi.Input[pulumi.InputType['ResourceAzureArgs']]] = None,
                 azure_certificate: Optional[pulumi.Input[pulumi.InputType['ResourceAzureCertificateArgs']]] = None,
                 azure_mysql: Optional[pulumi.Input[pulumi.InputType['ResourceAzureMysqlArgs']]] = None,
                 azure_postgres: Optional[pulumi.Input[pulumi.InputType['ResourceAzurePostgresArgs']]] = None,
                 azure_postgres_managed_identity: Optional[pulumi.Input[pulumi.InputType['ResourceAzurePostgresManagedIdentityArgs']]] = None,
                 big_query: Optional[pulumi.Input[pulumi.InputType['ResourceBigQueryArgs']]] = None,
                 cassandra: Optional[pulumi.Input[pulumi.InputType['ResourceCassandraArgs']]] = None,
                 citus: Optional[pulumi.Input[pulumi.InputType['ResourceCitusArgs']]] = None,
                 clustrix: Optional[pulumi.Input[pulumi.InputType['ResourceClustrixArgs']]] = None,
                 cockroach: Optional[pulumi.Input[pulumi.InputType['ResourceCockroachArgs']]] = None,
                 db2_i: Optional[pulumi.Input[pulumi.InputType['ResourceDb2IArgs']]] = None,
                 db2_luw: Optional[pulumi.Input[pulumi.InputType['ResourceDb2LuwArgs']]] = None,
                 document_db_host: Optional[pulumi.Input[pulumi.InputType['ResourceDocumentDbHostArgs']]] = None,
                 document_db_replica_set: Optional[pulumi.Input[pulumi.InputType['ResourceDocumentDbReplicaSetArgs']]] = None,
                 druid: Optional[pulumi.Input[pulumi.InputType['ResourceDruidArgs']]] = None,
                 dynamo_db: Optional[pulumi.Input[pulumi.InputType['ResourceDynamoDbArgs']]] = None,
                 elastic: Optional[pulumi.Input[pulumi.InputType['ResourceElasticArgs']]] = None,
                 elasticache_redis: Optional[pulumi.Input[pulumi.InputType['ResourceElasticacheRedisArgs']]] = None,
                 gcp: Optional[pulumi.Input[pulumi.InputType['ResourceGcpArgs']]] = None,
                 google_gke: Optional[pulumi.Input[pulumi.InputType['ResourceGoogleGkeArgs']]] = None,
                 google_gke_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceGoogleGkeUserImpersonationArgs']]] = None,
                 greenplum: Optional[pulumi.Input[pulumi.InputType['ResourceGreenplumArgs']]] = None,
                 http_auth: Optional[pulumi.Input[pulumi.InputType['ResourceHttpAuthArgs']]] = None,
                 http_basic_auth: Optional[pulumi.Input[pulumi.InputType['ResourceHttpBasicAuthArgs']]] = None,
                 http_no_auth: Optional[pulumi.Input[pulumi.InputType['ResourceHttpNoAuthArgs']]] = None,
                 kubernetes: Optional[pulumi.Input[pulumi.InputType['ResourceKubernetesArgs']]] = None,
                 kubernetes_basic_auth: Optional[pulumi.Input[pulumi.InputType['ResourceKubernetesBasicAuthArgs']]] = None,
                 kubernetes_service_account: Optional[pulumi.Input[pulumi.InputType['ResourceKubernetesServiceAccountArgs']]] = None,
                 kubernetes_service_account_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceKubernetesServiceAccountUserImpersonationArgs']]] = None,
                 kubernetes_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceKubernetesUserImpersonationArgs']]] = None,
                 maria: Optional[pulumi.Input[pulumi.InputType['ResourceMariaArgs']]] = None,
                 memcached: Optional[pulumi.Input[pulumi.InputType['ResourceMemcachedArgs']]] = None,
                 memsql: Optional[pulumi.Input[pulumi.InputType['ResourceMemsqlArgs']]] = None,
                 mongo_host: Optional[pulumi.Input[pulumi.InputType['ResourceMongoHostArgs']]] = None,
                 mongo_legacy_host: Optional[pulumi.Input[pulumi.InputType['ResourceMongoLegacyHostArgs']]] = None,
                 mongo_legacy_replicaset: Optional[pulumi.Input[pulumi.InputType['ResourceMongoLegacyReplicasetArgs']]] = None,
                 mongo_replica_set: Optional[pulumi.Input[pulumi.InputType['ResourceMongoReplicaSetArgs']]] = None,
                 mongo_sharded_cluster: Optional[pulumi.Input[pulumi.InputType['ResourceMongoShardedClusterArgs']]] = None,
                 mtls_mysql: Optional[pulumi.Input[pulumi.InputType['ResourceMtlsMysqlArgs']]] = None,
                 mtls_postgres: Optional[pulumi.Input[pulumi.InputType['ResourceMtlsPostgresArgs']]] = None,
                 mysql: Optional[pulumi.Input[pulumi.InputType['ResourceMysqlArgs']]] = None,
                 neptune: Optional[pulumi.Input[pulumi.InputType['ResourceNeptuneArgs']]] = None,
                 neptune_iam: Optional[pulumi.Input[pulumi.InputType['ResourceNeptuneIamArgs']]] = None,
                 oracle: Optional[pulumi.Input[pulumi.InputType['ResourceOracleArgs']]] = None,
                 postgres: Optional[pulumi.Input[pulumi.InputType['ResourcePostgresArgs']]] = None,
                 presto: Optional[pulumi.Input[pulumi.InputType['ResourcePrestoArgs']]] = None,
                 rabbitmq_amqp091: Optional[pulumi.Input[pulumi.InputType['ResourceRabbitmqAmqp091Args']]] = None,
                 raw_tcp: Optional[pulumi.Input[pulumi.InputType['ResourceRawTcpArgs']]] = None,
                 rdp: Optional[pulumi.Input[pulumi.InputType['ResourceRdpArgs']]] = None,
                 rds_postgres_iam: Optional[pulumi.Input[pulumi.InputType['ResourceRdsPostgresIamArgs']]] = None,
                 redis: Optional[pulumi.Input[pulumi.InputType['ResourceRedisArgs']]] = None,
                 redshift: Optional[pulumi.Input[pulumi.InputType['ResourceRedshiftArgs']]] = None,
                 single_store: Optional[pulumi.Input[pulumi.InputType['ResourceSingleStoreArgs']]] = None,
                 snowflake: Optional[pulumi.Input[pulumi.InputType['ResourceSnowflakeArgs']]] = None,
                 snowsight: Optional[pulumi.Input[pulumi.InputType['ResourceSnowsightArgs']]] = None,
                 sql_server: Optional[pulumi.Input[pulumi.InputType['ResourceSqlServerArgs']]] = None,
                 sql_server_azure_ad: Optional[pulumi.Input[pulumi.InputType['ResourceSqlServerAzureAdArgs']]] = None,
                 sql_server_kerberos_ad: Optional[pulumi.Input[pulumi.InputType['ResourceSqlServerKerberosAdArgs']]] = None,
                 ssh: Optional[pulumi.Input[pulumi.InputType['ResourceSshArgs']]] = None,
                 ssh_cert: Optional[pulumi.Input[pulumi.InputType['ResourceSshCertArgs']]] = None,
                 ssh_customer_key: Optional[pulumi.Input[pulumi.InputType['ResourceSshCustomerKeyArgs']]] = None,
                 sybase: Optional[pulumi.Input[pulumi.InputType['ResourceSybaseArgs']]] = None,
                 sybase_iq: Optional[pulumi.Input[pulumi.InputType['ResourceSybaseIqArgs']]] = None,
                 teradata: Optional[pulumi.Input[pulumi.InputType['ResourceTeradataArgs']]] = None,
                 trino: Optional[pulumi.Input[pulumi.InputType['ResourceTrinoArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceArgs.__new__(ResourceArgs)

            __props__.__dict__["aks"] = aks
            __props__.__dict__["aks_basic_auth"] = aks_basic_auth
            __props__.__dict__["aks_service_account"] = aks_service_account
            __props__.__dict__["aks_service_account_user_impersonation"] = aks_service_account_user_impersonation
            __props__.__dict__["aks_user_impersonation"] = aks_user_impersonation
            __props__.__dict__["amazon_eks"] = amazon_eks
            __props__.__dict__["amazon_eks_instance_profile"] = amazon_eks_instance_profile
            __props__.__dict__["amazon_eks_instance_profile_user_impersonation"] = amazon_eks_instance_profile_user_impersonation
            __props__.__dict__["amazon_eks_user_impersonation"] = amazon_eks_user_impersonation
            __props__.__dict__["amazon_es"] = amazon_es
            __props__.__dict__["amazonmq_amqp091"] = amazonmq_amqp091
            __props__.__dict__["athena"] = athena
            __props__.__dict__["aurora_mysql"] = aurora_mysql
            __props__.__dict__["aurora_postgres"] = aurora_postgres
            __props__.__dict__["aurora_postgres_iam"] = aurora_postgres_iam
            __props__.__dict__["aws"] = aws
            __props__.__dict__["aws_console"] = aws_console
            __props__.__dict__["aws_console_static_key_pair"] = aws_console_static_key_pair
            __props__.__dict__["azure"] = azure
            __props__.__dict__["azure_certificate"] = azure_certificate
            __props__.__dict__["azure_mysql"] = azure_mysql
            __props__.__dict__["azure_postgres"] = azure_postgres
            __props__.__dict__["azure_postgres_managed_identity"] = azure_postgres_managed_identity
            __props__.__dict__["big_query"] = big_query
            __props__.__dict__["cassandra"] = cassandra
            __props__.__dict__["citus"] = citus
            __props__.__dict__["clustrix"] = clustrix
            __props__.__dict__["cockroach"] = cockroach
            __props__.__dict__["db2_i"] = db2_i
            __props__.__dict__["db2_luw"] = db2_luw
            __props__.__dict__["document_db_host"] = document_db_host
            __props__.__dict__["document_db_replica_set"] = document_db_replica_set
            __props__.__dict__["druid"] = druid
            __props__.__dict__["dynamo_db"] = dynamo_db
            __props__.__dict__["elastic"] = elastic
            __props__.__dict__["elasticache_redis"] = elasticache_redis
            __props__.__dict__["gcp"] = gcp
            __props__.__dict__["google_gke"] = google_gke
            __props__.__dict__["google_gke_user_impersonation"] = google_gke_user_impersonation
            __props__.__dict__["greenplum"] = greenplum
            __props__.__dict__["http_auth"] = http_auth
            __props__.__dict__["http_basic_auth"] = http_basic_auth
            __props__.__dict__["http_no_auth"] = http_no_auth
            __props__.__dict__["kubernetes"] = kubernetes
            __props__.__dict__["kubernetes_basic_auth"] = kubernetes_basic_auth
            __props__.__dict__["kubernetes_service_account"] = kubernetes_service_account
            __props__.__dict__["kubernetes_service_account_user_impersonation"] = kubernetes_service_account_user_impersonation
            __props__.__dict__["kubernetes_user_impersonation"] = kubernetes_user_impersonation
            __props__.__dict__["maria"] = maria
            __props__.__dict__["memcached"] = memcached
            __props__.__dict__["memsql"] = memsql
            __props__.__dict__["mongo_host"] = mongo_host
            __props__.__dict__["mongo_legacy_host"] = mongo_legacy_host
            __props__.__dict__["mongo_legacy_replicaset"] = mongo_legacy_replicaset
            __props__.__dict__["mongo_replica_set"] = mongo_replica_set
            __props__.__dict__["mongo_sharded_cluster"] = mongo_sharded_cluster
            __props__.__dict__["mtls_mysql"] = mtls_mysql
            __props__.__dict__["mtls_postgres"] = mtls_postgres
            __props__.__dict__["mysql"] = mysql
            __props__.__dict__["neptune"] = neptune
            __props__.__dict__["neptune_iam"] = neptune_iam
            __props__.__dict__["oracle"] = oracle
            __props__.__dict__["postgres"] = postgres
            __props__.__dict__["presto"] = presto
            __props__.__dict__["rabbitmq_amqp091"] = rabbitmq_amqp091
            __props__.__dict__["raw_tcp"] = raw_tcp
            __props__.__dict__["rdp"] = rdp
            __props__.__dict__["rds_postgres_iam"] = rds_postgres_iam
            __props__.__dict__["redis"] = redis
            __props__.__dict__["redshift"] = redshift
            __props__.__dict__["single_store"] = single_store
            __props__.__dict__["snowflake"] = snowflake
            __props__.__dict__["snowsight"] = snowsight
            __props__.__dict__["sql_server"] = sql_server
            __props__.__dict__["sql_server_azure_ad"] = sql_server_azure_ad
            __props__.__dict__["sql_server_kerberos_ad"] = sql_server_kerberos_ad
            __props__.__dict__["ssh"] = ssh
            __props__.__dict__["ssh_cert"] = ssh_cert
            __props__.__dict__["ssh_customer_key"] = ssh_customer_key
            __props__.__dict__["sybase"] = sybase
            __props__.__dict__["sybase_iq"] = sybase_iq
            __props__.__dict__["teradata"] = teradata
            __props__.__dict__["trino"] = trino
        super(Resource, __self__).__init__(
            'sdm:index/resource:Resource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aks: Optional[pulumi.Input[pulumi.InputType['ResourceAksArgs']]] = None,
            aks_basic_auth: Optional[pulumi.Input[pulumi.InputType['ResourceAksBasicAuthArgs']]] = None,
            aks_service_account: Optional[pulumi.Input[pulumi.InputType['ResourceAksServiceAccountArgs']]] = None,
            aks_service_account_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceAksServiceAccountUserImpersonationArgs']]] = None,
            aks_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceAksUserImpersonationArgs']]] = None,
            amazon_eks: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonEksArgs']]] = None,
            amazon_eks_instance_profile: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonEksInstanceProfileArgs']]] = None,
            amazon_eks_instance_profile_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonEksInstanceProfileUserImpersonationArgs']]] = None,
            amazon_eks_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonEksUserImpersonationArgs']]] = None,
            amazon_es: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonEsArgs']]] = None,
            amazonmq_amqp091: Optional[pulumi.Input[pulumi.InputType['ResourceAmazonmqAmqp091Args']]] = None,
            athena: Optional[pulumi.Input[pulumi.InputType['ResourceAthenaArgs']]] = None,
            aurora_mysql: Optional[pulumi.Input[pulumi.InputType['ResourceAuroraMysqlArgs']]] = None,
            aurora_postgres: Optional[pulumi.Input[pulumi.InputType['ResourceAuroraPostgresArgs']]] = None,
            aurora_postgres_iam: Optional[pulumi.Input[pulumi.InputType['ResourceAuroraPostgresIamArgs']]] = None,
            aws: Optional[pulumi.Input[pulumi.InputType['ResourceAwsArgs']]] = None,
            aws_console: Optional[pulumi.Input[pulumi.InputType['ResourceAwsConsoleArgs']]] = None,
            aws_console_static_key_pair: Optional[pulumi.Input[pulumi.InputType['ResourceAwsConsoleStaticKeyPairArgs']]] = None,
            azure: Optional[pulumi.Input[pulumi.InputType['ResourceAzureArgs']]] = None,
            azure_certificate: Optional[pulumi.Input[pulumi.InputType['ResourceAzureCertificateArgs']]] = None,
            azure_mysql: Optional[pulumi.Input[pulumi.InputType['ResourceAzureMysqlArgs']]] = None,
            azure_postgres: Optional[pulumi.Input[pulumi.InputType['ResourceAzurePostgresArgs']]] = None,
            azure_postgres_managed_identity: Optional[pulumi.Input[pulumi.InputType['ResourceAzurePostgresManagedIdentityArgs']]] = None,
            big_query: Optional[pulumi.Input[pulumi.InputType['ResourceBigQueryArgs']]] = None,
            cassandra: Optional[pulumi.Input[pulumi.InputType['ResourceCassandraArgs']]] = None,
            citus: Optional[pulumi.Input[pulumi.InputType['ResourceCitusArgs']]] = None,
            clustrix: Optional[pulumi.Input[pulumi.InputType['ResourceClustrixArgs']]] = None,
            cockroach: Optional[pulumi.Input[pulumi.InputType['ResourceCockroachArgs']]] = None,
            db2_i: Optional[pulumi.Input[pulumi.InputType['ResourceDb2IArgs']]] = None,
            db2_luw: Optional[pulumi.Input[pulumi.InputType['ResourceDb2LuwArgs']]] = None,
            document_db_host: Optional[pulumi.Input[pulumi.InputType['ResourceDocumentDbHostArgs']]] = None,
            document_db_replica_set: Optional[pulumi.Input[pulumi.InputType['ResourceDocumentDbReplicaSetArgs']]] = None,
            druid: Optional[pulumi.Input[pulumi.InputType['ResourceDruidArgs']]] = None,
            dynamo_db: Optional[pulumi.Input[pulumi.InputType['ResourceDynamoDbArgs']]] = None,
            elastic: Optional[pulumi.Input[pulumi.InputType['ResourceElasticArgs']]] = None,
            elasticache_redis: Optional[pulumi.Input[pulumi.InputType['ResourceElasticacheRedisArgs']]] = None,
            gcp: Optional[pulumi.Input[pulumi.InputType['ResourceGcpArgs']]] = None,
            google_gke: Optional[pulumi.Input[pulumi.InputType['ResourceGoogleGkeArgs']]] = None,
            google_gke_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceGoogleGkeUserImpersonationArgs']]] = None,
            greenplum: Optional[pulumi.Input[pulumi.InputType['ResourceGreenplumArgs']]] = None,
            http_auth: Optional[pulumi.Input[pulumi.InputType['ResourceHttpAuthArgs']]] = None,
            http_basic_auth: Optional[pulumi.Input[pulumi.InputType['ResourceHttpBasicAuthArgs']]] = None,
            http_no_auth: Optional[pulumi.Input[pulumi.InputType['ResourceHttpNoAuthArgs']]] = None,
            kubernetes: Optional[pulumi.Input[pulumi.InputType['ResourceKubernetesArgs']]] = None,
            kubernetes_basic_auth: Optional[pulumi.Input[pulumi.InputType['ResourceKubernetesBasicAuthArgs']]] = None,
            kubernetes_service_account: Optional[pulumi.Input[pulumi.InputType['ResourceKubernetesServiceAccountArgs']]] = None,
            kubernetes_service_account_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceKubernetesServiceAccountUserImpersonationArgs']]] = None,
            kubernetes_user_impersonation: Optional[pulumi.Input[pulumi.InputType['ResourceKubernetesUserImpersonationArgs']]] = None,
            maria: Optional[pulumi.Input[pulumi.InputType['ResourceMariaArgs']]] = None,
            memcached: Optional[pulumi.Input[pulumi.InputType['ResourceMemcachedArgs']]] = None,
            memsql: Optional[pulumi.Input[pulumi.InputType['ResourceMemsqlArgs']]] = None,
            mongo_host: Optional[pulumi.Input[pulumi.InputType['ResourceMongoHostArgs']]] = None,
            mongo_legacy_host: Optional[pulumi.Input[pulumi.InputType['ResourceMongoLegacyHostArgs']]] = None,
            mongo_legacy_replicaset: Optional[pulumi.Input[pulumi.InputType['ResourceMongoLegacyReplicasetArgs']]] = None,
            mongo_replica_set: Optional[pulumi.Input[pulumi.InputType['ResourceMongoReplicaSetArgs']]] = None,
            mongo_sharded_cluster: Optional[pulumi.Input[pulumi.InputType['ResourceMongoShardedClusterArgs']]] = None,
            mtls_mysql: Optional[pulumi.Input[pulumi.InputType['ResourceMtlsMysqlArgs']]] = None,
            mtls_postgres: Optional[pulumi.Input[pulumi.InputType['ResourceMtlsPostgresArgs']]] = None,
            mysql: Optional[pulumi.Input[pulumi.InputType['ResourceMysqlArgs']]] = None,
            neptune: Optional[pulumi.Input[pulumi.InputType['ResourceNeptuneArgs']]] = None,
            neptune_iam: Optional[pulumi.Input[pulumi.InputType['ResourceNeptuneIamArgs']]] = None,
            oracle: Optional[pulumi.Input[pulumi.InputType['ResourceOracleArgs']]] = None,
            postgres: Optional[pulumi.Input[pulumi.InputType['ResourcePostgresArgs']]] = None,
            presto: Optional[pulumi.Input[pulumi.InputType['ResourcePrestoArgs']]] = None,
            rabbitmq_amqp091: Optional[pulumi.Input[pulumi.InputType['ResourceRabbitmqAmqp091Args']]] = None,
            raw_tcp: Optional[pulumi.Input[pulumi.InputType['ResourceRawTcpArgs']]] = None,
            rdp: Optional[pulumi.Input[pulumi.InputType['ResourceRdpArgs']]] = None,
            rds_postgres_iam: Optional[pulumi.Input[pulumi.InputType['ResourceRdsPostgresIamArgs']]] = None,
            redis: Optional[pulumi.Input[pulumi.InputType['ResourceRedisArgs']]] = None,
            redshift: Optional[pulumi.Input[pulumi.InputType['ResourceRedshiftArgs']]] = None,
            single_store: Optional[pulumi.Input[pulumi.InputType['ResourceSingleStoreArgs']]] = None,
            snowflake: Optional[pulumi.Input[pulumi.InputType['ResourceSnowflakeArgs']]] = None,
            snowsight: Optional[pulumi.Input[pulumi.InputType['ResourceSnowsightArgs']]] = None,
            sql_server: Optional[pulumi.Input[pulumi.InputType['ResourceSqlServerArgs']]] = None,
            sql_server_azure_ad: Optional[pulumi.Input[pulumi.InputType['ResourceSqlServerAzureAdArgs']]] = None,
            sql_server_kerberos_ad: Optional[pulumi.Input[pulumi.InputType['ResourceSqlServerKerberosAdArgs']]] = None,
            ssh: Optional[pulumi.Input[pulumi.InputType['ResourceSshArgs']]] = None,
            ssh_cert: Optional[pulumi.Input[pulumi.InputType['ResourceSshCertArgs']]] = None,
            ssh_customer_key: Optional[pulumi.Input[pulumi.InputType['ResourceSshCustomerKeyArgs']]] = None,
            sybase: Optional[pulumi.Input[pulumi.InputType['ResourceSybaseArgs']]] = None,
            sybase_iq: Optional[pulumi.Input[pulumi.InputType['ResourceSybaseIqArgs']]] = None,
            teradata: Optional[pulumi.Input[pulumi.InputType['ResourceTeradataArgs']]] = None,
            trino: Optional[pulumi.Input[pulumi.InputType['ResourceTrinoArgs']]] = None) -> 'Resource':
        """
        Get an existing Resource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ResourceAuroraPostgresIamArgs']] aurora_postgres_iam: AuroraPostgresIAM is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input[pulumi.InputType['ResourceMongoHostArgs']] mongo_host: MongoHost is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input[pulumi.InputType['ResourceMongoReplicaSetArgs']] mongo_replica_set: MongoReplicaSet is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input[pulumi.InputType['ResourceMongoShardedClusterArgs']] mongo_sharded_cluster: MongoShardedCluster is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input[pulumi.InputType['ResourceMtlsMysqlArgs']] mtls_mysql: MTLSMysql is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input[pulumi.InputType['ResourceRdsPostgresIamArgs']] rds_postgres_iam: RDSPostgresIAM is currently unstable, and its API may change, or it may be removed, without a major version bump.
        :param pulumi.Input[pulumi.InputType['ResourceTrinoArgs']] trino: Trino is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceState.__new__(_ResourceState)

        __props__.__dict__["aks"] = aks
        __props__.__dict__["aks_basic_auth"] = aks_basic_auth
        __props__.__dict__["aks_service_account"] = aks_service_account
        __props__.__dict__["aks_service_account_user_impersonation"] = aks_service_account_user_impersonation
        __props__.__dict__["aks_user_impersonation"] = aks_user_impersonation
        __props__.__dict__["amazon_eks"] = amazon_eks
        __props__.__dict__["amazon_eks_instance_profile"] = amazon_eks_instance_profile
        __props__.__dict__["amazon_eks_instance_profile_user_impersonation"] = amazon_eks_instance_profile_user_impersonation
        __props__.__dict__["amazon_eks_user_impersonation"] = amazon_eks_user_impersonation
        __props__.__dict__["amazon_es"] = amazon_es
        __props__.__dict__["amazonmq_amqp091"] = amazonmq_amqp091
        __props__.__dict__["athena"] = athena
        __props__.__dict__["aurora_mysql"] = aurora_mysql
        __props__.__dict__["aurora_postgres"] = aurora_postgres
        __props__.__dict__["aurora_postgres_iam"] = aurora_postgres_iam
        __props__.__dict__["aws"] = aws
        __props__.__dict__["aws_console"] = aws_console
        __props__.__dict__["aws_console_static_key_pair"] = aws_console_static_key_pair
        __props__.__dict__["azure"] = azure
        __props__.__dict__["azure_certificate"] = azure_certificate
        __props__.__dict__["azure_mysql"] = azure_mysql
        __props__.__dict__["azure_postgres"] = azure_postgres
        __props__.__dict__["azure_postgres_managed_identity"] = azure_postgres_managed_identity
        __props__.__dict__["big_query"] = big_query
        __props__.__dict__["cassandra"] = cassandra
        __props__.__dict__["citus"] = citus
        __props__.__dict__["clustrix"] = clustrix
        __props__.__dict__["cockroach"] = cockroach
        __props__.__dict__["db2_i"] = db2_i
        __props__.__dict__["db2_luw"] = db2_luw
        __props__.__dict__["document_db_host"] = document_db_host
        __props__.__dict__["document_db_replica_set"] = document_db_replica_set
        __props__.__dict__["druid"] = druid
        __props__.__dict__["dynamo_db"] = dynamo_db
        __props__.__dict__["elastic"] = elastic
        __props__.__dict__["elasticache_redis"] = elasticache_redis
        __props__.__dict__["gcp"] = gcp
        __props__.__dict__["google_gke"] = google_gke
        __props__.__dict__["google_gke_user_impersonation"] = google_gke_user_impersonation
        __props__.__dict__["greenplum"] = greenplum
        __props__.__dict__["http_auth"] = http_auth
        __props__.__dict__["http_basic_auth"] = http_basic_auth
        __props__.__dict__["http_no_auth"] = http_no_auth
        __props__.__dict__["kubernetes"] = kubernetes
        __props__.__dict__["kubernetes_basic_auth"] = kubernetes_basic_auth
        __props__.__dict__["kubernetes_service_account"] = kubernetes_service_account
        __props__.__dict__["kubernetes_service_account_user_impersonation"] = kubernetes_service_account_user_impersonation
        __props__.__dict__["kubernetes_user_impersonation"] = kubernetes_user_impersonation
        __props__.__dict__["maria"] = maria
        __props__.__dict__["memcached"] = memcached
        __props__.__dict__["memsql"] = memsql
        __props__.__dict__["mongo_host"] = mongo_host
        __props__.__dict__["mongo_legacy_host"] = mongo_legacy_host
        __props__.__dict__["mongo_legacy_replicaset"] = mongo_legacy_replicaset
        __props__.__dict__["mongo_replica_set"] = mongo_replica_set
        __props__.__dict__["mongo_sharded_cluster"] = mongo_sharded_cluster
        __props__.__dict__["mtls_mysql"] = mtls_mysql
        __props__.__dict__["mtls_postgres"] = mtls_postgres
        __props__.__dict__["mysql"] = mysql
        __props__.__dict__["neptune"] = neptune
        __props__.__dict__["neptune_iam"] = neptune_iam
        __props__.__dict__["oracle"] = oracle
        __props__.__dict__["postgres"] = postgres
        __props__.__dict__["presto"] = presto
        __props__.__dict__["rabbitmq_amqp091"] = rabbitmq_amqp091
        __props__.__dict__["raw_tcp"] = raw_tcp
        __props__.__dict__["rdp"] = rdp
        __props__.__dict__["rds_postgres_iam"] = rds_postgres_iam
        __props__.__dict__["redis"] = redis
        __props__.__dict__["redshift"] = redshift
        __props__.__dict__["single_store"] = single_store
        __props__.__dict__["snowflake"] = snowflake
        __props__.__dict__["snowsight"] = snowsight
        __props__.__dict__["sql_server"] = sql_server
        __props__.__dict__["sql_server_azure_ad"] = sql_server_azure_ad
        __props__.__dict__["sql_server_kerberos_ad"] = sql_server_kerberos_ad
        __props__.__dict__["ssh"] = ssh
        __props__.__dict__["ssh_cert"] = ssh_cert
        __props__.__dict__["ssh_customer_key"] = ssh_customer_key
        __props__.__dict__["sybase"] = sybase
        __props__.__dict__["sybase_iq"] = sybase_iq
        __props__.__dict__["teradata"] = teradata
        __props__.__dict__["trino"] = trino
        return Resource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def aks(self) -> pulumi.Output[Optional['outputs.ResourceAks']]:
        return pulumi.get(self, "aks")

    @property
    @pulumi.getter(name="aksBasicAuth")
    def aks_basic_auth(self) -> pulumi.Output[Optional['outputs.ResourceAksBasicAuth']]:
        return pulumi.get(self, "aks_basic_auth")

    @property
    @pulumi.getter(name="aksServiceAccount")
    def aks_service_account(self) -> pulumi.Output[Optional['outputs.ResourceAksServiceAccount']]:
        return pulumi.get(self, "aks_service_account")

    @property
    @pulumi.getter(name="aksServiceAccountUserImpersonation")
    def aks_service_account_user_impersonation(self) -> pulumi.Output[Optional['outputs.ResourceAksServiceAccountUserImpersonation']]:
        return pulumi.get(self, "aks_service_account_user_impersonation")

    @property
    @pulumi.getter(name="aksUserImpersonation")
    def aks_user_impersonation(self) -> pulumi.Output[Optional['outputs.ResourceAksUserImpersonation']]:
        return pulumi.get(self, "aks_user_impersonation")

    @property
    @pulumi.getter(name="amazonEks")
    def amazon_eks(self) -> pulumi.Output[Optional['outputs.ResourceAmazonEks']]:
        return pulumi.get(self, "amazon_eks")

    @property
    @pulumi.getter(name="amazonEksInstanceProfile")
    def amazon_eks_instance_profile(self) -> pulumi.Output[Optional['outputs.ResourceAmazonEksInstanceProfile']]:
        return pulumi.get(self, "amazon_eks_instance_profile")

    @property
    @pulumi.getter(name="amazonEksInstanceProfileUserImpersonation")
    def amazon_eks_instance_profile_user_impersonation(self) -> pulumi.Output[Optional['outputs.ResourceAmazonEksInstanceProfileUserImpersonation']]:
        return pulumi.get(self, "amazon_eks_instance_profile_user_impersonation")

    @property
    @pulumi.getter(name="amazonEksUserImpersonation")
    def amazon_eks_user_impersonation(self) -> pulumi.Output[Optional['outputs.ResourceAmazonEksUserImpersonation']]:
        return pulumi.get(self, "amazon_eks_user_impersonation")

    @property
    @pulumi.getter(name="amazonEs")
    def amazon_es(self) -> pulumi.Output[Optional['outputs.ResourceAmazonEs']]:
        return pulumi.get(self, "amazon_es")

    @property
    @pulumi.getter(name="amazonmqAmqp091")
    def amazonmq_amqp091(self) -> pulumi.Output[Optional['outputs.ResourceAmazonmqAmqp091']]:
        return pulumi.get(self, "amazonmq_amqp091")

    @property
    @pulumi.getter
    def athena(self) -> pulumi.Output[Optional['outputs.ResourceAthena']]:
        return pulumi.get(self, "athena")

    @property
    @pulumi.getter(name="auroraMysql")
    def aurora_mysql(self) -> pulumi.Output[Optional['outputs.ResourceAuroraMysql']]:
        return pulumi.get(self, "aurora_mysql")

    @property
    @pulumi.getter(name="auroraPostgres")
    def aurora_postgres(self) -> pulumi.Output[Optional['outputs.ResourceAuroraPostgres']]:
        return pulumi.get(self, "aurora_postgres")

    @property
    @pulumi.getter(name="auroraPostgresIam")
    def aurora_postgres_iam(self) -> pulumi.Output[Optional['outputs.ResourceAuroraPostgresIam']]:
        """
        AuroraPostgresIAM is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "aurora_postgres_iam")

    @property
    @pulumi.getter
    def aws(self) -> pulumi.Output[Optional['outputs.ResourceAws']]:
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter(name="awsConsole")
    def aws_console(self) -> pulumi.Output[Optional['outputs.ResourceAwsConsole']]:
        return pulumi.get(self, "aws_console")

    @property
    @pulumi.getter(name="awsConsoleStaticKeyPair")
    def aws_console_static_key_pair(self) -> pulumi.Output[Optional['outputs.ResourceAwsConsoleStaticKeyPair']]:
        return pulumi.get(self, "aws_console_static_key_pair")

    @property
    @pulumi.getter
    def azure(self) -> pulumi.Output[Optional['outputs.ResourceAzure']]:
        return pulumi.get(self, "azure")

    @property
    @pulumi.getter(name="azureCertificate")
    def azure_certificate(self) -> pulumi.Output[Optional['outputs.ResourceAzureCertificate']]:
        return pulumi.get(self, "azure_certificate")

    @property
    @pulumi.getter(name="azureMysql")
    def azure_mysql(self) -> pulumi.Output[Optional['outputs.ResourceAzureMysql']]:
        return pulumi.get(self, "azure_mysql")

    @property
    @pulumi.getter(name="azurePostgres")
    def azure_postgres(self) -> pulumi.Output[Optional['outputs.ResourceAzurePostgres']]:
        return pulumi.get(self, "azure_postgres")

    @property
    @pulumi.getter(name="azurePostgresManagedIdentity")
    def azure_postgres_managed_identity(self) -> pulumi.Output[Optional['outputs.ResourceAzurePostgresManagedIdentity']]:
        return pulumi.get(self, "azure_postgres_managed_identity")

    @property
    @pulumi.getter(name="bigQuery")
    def big_query(self) -> pulumi.Output[Optional['outputs.ResourceBigQuery']]:
        return pulumi.get(self, "big_query")

    @property
    @pulumi.getter
    def cassandra(self) -> pulumi.Output[Optional['outputs.ResourceCassandra']]:
        return pulumi.get(self, "cassandra")

    @property
    @pulumi.getter
    def citus(self) -> pulumi.Output[Optional['outputs.ResourceCitus']]:
        return pulumi.get(self, "citus")

    @property
    @pulumi.getter
    def clustrix(self) -> pulumi.Output[Optional['outputs.ResourceClustrix']]:
        return pulumi.get(self, "clustrix")

    @property
    @pulumi.getter
    def cockroach(self) -> pulumi.Output[Optional['outputs.ResourceCockroach']]:
        return pulumi.get(self, "cockroach")

    @property
    @pulumi.getter(name="db2I")
    def db2_i(self) -> pulumi.Output[Optional['outputs.ResourceDb2I']]:
        return pulumi.get(self, "db2_i")

    @property
    @pulumi.getter(name="db2Luw")
    def db2_luw(self) -> pulumi.Output[Optional['outputs.ResourceDb2Luw']]:
        return pulumi.get(self, "db2_luw")

    @property
    @pulumi.getter(name="documentDbHost")
    def document_db_host(self) -> pulumi.Output[Optional['outputs.ResourceDocumentDbHost']]:
        return pulumi.get(self, "document_db_host")

    @property
    @pulumi.getter(name="documentDbReplicaSet")
    def document_db_replica_set(self) -> pulumi.Output[Optional['outputs.ResourceDocumentDbReplicaSet']]:
        return pulumi.get(self, "document_db_replica_set")

    @property
    @pulumi.getter
    def druid(self) -> pulumi.Output[Optional['outputs.ResourceDruid']]:
        return pulumi.get(self, "druid")

    @property
    @pulumi.getter(name="dynamoDb")
    def dynamo_db(self) -> pulumi.Output[Optional['outputs.ResourceDynamoDb']]:
        return pulumi.get(self, "dynamo_db")

    @property
    @pulumi.getter
    def elastic(self) -> pulumi.Output[Optional['outputs.ResourceElastic']]:
        return pulumi.get(self, "elastic")

    @property
    @pulumi.getter(name="elasticacheRedis")
    def elasticache_redis(self) -> pulumi.Output[Optional['outputs.ResourceElasticacheRedis']]:
        return pulumi.get(self, "elasticache_redis")

    @property
    @pulumi.getter
    def gcp(self) -> pulumi.Output[Optional['outputs.ResourceGcp']]:
        return pulumi.get(self, "gcp")

    @property
    @pulumi.getter(name="googleGke")
    def google_gke(self) -> pulumi.Output[Optional['outputs.ResourceGoogleGke']]:
        return pulumi.get(self, "google_gke")

    @property
    @pulumi.getter(name="googleGkeUserImpersonation")
    def google_gke_user_impersonation(self) -> pulumi.Output[Optional['outputs.ResourceGoogleGkeUserImpersonation']]:
        return pulumi.get(self, "google_gke_user_impersonation")

    @property
    @pulumi.getter
    def greenplum(self) -> pulumi.Output[Optional['outputs.ResourceGreenplum']]:
        return pulumi.get(self, "greenplum")

    @property
    @pulumi.getter(name="httpAuth")
    def http_auth(self) -> pulumi.Output[Optional['outputs.ResourceHttpAuth']]:
        return pulumi.get(self, "http_auth")

    @property
    @pulumi.getter(name="httpBasicAuth")
    def http_basic_auth(self) -> pulumi.Output[Optional['outputs.ResourceHttpBasicAuth']]:
        return pulumi.get(self, "http_basic_auth")

    @property
    @pulumi.getter(name="httpNoAuth")
    def http_no_auth(self) -> pulumi.Output[Optional['outputs.ResourceHttpNoAuth']]:
        return pulumi.get(self, "http_no_auth")

    @property
    @pulumi.getter
    def kubernetes(self) -> pulumi.Output[Optional['outputs.ResourceKubernetes']]:
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter(name="kubernetesBasicAuth")
    def kubernetes_basic_auth(self) -> pulumi.Output[Optional['outputs.ResourceKubernetesBasicAuth']]:
        return pulumi.get(self, "kubernetes_basic_auth")

    @property
    @pulumi.getter(name="kubernetesServiceAccount")
    def kubernetes_service_account(self) -> pulumi.Output[Optional['outputs.ResourceKubernetesServiceAccount']]:
        return pulumi.get(self, "kubernetes_service_account")

    @property
    @pulumi.getter(name="kubernetesServiceAccountUserImpersonation")
    def kubernetes_service_account_user_impersonation(self) -> pulumi.Output[Optional['outputs.ResourceKubernetesServiceAccountUserImpersonation']]:
        return pulumi.get(self, "kubernetes_service_account_user_impersonation")

    @property
    @pulumi.getter(name="kubernetesUserImpersonation")
    def kubernetes_user_impersonation(self) -> pulumi.Output[Optional['outputs.ResourceKubernetesUserImpersonation']]:
        return pulumi.get(self, "kubernetes_user_impersonation")

    @property
    @pulumi.getter
    def maria(self) -> pulumi.Output[Optional['outputs.ResourceMaria']]:
        return pulumi.get(self, "maria")

    @property
    @pulumi.getter
    def memcached(self) -> pulumi.Output[Optional['outputs.ResourceMemcached']]:
        return pulumi.get(self, "memcached")

    @property
    @pulumi.getter
    def memsql(self) -> pulumi.Output[Optional['outputs.ResourceMemsql']]:
        return pulumi.get(self, "memsql")

    @property
    @pulumi.getter(name="mongoHost")
    def mongo_host(self) -> pulumi.Output[Optional['outputs.ResourceMongoHost']]:
        """
        MongoHost is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "mongo_host")

    @property
    @pulumi.getter(name="mongoLegacyHost")
    def mongo_legacy_host(self) -> pulumi.Output[Optional['outputs.ResourceMongoLegacyHost']]:
        return pulumi.get(self, "mongo_legacy_host")

    @property
    @pulumi.getter(name="mongoLegacyReplicaset")
    def mongo_legacy_replicaset(self) -> pulumi.Output[Optional['outputs.ResourceMongoLegacyReplicaset']]:
        return pulumi.get(self, "mongo_legacy_replicaset")

    @property
    @pulumi.getter(name="mongoReplicaSet")
    def mongo_replica_set(self) -> pulumi.Output[Optional['outputs.ResourceMongoReplicaSet']]:
        """
        MongoReplicaSet is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "mongo_replica_set")

    @property
    @pulumi.getter(name="mongoShardedCluster")
    def mongo_sharded_cluster(self) -> pulumi.Output[Optional['outputs.ResourceMongoShardedCluster']]:
        """
        MongoShardedCluster is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "mongo_sharded_cluster")

    @property
    @pulumi.getter(name="mtlsMysql")
    def mtls_mysql(self) -> pulumi.Output[Optional['outputs.ResourceMtlsMysql']]:
        """
        MTLSMysql is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "mtls_mysql")

    @property
    @pulumi.getter(name="mtlsPostgres")
    def mtls_postgres(self) -> pulumi.Output[Optional['outputs.ResourceMtlsPostgres']]:
        return pulumi.get(self, "mtls_postgres")

    @property
    @pulumi.getter
    def mysql(self) -> pulumi.Output[Optional['outputs.ResourceMysql']]:
        return pulumi.get(self, "mysql")

    @property
    @pulumi.getter
    def neptune(self) -> pulumi.Output[Optional['outputs.ResourceNeptune']]:
        return pulumi.get(self, "neptune")

    @property
    @pulumi.getter(name="neptuneIam")
    def neptune_iam(self) -> pulumi.Output[Optional['outputs.ResourceNeptuneIam']]:
        return pulumi.get(self, "neptune_iam")

    @property
    @pulumi.getter
    def oracle(self) -> pulumi.Output[Optional['outputs.ResourceOracle']]:
        return pulumi.get(self, "oracle")

    @property
    @pulumi.getter
    def postgres(self) -> pulumi.Output[Optional['outputs.ResourcePostgres']]:
        return pulumi.get(self, "postgres")

    @property
    @pulumi.getter
    def presto(self) -> pulumi.Output[Optional['outputs.ResourcePresto']]:
        return pulumi.get(self, "presto")

    @property
    @pulumi.getter(name="rabbitmqAmqp091")
    def rabbitmq_amqp091(self) -> pulumi.Output[Optional['outputs.ResourceRabbitmqAmqp091']]:
        return pulumi.get(self, "rabbitmq_amqp091")

    @property
    @pulumi.getter(name="rawTcp")
    def raw_tcp(self) -> pulumi.Output[Optional['outputs.ResourceRawTcp']]:
        return pulumi.get(self, "raw_tcp")

    @property
    @pulumi.getter
    def rdp(self) -> pulumi.Output[Optional['outputs.ResourceRdp']]:
        return pulumi.get(self, "rdp")

    @property
    @pulumi.getter(name="rdsPostgresIam")
    def rds_postgres_iam(self) -> pulumi.Output[Optional['outputs.ResourceRdsPostgresIam']]:
        """
        RDSPostgresIAM is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "rds_postgres_iam")

    @property
    @pulumi.getter
    def redis(self) -> pulumi.Output[Optional['outputs.ResourceRedis']]:
        return pulumi.get(self, "redis")

    @property
    @pulumi.getter
    def redshift(self) -> pulumi.Output[Optional['outputs.ResourceRedshift']]:
        return pulumi.get(self, "redshift")

    @property
    @pulumi.getter(name="singleStore")
    def single_store(self) -> pulumi.Output[Optional['outputs.ResourceSingleStore']]:
        return pulumi.get(self, "single_store")

    @property
    @pulumi.getter
    def snowflake(self) -> pulumi.Output[Optional['outputs.ResourceSnowflake']]:
        return pulumi.get(self, "snowflake")

    @property
    @pulumi.getter
    def snowsight(self) -> pulumi.Output[Optional['outputs.ResourceSnowsight']]:
        return pulumi.get(self, "snowsight")

    @property
    @pulumi.getter(name="sqlServer")
    def sql_server(self) -> pulumi.Output[Optional['outputs.ResourceSqlServer']]:
        return pulumi.get(self, "sql_server")

    @property
    @pulumi.getter(name="sqlServerAzureAd")
    def sql_server_azure_ad(self) -> pulumi.Output[Optional['outputs.ResourceSqlServerAzureAd']]:
        return pulumi.get(self, "sql_server_azure_ad")

    @property
    @pulumi.getter(name="sqlServerKerberosAd")
    def sql_server_kerberos_ad(self) -> pulumi.Output[Optional['outputs.ResourceSqlServerKerberosAd']]:
        return pulumi.get(self, "sql_server_kerberos_ad")

    @property
    @pulumi.getter
    def ssh(self) -> pulumi.Output[Optional['outputs.ResourceSsh']]:
        return pulumi.get(self, "ssh")

    @property
    @pulumi.getter(name="sshCert")
    def ssh_cert(self) -> pulumi.Output[Optional['outputs.ResourceSshCert']]:
        return pulumi.get(self, "ssh_cert")

    @property
    @pulumi.getter(name="sshCustomerKey")
    def ssh_customer_key(self) -> pulumi.Output[Optional['outputs.ResourceSshCustomerKey']]:
        return pulumi.get(self, "ssh_customer_key")

    @property
    @pulumi.getter
    def sybase(self) -> pulumi.Output[Optional['outputs.ResourceSybase']]:
        return pulumi.get(self, "sybase")

    @property
    @pulumi.getter(name="sybaseIq")
    def sybase_iq(self) -> pulumi.Output[Optional['outputs.ResourceSybaseIq']]:
        return pulumi.get(self, "sybase_iq")

    @property
    @pulumi.getter
    def teradata(self) -> pulumi.Output[Optional['outputs.ResourceTeradata']]:
        return pulumi.get(self, "teradata")

    @property
    @pulumi.getter
    def trino(self) -> pulumi.Output[Optional['outputs.ResourceTrino']]:
        """
        Trino is currently unstable, and its API may change, or it may be removed, without a major version bump.
        """
        return pulumi.get(self, "trino")


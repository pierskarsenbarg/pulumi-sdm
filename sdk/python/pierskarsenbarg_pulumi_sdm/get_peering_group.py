# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetPeeringGroupResult',
    'AwaitableGetPeeringGroupResult',
    'get_peering_group',
    'get_peering_group_output',
]

@pulumi.output_type
class GetPeeringGroupResult:
    """
    A collection of values returned by getPeeringGroup.
    """
    def __init__(__self__, id=None, ids=None, name=None, peering_groups=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if peering_groups and not isinstance(peering_groups, list):
            raise TypeError("Expected argument 'peering_groups' to be a list")
        pulumi.set(__self__, "peering_groups", peering_groups)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique identifier of the PeeringGroup.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        """
        a list of strings of ids of data sources that match the given arguments.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Unique human-readable name of the PeeringGroup.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="peeringGroups")
    def peering_groups(self) -> Sequence['outputs.GetPeeringGroupPeeringGroupResult']:
        """
        A list where each element has the following attributes:
        """
        return pulumi.get(self, "peering_groups")


class AwaitableGetPeeringGroupResult(GetPeeringGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPeeringGroupResult(
            id=self.id,
            ids=self.ids,
            name=self.name,
            peering_groups=self.peering_groups)


def get_peering_group(id: Optional[str] = None,
                      name: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPeeringGroupResult:
    """
    PeeringGroups are the building blocks used for explicit network topology making.
     They may be linked to other peering groups. Sets of PeeringGroupResource and PeeringGroupNode can be attached to a peering group.


    :param str id: Unique identifier of the PeeringGroup.
    :param str name: Unique human-readable name of the PeeringGroup.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdm:index/getPeeringGroup:getPeeringGroup', __args__, opts=opts, typ=GetPeeringGroupResult).value

    return AwaitableGetPeeringGroupResult(
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        name=pulumi.get(__ret__, 'name'),
        peering_groups=pulumi.get(__ret__, 'peering_groups'))


@_utilities.lift_output_func(get_peering_group)
def get_peering_group_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                             name: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPeeringGroupResult]:
    """
    PeeringGroups are the building blocks used for explicit network topology making.
     They may be linked to other peering groups. Sets of PeeringGroupResource and PeeringGroupNode can be attached to a peering group.


    :param str id: Unique identifier of the PeeringGroup.
    :param str name: Unique human-readable name of the PeeringGroup.
    """
    ...

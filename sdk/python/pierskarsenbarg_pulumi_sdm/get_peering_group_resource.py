# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetPeeringGroupResourceResult',
    'AwaitableGetPeeringGroupResourceResult',
    'get_peering_group_resource',
    'get_peering_group_resource_output',
]

@pulumi.output_type
class GetPeeringGroupResourceResult:
    """
    A collection of values returned by getPeeringGroupResource.
    """
    def __init__(__self__, group_id=None, id=None, ids=None, peering_group_resources=None, resource_id=None):
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if peering_group_resources and not isinstance(peering_group_resources, list):
            raise TypeError("Expected argument 'peering_group_resources' to be a list")
        pulumi.set(__self__, "peering_group_resources", peering_group_resources)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        """
        Peering Group ID to which the resource will be attached to.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique identifier of the Attachment.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        """
        a list of strings of ids of data sources that match the given arguments.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="peeringGroupResources")
    def peering_group_resources(self) -> Sequence['outputs.GetPeeringGroupResourcePeeringGroupResourceResult']:
        """
        A list where each element has the following attributes:
        """
        return pulumi.get(self, "peering_group_resources")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        """
        Resource ID to be attached.
        """
        return pulumi.get(self, "resource_id")


class AwaitableGetPeeringGroupResourceResult(GetPeeringGroupResourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPeeringGroupResourceResult(
            group_id=self.group_id,
            id=self.id,
            ids=self.ids,
            peering_group_resources=self.peering_group_resources,
            resource_id=self.resource_id)


def get_peering_group_resource(group_id: Optional[str] = None,
                               id: Optional[str] = None,
                               resource_id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPeeringGroupResourceResult:
    """
    PeeringGroupResource represents the attachment between a PeeringGroup and a Resource.


    :param str group_id: Peering Group ID to which the resource will be attached to.
    :param str id: Unique identifier of the Attachment.
    :param str resource_id: Resource ID to be attached.
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    __args__['id'] = id
    __args__['resourceId'] = resource_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdm:index/getPeeringGroupResource:getPeeringGroupResource', __args__, opts=opts, typ=GetPeeringGroupResourceResult).value

    return AwaitableGetPeeringGroupResourceResult(
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        peering_group_resources=pulumi.get(__ret__, 'peering_group_resources'),
        resource_id=pulumi.get(__ret__, 'resource_id'))


@_utilities.lift_output_func(get_peering_group_resource)
def get_peering_group_resource_output(group_id: Optional[pulumi.Input[Optional[str]]] = None,
                                      id: Optional[pulumi.Input[Optional[str]]] = None,
                                      resource_id: Optional[pulumi.Input[Optional[str]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPeeringGroupResourceResult]:
    """
    PeeringGroupResource represents the attachment between a PeeringGroup and a Resource.


    :param str group_id: Peering Group ID to which the resource will be attached to.
    :param str id: Unique identifier of the Attachment.
    :param str resource_id: Resource ID to be attached.
    """
    ...

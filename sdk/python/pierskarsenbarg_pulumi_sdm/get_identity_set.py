# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetIdentitySetResult',
    'AwaitableGetIdentitySetResult',
    'get_identity_set',
    'get_identity_set_output',
]

@pulumi.output_type
class GetIdentitySetResult:
    """
    A collection of values returned by getIdentitySet.
    """
    def __init__(__self__, id=None, identity_sets=None, ids=None, name=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity_sets and not isinstance(identity_sets, list):
            raise TypeError("Expected argument 'identity_sets' to be a list")
        pulumi.set(__self__, "identity_sets", identity_sets)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique identifier of the IdentitySet.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identitySets")
    def identity_sets(self) -> Sequence['outputs.GetIdentitySetIdentitySetResult']:
        """
        A list where each element has the following attributes:
        """
        return pulumi.get(self, "identity_sets")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        """
        a list of strings of ids of data sources that match the given arguments.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Unique human-readable name of the IdentitySet.
        """
        return pulumi.get(self, "name")


class AwaitableGetIdentitySetResult(GetIdentitySetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIdentitySetResult(
            id=self.id,
            identity_sets=self.identity_sets,
            ids=self.ids,
            name=self.name)


def get_identity_set(id: Optional[str] = None,
                     name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIdentitySetResult:
    """
    A IdentitySet defines a group of identity aliases.
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    default = sdm.get_identity_set(name="default")
    ```


    :param str id: Unique identifier of the IdentitySet.
    :param str name: Unique human-readable name of the IdentitySet.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdm:index/getIdentitySet:getIdentitySet', __args__, opts=opts, typ=GetIdentitySetResult).value

    return AwaitableGetIdentitySetResult(
        id=pulumi.get(__ret__, 'id'),
        identity_sets=pulumi.get(__ret__, 'identity_sets'),
        ids=pulumi.get(__ret__, 'ids'),
        name=pulumi.get(__ret__, 'name'))


@_utilities.lift_output_func(get_identity_set)
def get_identity_set_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                            name: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIdentitySetResult]:
    """
    A IdentitySet defines a group of identity aliases.
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    default = sdm.get_identity_set(name="default")
    ```


    :param str id: Unique identifier of the IdentitySet.
    :param str name: Unique human-readable name of the IdentitySet.
    """
    ...

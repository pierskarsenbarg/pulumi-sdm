# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetProxyClusterKeyResult',
    'AwaitableGetProxyClusterKeyResult',
    'get_proxy_cluster_key',
    'get_proxy_cluster_key_output',
]

@pulumi.output_type
class GetProxyClusterKeyResult:
    """
    A collection of values returned by getProxyClusterKey.
    """
    def __init__(__self__, id=None, ids=None, proxy_cluster_id=None, proxy_cluster_keys=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if proxy_cluster_id and not isinstance(proxy_cluster_id, str):
            raise TypeError("Expected argument 'proxy_cluster_id' to be a str")
        pulumi.set(__self__, "proxy_cluster_id", proxy_cluster_id)
        if proxy_cluster_keys and not isinstance(proxy_cluster_keys, list):
            raise TypeError("Expected argument 'proxy_cluster_keys' to be a list")
        pulumi.set(__self__, "proxy_cluster_keys", proxy_cluster_keys)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique identifier of the Relay.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        """
        a list of strings of ids of data sources that match the given arguments.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="proxyClusterId")
    def proxy_cluster_id(self) -> Optional[str]:
        """
        The ID of the proxy cluster which this key authenticates to.
        """
        return pulumi.get(self, "proxy_cluster_id")

    @property
    @pulumi.getter(name="proxyClusterKeys")
    def proxy_cluster_keys(self) -> Sequence['outputs.GetProxyClusterKeyProxyClusterKeyResult']:
        """
        A list where each element has the following attributes:
        """
        return pulumi.get(self, "proxy_cluster_keys")


class AwaitableGetProxyClusterKeyResult(GetProxyClusterKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProxyClusterKeyResult(
            id=self.id,
            ids=self.ids,
            proxy_cluster_id=self.proxy_cluster_id,
            proxy_cluster_keys=self.proxy_cluster_keys)


def get_proxy_cluster_key(id: Optional[str] = None,
                          proxy_cluster_id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProxyClusterKeyResult:
    """
    Proxy Cluster Keys are authentication keys for all proxies within a cluster.
     The proxies within a cluster share the same key. One cluster can have
     multiple keys in order to facilitate key rotation.
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    proxy_cluster_key_query = sdm.get_proxy_cluster_key(proxy_cluster_id="n-233332245")
    ```


    :param str id: Unique identifier of the Relay.
    :param str proxy_cluster_id: The ID of the proxy cluster which this key authenticates to.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['proxyClusterId'] = proxy_cluster_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdm:index/getProxyClusterKey:getProxyClusterKey', __args__, opts=opts, typ=GetProxyClusterKeyResult).value

    return AwaitableGetProxyClusterKeyResult(
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        proxy_cluster_id=pulumi.get(__ret__, 'proxy_cluster_id'),
        proxy_cluster_keys=pulumi.get(__ret__, 'proxy_cluster_keys'))
def get_proxy_cluster_key_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                 proxy_cluster_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProxyClusterKeyResult]:
    """
    Proxy Cluster Keys are authentication keys for all proxies within a cluster.
     The proxies within a cluster share the same key. One cluster can have
     multiple keys in order to facilitate key rotation.
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    proxy_cluster_key_query = sdm.get_proxy_cluster_key(proxy_cluster_id="n-233332245")
    ```


    :param str id: Unique identifier of the Relay.
    :param str proxy_cluster_id: The ID of the proxy cluster which this key authenticates to.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['proxyClusterId'] = proxy_cluster_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdm:index/getProxyClusterKey:getProxyClusterKey', __args__, opts=opts, typ=GetProxyClusterKeyResult)
    return __ret__.apply(lambda __response__: GetProxyClusterKeyResult(
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids'),
        proxy_cluster_id=pulumi.get(__response__, 'proxy_cluster_id'),
        proxy_cluster_keys=pulumi.get(__response__, 'proxy_cluster_keys')))

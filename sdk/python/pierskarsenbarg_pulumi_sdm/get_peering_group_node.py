# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetPeeringGroupNodeResult',
    'AwaitableGetPeeringGroupNodeResult',
    'get_peering_group_node',
    'get_peering_group_node_output',
]

@pulumi.output_type
class GetPeeringGroupNodeResult:
    """
    A collection of values returned by getPeeringGroupNode.
    """
    def __init__(__self__, group_id=None, id=None, ids=None, node_id=None, peering_group_nodes=None):
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if node_id and not isinstance(node_id, str):
            raise TypeError("Expected argument 'node_id' to be a str")
        pulumi.set(__self__, "node_id", node_id)
        if peering_group_nodes and not isinstance(peering_group_nodes, list):
            raise TypeError("Expected argument 'peering_group_nodes' to be a list")
        pulumi.set(__self__, "peering_group_nodes", peering_group_nodes)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        """
        Peering Group ID to which the node will be attached to.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique identifier of the Attachment.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        """
        a list of strings of ids of data sources that match the given arguments.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[str]:
        """
        Node ID to be attached.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="peeringGroupNodes")
    def peering_group_nodes(self) -> Sequence['outputs.GetPeeringGroupNodePeeringGroupNodeResult']:
        """
        A list where each element has the following attributes:
        """
        return pulumi.get(self, "peering_group_nodes")


class AwaitableGetPeeringGroupNodeResult(GetPeeringGroupNodeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPeeringGroupNodeResult(
            group_id=self.group_id,
            id=self.id,
            ids=self.ids,
            node_id=self.node_id,
            peering_group_nodes=self.peering_group_nodes)


def get_peering_group_node(group_id: Optional[str] = None,
                           id: Optional[str] = None,
                           node_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPeeringGroupNodeResult:
    """
    PeeringGroupNode represents the attachment between a PeeringGroup and a Node.


    :param str group_id: Peering Group ID to which the node will be attached to.
    :param str id: Unique identifier of the Attachment.
    :param str node_id: Node ID to be attached.
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    __args__['id'] = id
    __args__['nodeId'] = node_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdm:index/getPeeringGroupNode:getPeeringGroupNode', __args__, opts=opts, typ=GetPeeringGroupNodeResult).value

    return AwaitableGetPeeringGroupNodeResult(
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        node_id=pulumi.get(__ret__, 'node_id'),
        peering_group_nodes=pulumi.get(__ret__, 'peering_group_nodes'))


@_utilities.lift_output_func(get_peering_group_node)
def get_peering_group_node_output(group_id: Optional[pulumi.Input[Optional[str]]] = None,
                                  id: Optional[pulumi.Input[Optional[str]]] = None,
                                  node_id: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPeeringGroupNodeResult]:
    """
    PeeringGroupNode represents the attachment between a PeeringGroup and a Node.


    :param str group_id: Peering Group ID to which the node will be attached to.
    :param str id: Unique identifier of the Attachment.
    :param str node_id: Node ID to be attached.
    """
    ...

# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetApprovalWorkflowApproverResult',
    'AwaitableGetApprovalWorkflowApproverResult',
    'get_approval_workflow_approver',
    'get_approval_workflow_approver_output',
]

@pulumi.output_type
class GetApprovalWorkflowApproverResult:
    """
    A collection of values returned by getApprovalWorkflowApprover.
    """
    def __init__(__self__, account_id=None, approval_flow_id=None, approval_step_id=None, approval_workflow_approvers=None, id=None, ids=None, role_id=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if approval_flow_id and not isinstance(approval_flow_id, str):
            raise TypeError("Expected argument 'approval_flow_id' to be a str")
        pulumi.set(__self__, "approval_flow_id", approval_flow_id)
        if approval_step_id and not isinstance(approval_step_id, str):
            raise TypeError("Expected argument 'approval_step_id' to be a str")
        pulumi.set(__self__, "approval_step_id", approval_step_id)
        if approval_workflow_approvers and not isinstance(approval_workflow_approvers, list):
            raise TypeError("Expected argument 'approval_workflow_approvers' to be a list")
        pulumi.set(__self__, "approval_workflow_approvers", approval_workflow_approvers)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if role_id and not isinstance(role_id, str):
            raise TypeError("Expected argument 'role_id' to be a str")
        pulumi.set(__self__, "role_id", role_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        """
        The approver account id.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="approvalFlowId")
    def approval_flow_id(self) -> Optional[str]:
        """
        The approval flow id specified the approval workflow that this approver belongs to
        """
        return pulumi.get(self, "approval_flow_id")

    @property
    @pulumi.getter(name="approvalStepId")
    def approval_step_id(self) -> Optional[str]:
        """
        The approval step id specified the approval flow step that this approver belongs to
        """
        return pulumi.get(self, "approval_step_id")

    @property
    @pulumi.getter(name="approvalWorkflowApprovers")
    def approval_workflow_approvers(self) -> Sequence['outputs.GetApprovalWorkflowApproverApprovalWorkflowApproverResult']:
        """
        A list where each element has the following attributes:
        """
        return pulumi.get(self, "approval_workflow_approvers")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique identifier of the ApprovalWorkflowApprover.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        """
        a list of strings of ids of data sources that match the given arguments.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[str]:
        """
        The approver role id
        """
        return pulumi.get(self, "role_id")


class AwaitableGetApprovalWorkflowApproverResult(GetApprovalWorkflowApproverResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApprovalWorkflowApproverResult(
            account_id=self.account_id,
            approval_flow_id=self.approval_flow_id,
            approval_step_id=self.approval_step_id,
            approval_workflow_approvers=self.approval_workflow_approvers,
            id=self.id,
            ids=self.ids,
            role_id=self.role_id)


def get_approval_workflow_approver(account_id: Optional[str] = None,
                                   approval_flow_id: Optional[str] = None,
                                   approval_step_id: Optional[str] = None,
                                   id: Optional[str] = None,
                                   role_id: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApprovalWorkflowApproverResult:
    """
    ApprovalWorkflowApprover links an approval workflow approver to an ApprovalWorkflowStep
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    approval_workflow_approver_account_query = sdm.get_approval_workflow_approver(account_id="a-234605",
        approval_flow_id="af-6799234",
        approval_step_id="afs-2956266")
    approval_workflow_approver_role_query = sdm.get_approval_workflow_approver(approval_flow_id="af-1935694",
        approval_step_id="afs-9245942",
        role_id="r-542982")
    ```


    :param str account_id: The approver account id.
    :param str approval_flow_id: The approval flow id specified the approval workflow that this approver belongs to
    :param str approval_step_id: The approval step id specified the approval flow step that this approver belongs to
    :param str id: Unique identifier of the ApprovalWorkflowApprover.
    :param str role_id: The approver role id
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['approvalFlowId'] = approval_flow_id
    __args__['approvalStepId'] = approval_step_id
    __args__['id'] = id
    __args__['roleId'] = role_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdm:index/getApprovalWorkflowApprover:getApprovalWorkflowApprover', __args__, opts=opts, typ=GetApprovalWorkflowApproverResult).value

    return AwaitableGetApprovalWorkflowApproverResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        approval_flow_id=pulumi.get(__ret__, 'approval_flow_id'),
        approval_step_id=pulumi.get(__ret__, 'approval_step_id'),
        approval_workflow_approvers=pulumi.get(__ret__, 'approval_workflow_approvers'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        role_id=pulumi.get(__ret__, 'role_id'))


@_utilities.lift_output_func(get_approval_workflow_approver)
def get_approval_workflow_approver_output(account_id: Optional[pulumi.Input[Optional[str]]] = None,
                                          approval_flow_id: Optional[pulumi.Input[Optional[str]]] = None,
                                          approval_step_id: Optional[pulumi.Input[Optional[str]]] = None,
                                          id: Optional[pulumi.Input[Optional[str]]] = None,
                                          role_id: Optional[pulumi.Input[Optional[str]]] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApprovalWorkflowApproverResult]:
    """
    ApprovalWorkflowApprover links an approval workflow approver to an ApprovalWorkflowStep
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    approval_workflow_approver_account_query = sdm.get_approval_workflow_approver(account_id="a-234605",
        approval_flow_id="af-6799234",
        approval_step_id="afs-2956266")
    approval_workflow_approver_role_query = sdm.get_approval_workflow_approver(approval_flow_id="af-1935694",
        approval_step_id="afs-9245942",
        role_id="r-542982")
    ```


    :param str account_id: The approver account id.
    :param str approval_flow_id: The approval flow id specified the approval workflow that this approver belongs to
    :param str approval_step_id: The approval step id specified the approval flow step that this approver belongs to
    :param str id: Unique identifier of the ApprovalWorkflowApprover.
    :param str role_id: The approver role id
    """
    ...

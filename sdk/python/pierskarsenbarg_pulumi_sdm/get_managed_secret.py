# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetManagedSecretResult',
    'AwaitableGetManagedSecretResult',
    'get_managed_secret',
    'get_managed_secret_output',
]

@pulumi.output_type
class GetManagedSecretResult:
    """
    A collection of values returned by getManagedSecret.
    """
    def __init__(__self__, config=None, expires_at=None, id=None, ids=None, last_rotated_at=None, managed_secrets=None, name=None, secret_engine_id=None, secret_store_path=None, tags=None, value=None):
        if config and not isinstance(config, str):
            raise TypeError("Expected argument 'config' to be a str")
        pulumi.set(__self__, "config", config)
        if expires_at and not isinstance(expires_at, str):
            raise TypeError("Expected argument 'expires_at' to be a str")
        pulumi.set(__self__, "expires_at", expires_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if last_rotated_at and not isinstance(last_rotated_at, str):
            raise TypeError("Expected argument 'last_rotated_at' to be a str")
        pulumi.set(__self__, "last_rotated_at", last_rotated_at)
        if managed_secrets and not isinstance(managed_secrets, list):
            raise TypeError("Expected argument 'managed_secrets' to be a list")
        pulumi.set(__self__, "managed_secrets", managed_secrets)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if secret_engine_id and not isinstance(secret_engine_id, str):
            raise TypeError("Expected argument 'secret_engine_id' to be a str")
        pulumi.set(__self__, "secret_engine_id", secret_engine_id)
        if secret_store_path and not isinstance(secret_store_path, str):
            raise TypeError("Expected argument 'secret_store_path' to be a str")
        pulumi.set(__self__, "secret_store_path", secret_store_path)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if value and not isinstance(value, str):
            raise TypeError("Expected argument 'value' to be a str")
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def config(self) -> _builtins.str:
        """
        public part of the secret value
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> _builtins.str:
        """
        Timestamp of when secret is going to be rotated
        """
        return pulumi.get(self, "expires_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Unique identifier of the Managed Secret.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ids(self) -> Sequence[_builtins.str]:
        """
        a list of strings of ids of data sources that match the given arguments.
        """
        return pulumi.get(self, "ids")

    @_builtins.property
    @pulumi.getter(name="lastRotatedAt")
    def last_rotated_at(self) -> _builtins.str:
        """
        Timestamp of when secret was last rotated
        """
        return pulumi.get(self, "last_rotated_at")

    @_builtins.property
    @pulumi.getter(name="managedSecrets")
    def managed_secrets(self) -> Sequence['outputs.GetManagedSecretManagedSecretResult']:
        """
        A list where each element has the following attributes:
        """
        return pulumi.get(self, "managed_secrets")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Unique human-readable name of the Managed Secret.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="secretEngineId")
    def secret_engine_id(self) -> Optional[_builtins.str]:
        """
        An ID of a Secret Engine linked with the Managed Secret.
        """
        return pulumi.get(self, "secret_engine_id")

    @_builtins.property
    @pulumi.getter(name="secretStorePath")
    def secret_store_path(self) -> _builtins.str:
        """
        Path in a secret store.
        """
        return pulumi.get(self, "secret_store_path")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Sensitive value of the secret.
        """
        return pulumi.get(self, "value")


class AwaitableGetManagedSecretResult(GetManagedSecretResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagedSecretResult(
            config=self.config,
            expires_at=self.expires_at,
            id=self.id,
            ids=self.ids,
            last_rotated_at=self.last_rotated_at,
            managed_secrets=self.managed_secrets,
            name=self.name,
            secret_engine_id=self.secret_engine_id,
            secret_store_path=self.secret_store_path,
            tags=self.tags,
            value=self.value)


def get_managed_secret(id: Optional[_builtins.str] = None,
                       name: Optional[_builtins.str] = None,
                       secret_engine_id: Optional[_builtins.str] = None,
                       tags: Optional[Mapping[str, _builtins.str]] = None,
                       value: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetManagedSecretResult:
    """
    ManagedSecret contains details about managed secret


    :param _builtins.str id: Unique identifier of the Managed Secret.
    :param _builtins.str name: Unique human-readable name of the Managed Secret.
    :param _builtins.str secret_engine_id: An ID of a Secret Engine linked with the Managed Secret.
    :param Mapping[str, _builtins.str] tags: Tags is a map of key, value pairs.
    :param _builtins.str value: Sensitive value of the secret.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['secretEngineId'] = secret_engine_id
    __args__['tags'] = tags
    __args__['value'] = value
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdm:index/getManagedSecret:getManagedSecret', __args__, opts=opts, typ=GetManagedSecretResult).value

    return AwaitableGetManagedSecretResult(
        config=pulumi.get(__ret__, 'config'),
        expires_at=pulumi.get(__ret__, 'expires_at'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        last_rotated_at=pulumi.get(__ret__, 'last_rotated_at'),
        managed_secrets=pulumi.get(__ret__, 'managed_secrets'),
        name=pulumi.get(__ret__, 'name'),
        secret_engine_id=pulumi.get(__ret__, 'secret_engine_id'),
        secret_store_path=pulumi.get(__ret__, 'secret_store_path'),
        tags=pulumi.get(__ret__, 'tags'),
        value=pulumi.get(__ret__, 'value'))
def get_managed_secret_output(id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              secret_engine_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              tags: Optional[pulumi.Input[Optional[Mapping[str, _builtins.str]]]] = None,
                              value: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetManagedSecretResult]:
    """
    ManagedSecret contains details about managed secret


    :param _builtins.str id: Unique identifier of the Managed Secret.
    :param _builtins.str name: Unique human-readable name of the Managed Secret.
    :param _builtins.str secret_engine_id: An ID of a Secret Engine linked with the Managed Secret.
    :param Mapping[str, _builtins.str] tags: Tags is a map of key, value pairs.
    :param _builtins.str value: Sensitive value of the secret.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['secretEngineId'] = secret_engine_id
    __args__['tags'] = tags
    __args__['value'] = value
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdm:index/getManagedSecret:getManagedSecret', __args__, opts=opts, typ=GetManagedSecretResult)
    return __ret__.apply(lambda __response__: GetManagedSecretResult(
        config=pulumi.get(__response__, 'config'),
        expires_at=pulumi.get(__response__, 'expires_at'),
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids'),
        last_rotated_at=pulumi.get(__response__, 'last_rotated_at'),
        managed_secrets=pulumi.get(__response__, 'managed_secrets'),
        name=pulumi.get(__response__, 'name'),
        secret_engine_id=pulumi.get(__response__, 'secret_engine_id'),
        secret_store_path=pulumi.get(__response__, 'secret_store_path'),
        tags=pulumi.get(__response__, 'tags'),
        value=pulumi.get(__response__, 'value')))

# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ProxyClusterKeyArgs', 'ProxyClusterKey']

@pulumi.input_type
class ProxyClusterKeyArgs:
    def __init__(__self__, *,
                 proxy_cluster_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a ProxyClusterKey resource.
        :param pulumi.Input[str] proxy_cluster_id: The ID of the proxy cluster which this key authenticates to.
        """
        pulumi.set(__self__, "proxy_cluster_id", proxy_cluster_id)

    @property
    @pulumi.getter(name="proxyClusterId")
    def proxy_cluster_id(self) -> pulumi.Input[str]:
        """
        The ID of the proxy cluster which this key authenticates to.
        """
        return pulumi.get(self, "proxy_cluster_id")

    @proxy_cluster_id.setter
    def proxy_cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "proxy_cluster_id", value)


@pulumi.input_type
class _ProxyClusterKeyState:
    def __init__(__self__, *,
                 proxy_cluster_id: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ProxyClusterKey resources.
        :param pulumi.Input[str] proxy_cluster_id: The ID of the proxy cluster which this key authenticates to.
        """
        if proxy_cluster_id is not None:
            pulumi.set(__self__, "proxy_cluster_id", proxy_cluster_id)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="proxyClusterId")
    def proxy_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the proxy cluster which this key authenticates to.
        """
        return pulumi.get(self, "proxy_cluster_id")

    @proxy_cluster_id.setter
    def proxy_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_cluster_id", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


class ProxyClusterKey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 proxy_cluster_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Proxy Cluster Keys are authentication keys for all proxies within a cluster.
         The proxies within a cluster share the same key. One cluster can have
         multiple keys in order to facilitate key rotation.
        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_sdm as sdm

        test_proxy_cluster_key = sdm.ProxyClusterKey("testProxyClusterKey", proxy_cluster_id="n-12345123")
        ```
        This resource can be imported using the import command.

        ## Import

        A ProxyClusterKey can be imported using the id, e.g.,

        ```sh
        $ pulumi import sdm:index/proxyClusterKey:ProxyClusterKey example gk-12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] proxy_cluster_id: The ID of the proxy cluster which this key authenticates to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProxyClusterKeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Proxy Cluster Keys are authentication keys for all proxies within a cluster.
         The proxies within a cluster share the same key. One cluster can have
         multiple keys in order to facilitate key rotation.
        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_sdm as sdm

        test_proxy_cluster_key = sdm.ProxyClusterKey("testProxyClusterKey", proxy_cluster_id="n-12345123")
        ```
        This resource can be imported using the import command.

        ## Import

        A ProxyClusterKey can be imported using the id, e.g.,

        ```sh
        $ pulumi import sdm:index/proxyClusterKey:ProxyClusterKey example gk-12345678
        ```

        :param str resource_name: The name of the resource.
        :param ProxyClusterKeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProxyClusterKeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 proxy_cluster_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProxyClusterKeyArgs.__new__(ProxyClusterKeyArgs)

            if proxy_cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'proxy_cluster_id'")
            __props__.__dict__["proxy_cluster_id"] = proxy_cluster_id
            __props__.__dict__["secret_key"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["secretKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ProxyClusterKey, __self__).__init__(
            'sdm:index/proxyClusterKey:ProxyClusterKey',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            proxy_cluster_id: Optional[pulumi.Input[str]] = None,
            secret_key: Optional[pulumi.Input[str]] = None) -> 'ProxyClusterKey':
        """
        Get an existing ProxyClusterKey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] proxy_cluster_id: The ID of the proxy cluster which this key authenticates to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProxyClusterKeyState.__new__(_ProxyClusterKeyState)

        __props__.__dict__["proxy_cluster_id"] = proxy_cluster_id
        __props__.__dict__["secret_key"] = secret_key
        return ProxyClusterKey(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="proxyClusterId")
    def proxy_cluster_id(self) -> pulumi.Output[str]:
        """
        The ID of the proxy cluster which this key authenticates to.
        """
        return pulumi.get(self, "proxy_cluster_id")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "secret_key")


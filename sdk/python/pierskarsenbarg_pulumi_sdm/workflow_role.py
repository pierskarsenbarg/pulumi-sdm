# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['WorkflowRoleArgs', 'WorkflowRole']

@pulumi.input_type
class WorkflowRoleArgs:
    def __init__(__self__, *,
                 role_id: pulumi.Input[str],
                 workflow_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a WorkflowRole resource.
        :param pulumi.Input[str] role_id: The role id.
        :param pulumi.Input[str] workflow_id: The workflow id.
        """
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "workflow_id", workflow_id)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Input[str]:
        """
        The role id.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Input[str]:
        """
        The workflow id.
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workflow_id", value)


@pulumi.input_type
class _WorkflowRoleState:
    def __init__(__self__, *,
                 role_id: Optional[pulumi.Input[str]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WorkflowRole resources.
        :param pulumi.Input[str] role_id: The role id.
        :param pulumi.Input[str] workflow_id: The workflow id.
        """
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[str]]:
        """
        The role id.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[pulumi.Input[str]]:
        """
        The workflow id.
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_id", value)


class WorkflowRole(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        WorkflowRole links a role to a workflow. The linked roles indicate which roles a user must be a part of
         to request access to a resource via the workflow.
        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_sdm as sdm

        workflow_role_example = sdm.WorkflowRole("workflowRoleExample",
            role_id="r-243561",
            workflow_id="aw-343865")
        ```
        This resource can be imported using the import command.

        ## Import

        A WorkflowRole can be imported using the id, e.g.,

        ```sh
         $ pulumi import sdm:index/workflowRole:WorkflowRole example wr-12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] role_id: The role id.
        :param pulumi.Input[str] workflow_id: The workflow id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkflowRoleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        WorkflowRole links a role to a workflow. The linked roles indicate which roles a user must be a part of
         to request access to a resource via the workflow.
        ## Example Usage

        ```python
        import pulumi
        import pierskarsenbarg_pulumi_sdm as sdm

        workflow_role_example = sdm.WorkflowRole("workflowRoleExample",
            role_id="r-243561",
            workflow_id="aw-343865")
        ```
        This resource can be imported using the import command.

        ## Import

        A WorkflowRole can be imported using the id, e.g.,

        ```sh
         $ pulumi import sdm:index/workflowRole:WorkflowRole example wr-12345678
        ```

        :param str resource_name: The name of the resource.
        :param WorkflowRoleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkflowRoleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkflowRoleArgs.__new__(WorkflowRoleArgs)

            if role_id is None and not opts.urn:
                raise TypeError("Missing required property 'role_id'")
            __props__.__dict__["role_id"] = role_id
            if workflow_id is None and not opts.urn:
                raise TypeError("Missing required property 'workflow_id'")
            __props__.__dict__["workflow_id"] = workflow_id
        super(WorkflowRole, __self__).__init__(
            'sdm:index/workflowRole:WorkflowRole',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            role_id: Optional[pulumi.Input[str]] = None,
            workflow_id: Optional[pulumi.Input[str]] = None) -> 'WorkflowRole':
        """
        Get an existing WorkflowRole resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] role_id: The role id.
        :param pulumi.Input[str] workflow_id: The workflow id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkflowRoleState.__new__(_WorkflowRoleState)

        __props__.__dict__["role_id"] = role_id
        __props__.__dict__["workflow_id"] = workflow_id
        return WorkflowRole(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[str]:
        """
        The role id.
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Output[str]:
        """
        The workflow id.
        """
        return pulumi.get(self, "workflow_id")


# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SecretStoreArgs', 'SecretStore']

@pulumi.input_type
class SecretStoreArgs:
    def __init__(__self__, *,
                 active_directory_store: Optional[pulumi.Input['SecretStoreActiveDirectoryStoreArgs']] = None,
                 aws: Optional[pulumi.Input['SecretStoreAwsArgs']] = None,
                 aws_cert_x509: Optional[pulumi.Input['SecretStoreAwsCertX509Args']] = None,
                 azure_store: Optional[pulumi.Input['SecretStoreAzureStoreArgs']] = None,
                 cyberark_conjur: Optional[pulumi.Input['SecretStoreCyberarkConjurArgs']] = None,
                 cyberark_pam: Optional[pulumi.Input['SecretStoreCyberarkPamArgs']] = None,
                 cyberark_pam_experimental: Optional[pulumi.Input['SecretStoreCyberarkPamExperimentalArgs']] = None,
                 delinea_store: Optional[pulumi.Input['SecretStoreDelineaStoreArgs']] = None,
                 gcp_cert_x509_store: Optional[pulumi.Input['SecretStoreGcpCertX509StoreArgs']] = None,
                 gcp_store: Optional[pulumi.Input['SecretStoreGcpStoreArgs']] = None,
                 keyfactor_x509_store: Optional[pulumi.Input['SecretStoreKeyfactorX509StoreArgs']] = None,
                 vault_approle: Optional[pulumi.Input['SecretStoreVaultApproleArgs']] = None,
                 vault_approle_cert_ssh: Optional[pulumi.Input['SecretStoreVaultApproleCertSshArgs']] = None,
                 vault_approle_cert_x509: Optional[pulumi.Input['SecretStoreVaultApproleCertX509Args']] = None,
                 vault_tls: Optional[pulumi.Input['SecretStoreVaultTlsArgs']] = None,
                 vault_tls_cert_ssh: Optional[pulumi.Input['SecretStoreVaultTlsCertSshArgs']] = None,
                 vault_tls_cert_x509: Optional[pulumi.Input['SecretStoreVaultTlsCertX509Args']] = None,
                 vault_token: Optional[pulumi.Input['SecretStoreVaultTokenArgs']] = None,
                 vault_token_cert_ssh: Optional[pulumi.Input['SecretStoreVaultTokenCertSshArgs']] = None,
                 vault_token_cert_x509: Optional[pulumi.Input['SecretStoreVaultTokenCertX509Args']] = None):
        """
        The set of arguments for constructing a SecretStore resource.
        :param pulumi.Input['SecretStoreCyberarkPamExperimentalArgs'] cyberark_pam_experimental: CyberarkPAMExperimentalStore is currently unstable, and its API may change, or it may be removed, without a major
               version bump.
        """
        if active_directory_store is not None:
            pulumi.set(__self__, "active_directory_store", active_directory_store)
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if aws_cert_x509 is not None:
            pulumi.set(__self__, "aws_cert_x509", aws_cert_x509)
        if azure_store is not None:
            pulumi.set(__self__, "azure_store", azure_store)
        if cyberark_conjur is not None:
            pulumi.set(__self__, "cyberark_conjur", cyberark_conjur)
        if cyberark_pam is not None:
            pulumi.set(__self__, "cyberark_pam", cyberark_pam)
        if cyberark_pam_experimental is not None:
            pulumi.set(__self__, "cyberark_pam_experimental", cyberark_pam_experimental)
        if delinea_store is not None:
            pulumi.set(__self__, "delinea_store", delinea_store)
        if gcp_cert_x509_store is not None:
            pulumi.set(__self__, "gcp_cert_x509_store", gcp_cert_x509_store)
        if gcp_store is not None:
            pulumi.set(__self__, "gcp_store", gcp_store)
        if keyfactor_x509_store is not None:
            pulumi.set(__self__, "keyfactor_x509_store", keyfactor_x509_store)
        if vault_approle is not None:
            pulumi.set(__self__, "vault_approle", vault_approle)
        if vault_approle_cert_ssh is not None:
            pulumi.set(__self__, "vault_approle_cert_ssh", vault_approle_cert_ssh)
        if vault_approle_cert_x509 is not None:
            pulumi.set(__self__, "vault_approle_cert_x509", vault_approle_cert_x509)
        if vault_tls is not None:
            pulumi.set(__self__, "vault_tls", vault_tls)
        if vault_tls_cert_ssh is not None:
            pulumi.set(__self__, "vault_tls_cert_ssh", vault_tls_cert_ssh)
        if vault_tls_cert_x509 is not None:
            pulumi.set(__self__, "vault_tls_cert_x509", vault_tls_cert_x509)
        if vault_token is not None:
            pulumi.set(__self__, "vault_token", vault_token)
        if vault_token_cert_ssh is not None:
            pulumi.set(__self__, "vault_token_cert_ssh", vault_token_cert_ssh)
        if vault_token_cert_x509 is not None:
            pulumi.set(__self__, "vault_token_cert_x509", vault_token_cert_x509)

    @property
    @pulumi.getter(name="activeDirectoryStore")
    def active_directory_store(self) -> Optional[pulumi.Input['SecretStoreActiveDirectoryStoreArgs']]:
        return pulumi.get(self, "active_directory_store")

    @active_directory_store.setter
    def active_directory_store(self, value: Optional[pulumi.Input['SecretStoreActiveDirectoryStoreArgs']]):
        pulumi.set(self, "active_directory_store", value)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['SecretStoreAwsArgs']]:
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['SecretStoreAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter(name="awsCertX509")
    def aws_cert_x509(self) -> Optional[pulumi.Input['SecretStoreAwsCertX509Args']]:
        return pulumi.get(self, "aws_cert_x509")

    @aws_cert_x509.setter
    def aws_cert_x509(self, value: Optional[pulumi.Input['SecretStoreAwsCertX509Args']]):
        pulumi.set(self, "aws_cert_x509", value)

    @property
    @pulumi.getter(name="azureStore")
    def azure_store(self) -> Optional[pulumi.Input['SecretStoreAzureStoreArgs']]:
        return pulumi.get(self, "azure_store")

    @azure_store.setter
    def azure_store(self, value: Optional[pulumi.Input['SecretStoreAzureStoreArgs']]):
        pulumi.set(self, "azure_store", value)

    @property
    @pulumi.getter(name="cyberarkConjur")
    def cyberark_conjur(self) -> Optional[pulumi.Input['SecretStoreCyberarkConjurArgs']]:
        return pulumi.get(self, "cyberark_conjur")

    @cyberark_conjur.setter
    def cyberark_conjur(self, value: Optional[pulumi.Input['SecretStoreCyberarkConjurArgs']]):
        pulumi.set(self, "cyberark_conjur", value)

    @property
    @pulumi.getter(name="cyberarkPam")
    def cyberark_pam(self) -> Optional[pulumi.Input['SecretStoreCyberarkPamArgs']]:
        return pulumi.get(self, "cyberark_pam")

    @cyberark_pam.setter
    def cyberark_pam(self, value: Optional[pulumi.Input['SecretStoreCyberarkPamArgs']]):
        pulumi.set(self, "cyberark_pam", value)

    @property
    @pulumi.getter(name="cyberarkPamExperimental")
    def cyberark_pam_experimental(self) -> Optional[pulumi.Input['SecretStoreCyberarkPamExperimentalArgs']]:
        """
        CyberarkPAMExperimentalStore is currently unstable, and its API may change, or it may be removed, without a major
        version bump.
        """
        return pulumi.get(self, "cyberark_pam_experimental")

    @cyberark_pam_experimental.setter
    def cyberark_pam_experimental(self, value: Optional[pulumi.Input['SecretStoreCyberarkPamExperimentalArgs']]):
        pulumi.set(self, "cyberark_pam_experimental", value)

    @property
    @pulumi.getter(name="delineaStore")
    def delinea_store(self) -> Optional[pulumi.Input['SecretStoreDelineaStoreArgs']]:
        return pulumi.get(self, "delinea_store")

    @delinea_store.setter
    def delinea_store(self, value: Optional[pulumi.Input['SecretStoreDelineaStoreArgs']]):
        pulumi.set(self, "delinea_store", value)

    @property
    @pulumi.getter(name="gcpCertX509Store")
    def gcp_cert_x509_store(self) -> Optional[pulumi.Input['SecretStoreGcpCertX509StoreArgs']]:
        return pulumi.get(self, "gcp_cert_x509_store")

    @gcp_cert_x509_store.setter
    def gcp_cert_x509_store(self, value: Optional[pulumi.Input['SecretStoreGcpCertX509StoreArgs']]):
        pulumi.set(self, "gcp_cert_x509_store", value)

    @property
    @pulumi.getter(name="gcpStore")
    def gcp_store(self) -> Optional[pulumi.Input['SecretStoreGcpStoreArgs']]:
        return pulumi.get(self, "gcp_store")

    @gcp_store.setter
    def gcp_store(self, value: Optional[pulumi.Input['SecretStoreGcpStoreArgs']]):
        pulumi.set(self, "gcp_store", value)

    @property
    @pulumi.getter(name="keyfactorX509Store")
    def keyfactor_x509_store(self) -> Optional[pulumi.Input['SecretStoreKeyfactorX509StoreArgs']]:
        return pulumi.get(self, "keyfactor_x509_store")

    @keyfactor_x509_store.setter
    def keyfactor_x509_store(self, value: Optional[pulumi.Input['SecretStoreKeyfactorX509StoreArgs']]):
        pulumi.set(self, "keyfactor_x509_store", value)

    @property
    @pulumi.getter(name="vaultApprole")
    def vault_approle(self) -> Optional[pulumi.Input['SecretStoreVaultApproleArgs']]:
        return pulumi.get(self, "vault_approle")

    @vault_approle.setter
    def vault_approle(self, value: Optional[pulumi.Input['SecretStoreVaultApproleArgs']]):
        pulumi.set(self, "vault_approle", value)

    @property
    @pulumi.getter(name="vaultApproleCertSsh")
    def vault_approle_cert_ssh(self) -> Optional[pulumi.Input['SecretStoreVaultApproleCertSshArgs']]:
        return pulumi.get(self, "vault_approle_cert_ssh")

    @vault_approle_cert_ssh.setter
    def vault_approle_cert_ssh(self, value: Optional[pulumi.Input['SecretStoreVaultApproleCertSshArgs']]):
        pulumi.set(self, "vault_approle_cert_ssh", value)

    @property
    @pulumi.getter(name="vaultApproleCertX509")
    def vault_approle_cert_x509(self) -> Optional[pulumi.Input['SecretStoreVaultApproleCertX509Args']]:
        return pulumi.get(self, "vault_approle_cert_x509")

    @vault_approle_cert_x509.setter
    def vault_approle_cert_x509(self, value: Optional[pulumi.Input['SecretStoreVaultApproleCertX509Args']]):
        pulumi.set(self, "vault_approle_cert_x509", value)

    @property
    @pulumi.getter(name="vaultTls")
    def vault_tls(self) -> Optional[pulumi.Input['SecretStoreVaultTlsArgs']]:
        return pulumi.get(self, "vault_tls")

    @vault_tls.setter
    def vault_tls(self, value: Optional[pulumi.Input['SecretStoreVaultTlsArgs']]):
        pulumi.set(self, "vault_tls", value)

    @property
    @pulumi.getter(name="vaultTlsCertSsh")
    def vault_tls_cert_ssh(self) -> Optional[pulumi.Input['SecretStoreVaultTlsCertSshArgs']]:
        return pulumi.get(self, "vault_tls_cert_ssh")

    @vault_tls_cert_ssh.setter
    def vault_tls_cert_ssh(self, value: Optional[pulumi.Input['SecretStoreVaultTlsCertSshArgs']]):
        pulumi.set(self, "vault_tls_cert_ssh", value)

    @property
    @pulumi.getter(name="vaultTlsCertX509")
    def vault_tls_cert_x509(self) -> Optional[pulumi.Input['SecretStoreVaultTlsCertX509Args']]:
        return pulumi.get(self, "vault_tls_cert_x509")

    @vault_tls_cert_x509.setter
    def vault_tls_cert_x509(self, value: Optional[pulumi.Input['SecretStoreVaultTlsCertX509Args']]):
        pulumi.set(self, "vault_tls_cert_x509", value)

    @property
    @pulumi.getter(name="vaultToken")
    def vault_token(self) -> Optional[pulumi.Input['SecretStoreVaultTokenArgs']]:
        return pulumi.get(self, "vault_token")

    @vault_token.setter
    def vault_token(self, value: Optional[pulumi.Input['SecretStoreVaultTokenArgs']]):
        pulumi.set(self, "vault_token", value)

    @property
    @pulumi.getter(name="vaultTokenCertSsh")
    def vault_token_cert_ssh(self) -> Optional[pulumi.Input['SecretStoreVaultTokenCertSshArgs']]:
        return pulumi.get(self, "vault_token_cert_ssh")

    @vault_token_cert_ssh.setter
    def vault_token_cert_ssh(self, value: Optional[pulumi.Input['SecretStoreVaultTokenCertSshArgs']]):
        pulumi.set(self, "vault_token_cert_ssh", value)

    @property
    @pulumi.getter(name="vaultTokenCertX509")
    def vault_token_cert_x509(self) -> Optional[pulumi.Input['SecretStoreVaultTokenCertX509Args']]:
        return pulumi.get(self, "vault_token_cert_x509")

    @vault_token_cert_x509.setter
    def vault_token_cert_x509(self, value: Optional[pulumi.Input['SecretStoreVaultTokenCertX509Args']]):
        pulumi.set(self, "vault_token_cert_x509", value)


@pulumi.input_type
class _SecretStoreState:
    def __init__(__self__, *,
                 active_directory_store: Optional[pulumi.Input['SecretStoreActiveDirectoryStoreArgs']] = None,
                 aws: Optional[pulumi.Input['SecretStoreAwsArgs']] = None,
                 aws_cert_x509: Optional[pulumi.Input['SecretStoreAwsCertX509Args']] = None,
                 azure_store: Optional[pulumi.Input['SecretStoreAzureStoreArgs']] = None,
                 cyberark_conjur: Optional[pulumi.Input['SecretStoreCyberarkConjurArgs']] = None,
                 cyberark_pam: Optional[pulumi.Input['SecretStoreCyberarkPamArgs']] = None,
                 cyberark_pam_experimental: Optional[pulumi.Input['SecretStoreCyberarkPamExperimentalArgs']] = None,
                 delinea_store: Optional[pulumi.Input['SecretStoreDelineaStoreArgs']] = None,
                 gcp_cert_x509_store: Optional[pulumi.Input['SecretStoreGcpCertX509StoreArgs']] = None,
                 gcp_store: Optional[pulumi.Input['SecretStoreGcpStoreArgs']] = None,
                 keyfactor_x509_store: Optional[pulumi.Input['SecretStoreKeyfactorX509StoreArgs']] = None,
                 vault_approle: Optional[pulumi.Input['SecretStoreVaultApproleArgs']] = None,
                 vault_approle_cert_ssh: Optional[pulumi.Input['SecretStoreVaultApproleCertSshArgs']] = None,
                 vault_approle_cert_x509: Optional[pulumi.Input['SecretStoreVaultApproleCertX509Args']] = None,
                 vault_tls: Optional[pulumi.Input['SecretStoreVaultTlsArgs']] = None,
                 vault_tls_cert_ssh: Optional[pulumi.Input['SecretStoreVaultTlsCertSshArgs']] = None,
                 vault_tls_cert_x509: Optional[pulumi.Input['SecretStoreVaultTlsCertX509Args']] = None,
                 vault_token: Optional[pulumi.Input['SecretStoreVaultTokenArgs']] = None,
                 vault_token_cert_ssh: Optional[pulumi.Input['SecretStoreVaultTokenCertSshArgs']] = None,
                 vault_token_cert_x509: Optional[pulumi.Input['SecretStoreVaultTokenCertX509Args']] = None):
        """
        Input properties used for looking up and filtering SecretStore resources.
        :param pulumi.Input['SecretStoreCyberarkPamExperimentalArgs'] cyberark_pam_experimental: CyberarkPAMExperimentalStore is currently unstable, and its API may change, or it may be removed, without a major
               version bump.
        """
        if active_directory_store is not None:
            pulumi.set(__self__, "active_directory_store", active_directory_store)
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if aws_cert_x509 is not None:
            pulumi.set(__self__, "aws_cert_x509", aws_cert_x509)
        if azure_store is not None:
            pulumi.set(__self__, "azure_store", azure_store)
        if cyberark_conjur is not None:
            pulumi.set(__self__, "cyberark_conjur", cyberark_conjur)
        if cyberark_pam is not None:
            pulumi.set(__self__, "cyberark_pam", cyberark_pam)
        if cyberark_pam_experimental is not None:
            pulumi.set(__self__, "cyberark_pam_experimental", cyberark_pam_experimental)
        if delinea_store is not None:
            pulumi.set(__self__, "delinea_store", delinea_store)
        if gcp_cert_x509_store is not None:
            pulumi.set(__self__, "gcp_cert_x509_store", gcp_cert_x509_store)
        if gcp_store is not None:
            pulumi.set(__self__, "gcp_store", gcp_store)
        if keyfactor_x509_store is not None:
            pulumi.set(__self__, "keyfactor_x509_store", keyfactor_x509_store)
        if vault_approle is not None:
            pulumi.set(__self__, "vault_approle", vault_approle)
        if vault_approle_cert_ssh is not None:
            pulumi.set(__self__, "vault_approle_cert_ssh", vault_approle_cert_ssh)
        if vault_approle_cert_x509 is not None:
            pulumi.set(__self__, "vault_approle_cert_x509", vault_approle_cert_x509)
        if vault_tls is not None:
            pulumi.set(__self__, "vault_tls", vault_tls)
        if vault_tls_cert_ssh is not None:
            pulumi.set(__self__, "vault_tls_cert_ssh", vault_tls_cert_ssh)
        if vault_tls_cert_x509 is not None:
            pulumi.set(__self__, "vault_tls_cert_x509", vault_tls_cert_x509)
        if vault_token is not None:
            pulumi.set(__self__, "vault_token", vault_token)
        if vault_token_cert_ssh is not None:
            pulumi.set(__self__, "vault_token_cert_ssh", vault_token_cert_ssh)
        if vault_token_cert_x509 is not None:
            pulumi.set(__self__, "vault_token_cert_x509", vault_token_cert_x509)

    @property
    @pulumi.getter(name="activeDirectoryStore")
    def active_directory_store(self) -> Optional[pulumi.Input['SecretStoreActiveDirectoryStoreArgs']]:
        return pulumi.get(self, "active_directory_store")

    @active_directory_store.setter
    def active_directory_store(self, value: Optional[pulumi.Input['SecretStoreActiveDirectoryStoreArgs']]):
        pulumi.set(self, "active_directory_store", value)

    @property
    @pulumi.getter
    def aws(self) -> Optional[pulumi.Input['SecretStoreAwsArgs']]:
        return pulumi.get(self, "aws")

    @aws.setter
    def aws(self, value: Optional[pulumi.Input['SecretStoreAwsArgs']]):
        pulumi.set(self, "aws", value)

    @property
    @pulumi.getter(name="awsCertX509")
    def aws_cert_x509(self) -> Optional[pulumi.Input['SecretStoreAwsCertX509Args']]:
        return pulumi.get(self, "aws_cert_x509")

    @aws_cert_x509.setter
    def aws_cert_x509(self, value: Optional[pulumi.Input['SecretStoreAwsCertX509Args']]):
        pulumi.set(self, "aws_cert_x509", value)

    @property
    @pulumi.getter(name="azureStore")
    def azure_store(self) -> Optional[pulumi.Input['SecretStoreAzureStoreArgs']]:
        return pulumi.get(self, "azure_store")

    @azure_store.setter
    def azure_store(self, value: Optional[pulumi.Input['SecretStoreAzureStoreArgs']]):
        pulumi.set(self, "azure_store", value)

    @property
    @pulumi.getter(name="cyberarkConjur")
    def cyberark_conjur(self) -> Optional[pulumi.Input['SecretStoreCyberarkConjurArgs']]:
        return pulumi.get(self, "cyberark_conjur")

    @cyberark_conjur.setter
    def cyberark_conjur(self, value: Optional[pulumi.Input['SecretStoreCyberarkConjurArgs']]):
        pulumi.set(self, "cyberark_conjur", value)

    @property
    @pulumi.getter(name="cyberarkPam")
    def cyberark_pam(self) -> Optional[pulumi.Input['SecretStoreCyberarkPamArgs']]:
        return pulumi.get(self, "cyberark_pam")

    @cyberark_pam.setter
    def cyberark_pam(self, value: Optional[pulumi.Input['SecretStoreCyberarkPamArgs']]):
        pulumi.set(self, "cyberark_pam", value)

    @property
    @pulumi.getter(name="cyberarkPamExperimental")
    def cyberark_pam_experimental(self) -> Optional[pulumi.Input['SecretStoreCyberarkPamExperimentalArgs']]:
        """
        CyberarkPAMExperimentalStore is currently unstable, and its API may change, or it may be removed, without a major
        version bump.
        """
        return pulumi.get(self, "cyberark_pam_experimental")

    @cyberark_pam_experimental.setter
    def cyberark_pam_experimental(self, value: Optional[pulumi.Input['SecretStoreCyberarkPamExperimentalArgs']]):
        pulumi.set(self, "cyberark_pam_experimental", value)

    @property
    @pulumi.getter(name="delineaStore")
    def delinea_store(self) -> Optional[pulumi.Input['SecretStoreDelineaStoreArgs']]:
        return pulumi.get(self, "delinea_store")

    @delinea_store.setter
    def delinea_store(self, value: Optional[pulumi.Input['SecretStoreDelineaStoreArgs']]):
        pulumi.set(self, "delinea_store", value)

    @property
    @pulumi.getter(name="gcpCertX509Store")
    def gcp_cert_x509_store(self) -> Optional[pulumi.Input['SecretStoreGcpCertX509StoreArgs']]:
        return pulumi.get(self, "gcp_cert_x509_store")

    @gcp_cert_x509_store.setter
    def gcp_cert_x509_store(self, value: Optional[pulumi.Input['SecretStoreGcpCertX509StoreArgs']]):
        pulumi.set(self, "gcp_cert_x509_store", value)

    @property
    @pulumi.getter(name="gcpStore")
    def gcp_store(self) -> Optional[pulumi.Input['SecretStoreGcpStoreArgs']]:
        return pulumi.get(self, "gcp_store")

    @gcp_store.setter
    def gcp_store(self, value: Optional[pulumi.Input['SecretStoreGcpStoreArgs']]):
        pulumi.set(self, "gcp_store", value)

    @property
    @pulumi.getter(name="keyfactorX509Store")
    def keyfactor_x509_store(self) -> Optional[pulumi.Input['SecretStoreKeyfactorX509StoreArgs']]:
        return pulumi.get(self, "keyfactor_x509_store")

    @keyfactor_x509_store.setter
    def keyfactor_x509_store(self, value: Optional[pulumi.Input['SecretStoreKeyfactorX509StoreArgs']]):
        pulumi.set(self, "keyfactor_x509_store", value)

    @property
    @pulumi.getter(name="vaultApprole")
    def vault_approle(self) -> Optional[pulumi.Input['SecretStoreVaultApproleArgs']]:
        return pulumi.get(self, "vault_approle")

    @vault_approle.setter
    def vault_approle(self, value: Optional[pulumi.Input['SecretStoreVaultApproleArgs']]):
        pulumi.set(self, "vault_approle", value)

    @property
    @pulumi.getter(name="vaultApproleCertSsh")
    def vault_approle_cert_ssh(self) -> Optional[pulumi.Input['SecretStoreVaultApproleCertSshArgs']]:
        return pulumi.get(self, "vault_approle_cert_ssh")

    @vault_approle_cert_ssh.setter
    def vault_approle_cert_ssh(self, value: Optional[pulumi.Input['SecretStoreVaultApproleCertSshArgs']]):
        pulumi.set(self, "vault_approle_cert_ssh", value)

    @property
    @pulumi.getter(name="vaultApproleCertX509")
    def vault_approle_cert_x509(self) -> Optional[pulumi.Input['SecretStoreVaultApproleCertX509Args']]:
        return pulumi.get(self, "vault_approle_cert_x509")

    @vault_approle_cert_x509.setter
    def vault_approle_cert_x509(self, value: Optional[pulumi.Input['SecretStoreVaultApproleCertX509Args']]):
        pulumi.set(self, "vault_approle_cert_x509", value)

    @property
    @pulumi.getter(name="vaultTls")
    def vault_tls(self) -> Optional[pulumi.Input['SecretStoreVaultTlsArgs']]:
        return pulumi.get(self, "vault_tls")

    @vault_tls.setter
    def vault_tls(self, value: Optional[pulumi.Input['SecretStoreVaultTlsArgs']]):
        pulumi.set(self, "vault_tls", value)

    @property
    @pulumi.getter(name="vaultTlsCertSsh")
    def vault_tls_cert_ssh(self) -> Optional[pulumi.Input['SecretStoreVaultTlsCertSshArgs']]:
        return pulumi.get(self, "vault_tls_cert_ssh")

    @vault_tls_cert_ssh.setter
    def vault_tls_cert_ssh(self, value: Optional[pulumi.Input['SecretStoreVaultTlsCertSshArgs']]):
        pulumi.set(self, "vault_tls_cert_ssh", value)

    @property
    @pulumi.getter(name="vaultTlsCertX509")
    def vault_tls_cert_x509(self) -> Optional[pulumi.Input['SecretStoreVaultTlsCertX509Args']]:
        return pulumi.get(self, "vault_tls_cert_x509")

    @vault_tls_cert_x509.setter
    def vault_tls_cert_x509(self, value: Optional[pulumi.Input['SecretStoreVaultTlsCertX509Args']]):
        pulumi.set(self, "vault_tls_cert_x509", value)

    @property
    @pulumi.getter(name="vaultToken")
    def vault_token(self) -> Optional[pulumi.Input['SecretStoreVaultTokenArgs']]:
        return pulumi.get(self, "vault_token")

    @vault_token.setter
    def vault_token(self, value: Optional[pulumi.Input['SecretStoreVaultTokenArgs']]):
        pulumi.set(self, "vault_token", value)

    @property
    @pulumi.getter(name="vaultTokenCertSsh")
    def vault_token_cert_ssh(self) -> Optional[pulumi.Input['SecretStoreVaultTokenCertSshArgs']]:
        return pulumi.get(self, "vault_token_cert_ssh")

    @vault_token_cert_ssh.setter
    def vault_token_cert_ssh(self, value: Optional[pulumi.Input['SecretStoreVaultTokenCertSshArgs']]):
        pulumi.set(self, "vault_token_cert_ssh", value)

    @property
    @pulumi.getter(name="vaultTokenCertX509")
    def vault_token_cert_x509(self) -> Optional[pulumi.Input['SecretStoreVaultTokenCertX509Args']]:
        return pulumi.get(self, "vault_token_cert_x509")

    @vault_token_cert_x509.setter
    def vault_token_cert_x509(self, value: Optional[pulumi.Input['SecretStoreVaultTokenCertX509Args']]):
        pulumi.set(self, "vault_token_cert_x509", value)


class SecretStore(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_directory_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreActiveDirectoryStoreArgs']]] = None,
                 aws: Optional[pulumi.Input[pulumi.InputType['SecretStoreAwsArgs']]] = None,
                 aws_cert_x509: Optional[pulumi.Input[pulumi.InputType['SecretStoreAwsCertX509Args']]] = None,
                 azure_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreAzureStoreArgs']]] = None,
                 cyberark_conjur: Optional[pulumi.Input[pulumi.InputType['SecretStoreCyberarkConjurArgs']]] = None,
                 cyberark_pam: Optional[pulumi.Input[pulumi.InputType['SecretStoreCyberarkPamArgs']]] = None,
                 cyberark_pam_experimental: Optional[pulumi.Input[pulumi.InputType['SecretStoreCyberarkPamExperimentalArgs']]] = None,
                 delinea_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreDelineaStoreArgs']]] = None,
                 gcp_cert_x509_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreGcpCertX509StoreArgs']]] = None,
                 gcp_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreGcpStoreArgs']]] = None,
                 keyfactor_x509_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreKeyfactorX509StoreArgs']]] = None,
                 vault_approle: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultApproleArgs']]] = None,
                 vault_approle_cert_ssh: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultApproleCertSshArgs']]] = None,
                 vault_approle_cert_x509: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultApproleCertX509Args']]] = None,
                 vault_tls: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTlsArgs']]] = None,
                 vault_tls_cert_ssh: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTlsCertSshArgs']]] = None,
                 vault_tls_cert_x509: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTlsCertX509Args']]] = None,
                 vault_token: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTokenArgs']]] = None,
                 vault_token_cert_ssh: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTokenCertSshArgs']]] = None,
                 vault_token_cert_x509: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTokenCertX509Args']]] = None,
                 __props__=None):
        """
        A SecretStore is a server where resource secrets (passwords, keys) are stored.
         Coming soon support for HashiCorp Vault and AWS Secret Store.
        This resource can be imported using the import command.

        ## Import

        A SecretStore can be imported using the id, e.g.,

        ```sh
        $ pulumi import sdm:index/secretStore:SecretStore example se-12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['SecretStoreCyberarkPamExperimentalArgs']] cyberark_pam_experimental: CyberarkPAMExperimentalStore is currently unstable, and its API may change, or it may be removed, without a major
               version bump.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SecretStoreArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A SecretStore is a server where resource secrets (passwords, keys) are stored.
         Coming soon support for HashiCorp Vault and AWS Secret Store.
        This resource can be imported using the import command.

        ## Import

        A SecretStore can be imported using the id, e.g.,

        ```sh
        $ pulumi import sdm:index/secretStore:SecretStore example se-12345678
        ```

        :param str resource_name: The name of the resource.
        :param SecretStoreArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecretStoreArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_directory_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreActiveDirectoryStoreArgs']]] = None,
                 aws: Optional[pulumi.Input[pulumi.InputType['SecretStoreAwsArgs']]] = None,
                 aws_cert_x509: Optional[pulumi.Input[pulumi.InputType['SecretStoreAwsCertX509Args']]] = None,
                 azure_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreAzureStoreArgs']]] = None,
                 cyberark_conjur: Optional[pulumi.Input[pulumi.InputType['SecretStoreCyberarkConjurArgs']]] = None,
                 cyberark_pam: Optional[pulumi.Input[pulumi.InputType['SecretStoreCyberarkPamArgs']]] = None,
                 cyberark_pam_experimental: Optional[pulumi.Input[pulumi.InputType['SecretStoreCyberarkPamExperimentalArgs']]] = None,
                 delinea_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreDelineaStoreArgs']]] = None,
                 gcp_cert_x509_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreGcpCertX509StoreArgs']]] = None,
                 gcp_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreGcpStoreArgs']]] = None,
                 keyfactor_x509_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreKeyfactorX509StoreArgs']]] = None,
                 vault_approle: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultApproleArgs']]] = None,
                 vault_approle_cert_ssh: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultApproleCertSshArgs']]] = None,
                 vault_approle_cert_x509: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultApproleCertX509Args']]] = None,
                 vault_tls: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTlsArgs']]] = None,
                 vault_tls_cert_ssh: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTlsCertSshArgs']]] = None,
                 vault_tls_cert_x509: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTlsCertX509Args']]] = None,
                 vault_token: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTokenArgs']]] = None,
                 vault_token_cert_ssh: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTokenCertSshArgs']]] = None,
                 vault_token_cert_x509: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTokenCertX509Args']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecretStoreArgs.__new__(SecretStoreArgs)

            __props__.__dict__["active_directory_store"] = active_directory_store
            __props__.__dict__["aws"] = aws
            __props__.__dict__["aws_cert_x509"] = aws_cert_x509
            __props__.__dict__["azure_store"] = azure_store
            __props__.__dict__["cyberark_conjur"] = cyberark_conjur
            __props__.__dict__["cyberark_pam"] = cyberark_pam
            __props__.__dict__["cyberark_pam_experimental"] = cyberark_pam_experimental
            __props__.__dict__["delinea_store"] = delinea_store
            __props__.__dict__["gcp_cert_x509_store"] = gcp_cert_x509_store
            __props__.__dict__["gcp_store"] = gcp_store
            __props__.__dict__["keyfactor_x509_store"] = keyfactor_x509_store
            __props__.__dict__["vault_approle"] = vault_approle
            __props__.__dict__["vault_approle_cert_ssh"] = vault_approle_cert_ssh
            __props__.__dict__["vault_approle_cert_x509"] = vault_approle_cert_x509
            __props__.__dict__["vault_tls"] = vault_tls
            __props__.__dict__["vault_tls_cert_ssh"] = vault_tls_cert_ssh
            __props__.__dict__["vault_tls_cert_x509"] = vault_tls_cert_x509
            __props__.__dict__["vault_token"] = vault_token
            __props__.__dict__["vault_token_cert_ssh"] = vault_token_cert_ssh
            __props__.__dict__["vault_token_cert_x509"] = vault_token_cert_x509
        super(SecretStore, __self__).__init__(
            'sdm:index/secretStore:SecretStore',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active_directory_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreActiveDirectoryStoreArgs']]] = None,
            aws: Optional[pulumi.Input[pulumi.InputType['SecretStoreAwsArgs']]] = None,
            aws_cert_x509: Optional[pulumi.Input[pulumi.InputType['SecretStoreAwsCertX509Args']]] = None,
            azure_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreAzureStoreArgs']]] = None,
            cyberark_conjur: Optional[pulumi.Input[pulumi.InputType['SecretStoreCyberarkConjurArgs']]] = None,
            cyberark_pam: Optional[pulumi.Input[pulumi.InputType['SecretStoreCyberarkPamArgs']]] = None,
            cyberark_pam_experimental: Optional[pulumi.Input[pulumi.InputType['SecretStoreCyberarkPamExperimentalArgs']]] = None,
            delinea_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreDelineaStoreArgs']]] = None,
            gcp_cert_x509_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreGcpCertX509StoreArgs']]] = None,
            gcp_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreGcpStoreArgs']]] = None,
            keyfactor_x509_store: Optional[pulumi.Input[pulumi.InputType['SecretStoreKeyfactorX509StoreArgs']]] = None,
            vault_approle: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultApproleArgs']]] = None,
            vault_approle_cert_ssh: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultApproleCertSshArgs']]] = None,
            vault_approle_cert_x509: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultApproleCertX509Args']]] = None,
            vault_tls: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTlsArgs']]] = None,
            vault_tls_cert_ssh: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTlsCertSshArgs']]] = None,
            vault_tls_cert_x509: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTlsCertX509Args']]] = None,
            vault_token: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTokenArgs']]] = None,
            vault_token_cert_ssh: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTokenCertSshArgs']]] = None,
            vault_token_cert_x509: Optional[pulumi.Input[pulumi.InputType['SecretStoreVaultTokenCertX509Args']]] = None) -> 'SecretStore':
        """
        Get an existing SecretStore resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['SecretStoreCyberarkPamExperimentalArgs']] cyberark_pam_experimental: CyberarkPAMExperimentalStore is currently unstable, and its API may change, or it may be removed, without a major
               version bump.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecretStoreState.__new__(_SecretStoreState)

        __props__.__dict__["active_directory_store"] = active_directory_store
        __props__.__dict__["aws"] = aws
        __props__.__dict__["aws_cert_x509"] = aws_cert_x509
        __props__.__dict__["azure_store"] = azure_store
        __props__.__dict__["cyberark_conjur"] = cyberark_conjur
        __props__.__dict__["cyberark_pam"] = cyberark_pam
        __props__.__dict__["cyberark_pam_experimental"] = cyberark_pam_experimental
        __props__.__dict__["delinea_store"] = delinea_store
        __props__.__dict__["gcp_cert_x509_store"] = gcp_cert_x509_store
        __props__.__dict__["gcp_store"] = gcp_store
        __props__.__dict__["keyfactor_x509_store"] = keyfactor_x509_store
        __props__.__dict__["vault_approle"] = vault_approle
        __props__.__dict__["vault_approle_cert_ssh"] = vault_approle_cert_ssh
        __props__.__dict__["vault_approle_cert_x509"] = vault_approle_cert_x509
        __props__.__dict__["vault_tls"] = vault_tls
        __props__.__dict__["vault_tls_cert_ssh"] = vault_tls_cert_ssh
        __props__.__dict__["vault_tls_cert_x509"] = vault_tls_cert_x509
        __props__.__dict__["vault_token"] = vault_token
        __props__.__dict__["vault_token_cert_ssh"] = vault_token_cert_ssh
        __props__.__dict__["vault_token_cert_x509"] = vault_token_cert_x509
        return SecretStore(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="activeDirectoryStore")
    def active_directory_store(self) -> pulumi.Output[Optional['outputs.SecretStoreActiveDirectoryStore']]:
        return pulumi.get(self, "active_directory_store")

    @property
    @pulumi.getter
    def aws(self) -> pulumi.Output[Optional['outputs.SecretStoreAws']]:
        return pulumi.get(self, "aws")

    @property
    @pulumi.getter(name="awsCertX509")
    def aws_cert_x509(self) -> pulumi.Output[Optional['outputs.SecretStoreAwsCertX509']]:
        return pulumi.get(self, "aws_cert_x509")

    @property
    @pulumi.getter(name="azureStore")
    def azure_store(self) -> pulumi.Output[Optional['outputs.SecretStoreAzureStore']]:
        return pulumi.get(self, "azure_store")

    @property
    @pulumi.getter(name="cyberarkConjur")
    def cyberark_conjur(self) -> pulumi.Output[Optional['outputs.SecretStoreCyberarkConjur']]:
        return pulumi.get(self, "cyberark_conjur")

    @property
    @pulumi.getter(name="cyberarkPam")
    def cyberark_pam(self) -> pulumi.Output[Optional['outputs.SecretStoreCyberarkPam']]:
        return pulumi.get(self, "cyberark_pam")

    @property
    @pulumi.getter(name="cyberarkPamExperimental")
    def cyberark_pam_experimental(self) -> pulumi.Output[Optional['outputs.SecretStoreCyberarkPamExperimental']]:
        """
        CyberarkPAMExperimentalStore is currently unstable, and its API may change, or it may be removed, without a major
        version bump.
        """
        return pulumi.get(self, "cyberark_pam_experimental")

    @property
    @pulumi.getter(name="delineaStore")
    def delinea_store(self) -> pulumi.Output[Optional['outputs.SecretStoreDelineaStore']]:
        return pulumi.get(self, "delinea_store")

    @property
    @pulumi.getter(name="gcpCertX509Store")
    def gcp_cert_x509_store(self) -> pulumi.Output[Optional['outputs.SecretStoreGcpCertX509Store']]:
        return pulumi.get(self, "gcp_cert_x509_store")

    @property
    @pulumi.getter(name="gcpStore")
    def gcp_store(self) -> pulumi.Output[Optional['outputs.SecretStoreGcpStore']]:
        return pulumi.get(self, "gcp_store")

    @property
    @pulumi.getter(name="keyfactorX509Store")
    def keyfactor_x509_store(self) -> pulumi.Output[Optional['outputs.SecretStoreKeyfactorX509Store']]:
        return pulumi.get(self, "keyfactor_x509_store")

    @property
    @pulumi.getter(name="vaultApprole")
    def vault_approle(self) -> pulumi.Output[Optional['outputs.SecretStoreVaultApprole']]:
        return pulumi.get(self, "vault_approle")

    @property
    @pulumi.getter(name="vaultApproleCertSsh")
    def vault_approle_cert_ssh(self) -> pulumi.Output[Optional['outputs.SecretStoreVaultApproleCertSsh']]:
        return pulumi.get(self, "vault_approle_cert_ssh")

    @property
    @pulumi.getter(name="vaultApproleCertX509")
    def vault_approle_cert_x509(self) -> pulumi.Output[Optional['outputs.SecretStoreVaultApproleCertX509']]:
        return pulumi.get(self, "vault_approle_cert_x509")

    @property
    @pulumi.getter(name="vaultTls")
    def vault_tls(self) -> pulumi.Output[Optional['outputs.SecretStoreVaultTls']]:
        return pulumi.get(self, "vault_tls")

    @property
    @pulumi.getter(name="vaultTlsCertSsh")
    def vault_tls_cert_ssh(self) -> pulumi.Output[Optional['outputs.SecretStoreVaultTlsCertSsh']]:
        return pulumi.get(self, "vault_tls_cert_ssh")

    @property
    @pulumi.getter(name="vaultTlsCertX509")
    def vault_tls_cert_x509(self) -> pulumi.Output[Optional['outputs.SecretStoreVaultTlsCertX509']]:
        return pulumi.get(self, "vault_tls_cert_x509")

    @property
    @pulumi.getter(name="vaultToken")
    def vault_token(self) -> pulumi.Output[Optional['outputs.SecretStoreVaultToken']]:
        return pulumi.get(self, "vault_token")

    @property
    @pulumi.getter(name="vaultTokenCertSsh")
    def vault_token_cert_ssh(self) -> pulumi.Output[Optional['outputs.SecretStoreVaultTokenCertSsh']]:
        return pulumi.get(self, "vault_token_cert_ssh")

    @property
    @pulumi.getter(name="vaultTokenCertX509")
    def vault_token_cert_x509(self) -> pulumi.Output[Optional['outputs.SecretStoreVaultTokenCertX509']]:
        return pulumi.get(self, "vault_token_cert_x509")


# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetAccountAttachmentResult',
    'AwaitableGetAccountAttachmentResult',
    'get_account_attachment',
    'get_account_attachment_output',
]

@pulumi.output_type
class GetAccountAttachmentResult:
    """
    A collection of values returned by getAccountAttachment.
    """
    def __init__(__self__, account_attachments=None, account_id=None, id=None, ids=None, role_id=None):
        if account_attachments and not isinstance(account_attachments, list):
            raise TypeError("Expected argument 'account_attachments' to be a list")
        pulumi.set(__self__, "account_attachments", account_attachments)
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if role_id and not isinstance(role_id, str):
            raise TypeError("Expected argument 'role_id' to be a str")
        pulumi.set(__self__, "role_id", role_id)

    @property
    @pulumi.getter(name="accountAttachments")
    def account_attachments(self) -> Sequence['outputs.GetAccountAttachmentAccountAttachmentResult']:
        """
        A list where each element has the following attributes:
        """
        return pulumi.get(self, "account_attachments")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        """
        The id of the account of this AccountAttachment.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique identifier of the AccountAttachment.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        """
        a list of strings of ids of data sources that match the given arguments.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[str]:
        """
        The id of the attached role of this AccountAttachment.
        """
        return pulumi.get(self, "role_id")


class AwaitableGetAccountAttachmentResult(GetAccountAttachmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccountAttachmentResult(
            account_attachments=self.account_attachments,
            account_id=self.account_id,
            id=self.id,
            ids=self.ids,
            role_id=self.role_id)


def get_account_attachment(account_id: Optional[str] = None,
                           id: Optional[str] = None,
                           role_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccountAttachmentResult:
    """
    AccountAttachments assign an account to a role.
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    account_attachment_query = sdm.get_account_attachment(account_id="a-00000054")
    ```


    :param str account_id: The id of the account of this AccountAttachment.
    :param str id: Unique identifier of the AccountAttachment.
    :param str role_id: The id of the attached role of this AccountAttachment.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['id'] = id
    __args__['roleId'] = role_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdm:index/getAccountAttachment:getAccountAttachment', __args__, opts=opts, typ=GetAccountAttachmentResult).value

    return AwaitableGetAccountAttachmentResult(
        account_attachments=pulumi.get(__ret__, 'account_attachments'),
        account_id=pulumi.get(__ret__, 'account_id'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        role_id=pulumi.get(__ret__, 'role_id'))


@_utilities.lift_output_func(get_account_attachment)
def get_account_attachment_output(account_id: Optional[pulumi.Input[Optional[str]]] = None,
                                  id: Optional[pulumi.Input[Optional[str]]] = None,
                                  role_id: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAccountAttachmentResult]:
    """
    AccountAttachments assign an account to a role.
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    account_attachment_query = sdm.get_account_attachment(account_id="a-00000054")
    ```


    :param str account_id: The id of the account of this AccountAttachment.
    :param str id: Unique identifier of the AccountAttachment.
    :param str role_id: The id of the attached role of this AccountAttachment.
    """
    ...

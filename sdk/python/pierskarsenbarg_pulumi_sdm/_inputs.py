# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AccountServiceArgs',
    'AccountUserArgs',
    'NodeGatewayArgs',
    'NodeRelayArgs',
    'ResourceAksArgs',
    'ResourceAksBasicAuthArgs',
    'ResourceAksServiceAccountArgs',
    'ResourceAksServiceAccountUserImpersonationArgs',
    'ResourceAksUserImpersonationArgs',
    'ResourceAmazonEksArgs',
    'ResourceAmazonEksInstanceProfileArgs',
    'ResourceAmazonEksInstanceProfileUserImpersonationArgs',
    'ResourceAmazonEksUserImpersonationArgs',
    'ResourceAmazonEsArgs',
    'ResourceAmazonmqAmqp091Args',
    'ResourceAthenaArgs',
    'ResourceAuroraMysqlArgs',
    'ResourceAuroraPostgresArgs',
    'ResourceAwsArgs',
    'ResourceAwsConsoleArgs',
    'ResourceAwsConsoleStaticKeyPairArgs',
    'ResourceAzureArgs',
    'ResourceAzureCertificateArgs',
    'ResourceAzureMysqlArgs',
    'ResourceAzurePostgresArgs',
    'ResourceBigQueryArgs',
    'ResourceCassandraArgs',
    'ResourceCitusArgs',
    'ResourceClustrixArgs',
    'ResourceCockroachArgs',
    'ResourceDb2IArgs',
    'ResourceDb2LuwArgs',
    'ResourceDocumentDbHostArgs',
    'ResourceDocumentDbReplicaSetArgs',
    'ResourceDruidArgs',
    'ResourceDynamoDbArgs',
    'ResourceElasticArgs',
    'ResourceElasticacheRedisArgs',
    'ResourceGcpArgs',
    'ResourceGoogleGkeArgs',
    'ResourceGoogleGkeUserImpersonationArgs',
    'ResourceGreenplumArgs',
    'ResourceHttpAuthArgs',
    'ResourceHttpBasicAuthArgs',
    'ResourceHttpNoAuthArgs',
    'ResourceKubernetesArgs',
    'ResourceKubernetesBasicAuthArgs',
    'ResourceKubernetesServiceAccountArgs',
    'ResourceKubernetesServiceAccountUserImpersonationArgs',
    'ResourceKubernetesUserImpersonationArgs',
    'ResourceMariaArgs',
    'ResourceMemcachedArgs',
    'ResourceMemsqlArgs',
    'ResourceMongoHostArgs',
    'ResourceMongoLegacyHostArgs',
    'ResourceMongoLegacyReplicasetArgs',
    'ResourceMongoReplicaSetArgs',
    'ResourceMongoShardedClusterArgs',
    'ResourceMtlsMysqlArgs',
    'ResourceMtlsPostgresArgs',
    'ResourceMysqlArgs',
    'ResourceNeptuneArgs',
    'ResourceNeptuneIamArgs',
    'ResourceOracleArgs',
    'ResourcePostgresArgs',
    'ResourcePrestoArgs',
    'ResourceRabbitmqAmqp091Args',
    'ResourceRawTcpArgs',
    'ResourceRdpArgs',
    'ResourceRedisArgs',
    'ResourceRedshiftArgs',
    'ResourceSingleStoreArgs',
    'ResourceSnowflakeArgs',
    'ResourceSnowsightArgs',
    'ResourceSqlServerArgs',
    'ResourceSshArgs',
    'ResourceSshCertArgs',
    'ResourceSshCustomerKeyArgs',
    'ResourceSybaseArgs',
    'ResourceSybaseIqArgs',
    'ResourceTeradataArgs',
    'ResourceTrinoArgs',
    'SecretStoreAwsArgs',
    'SecretStoreAzureStoreArgs',
    'SecretStoreCyberarkConjurArgs',
    'SecretStoreCyberarkPamArgs',
    'SecretStoreCyberarkPamExperimentalArgs',
    'SecretStoreDelineaStoreArgs',
    'SecretStoreGcpStoreArgs',
    'SecretStoreVaultApproleArgs',
    'SecretStoreVaultTlsArgs',
    'SecretStoreVaultTokenArgs',
]

@pulumi.input_type
class AccountServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 suspended: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Service.
        :param pulumi.Input[bool] suspended: The User's suspended state.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "name", name)
        if suspended is not None:
            pulumi.set(__self__, "suspended", suspended)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def suspended(self) -> Optional[pulumi.Input[bool]]:
        """
        The User's suspended state.
        """
        return pulumi.get(self, "suspended")

    @suspended.setter
    def suspended(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suspended", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class AccountUserArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 first_name: pulumi.Input[str],
                 last_name: pulumi.Input[str],
                 external_id: Optional[pulumi.Input[str]] = None,
                 managed_by: Optional[pulumi.Input[str]] = None,
                 permission_level: Optional[pulumi.Input[str]] = None,
                 suspended: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] email: The User's email address. Must be unique.
        :param pulumi.Input[str] first_name: The User's first name.
        :param pulumi.Input[str] last_name: The User's last name.
        :param pulumi.Input[str] external_id: External ID is an alternative unique ID this user is represented by within an external service.
        :param pulumi.Input[str] managed_by: Managed By is a read only field for what service manages this user, e.g. StrongDM, Okta, Azure.
        :param pulumi.Input[str] permission_level: PermissionLevel is a read only field for the user's permission level e.g. admin, DBA, user.
        :param pulumi.Input[bool] suspended: The User's suspended state.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "last_name", last_name)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if managed_by is not None:
            pulumi.set(__self__, "managed_by", managed_by)
        if permission_level is not None:
            pulumi.set(__self__, "permission_level", permission_level)
        if suspended is not None:
            pulumi.set(__self__, "suspended", suspended)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        The User's email address. Must be unique.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> pulumi.Input[str]:
        """
        The User's first name.
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> pulumi.Input[str]:
        """
        The User's last name.
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        """
        External ID is an alternative unique ID this user is represented by within an external service.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="managedBy")
    def managed_by(self) -> Optional[pulumi.Input[str]]:
        """
        Managed By is a read only field for what service manages this user, e.g. StrongDM, Okta, Azure.
        """
        return pulumi.get(self, "managed_by")

    @managed_by.setter
    def managed_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_by", value)

    @property
    @pulumi.getter(name="permissionLevel")
    def permission_level(self) -> Optional[pulumi.Input[str]]:
        """
        PermissionLevel is a read only field for the user's permission level e.g. admin, DBA, user.
        """
        return pulumi.get(self, "permission_level")

    @permission_level.setter
    def permission_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission_level", value)

    @property
    @pulumi.getter
    def suspended(self) -> Optional[pulumi.Input[bool]]:
        """
        The User's suspended state.
        """
        return pulumi.get(self, "suspended")

    @suspended.setter
    def suspended(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suspended", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class NodeGatewayArgs:
    def __init__(__self__, *,
                 listen_address: pulumi.Input[str],
                 bind_address: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 gateway_filter: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] listen_address: The public hostname/port tuple at which the gateway will be accessible to clients.
        :param pulumi.Input[str] bind_address: The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to "0.0.0.0:listen_address_port".
        :param pulumi.Input[str] device: Device is a read only device name uploaded by the gateway process when  it comes online.
        :param pulumi.Input[str] gateway_filter: GatewayFilter can be used to restrict the peering between relays and gateways.
        :param pulumi.Input[str] location: Location is a read only network location uploaded by the gateway process when it comes online.
        :param pulumi.Input[str] name: Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        :param pulumi.Input[str] version: Version is a read only sdm binary version uploaded by the gateway process when it comes online.
        """
        pulumi.set(__self__, "listen_address", listen_address)
        if bind_address is not None:
            pulumi.set(__self__, "bind_address", bind_address)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if gateway_filter is not None:
            pulumi.set(__self__, "gateway_filter", gateway_filter)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="listenAddress")
    def listen_address(self) -> pulumi.Input[str]:
        """
        The public hostname/port tuple at which the gateway will be accessible to clients.
        """
        return pulumi.get(self, "listen_address")

    @listen_address.setter
    def listen_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "listen_address", value)

    @property
    @pulumi.getter(name="bindAddress")
    def bind_address(self) -> Optional[pulumi.Input[str]]:
        """
        The hostname/port tuple which the gateway daemon will bind to. If not provided on create, set to "0.0.0.0:listen_address_port".
        """
        return pulumi.get(self, "bind_address")

    @bind_address.setter
    def bind_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_address", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        Device is a read only device name uploaded by the gateway process when  it comes online.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="gatewayFilter")
    def gateway_filter(self) -> Optional[pulumi.Input[str]]:
        """
        GatewayFilter can be used to restrict the peering between relays and gateways.
        """
        return pulumi.get(self, "gateway_filter")

    @gateway_filter.setter
    def gateway_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_filter", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Location is a read only network location uploaded by the gateway process when it comes online.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version is a read only sdm binary version uploaded by the gateway process when it comes online.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class NodeRelayArgs:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 gateway_filter: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] device: Device is a read only device name uploaded by the gateway process when  it comes online.
        :param pulumi.Input[str] gateway_filter: GatewayFilter can be used to restrict the peering between relays and gateways.
        :param pulumi.Input[str] location: Location is a read only network location uploaded by the gateway process when it comes online.
        :param pulumi.Input[str] name: Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        :param pulumi.Input[str] version: Version is a read only sdm binary version uploaded by the gateway process when it comes online.
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if gateway_filter is not None:
            pulumi.set(__self__, "gateway_filter", gateway_filter)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        Device is a read only device name uploaded by the gateway process when  it comes online.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="gatewayFilter")
    def gateway_filter(self) -> Optional[pulumi.Input[str]]:
        """
        GatewayFilter can be used to restrict the peering between relays and gateways.
        """
        return pulumi.get(self, "gateway_filter")

    @gateway_filter.setter
    def gateway_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_filter", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Location is a read only network location uploaded by the gateway process when it comes online.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique human-readable name of the Relay. Node names must include only letters, numbers, and hyphens (no spaces, underscores, or other special characters). Generated if not provided on create.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version is a read only sdm binary version uploaded by the gateway process when it comes online.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ResourceAksArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 certificate_authority: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 healthcheck_namespace: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 remote_identity_group_id: Optional[pulumi.Input[str]] = None,
                 remote_identity_healthcheck_username: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_key: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_path: Optional[pulumi.Input[str]] = None,
                 secret_store_client_certificate_key: Optional[pulumi.Input[str]] = None,
                 secret_store_client_certificate_path: Optional[pulumi.Input[str]] = None,
                 secret_store_client_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_client_key_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] healthcheck_namespace: The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if healthcheck_namespace is not None:
            pulumi.set(__self__, "healthcheck_namespace", healthcheck_namespace)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if remote_identity_group_id is not None:
            pulumi.set(__self__, "remote_identity_group_id", remote_identity_group_id)
        if remote_identity_healthcheck_username is not None:
            pulumi.set(__self__, "remote_identity_healthcheck_username", remote_identity_healthcheck_username)
        if secret_store_certificate_authority_key is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_key", secret_store_certificate_authority_key)
        if secret_store_certificate_authority_path is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_path", secret_store_certificate_authority_path)
        if secret_store_client_certificate_key is not None:
            pulumi.set(__self__, "secret_store_client_certificate_key", secret_store_client_certificate_key)
        if secret_store_client_certificate_path is not None:
            pulumi.set(__self__, "secret_store_client_certificate_path", secret_store_client_certificate_path)
        if secret_store_client_key_key is not None:
            pulumi.set(__self__, "secret_store_client_key_key", secret_store_client_key_key)
        if secret_store_client_key_path is not None:
            pulumi.set(__self__, "secret_store_client_key_path", secret_store_client_key_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_authority")

    @certificate_authority.setter
    def certificate_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_authority", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="healthcheckNamespace")
    def healthcheck_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        """
        return pulumi.get(self, "healthcheck_namespace")

    @healthcheck_namespace.setter
    def healthcheck_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_namespace", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="remoteIdentityGroupId")
    def remote_identity_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_group_id")

    @remote_identity_group_id.setter
    def remote_identity_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_group_id", value)

    @property
    @pulumi.getter(name="remoteIdentityHealthcheckUsername")
    def remote_identity_healthcheck_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_healthcheck_username")

    @remote_identity_healthcheck_username.setter
    def remote_identity_healthcheck_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_healthcheck_username", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityKey")
    def secret_store_certificate_authority_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_key")

    @secret_store_certificate_authority_key.setter
    def secret_store_certificate_authority_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_key", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityPath")
    def secret_store_certificate_authority_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_path")

    @secret_store_certificate_authority_path.setter
    def secret_store_certificate_authority_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_path", value)

    @property
    @pulumi.getter(name="secretStoreClientCertificateKey")
    def secret_store_client_certificate_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_certificate_key")

    @secret_store_client_certificate_key.setter
    def secret_store_client_certificate_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_certificate_key", value)

    @property
    @pulumi.getter(name="secretStoreClientCertificatePath")
    def secret_store_client_certificate_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_certificate_path")

    @secret_store_client_certificate_path.setter
    def secret_store_client_certificate_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_certificate_path", value)

    @property
    @pulumi.getter(name="secretStoreClientKeyKey")
    def secret_store_client_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_key_key")

    @secret_store_client_key_key.setter
    def secret_store_client_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_key_key", value)

    @property
    @pulumi.getter(name="secretStoreClientKeyPath")
    def secret_store_client_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_key_path")

    @secret_store_client_key_path.setter
    def secret_store_client_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_key_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceAksBasicAuthArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 healthcheck_namespace: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] healthcheck_namespace: The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if healthcheck_namespace is not None:
            pulumi.set(__self__, "healthcheck_namespace", healthcheck_namespace)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="healthcheckNamespace")
    def healthcheck_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        """
        return pulumi.get(self, "healthcheck_namespace")

    @healthcheck_namespace.setter
    def healthcheck_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_namespace", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceAksServiceAccountArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 healthcheck_namespace: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 remote_identity_group_id: Optional[pulumi.Input[str]] = None,
                 remote_identity_healthcheck_username: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_token_key: Optional[pulumi.Input[str]] = None,
                 secret_store_token_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] healthcheck_namespace: The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_token_key: * kubernetes_user_impersonation:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if healthcheck_namespace is not None:
            pulumi.set(__self__, "healthcheck_namespace", healthcheck_namespace)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if remote_identity_group_id is not None:
            pulumi.set(__self__, "remote_identity_group_id", remote_identity_group_id)
        if remote_identity_healthcheck_username is not None:
            pulumi.set(__self__, "remote_identity_healthcheck_username", remote_identity_healthcheck_username)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_token_key is not None:
            pulumi.set(__self__, "secret_store_token_key", secret_store_token_key)
        if secret_store_token_path is not None:
            pulumi.set(__self__, "secret_store_token_path", secret_store_token_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="healthcheckNamespace")
    def healthcheck_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        """
        return pulumi.get(self, "healthcheck_namespace")

    @healthcheck_namespace.setter
    def healthcheck_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_namespace", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="remoteIdentityGroupId")
    def remote_identity_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_group_id")

    @remote_identity_group_id.setter
    def remote_identity_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_group_id", value)

    @property
    @pulumi.getter(name="remoteIdentityHealthcheckUsername")
    def remote_identity_healthcheck_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_healthcheck_username")

    @remote_identity_healthcheck_username.setter
    def remote_identity_healthcheck_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_healthcheck_username", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreTokenKey")
    def secret_store_token_key(self) -> Optional[pulumi.Input[str]]:
        """
        * kubernetes_user_impersonation:
        """
        return pulumi.get(self, "secret_store_token_key")

    @secret_store_token_key.setter
    def secret_store_token_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_token_key", value)

    @property
    @pulumi.getter(name="secretStoreTokenPath")
    def secret_store_token_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_token_path")

    @secret_store_token_path.setter
    def secret_store_token_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_token_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class ResourceAksServiceAccountUserImpersonationArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 healthcheck_namespace: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_token_key: Optional[pulumi.Input[str]] = None,
                 secret_store_token_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] healthcheck_namespace: The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_token_key: * kubernetes_user_impersonation:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if healthcheck_namespace is not None:
            pulumi.set(__self__, "healthcheck_namespace", healthcheck_namespace)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_token_key is not None:
            pulumi.set(__self__, "secret_store_token_key", secret_store_token_key)
        if secret_store_token_path is not None:
            pulumi.set(__self__, "secret_store_token_path", secret_store_token_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="healthcheckNamespace")
    def healthcheck_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        """
        return pulumi.get(self, "healthcheck_namespace")

    @healthcheck_namespace.setter
    def healthcheck_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_namespace", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreTokenKey")
    def secret_store_token_key(self) -> Optional[pulumi.Input[str]]:
        """
        * kubernetes_user_impersonation:
        """
        return pulumi.get(self, "secret_store_token_key")

    @secret_store_token_key.setter
    def secret_store_token_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_token_key", value)

    @property
    @pulumi.getter(name="secretStoreTokenPath")
    def secret_store_token_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_token_path")

    @secret_store_token_path.setter
    def secret_store_token_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_token_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class ResourceAksUserImpersonationArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 certificate_authority: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 healthcheck_namespace: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_certificate_authority_key: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_path: Optional[pulumi.Input[str]] = None,
                 secret_store_client_certificate_key: Optional[pulumi.Input[str]] = None,
                 secret_store_client_certificate_path: Optional[pulumi.Input[str]] = None,
                 secret_store_client_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_client_key_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] healthcheck_namespace: The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if healthcheck_namespace is not None:
            pulumi.set(__self__, "healthcheck_namespace", healthcheck_namespace)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_certificate_authority_key is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_key", secret_store_certificate_authority_key)
        if secret_store_certificate_authority_path is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_path", secret_store_certificate_authority_path)
        if secret_store_client_certificate_key is not None:
            pulumi.set(__self__, "secret_store_client_certificate_key", secret_store_client_certificate_key)
        if secret_store_client_certificate_path is not None:
            pulumi.set(__self__, "secret_store_client_certificate_path", secret_store_client_certificate_path)
        if secret_store_client_key_key is not None:
            pulumi.set(__self__, "secret_store_client_key_key", secret_store_client_key_key)
        if secret_store_client_key_path is not None:
            pulumi.set(__self__, "secret_store_client_key_path", secret_store_client_key_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_authority")

    @certificate_authority.setter
    def certificate_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_authority", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="healthcheckNamespace")
    def healthcheck_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        """
        return pulumi.get(self, "healthcheck_namespace")

    @healthcheck_namespace.setter
    def healthcheck_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_namespace", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityKey")
    def secret_store_certificate_authority_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_key")

    @secret_store_certificate_authority_key.setter
    def secret_store_certificate_authority_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_key", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityPath")
    def secret_store_certificate_authority_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_path")

    @secret_store_certificate_authority_path.setter
    def secret_store_certificate_authority_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_path", value)

    @property
    @pulumi.getter(name="secretStoreClientCertificateKey")
    def secret_store_client_certificate_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_certificate_key")

    @secret_store_client_certificate_key.setter
    def secret_store_client_certificate_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_certificate_key", value)

    @property
    @pulumi.getter(name="secretStoreClientCertificatePath")
    def secret_store_client_certificate_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_certificate_path")

    @secret_store_client_certificate_path.setter
    def secret_store_client_certificate_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_certificate_path", value)

    @property
    @pulumi.getter(name="secretStoreClientKeyKey")
    def secret_store_client_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_key_key")

    @secret_store_client_key_key.setter
    def secret_store_client_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_key_key", value)

    @property
    @pulumi.getter(name="secretStoreClientKeyPath")
    def secret_store_client_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_key_path")

    @secret_store_client_key_path.setter
    def secret_store_client_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_key_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceAmazonEksArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 certificate_authority: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 healthcheck_namespace: Optional[pulumi.Input[str]] = None,
                 remote_identity_group_id: Optional[pulumi.Input[str]] = None,
                 remote_identity_healthcheck_username: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 role_external_id: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None,
                 secret_store_access_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_access_key_path: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_key: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_path: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_path: Optional[pulumi.Input[str]] = None,
                 secret_store_secret_access_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_secret_access_key_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] healthcheck_namespace: The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if healthcheck_namespace is not None:
            pulumi.set(__self__, "healthcheck_namespace", healthcheck_namespace)
        if remote_identity_group_id is not None:
            pulumi.set(__self__, "remote_identity_group_id", remote_identity_group_id)
        if remote_identity_healthcheck_username is not None:
            pulumi.set(__self__, "remote_identity_healthcheck_username", remote_identity_healthcheck_username)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if role_external_id is not None:
            pulumi.set(__self__, "role_external_id", role_external_id)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if secret_store_access_key_key is not None:
            pulumi.set(__self__, "secret_store_access_key_key", secret_store_access_key_key)
        if secret_store_access_key_path is not None:
            pulumi.set(__self__, "secret_store_access_key_path", secret_store_access_key_path)
        if secret_store_certificate_authority_key is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_key", secret_store_certificate_authority_key)
        if secret_store_certificate_authority_path is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_path", secret_store_certificate_authority_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_role_arn_key is not None:
            pulumi.set(__self__, "secret_store_role_arn_key", secret_store_role_arn_key)
        if secret_store_role_arn_path is not None:
            pulumi.set(__self__, "secret_store_role_arn_path", secret_store_role_arn_path)
        if secret_store_role_external_id_key is not None:
            pulumi.set(__self__, "secret_store_role_external_id_key", secret_store_role_external_id_key)
        if secret_store_role_external_id_path is not None:
            pulumi.set(__self__, "secret_store_role_external_id_path", secret_store_role_external_id_path)
        if secret_store_secret_access_key_key is not None:
            pulumi.set(__self__, "secret_store_secret_access_key_key", secret_store_secret_access_key_key)
        if secret_store_secret_access_key_path is not None:
            pulumi.set(__self__, "secret_store_secret_access_key_path", secret_store_secret_access_key_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_authority")

    @certificate_authority.setter
    def certificate_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_authority", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="healthcheckNamespace")
    def healthcheck_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        """
        return pulumi.get(self, "healthcheck_namespace")

    @healthcheck_namespace.setter
    def healthcheck_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_namespace", value)

    @property
    @pulumi.getter(name="remoteIdentityGroupId")
    def remote_identity_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_group_id")

    @remote_identity_group_id.setter
    def remote_identity_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_group_id", value)

    @property
    @pulumi.getter(name="remoteIdentityHealthcheckUsername")
    def remote_identity_healthcheck_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_healthcheck_username")

    @remote_identity_healthcheck_username.setter
    def remote_identity_healthcheck_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_healthcheck_username", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="roleExternalId")
    def role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_external_id")

    @role_external_id.setter
    def role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_external_id", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="secretStoreAccessKeyKey")
    def secret_store_access_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_access_key_key")

    @secret_store_access_key_key.setter
    def secret_store_access_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_access_key_key", value)

    @property
    @pulumi.getter(name="secretStoreAccessKeyPath")
    def secret_store_access_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_access_key_path")

    @secret_store_access_key_path.setter
    def secret_store_access_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_access_key_path", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityKey")
    def secret_store_certificate_authority_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_key")

    @secret_store_certificate_authority_key.setter
    def secret_store_certificate_authority_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_key", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityPath")
    def secret_store_certificate_authority_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_path")

    @secret_store_certificate_authority_path.setter
    def secret_store_certificate_authority_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnKey")
    def secret_store_role_arn_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_key")

    @secret_store_role_arn_key.setter
    def secret_store_role_arn_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnPath")
    def secret_store_role_arn_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_path")

    @secret_store_role_arn_path.setter
    def secret_store_role_arn_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_path", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdKey")
    def secret_store_role_external_id_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_key")

    @secret_store_role_external_id_key.setter
    def secret_store_role_external_id_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdPath")
    def secret_store_role_external_id_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_path")

    @secret_store_role_external_id_path.setter
    def secret_store_role_external_id_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_path", value)

    @property
    @pulumi.getter(name="secretStoreSecretAccessKeyKey")
    def secret_store_secret_access_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_secret_access_key_key")

    @secret_store_secret_access_key_key.setter
    def secret_store_secret_access_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_secret_access_key_key", value)

    @property
    @pulumi.getter(name="secretStoreSecretAccessKeyPath")
    def secret_store_secret_access_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_secret_access_key_path")

    @secret_store_secret_access_key_path.setter
    def secret_store_secret_access_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_secret_access_key_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceAmazonEksInstanceProfileArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 certificate_authority: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 healthcheck_namespace: Optional[pulumi.Input[str]] = None,
                 remote_identity_group_id: Optional[pulumi.Input[str]] = None,
                 remote_identity_healthcheck_username: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 role_external_id: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_key: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_path: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] healthcheck_namespace: The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if healthcheck_namespace is not None:
            pulumi.set(__self__, "healthcheck_namespace", healthcheck_namespace)
        if remote_identity_group_id is not None:
            pulumi.set(__self__, "remote_identity_group_id", remote_identity_group_id)
        if remote_identity_healthcheck_username is not None:
            pulumi.set(__self__, "remote_identity_healthcheck_username", remote_identity_healthcheck_username)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if role_external_id is not None:
            pulumi.set(__self__, "role_external_id", role_external_id)
        if secret_store_certificate_authority_key is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_key", secret_store_certificate_authority_key)
        if secret_store_certificate_authority_path is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_path", secret_store_certificate_authority_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_role_arn_key is not None:
            pulumi.set(__self__, "secret_store_role_arn_key", secret_store_role_arn_key)
        if secret_store_role_arn_path is not None:
            pulumi.set(__self__, "secret_store_role_arn_path", secret_store_role_arn_path)
        if secret_store_role_external_id_key is not None:
            pulumi.set(__self__, "secret_store_role_external_id_key", secret_store_role_external_id_key)
        if secret_store_role_external_id_path is not None:
            pulumi.set(__self__, "secret_store_role_external_id_path", secret_store_role_external_id_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_authority")

    @certificate_authority.setter
    def certificate_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_authority", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="healthcheckNamespace")
    def healthcheck_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        """
        return pulumi.get(self, "healthcheck_namespace")

    @healthcheck_namespace.setter
    def healthcheck_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_namespace", value)

    @property
    @pulumi.getter(name="remoteIdentityGroupId")
    def remote_identity_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_group_id")

    @remote_identity_group_id.setter
    def remote_identity_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_group_id", value)

    @property
    @pulumi.getter(name="remoteIdentityHealthcheckUsername")
    def remote_identity_healthcheck_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_healthcheck_username")

    @remote_identity_healthcheck_username.setter
    def remote_identity_healthcheck_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_healthcheck_username", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="roleExternalId")
    def role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_external_id")

    @role_external_id.setter
    def role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_external_id", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityKey")
    def secret_store_certificate_authority_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_key")

    @secret_store_certificate_authority_key.setter
    def secret_store_certificate_authority_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_key", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityPath")
    def secret_store_certificate_authority_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_path")

    @secret_store_certificate_authority_path.setter
    def secret_store_certificate_authority_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnKey")
    def secret_store_role_arn_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_key")

    @secret_store_role_arn_key.setter
    def secret_store_role_arn_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnPath")
    def secret_store_role_arn_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_path")

    @secret_store_role_arn_path.setter
    def secret_store_role_arn_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_path", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdKey")
    def secret_store_role_external_id_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_key")

    @secret_store_role_external_id_key.setter
    def secret_store_role_external_id_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdPath")
    def secret_store_role_external_id_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_path")

    @secret_store_role_external_id_path.setter
    def secret_store_role_external_id_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceAmazonEksInstanceProfileUserImpersonationArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 certificate_authority: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 healthcheck_namespace: Optional[pulumi.Input[str]] = None,
                 remote_identity_group_id: Optional[pulumi.Input[str]] = None,
                 remote_identity_healthcheck_username: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 role_external_id: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_key: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_path: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] healthcheck_namespace: The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if healthcheck_namespace is not None:
            pulumi.set(__self__, "healthcheck_namespace", healthcheck_namespace)
        if remote_identity_group_id is not None:
            pulumi.set(__self__, "remote_identity_group_id", remote_identity_group_id)
        if remote_identity_healthcheck_username is not None:
            pulumi.set(__self__, "remote_identity_healthcheck_username", remote_identity_healthcheck_username)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if role_external_id is not None:
            pulumi.set(__self__, "role_external_id", role_external_id)
        if secret_store_certificate_authority_key is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_key", secret_store_certificate_authority_key)
        if secret_store_certificate_authority_path is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_path", secret_store_certificate_authority_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_role_arn_key is not None:
            pulumi.set(__self__, "secret_store_role_arn_key", secret_store_role_arn_key)
        if secret_store_role_arn_path is not None:
            pulumi.set(__self__, "secret_store_role_arn_path", secret_store_role_arn_path)
        if secret_store_role_external_id_key is not None:
            pulumi.set(__self__, "secret_store_role_external_id_key", secret_store_role_external_id_key)
        if secret_store_role_external_id_path is not None:
            pulumi.set(__self__, "secret_store_role_external_id_path", secret_store_role_external_id_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_authority")

    @certificate_authority.setter
    def certificate_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_authority", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="healthcheckNamespace")
    def healthcheck_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        """
        return pulumi.get(self, "healthcheck_namespace")

    @healthcheck_namespace.setter
    def healthcheck_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_namespace", value)

    @property
    @pulumi.getter(name="remoteIdentityGroupId")
    def remote_identity_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_group_id")

    @remote_identity_group_id.setter
    def remote_identity_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_group_id", value)

    @property
    @pulumi.getter(name="remoteIdentityHealthcheckUsername")
    def remote_identity_healthcheck_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_healthcheck_username")

    @remote_identity_healthcheck_username.setter
    def remote_identity_healthcheck_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_healthcheck_username", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="roleExternalId")
    def role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_external_id")

    @role_external_id.setter
    def role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_external_id", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityKey")
    def secret_store_certificate_authority_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_key")

    @secret_store_certificate_authority_key.setter
    def secret_store_certificate_authority_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_key", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityPath")
    def secret_store_certificate_authority_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_path")

    @secret_store_certificate_authority_path.setter
    def secret_store_certificate_authority_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnKey")
    def secret_store_role_arn_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_key")

    @secret_store_role_arn_key.setter
    def secret_store_role_arn_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnPath")
    def secret_store_role_arn_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_path")

    @secret_store_role_arn_path.setter
    def secret_store_role_arn_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_path", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdKey")
    def secret_store_role_external_id_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_key")

    @secret_store_role_external_id_key.setter
    def secret_store_role_external_id_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdPath")
    def secret_store_role_external_id_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_path")

    @secret_store_role_external_id_path.setter
    def secret_store_role_external_id_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceAmazonEksUserImpersonationArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 certificate_authority: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 healthcheck_namespace: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 role_external_id: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None,
                 secret_store_access_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_access_key_path: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_key: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_path: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_path: Optional[pulumi.Input[str]] = None,
                 secret_store_secret_access_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_secret_access_key_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] healthcheck_namespace: The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if healthcheck_namespace is not None:
            pulumi.set(__self__, "healthcheck_namespace", healthcheck_namespace)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if role_external_id is not None:
            pulumi.set(__self__, "role_external_id", role_external_id)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if secret_store_access_key_key is not None:
            pulumi.set(__self__, "secret_store_access_key_key", secret_store_access_key_key)
        if secret_store_access_key_path is not None:
            pulumi.set(__self__, "secret_store_access_key_path", secret_store_access_key_path)
        if secret_store_certificate_authority_key is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_key", secret_store_certificate_authority_key)
        if secret_store_certificate_authority_path is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_path", secret_store_certificate_authority_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_role_arn_key is not None:
            pulumi.set(__self__, "secret_store_role_arn_key", secret_store_role_arn_key)
        if secret_store_role_arn_path is not None:
            pulumi.set(__self__, "secret_store_role_arn_path", secret_store_role_arn_path)
        if secret_store_role_external_id_key is not None:
            pulumi.set(__self__, "secret_store_role_external_id_key", secret_store_role_external_id_key)
        if secret_store_role_external_id_path is not None:
            pulumi.set(__self__, "secret_store_role_external_id_path", secret_store_role_external_id_path)
        if secret_store_secret_access_key_key is not None:
            pulumi.set(__self__, "secret_store_secret_access_key_key", secret_store_secret_access_key_key)
        if secret_store_secret_access_key_path is not None:
            pulumi.set(__self__, "secret_store_secret_access_key_path", secret_store_secret_access_key_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_authority")

    @certificate_authority.setter
    def certificate_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_authority", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="healthcheckNamespace")
    def healthcheck_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        """
        return pulumi.get(self, "healthcheck_namespace")

    @healthcheck_namespace.setter
    def healthcheck_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_namespace", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="roleExternalId")
    def role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_external_id")

    @role_external_id.setter
    def role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_external_id", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="secretStoreAccessKeyKey")
    def secret_store_access_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_access_key_key")

    @secret_store_access_key_key.setter
    def secret_store_access_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_access_key_key", value)

    @property
    @pulumi.getter(name="secretStoreAccessKeyPath")
    def secret_store_access_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_access_key_path")

    @secret_store_access_key_path.setter
    def secret_store_access_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_access_key_path", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityKey")
    def secret_store_certificate_authority_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_key")

    @secret_store_certificate_authority_key.setter
    def secret_store_certificate_authority_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_key", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityPath")
    def secret_store_certificate_authority_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_path")

    @secret_store_certificate_authority_path.setter
    def secret_store_certificate_authority_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnKey")
    def secret_store_role_arn_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_key")

    @secret_store_role_arn_key.setter
    def secret_store_role_arn_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnPath")
    def secret_store_role_arn_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_path")

    @secret_store_role_arn_path.setter
    def secret_store_role_arn_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_path", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdKey")
    def secret_store_role_external_id_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_key")

    @secret_store_role_external_id_key.setter
    def secret_store_role_external_id_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdPath")
    def secret_store_role_external_id_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_path")

    @secret_store_role_external_id_path.setter
    def secret_store_role_external_id_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_path", value)

    @property
    @pulumi.getter(name="secretStoreSecretAccessKeyKey")
    def secret_store_secret_access_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_secret_access_key_key")

    @secret_store_secret_access_key_key.setter
    def secret_store_secret_access_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_secret_access_key_key", value)

    @property
    @pulumi.getter(name="secretStoreSecretAccessKeyPath")
    def secret_store_secret_access_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_secret_access_key_path")

    @secret_store_secret_access_key_path.setter
    def secret_store_secret_access_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_secret_access_key_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceAmazonEsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 role_external_id: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None,
                 secret_store_access_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_access_key_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_path: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_path: Optional[pulumi.Input[str]] = None,
                 secret_store_secret_access_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_secret_access_key_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if role_external_id is not None:
            pulumi.set(__self__, "role_external_id", role_external_id)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if secret_store_access_key_key is not None:
            pulumi.set(__self__, "secret_store_access_key_key", secret_store_access_key_key)
        if secret_store_access_key_path is not None:
            pulumi.set(__self__, "secret_store_access_key_path", secret_store_access_key_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_role_arn_key is not None:
            pulumi.set(__self__, "secret_store_role_arn_key", secret_store_role_arn_key)
        if secret_store_role_arn_path is not None:
            pulumi.set(__self__, "secret_store_role_arn_path", secret_store_role_arn_path)
        if secret_store_role_external_id_key is not None:
            pulumi.set(__self__, "secret_store_role_external_id_key", secret_store_role_external_id_key)
        if secret_store_role_external_id_path is not None:
            pulumi.set(__self__, "secret_store_role_external_id_path", secret_store_role_external_id_path)
        if secret_store_secret_access_key_key is not None:
            pulumi.set(__self__, "secret_store_secret_access_key_key", secret_store_secret_access_key_key)
        if secret_store_secret_access_key_path is not None:
            pulumi.set(__self__, "secret_store_secret_access_key_path", secret_store_secret_access_key_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="roleExternalId")
    def role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_external_id")

    @role_external_id.setter
    def role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_external_id", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="secretStoreAccessKeyKey")
    def secret_store_access_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_access_key_key")

    @secret_store_access_key_key.setter
    def secret_store_access_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_access_key_key", value)

    @property
    @pulumi.getter(name="secretStoreAccessKeyPath")
    def secret_store_access_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_access_key_path")

    @secret_store_access_key_path.setter
    def secret_store_access_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_access_key_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnKey")
    def secret_store_role_arn_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_key")

    @secret_store_role_arn_key.setter
    def secret_store_role_arn_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnPath")
    def secret_store_role_arn_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_path")

    @secret_store_role_arn_path.setter
    def secret_store_role_arn_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_path", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdKey")
    def secret_store_role_external_id_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_key")

    @secret_store_role_external_id_key.setter
    def secret_store_role_external_id_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdPath")
    def secret_store_role_external_id_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_path")

    @secret_store_role_external_id_path.setter
    def secret_store_role_external_id_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_path", value)

    @property
    @pulumi.getter(name="secretStoreSecretAccessKeyKey")
    def secret_store_secret_access_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_secret_access_key_key")

    @secret_store_secret_access_key_key.setter
    def secret_store_secret_access_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_secret_access_key_key", value)

    @property
    @pulumi.getter(name="secretStoreSecretAccessKeyPath")
    def secret_store_secret_access_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_secret_access_key_path")

    @secret_store_secret_access_key_path.setter
    def secret_store_secret_access_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_secret_access_key_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceAmazonmqAmqp091Args:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tls_required: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tls_required is not None:
            pulumi.set(__self__, "tls_required", tls_required)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tlsRequired")
    def tls_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_required")

    @tls_required.setter
    def tls_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_required", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceAthenaArgs:
    def __init__(__self__, *,
                 athena_output: pulumi.Input[str],
                 name: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 role_external_id: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None,
                 secret_store_access_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_access_key_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_path: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_path: Optional[pulumi.Input[str]] = None,
                 secret_store_secret_access_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_secret_access_key_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "athena_output", athena_output)
        pulumi.set(__self__, "name", name)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if role_external_id is not None:
            pulumi.set(__self__, "role_external_id", role_external_id)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if secret_store_access_key_key is not None:
            pulumi.set(__self__, "secret_store_access_key_key", secret_store_access_key_key)
        if secret_store_access_key_path is not None:
            pulumi.set(__self__, "secret_store_access_key_path", secret_store_access_key_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_role_arn_key is not None:
            pulumi.set(__self__, "secret_store_role_arn_key", secret_store_role_arn_key)
        if secret_store_role_arn_path is not None:
            pulumi.set(__self__, "secret_store_role_arn_path", secret_store_role_arn_path)
        if secret_store_role_external_id_key is not None:
            pulumi.set(__self__, "secret_store_role_external_id_key", secret_store_role_external_id_key)
        if secret_store_role_external_id_path is not None:
            pulumi.set(__self__, "secret_store_role_external_id_path", secret_store_role_external_id_path)
        if secret_store_secret_access_key_key is not None:
            pulumi.set(__self__, "secret_store_secret_access_key_key", secret_store_secret_access_key_key)
        if secret_store_secret_access_key_path is not None:
            pulumi.set(__self__, "secret_store_secret_access_key_path", secret_store_secret_access_key_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="athenaOutput")
    def athena_output(self) -> pulumi.Input[str]:
        return pulumi.get(self, "athena_output")

    @athena_output.setter
    def athena_output(self, value: pulumi.Input[str]):
        pulumi.set(self, "athena_output", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="roleExternalId")
    def role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_external_id")

    @role_external_id.setter
    def role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_external_id", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="secretStoreAccessKeyKey")
    def secret_store_access_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_access_key_key")

    @secret_store_access_key_key.setter
    def secret_store_access_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_access_key_key", value)

    @property
    @pulumi.getter(name="secretStoreAccessKeyPath")
    def secret_store_access_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_access_key_path")

    @secret_store_access_key_path.setter
    def secret_store_access_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_access_key_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnKey")
    def secret_store_role_arn_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_key")

    @secret_store_role_arn_key.setter
    def secret_store_role_arn_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnPath")
    def secret_store_role_arn_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_path")

    @secret_store_role_arn_path.setter
    def secret_store_role_arn_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_path", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdKey")
    def secret_store_role_external_id_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_key")

    @secret_store_role_external_id_key.setter
    def secret_store_role_external_id_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdPath")
    def secret_store_role_external_id_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_path")

    @secret_store_role_external_id_path.setter
    def secret_store_role_external_id_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_path", value)

    @property
    @pulumi.getter(name="secretStoreSecretAccessKeyKey")
    def secret_store_secret_access_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_secret_access_key_key")

    @secret_store_secret_access_key_key.setter
    def secret_store_secret_access_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_secret_access_key_key", value)

    @property
    @pulumi.getter(name="secretStoreSecretAccessKeyPath")
    def secret_store_secret_access_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_secret_access_key_path")

    @secret_store_secret_access_key_path.setter
    def secret_store_secret_access_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_secret_access_key_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceAuroraMysqlArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceAuroraPostgresArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 override_database: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if override_database is not None:
            pulumi.set(__self__, "override_database", override_database)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="overrideDatabase")
    def override_database(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "override_database")

    @override_database.setter
    def override_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_database", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceAwsArgs:
    def __init__(__self__, *,
                 healthcheck_region: pulumi.Input[str],
                 name: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 role_external_id: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None,
                 secret_store_access_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_access_key_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_path: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_path: Optional[pulumi.Input[str]] = None,
                 secret_store_secret_access_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_secret_access_key_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "healthcheck_region", healthcheck_region)
        pulumi.set(__self__, "name", name)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if role_external_id is not None:
            pulumi.set(__self__, "role_external_id", role_external_id)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if secret_store_access_key_key is not None:
            pulumi.set(__self__, "secret_store_access_key_key", secret_store_access_key_key)
        if secret_store_access_key_path is not None:
            pulumi.set(__self__, "secret_store_access_key_path", secret_store_access_key_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_role_arn_key is not None:
            pulumi.set(__self__, "secret_store_role_arn_key", secret_store_role_arn_key)
        if secret_store_role_arn_path is not None:
            pulumi.set(__self__, "secret_store_role_arn_path", secret_store_role_arn_path)
        if secret_store_role_external_id_key is not None:
            pulumi.set(__self__, "secret_store_role_external_id_key", secret_store_role_external_id_key)
        if secret_store_role_external_id_path is not None:
            pulumi.set(__self__, "secret_store_role_external_id_path", secret_store_role_external_id_path)
        if secret_store_secret_access_key_key is not None:
            pulumi.set(__self__, "secret_store_secret_access_key_key", secret_store_secret_access_key_key)
        if secret_store_secret_access_key_path is not None:
            pulumi.set(__self__, "secret_store_secret_access_key_path", secret_store_secret_access_key_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="healthcheckRegion")
    def healthcheck_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "healthcheck_region")

    @healthcheck_region.setter
    def healthcheck_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "healthcheck_region", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="roleExternalId")
    def role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_external_id")

    @role_external_id.setter
    def role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_external_id", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="secretStoreAccessKeyKey")
    def secret_store_access_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_access_key_key")

    @secret_store_access_key_key.setter
    def secret_store_access_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_access_key_key", value)

    @property
    @pulumi.getter(name="secretStoreAccessKeyPath")
    def secret_store_access_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_access_key_path")

    @secret_store_access_key_path.setter
    def secret_store_access_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_access_key_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnKey")
    def secret_store_role_arn_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_key")

    @secret_store_role_arn_key.setter
    def secret_store_role_arn_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnPath")
    def secret_store_role_arn_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_path")

    @secret_store_role_arn_path.setter
    def secret_store_role_arn_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_path", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdKey")
    def secret_store_role_external_id_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_key")

    @secret_store_role_external_id_key.setter
    def secret_store_role_external_id_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdPath")
    def secret_store_role_external_id_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_path")

    @secret_store_role_external_id_path.setter
    def secret_store_role_external_id_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_path", value)

    @property
    @pulumi.getter(name="secretStoreSecretAccessKeyKey")
    def secret_store_secret_access_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_secret_access_key_key")

    @secret_store_secret_access_key_key.setter
    def secret_store_secret_access_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_secret_access_key_key", value)

    @property
    @pulumi.getter(name="secretStoreSecretAccessKeyPath")
    def secret_store_secret_access_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_secret_access_key_path")

    @secret_store_secret_access_key_path.setter
    def secret_store_secret_access_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_secret_access_key_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceAwsConsoleArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 subdomain: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 enable_env_variables: Optional[pulumi.Input[bool]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 remote_identity_group_id: Optional[pulumi.Input[str]] = None,
                 remote_identity_healthcheck_username: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 role_external_id: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_path: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_path: Optional[pulumi.Input[str]] = None,
                 session_expiry: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subdomain", subdomain)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if enable_env_variables is not None:
            pulumi.set(__self__, "enable_env_variables", enable_env_variables)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if remote_identity_group_id is not None:
            pulumi.set(__self__, "remote_identity_group_id", remote_identity_group_id)
        if remote_identity_healthcheck_username is not None:
            pulumi.set(__self__, "remote_identity_healthcheck_username", remote_identity_healthcheck_username)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if role_external_id is not None:
            pulumi.set(__self__, "role_external_id", role_external_id)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_role_arn_key is not None:
            pulumi.set(__self__, "secret_store_role_arn_key", secret_store_role_arn_key)
        if secret_store_role_arn_path is not None:
            pulumi.set(__self__, "secret_store_role_arn_path", secret_store_role_arn_path)
        if secret_store_role_external_id_key is not None:
            pulumi.set(__self__, "secret_store_role_external_id_key", secret_store_role_external_id_key)
        if secret_store_role_external_id_path is not None:
            pulumi.set(__self__, "secret_store_role_external_id_path", secret_store_role_external_id_path)
        if session_expiry is not None:
            pulumi.set(__self__, "session_expiry", session_expiry)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def subdomain(self) -> pulumi.Input[str]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: pulumi.Input[str]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="enableEnvVariables")
    def enable_env_variables(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_env_variables")

    @enable_env_variables.setter
    def enable_env_variables(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_env_variables", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="remoteIdentityGroupId")
    def remote_identity_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_group_id")

    @remote_identity_group_id.setter
    def remote_identity_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_group_id", value)

    @property
    @pulumi.getter(name="remoteIdentityHealthcheckUsername")
    def remote_identity_healthcheck_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_healthcheck_username")

    @remote_identity_healthcheck_username.setter
    def remote_identity_healthcheck_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_healthcheck_username", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="roleExternalId")
    def role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_external_id")

    @role_external_id.setter
    def role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_external_id", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnKey")
    def secret_store_role_arn_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_key")

    @secret_store_role_arn_key.setter
    def secret_store_role_arn_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnPath")
    def secret_store_role_arn_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_path")

    @secret_store_role_arn_path.setter
    def secret_store_role_arn_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_path", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdKey")
    def secret_store_role_external_id_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_key")

    @secret_store_role_external_id_key.setter
    def secret_store_role_external_id_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdPath")
    def secret_store_role_external_id_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_path")

    @secret_store_role_external_id_path.setter
    def secret_store_role_external_id_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_path", value)

    @property
    @pulumi.getter(name="sessionExpiry")
    def session_expiry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_expiry")

    @session_expiry.setter
    def session_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_expiry", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceAwsConsoleStaticKeyPairArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 subdomain: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 remote_identity_group_id: Optional[pulumi.Input[str]] = None,
                 remote_identity_healthcheck_username: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 role_external_id: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None,
                 secret_store_access_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_access_key_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_path: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_path: Optional[pulumi.Input[str]] = None,
                 secret_store_secret_access_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_secret_access_key_path: Optional[pulumi.Input[str]] = None,
                 session_expiry: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subdomain", subdomain)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if remote_identity_group_id is not None:
            pulumi.set(__self__, "remote_identity_group_id", remote_identity_group_id)
        if remote_identity_healthcheck_username is not None:
            pulumi.set(__self__, "remote_identity_healthcheck_username", remote_identity_healthcheck_username)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if role_external_id is not None:
            pulumi.set(__self__, "role_external_id", role_external_id)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if secret_store_access_key_key is not None:
            pulumi.set(__self__, "secret_store_access_key_key", secret_store_access_key_key)
        if secret_store_access_key_path is not None:
            pulumi.set(__self__, "secret_store_access_key_path", secret_store_access_key_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_role_arn_key is not None:
            pulumi.set(__self__, "secret_store_role_arn_key", secret_store_role_arn_key)
        if secret_store_role_arn_path is not None:
            pulumi.set(__self__, "secret_store_role_arn_path", secret_store_role_arn_path)
        if secret_store_role_external_id_key is not None:
            pulumi.set(__self__, "secret_store_role_external_id_key", secret_store_role_external_id_key)
        if secret_store_role_external_id_path is not None:
            pulumi.set(__self__, "secret_store_role_external_id_path", secret_store_role_external_id_path)
        if secret_store_secret_access_key_key is not None:
            pulumi.set(__self__, "secret_store_secret_access_key_key", secret_store_secret_access_key_key)
        if secret_store_secret_access_key_path is not None:
            pulumi.set(__self__, "secret_store_secret_access_key_path", secret_store_secret_access_key_path)
        if session_expiry is not None:
            pulumi.set(__self__, "session_expiry", session_expiry)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def subdomain(self) -> pulumi.Input[str]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: pulumi.Input[str]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="remoteIdentityGroupId")
    def remote_identity_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_group_id")

    @remote_identity_group_id.setter
    def remote_identity_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_group_id", value)

    @property
    @pulumi.getter(name="remoteIdentityHealthcheckUsername")
    def remote_identity_healthcheck_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_healthcheck_username")

    @remote_identity_healthcheck_username.setter
    def remote_identity_healthcheck_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_healthcheck_username", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="roleExternalId")
    def role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_external_id")

    @role_external_id.setter
    def role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_external_id", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="secretStoreAccessKeyKey")
    def secret_store_access_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_access_key_key")

    @secret_store_access_key_key.setter
    def secret_store_access_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_access_key_key", value)

    @property
    @pulumi.getter(name="secretStoreAccessKeyPath")
    def secret_store_access_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_access_key_path")

    @secret_store_access_key_path.setter
    def secret_store_access_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_access_key_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnKey")
    def secret_store_role_arn_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_key")

    @secret_store_role_arn_key.setter
    def secret_store_role_arn_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnPath")
    def secret_store_role_arn_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_path")

    @secret_store_role_arn_path.setter
    def secret_store_role_arn_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_path", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdKey")
    def secret_store_role_external_id_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_key")

    @secret_store_role_external_id_key.setter
    def secret_store_role_external_id_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdPath")
    def secret_store_role_external_id_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_path")

    @secret_store_role_external_id_path.setter
    def secret_store_role_external_id_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_path", value)

    @property
    @pulumi.getter(name="secretStoreSecretAccessKeyKey")
    def secret_store_secret_access_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_secret_access_key_key")

    @secret_store_secret_access_key_key.setter
    def secret_store_secret_access_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_secret_access_key_key", value)

    @property
    @pulumi.getter(name="secretStoreSecretAccessKeyPath")
    def secret_store_secret_access_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_secret_access_key_path")

    @secret_store_secret_access_key_path.setter
    def secret_store_secret_access_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_secret_access_key_path", value)

    @property
    @pulumi.getter(name="sessionExpiry")
    def session_expiry(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_expiry")

    @session_expiry.setter
    def session_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_expiry", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceAzureArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 app_id: Optional[pulumi.Input[str]] = None,
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_app_id_key: Optional[pulumi.Input[str]] = None,
                 secret_store_app_id_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_tenant_id_key: Optional[pulumi.Input[str]] = None,
                 secret_store_tenant_id_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_tenant_id_key: * azure_mysql:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "name", name)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_app_id_key is not None:
            pulumi.set(__self__, "secret_store_app_id_key", secret_store_app_id_key)
        if secret_store_app_id_path is not None:
            pulumi.set(__self__, "secret_store_app_id_path", secret_store_app_id_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_tenant_id_key is not None:
            pulumi.set(__self__, "secret_store_tenant_id_key", secret_store_tenant_id_key)
        if secret_store_tenant_id_path is not None:
            pulumi.set(__self__, "secret_store_tenant_id_path", secret_store_tenant_id_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreAppIdKey")
    def secret_store_app_id_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_app_id_key")

    @secret_store_app_id_key.setter
    def secret_store_app_id_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_app_id_key", value)

    @property
    @pulumi.getter(name="secretStoreAppIdPath")
    def secret_store_app_id_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_app_id_path")

    @secret_store_app_id_path.setter
    def secret_store_app_id_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_app_id_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreTenantIdKey")
    def secret_store_tenant_id_key(self) -> Optional[pulumi.Input[str]]:
        """
        * azure_mysql:
        """
        return pulumi.get(self, "secret_store_tenant_id_key")

    @secret_store_tenant_id_key.setter
    def secret_store_tenant_id_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_tenant_id_key", value)

    @property
    @pulumi.getter(name="secretStoreTenantIdPath")
    def secret_store_tenant_id_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_tenant_id_path")

    @secret_store_tenant_id_path.setter
    def secret_store_tenant_id_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_tenant_id_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class ResourceAzureCertificateArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 app_id: Optional[pulumi.Input[str]] = None,
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_app_id_key: Optional[pulumi.Input[str]] = None,
                 secret_store_app_id_path: Optional[pulumi.Input[str]] = None,
                 secret_store_client_certificate_key: Optional[pulumi.Input[str]] = None,
                 secret_store_client_certificate_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_tenant_id_key: Optional[pulumi.Input[str]] = None,
                 secret_store_tenant_id_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_tenant_id_key: * azure_mysql:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "name", name)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_app_id_key is not None:
            pulumi.set(__self__, "secret_store_app_id_key", secret_store_app_id_key)
        if secret_store_app_id_path is not None:
            pulumi.set(__self__, "secret_store_app_id_path", secret_store_app_id_path)
        if secret_store_client_certificate_key is not None:
            pulumi.set(__self__, "secret_store_client_certificate_key", secret_store_client_certificate_key)
        if secret_store_client_certificate_path is not None:
            pulumi.set(__self__, "secret_store_client_certificate_path", secret_store_client_certificate_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_tenant_id_key is not None:
            pulumi.set(__self__, "secret_store_tenant_id_key", secret_store_tenant_id_key)
        if secret_store_tenant_id_path is not None:
            pulumi.set(__self__, "secret_store_tenant_id_path", secret_store_tenant_id_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreAppIdKey")
    def secret_store_app_id_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_app_id_key")

    @secret_store_app_id_key.setter
    def secret_store_app_id_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_app_id_key", value)

    @property
    @pulumi.getter(name="secretStoreAppIdPath")
    def secret_store_app_id_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_app_id_path")

    @secret_store_app_id_path.setter
    def secret_store_app_id_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_app_id_path", value)

    @property
    @pulumi.getter(name="secretStoreClientCertificateKey")
    def secret_store_client_certificate_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_certificate_key")

    @secret_store_client_certificate_key.setter
    def secret_store_client_certificate_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_certificate_key", value)

    @property
    @pulumi.getter(name="secretStoreClientCertificatePath")
    def secret_store_client_certificate_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_certificate_path")

    @secret_store_client_certificate_path.setter
    def secret_store_client_certificate_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_certificate_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreTenantIdKey")
    def secret_store_tenant_id_key(self) -> Optional[pulumi.Input[str]]:
        """
        * azure_mysql:
        """
        return pulumi.get(self, "secret_store_tenant_id_key")

    @secret_store_tenant_id_key.setter
    def secret_store_tenant_id_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_tenant_id_key", value)

    @property
    @pulumi.getter(name="secretStoreTenantIdPath")
    def secret_store_tenant_id_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_tenant_id_path")

    @secret_store_tenant_id_path.setter
    def secret_store_tenant_id_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_tenant_id_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class ResourceAzureMysqlArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceAzurePostgresArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 override_database: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if override_database is not None:
            pulumi.set(__self__, "override_database", override_database)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="overrideDatabase")
    def override_database(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "override_database")

    @override_database.setter
    def override_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_database", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceBigQueryArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 name: pulumi.Input[str],
                 project: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_private_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_private_key_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project", project)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_private_key_key is not None:
            pulumi.set(__self__, "secret_store_private_key_key", secret_store_private_key_key)
        if secret_store_private_key_path is not None:
            pulumi.set(__self__, "secret_store_private_key_path", secret_store_private_key_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePrivateKeyKey")
    def secret_store_private_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_private_key_key")

    @secret_store_private_key_key.setter
    def secret_store_private_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_private_key_key", value)

    @property
    @pulumi.getter(name="secretStorePrivateKeyPath")
    def secret_store_private_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_private_key_path")

    @secret_store_private_key_path.setter
    def secret_store_private_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_private_key_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceCassandraArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tls_required: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tls_required is not None:
            pulumi.set(__self__, "tls_required", tls_required)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tlsRequired")
    def tls_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_required")

    @tls_required.setter
    def tls_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_required", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceCitusArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 override_database: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if override_database is not None:
            pulumi.set(__self__, "override_database", override_database)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="overrideDatabase")
    def override_database(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "override_database")

    @override_database.setter
    def override_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_database", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceClustrixArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceCockroachArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 override_database: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if override_database is not None:
            pulumi.set(__self__, "override_database", override_database)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="overrideDatabase")
    def override_database(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "override_database")

    @override_database.setter
    def override_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_database", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceDb2IArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tls_required: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tls_required is not None:
            pulumi.set(__self__, "tls_required", tls_required)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tlsRequired")
    def tls_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_required")

    @tls_required.setter
    def tls_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_required", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceDb2LuwArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceDocumentDbHostArgs:
    def __init__(__self__, *,
                 auth_database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "auth_database", auth_database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authDatabase")
    def auth_database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_database")

    @auth_database.setter
    def auth_database(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceDocumentDbReplicaSetArgs:
    def __init__(__self__, *,
                 auth_database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 replica_set: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 connect_to_replica: Optional[pulumi.Input[bool]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "auth_database", auth_database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "replica_set", replica_set)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if connect_to_replica is not None:
            pulumi.set(__self__, "connect_to_replica", connect_to_replica)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authDatabase")
    def auth_database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_database")

    @auth_database.setter
    def auth_database(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> pulumi.Input[str]:
        return pulumi.get(self, "replica_set")

    @replica_set.setter
    def replica_set(self, value: pulumi.Input[str]):
        pulumi.set(self, "replica_set", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="connectToReplica")
    def connect_to_replica(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "connect_to_replica")

    @connect_to_replica.setter
    def connect_to_replica(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "connect_to_replica", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceDruidArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceDynamoDbArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 role_external_id: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None,
                 secret_store_access_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_access_key_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_path: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_path: Optional[pulumi.Input[str]] = None,
                 secret_store_secret_access_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_secret_access_key_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if role_external_id is not None:
            pulumi.set(__self__, "role_external_id", role_external_id)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if secret_store_access_key_key is not None:
            pulumi.set(__self__, "secret_store_access_key_key", secret_store_access_key_key)
        if secret_store_access_key_path is not None:
            pulumi.set(__self__, "secret_store_access_key_path", secret_store_access_key_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_role_arn_key is not None:
            pulumi.set(__self__, "secret_store_role_arn_key", secret_store_role_arn_key)
        if secret_store_role_arn_path is not None:
            pulumi.set(__self__, "secret_store_role_arn_path", secret_store_role_arn_path)
        if secret_store_role_external_id_key is not None:
            pulumi.set(__self__, "secret_store_role_external_id_key", secret_store_role_external_id_key)
        if secret_store_role_external_id_path is not None:
            pulumi.set(__self__, "secret_store_role_external_id_path", secret_store_role_external_id_path)
        if secret_store_secret_access_key_key is not None:
            pulumi.set(__self__, "secret_store_secret_access_key_key", secret_store_secret_access_key_key)
        if secret_store_secret_access_key_path is not None:
            pulumi.set(__self__, "secret_store_secret_access_key_path", secret_store_secret_access_key_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="roleExternalId")
    def role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_external_id")

    @role_external_id.setter
    def role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_external_id", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="secretStoreAccessKeyKey")
    def secret_store_access_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_access_key_key")

    @secret_store_access_key_key.setter
    def secret_store_access_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_access_key_key", value)

    @property
    @pulumi.getter(name="secretStoreAccessKeyPath")
    def secret_store_access_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_access_key_path")

    @secret_store_access_key_path.setter
    def secret_store_access_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_access_key_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnKey")
    def secret_store_role_arn_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_key")

    @secret_store_role_arn_key.setter
    def secret_store_role_arn_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnPath")
    def secret_store_role_arn_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_path")

    @secret_store_role_arn_path.setter
    def secret_store_role_arn_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_path", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdKey")
    def secret_store_role_external_id_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_key")

    @secret_store_role_external_id_key.setter
    def secret_store_role_external_id_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdPath")
    def secret_store_role_external_id_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_path")

    @secret_store_role_external_id_path.setter
    def secret_store_role_external_id_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_path", value)

    @property
    @pulumi.getter(name="secretStoreSecretAccessKeyKey")
    def secret_store_secret_access_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_secret_access_key_key")

    @secret_store_secret_access_key_key.setter
    def secret_store_secret_access_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_secret_access_key_key", value)

    @property
    @pulumi.getter(name="secretStoreSecretAccessKeyPath")
    def secret_store_secret_access_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_secret_access_key_path")

    @secret_store_secret_access_key_path.setter
    def secret_store_secret_access_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_secret_access_key_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceElasticArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tls_required: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tls_required is not None:
            pulumi.set(__self__, "tls_required", tls_required)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tlsRequired")
    def tls_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_required")

    @tls_required.setter
    def tls_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_required", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceElasticacheRedisArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tls_required: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tls_required is not None:
            pulumi.set(__self__, "tls_required", tls_required)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tlsRequired")
    def tls_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_required")

    @tls_required.setter
    def tls_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_required", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceGcpArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 scopes: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 keyfile: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_keyfile_key: Optional[pulumi.Input[str]] = None,
                 secret_store_keyfile_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scopes", scopes)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if keyfile is not None:
            pulumi.set(__self__, "keyfile", keyfile)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_keyfile_key is not None:
            pulumi.set(__self__, "secret_store_keyfile_key", secret_store_keyfile_key)
        if secret_store_keyfile_path is not None:
            pulumi.set(__self__, "secret_store_keyfile_path", secret_store_keyfile_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scopes(self) -> pulumi.Input[str]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: pulumi.Input[str]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def keyfile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keyfile")

    @keyfile.setter
    def keyfile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyfile", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreKeyfileKey")
    def secret_store_keyfile_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_keyfile_key")

    @secret_store_keyfile_key.setter
    def secret_store_keyfile_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_keyfile_key", value)

    @property
    @pulumi.getter(name="secretStoreKeyfilePath")
    def secret_store_keyfile_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_keyfile_path")

    @secret_store_keyfile_path.setter
    def secret_store_keyfile_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_keyfile_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceGoogleGkeArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 certificate_authority: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 healthcheck_namespace: Optional[pulumi.Input[str]] = None,
                 remote_identity_group_id: Optional[pulumi.Input[str]] = None,
                 remote_identity_healthcheck_username: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_key: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_service_account_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_service_account_key_path: Optional[pulumi.Input[str]] = None,
                 service_account_key: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] healthcheck_namespace: The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if healthcheck_namespace is not None:
            pulumi.set(__self__, "healthcheck_namespace", healthcheck_namespace)
        if remote_identity_group_id is not None:
            pulumi.set(__self__, "remote_identity_group_id", remote_identity_group_id)
        if remote_identity_healthcheck_username is not None:
            pulumi.set(__self__, "remote_identity_healthcheck_username", remote_identity_healthcheck_username)
        if secret_store_certificate_authority_key is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_key", secret_store_certificate_authority_key)
        if secret_store_certificate_authority_path is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_path", secret_store_certificate_authority_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_service_account_key_key is not None:
            pulumi.set(__self__, "secret_store_service_account_key_key", secret_store_service_account_key_key)
        if secret_store_service_account_key_path is not None:
            pulumi.set(__self__, "secret_store_service_account_key_path", secret_store_service_account_key_path)
        if service_account_key is not None:
            pulumi.set(__self__, "service_account_key", service_account_key)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_authority")

    @certificate_authority.setter
    def certificate_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_authority", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="healthcheckNamespace")
    def healthcheck_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        """
        return pulumi.get(self, "healthcheck_namespace")

    @healthcheck_namespace.setter
    def healthcheck_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_namespace", value)

    @property
    @pulumi.getter(name="remoteIdentityGroupId")
    def remote_identity_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_group_id")

    @remote_identity_group_id.setter
    def remote_identity_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_group_id", value)

    @property
    @pulumi.getter(name="remoteIdentityHealthcheckUsername")
    def remote_identity_healthcheck_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_healthcheck_username")

    @remote_identity_healthcheck_username.setter
    def remote_identity_healthcheck_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_healthcheck_username", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityKey")
    def secret_store_certificate_authority_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_key")

    @secret_store_certificate_authority_key.setter
    def secret_store_certificate_authority_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_key", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityPath")
    def secret_store_certificate_authority_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_path")

    @secret_store_certificate_authority_path.setter
    def secret_store_certificate_authority_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreServiceAccountKeyKey")
    def secret_store_service_account_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_service_account_key_key")

    @secret_store_service_account_key_key.setter
    def secret_store_service_account_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_service_account_key_key", value)

    @property
    @pulumi.getter(name="secretStoreServiceAccountKeyPath")
    def secret_store_service_account_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_service_account_key_path")

    @secret_store_service_account_key_path.setter
    def secret_store_service_account_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_service_account_key_path", value)

    @property
    @pulumi.getter(name="serviceAccountKey")
    def service_account_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_key")

    @service_account_key.setter
    def service_account_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_key", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceGoogleGkeUserImpersonationArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 certificate_authority: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 healthcheck_namespace: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_key: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_service_account_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_service_account_key_path: Optional[pulumi.Input[str]] = None,
                 service_account_key: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] healthcheck_namespace: The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if healthcheck_namespace is not None:
            pulumi.set(__self__, "healthcheck_namespace", healthcheck_namespace)
        if secret_store_certificate_authority_key is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_key", secret_store_certificate_authority_key)
        if secret_store_certificate_authority_path is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_path", secret_store_certificate_authority_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_service_account_key_key is not None:
            pulumi.set(__self__, "secret_store_service_account_key_key", secret_store_service_account_key_key)
        if secret_store_service_account_key_path is not None:
            pulumi.set(__self__, "secret_store_service_account_key_path", secret_store_service_account_key_path)
        if service_account_key is not None:
            pulumi.set(__self__, "service_account_key", service_account_key)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_authority")

    @certificate_authority.setter
    def certificate_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_authority", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="healthcheckNamespace")
    def healthcheck_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        """
        return pulumi.get(self, "healthcheck_namespace")

    @healthcheck_namespace.setter
    def healthcheck_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_namespace", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityKey")
    def secret_store_certificate_authority_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_key")

    @secret_store_certificate_authority_key.setter
    def secret_store_certificate_authority_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_key", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityPath")
    def secret_store_certificate_authority_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_path")

    @secret_store_certificate_authority_path.setter
    def secret_store_certificate_authority_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreServiceAccountKeyKey")
    def secret_store_service_account_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_service_account_key_key")

    @secret_store_service_account_key_key.setter
    def secret_store_service_account_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_service_account_key_key", value)

    @property
    @pulumi.getter(name="secretStoreServiceAccountKeyPath")
    def secret_store_service_account_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_service_account_key_path")

    @secret_store_service_account_key_path.setter
    def secret_store_service_account_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_service_account_key_path", value)

    @property
    @pulumi.getter(name="serviceAccountKey")
    def service_account_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_key")

    @service_account_key.setter
    def service_account_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_key", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceGreenplumArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 override_database: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if override_database is not None:
            pulumi.set(__self__, "override_database", override_database)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="overrideDatabase")
    def override_database(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "override_database")

    @override_database.setter
    def override_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_database", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceHttpAuthArgs:
    def __init__(__self__, *,
                 healthcheck_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 subdomain: pulumi.Input[str],
                 url: pulumi.Input[str],
                 auth_header: Optional[pulumi.Input[str]] = None,
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 default_path: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 headers_blacklist: Optional[pulumi.Input[str]] = None,
                 host_override: Optional[pulumi.Input[str]] = None,
                 secret_store_auth_header_key: Optional[pulumi.Input[str]] = None,
                 secret_store_auth_header_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[str] url: * kubernetes:
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "healthcheck_path", healthcheck_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subdomain", subdomain)
        pulumi.set(__self__, "url", url)
        if auth_header is not None:
            pulumi.set(__self__, "auth_header", auth_header)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if default_path is not None:
            pulumi.set(__self__, "default_path", default_path)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if headers_blacklist is not None:
            pulumi.set(__self__, "headers_blacklist", headers_blacklist)
        if host_override is not None:
            pulumi.set(__self__, "host_override", host_override)
        if secret_store_auth_header_key is not None:
            pulumi.set(__self__, "secret_store_auth_header_key", secret_store_auth_header_key)
        if secret_store_auth_header_path is not None:
            pulumi.set(__self__, "secret_store_auth_header_path", secret_store_auth_header_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="healthcheckPath")
    def healthcheck_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "healthcheck_path")

    @healthcheck_path.setter
    def healthcheck_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "healthcheck_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subdomain(self) -> pulumi.Input[str]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: pulumi.Input[str]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        * kubernetes:
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="authHeader")
    def auth_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_header")

    @auth_header.setter
    def auth_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_header", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="defaultPath")
    def default_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_path")

    @default_path.setter
    def default_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_path", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="headersBlacklist")
    def headers_blacklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "headers_blacklist")

    @headers_blacklist.setter
    def headers_blacklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "headers_blacklist", value)

    @property
    @pulumi.getter(name="hostOverride")
    def host_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_override")

    @host_override.setter
    def host_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_override", value)

    @property
    @pulumi.getter(name="secretStoreAuthHeaderKey")
    def secret_store_auth_header_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_auth_header_key")

    @secret_store_auth_header_key.setter
    def secret_store_auth_header_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_auth_header_key", value)

    @property
    @pulumi.getter(name="secretStoreAuthHeaderPath")
    def secret_store_auth_header_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_auth_header_path")

    @secret_store_auth_header_path.setter
    def secret_store_auth_header_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_auth_header_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceHttpBasicAuthArgs:
    def __init__(__self__, *,
                 healthcheck_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 subdomain: pulumi.Input[str],
                 url: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 default_path: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 headers_blacklist: Optional[pulumi.Input[str]] = None,
                 host_override: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[str] url: * kubernetes:
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "healthcheck_path", healthcheck_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subdomain", subdomain)
        pulumi.set(__self__, "url", url)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if default_path is not None:
            pulumi.set(__self__, "default_path", default_path)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if headers_blacklist is not None:
            pulumi.set(__self__, "headers_blacklist", headers_blacklist)
        if host_override is not None:
            pulumi.set(__self__, "host_override", host_override)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="healthcheckPath")
    def healthcheck_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "healthcheck_path")

    @healthcheck_path.setter
    def healthcheck_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "healthcheck_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subdomain(self) -> pulumi.Input[str]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: pulumi.Input[str]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        * kubernetes:
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="defaultPath")
    def default_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_path")

    @default_path.setter
    def default_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_path", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="headersBlacklist")
    def headers_blacklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "headers_blacklist")

    @headers_blacklist.setter
    def headers_blacklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "headers_blacklist", value)

    @property
    @pulumi.getter(name="hostOverride")
    def host_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_override")

    @host_override.setter
    def host_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_override", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceHttpNoAuthArgs:
    def __init__(__self__, *,
                 healthcheck_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 subdomain: pulumi.Input[str],
                 url: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 default_path: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 headers_blacklist: Optional[pulumi.Input[str]] = None,
                 host_override: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[str] url: * kubernetes:
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "healthcheck_path", healthcheck_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subdomain", subdomain)
        pulumi.set(__self__, "url", url)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if default_path is not None:
            pulumi.set(__self__, "default_path", default_path)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if headers_blacklist is not None:
            pulumi.set(__self__, "headers_blacklist", headers_blacklist)
        if host_override is not None:
            pulumi.set(__self__, "host_override", host_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="healthcheckPath")
    def healthcheck_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "healthcheck_path")

    @healthcheck_path.setter
    def healthcheck_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "healthcheck_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subdomain(self) -> pulumi.Input[str]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: pulumi.Input[str]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        * kubernetes:
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="defaultPath")
    def default_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_path")

    @default_path.setter
    def default_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_path", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="headersBlacklist")
    def headers_blacklist(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "headers_blacklist")

    @headers_blacklist.setter
    def headers_blacklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "headers_blacklist", value)

    @property
    @pulumi.getter(name="hostOverride")
    def host_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_override")

    @host_override.setter
    def host_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceKubernetesArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 certificate_authority: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 healthcheck_namespace: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 remote_identity_group_id: Optional[pulumi.Input[str]] = None,
                 remote_identity_healthcheck_username: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_key: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_path: Optional[pulumi.Input[str]] = None,
                 secret_store_client_certificate_key: Optional[pulumi.Input[str]] = None,
                 secret_store_client_certificate_path: Optional[pulumi.Input[str]] = None,
                 secret_store_client_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_client_key_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] healthcheck_namespace: The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if healthcheck_namespace is not None:
            pulumi.set(__self__, "healthcheck_namespace", healthcheck_namespace)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if remote_identity_group_id is not None:
            pulumi.set(__self__, "remote_identity_group_id", remote_identity_group_id)
        if remote_identity_healthcheck_username is not None:
            pulumi.set(__self__, "remote_identity_healthcheck_username", remote_identity_healthcheck_username)
        if secret_store_certificate_authority_key is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_key", secret_store_certificate_authority_key)
        if secret_store_certificate_authority_path is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_path", secret_store_certificate_authority_path)
        if secret_store_client_certificate_key is not None:
            pulumi.set(__self__, "secret_store_client_certificate_key", secret_store_client_certificate_key)
        if secret_store_client_certificate_path is not None:
            pulumi.set(__self__, "secret_store_client_certificate_path", secret_store_client_certificate_path)
        if secret_store_client_key_key is not None:
            pulumi.set(__self__, "secret_store_client_key_key", secret_store_client_key_key)
        if secret_store_client_key_path is not None:
            pulumi.set(__self__, "secret_store_client_key_path", secret_store_client_key_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_authority")

    @certificate_authority.setter
    def certificate_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_authority", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="healthcheckNamespace")
    def healthcheck_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        """
        return pulumi.get(self, "healthcheck_namespace")

    @healthcheck_namespace.setter
    def healthcheck_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_namespace", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="remoteIdentityGroupId")
    def remote_identity_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_group_id")

    @remote_identity_group_id.setter
    def remote_identity_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_group_id", value)

    @property
    @pulumi.getter(name="remoteIdentityHealthcheckUsername")
    def remote_identity_healthcheck_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_healthcheck_username")

    @remote_identity_healthcheck_username.setter
    def remote_identity_healthcheck_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_healthcheck_username", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityKey")
    def secret_store_certificate_authority_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_key")

    @secret_store_certificate_authority_key.setter
    def secret_store_certificate_authority_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_key", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityPath")
    def secret_store_certificate_authority_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_path")

    @secret_store_certificate_authority_path.setter
    def secret_store_certificate_authority_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_path", value)

    @property
    @pulumi.getter(name="secretStoreClientCertificateKey")
    def secret_store_client_certificate_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_certificate_key")

    @secret_store_client_certificate_key.setter
    def secret_store_client_certificate_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_certificate_key", value)

    @property
    @pulumi.getter(name="secretStoreClientCertificatePath")
    def secret_store_client_certificate_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_certificate_path")

    @secret_store_client_certificate_path.setter
    def secret_store_client_certificate_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_certificate_path", value)

    @property
    @pulumi.getter(name="secretStoreClientKeyKey")
    def secret_store_client_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_key_key")

    @secret_store_client_key_key.setter
    def secret_store_client_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_key_key", value)

    @property
    @pulumi.getter(name="secretStoreClientKeyPath")
    def secret_store_client_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_key_path")

    @secret_store_client_key_path.setter
    def secret_store_client_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_key_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceKubernetesBasicAuthArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 healthcheck_namespace: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] healthcheck_namespace: The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if healthcheck_namespace is not None:
            pulumi.set(__self__, "healthcheck_namespace", healthcheck_namespace)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="healthcheckNamespace")
    def healthcheck_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        """
        return pulumi.get(self, "healthcheck_namespace")

    @healthcheck_namespace.setter
    def healthcheck_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_namespace", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceKubernetesServiceAccountArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 healthcheck_namespace: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 remote_identity_group_id: Optional[pulumi.Input[str]] = None,
                 remote_identity_healthcheck_username: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_token_key: Optional[pulumi.Input[str]] = None,
                 secret_store_token_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] healthcheck_namespace: The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_token_key: * kubernetes_user_impersonation:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if healthcheck_namespace is not None:
            pulumi.set(__self__, "healthcheck_namespace", healthcheck_namespace)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if remote_identity_group_id is not None:
            pulumi.set(__self__, "remote_identity_group_id", remote_identity_group_id)
        if remote_identity_healthcheck_username is not None:
            pulumi.set(__self__, "remote_identity_healthcheck_username", remote_identity_healthcheck_username)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_token_key is not None:
            pulumi.set(__self__, "secret_store_token_key", secret_store_token_key)
        if secret_store_token_path is not None:
            pulumi.set(__self__, "secret_store_token_path", secret_store_token_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="healthcheckNamespace")
    def healthcheck_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        """
        return pulumi.get(self, "healthcheck_namespace")

    @healthcheck_namespace.setter
    def healthcheck_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_namespace", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="remoteIdentityGroupId")
    def remote_identity_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_group_id")

    @remote_identity_group_id.setter
    def remote_identity_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_group_id", value)

    @property
    @pulumi.getter(name="remoteIdentityHealthcheckUsername")
    def remote_identity_healthcheck_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_healthcheck_username")

    @remote_identity_healthcheck_username.setter
    def remote_identity_healthcheck_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_healthcheck_username", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreTokenKey")
    def secret_store_token_key(self) -> Optional[pulumi.Input[str]]:
        """
        * kubernetes_user_impersonation:
        """
        return pulumi.get(self, "secret_store_token_key")

    @secret_store_token_key.setter
    def secret_store_token_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_token_key", value)

    @property
    @pulumi.getter(name="secretStoreTokenPath")
    def secret_store_token_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_token_path")

    @secret_store_token_path.setter
    def secret_store_token_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_token_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class ResourceKubernetesServiceAccountUserImpersonationArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 healthcheck_namespace: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_token_key: Optional[pulumi.Input[str]] = None,
                 secret_store_token_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] healthcheck_namespace: The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_token_key: * kubernetes_user_impersonation:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if healthcheck_namespace is not None:
            pulumi.set(__self__, "healthcheck_namespace", healthcheck_namespace)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_token_key is not None:
            pulumi.set(__self__, "secret_store_token_key", secret_store_token_key)
        if secret_store_token_path is not None:
            pulumi.set(__self__, "secret_store_token_path", secret_store_token_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="healthcheckNamespace")
    def healthcheck_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        """
        return pulumi.get(self, "healthcheck_namespace")

    @healthcheck_namespace.setter
    def healthcheck_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_namespace", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreTokenKey")
    def secret_store_token_key(self) -> Optional[pulumi.Input[str]]:
        """
        * kubernetes_user_impersonation:
        """
        return pulumi.get(self, "secret_store_token_key")

    @secret_store_token_key.setter
    def secret_store_token_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_token_key", value)

    @property
    @pulumi.getter(name="secretStoreTokenPath")
    def secret_store_token_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_token_path")

    @secret_store_token_path.setter
    def secret_store_token_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_token_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class ResourceKubernetesUserImpersonationArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 certificate_authority: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 healthcheck_namespace: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_certificate_authority_key: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_path: Optional[pulumi.Input[str]] = None,
                 secret_store_client_certificate_key: Optional[pulumi.Input[str]] = None,
                 secret_store_client_certificate_path: Optional[pulumi.Input[str]] = None,
                 secret_store_client_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_client_key_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] healthcheck_namespace: The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if healthcheck_namespace is not None:
            pulumi.set(__self__, "healthcheck_namespace", healthcheck_namespace)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_certificate_authority_key is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_key", secret_store_certificate_authority_key)
        if secret_store_certificate_authority_path is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_path", secret_store_certificate_authority_path)
        if secret_store_client_certificate_key is not None:
            pulumi.set(__self__, "secret_store_client_certificate_key", secret_store_client_certificate_key)
        if secret_store_client_certificate_path is not None:
            pulumi.set(__self__, "secret_store_client_certificate_path", secret_store_client_certificate_path)
        if secret_store_client_key_key is not None:
            pulumi.set(__self__, "secret_store_client_key_key", secret_store_client_key_key)
        if secret_store_client_key_path is not None:
            pulumi.set(__self__, "secret_store_client_key_path", secret_store_client_key_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_authority")

    @certificate_authority.setter
    def certificate_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_authority", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="healthcheckNamespace")
    def healthcheck_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        """
        return pulumi.get(self, "healthcheck_namespace")

    @healthcheck_namespace.setter
    def healthcheck_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck_namespace", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityKey")
    def secret_store_certificate_authority_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_key")

    @secret_store_certificate_authority_key.setter
    def secret_store_certificate_authority_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_key", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityPath")
    def secret_store_certificate_authority_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_path")

    @secret_store_certificate_authority_path.setter
    def secret_store_certificate_authority_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_path", value)

    @property
    @pulumi.getter(name="secretStoreClientCertificateKey")
    def secret_store_client_certificate_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_certificate_key")

    @secret_store_client_certificate_key.setter
    def secret_store_client_certificate_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_certificate_key", value)

    @property
    @pulumi.getter(name="secretStoreClientCertificatePath")
    def secret_store_client_certificate_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_certificate_path")

    @secret_store_client_certificate_path.setter
    def secret_store_client_certificate_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_certificate_path", value)

    @property
    @pulumi.getter(name="secretStoreClientKeyKey")
    def secret_store_client_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_key_key")

    @secret_store_client_key_key.setter
    def secret_store_client_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_key_key", value)

    @property
    @pulumi.getter(name="secretStoreClientKeyPath")
    def secret_store_client_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_key_path")

    @secret_store_client_key_path.setter
    def secret_store_client_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_key_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceMariaArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceMemcachedArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceMemsqlArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceMongoHostArgs:
    def __init__(__self__, *,
                 auth_database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tls_required: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "auth_database", auth_database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tls_required is not None:
            pulumi.set(__self__, "tls_required", tls_required)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authDatabase")
    def auth_database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_database")

    @auth_database.setter
    def auth_database(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tlsRequired")
    def tls_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_required")

    @tls_required.setter
    def tls_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_required", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceMongoLegacyHostArgs:
    def __init__(__self__, *,
                 auth_database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 replica_set: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tls_required: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "auth_database", auth_database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if replica_set is not None:
            pulumi.set(__self__, "replica_set", replica_set)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tls_required is not None:
            pulumi.set(__self__, "tls_required", tls_required)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authDatabase")
    def auth_database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_database")

    @auth_database.setter
    def auth_database(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replica_set")

    @replica_set.setter
    def replica_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_set", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tlsRequired")
    def tls_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_required")

    @tls_required.setter
    def tls_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_required", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceMongoLegacyReplicasetArgs:
    def __init__(__self__, *,
                 auth_database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 replica_set: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 connect_to_replica: Optional[pulumi.Input[bool]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tls_required: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "auth_database", auth_database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "replica_set", replica_set)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if connect_to_replica is not None:
            pulumi.set(__self__, "connect_to_replica", connect_to_replica)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tls_required is not None:
            pulumi.set(__self__, "tls_required", tls_required)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authDatabase")
    def auth_database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_database")

    @auth_database.setter
    def auth_database(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> pulumi.Input[str]:
        return pulumi.get(self, "replica_set")

    @replica_set.setter
    def replica_set(self, value: pulumi.Input[str]):
        pulumi.set(self, "replica_set", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="connectToReplica")
    def connect_to_replica(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "connect_to_replica")

    @connect_to_replica.setter
    def connect_to_replica(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "connect_to_replica", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tlsRequired")
    def tls_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_required")

    @tls_required.setter
    def tls_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_required", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceMongoReplicaSetArgs:
    def __init__(__self__, *,
                 auth_database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 replica_set: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 connect_to_replica: Optional[pulumi.Input[bool]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tls_required: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "auth_database", auth_database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "replica_set", replica_set)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if connect_to_replica is not None:
            pulumi.set(__self__, "connect_to_replica", connect_to_replica)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tls_required is not None:
            pulumi.set(__self__, "tls_required", tls_required)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authDatabase")
    def auth_database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_database")

    @auth_database.setter
    def auth_database(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> pulumi.Input[str]:
        return pulumi.get(self, "replica_set")

    @replica_set.setter
    def replica_set(self, value: pulumi.Input[str]):
        pulumi.set(self, "replica_set", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="connectToReplica")
    def connect_to_replica(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "connect_to_replica")

    @connect_to_replica.setter
    def connect_to_replica(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "connect_to_replica", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tlsRequired")
    def tls_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_required")

    @tls_required.setter
    def tls_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_required", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceMongoShardedClusterArgs:
    def __init__(__self__, *,
                 auth_database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tls_required: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "auth_database", auth_database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tls_required is not None:
            pulumi.set(__self__, "tls_required", tls_required)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authDatabase")
    def auth_database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_database")

    @auth_database.setter
    def auth_database(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tlsRequired")
    def tls_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_required")

    @tls_required.setter
    def tls_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_required", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceMtlsMysqlArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 certificate_authority: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_certificate_authority_key: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_path: Optional[pulumi.Input[str]] = None,
                 secret_store_client_certificate_key: Optional[pulumi.Input[str]] = None,
                 secret_store_client_certificate_path: Optional[pulumi.Input[str]] = None,
                 secret_store_client_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_client_key_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_certificate_authority_key is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_key", secret_store_certificate_authority_key)
        if secret_store_certificate_authority_path is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_path", secret_store_certificate_authority_path)
        if secret_store_client_certificate_key is not None:
            pulumi.set(__self__, "secret_store_client_certificate_key", secret_store_client_certificate_key)
        if secret_store_client_certificate_path is not None:
            pulumi.set(__self__, "secret_store_client_certificate_path", secret_store_client_certificate_path)
        if secret_store_client_key_key is not None:
            pulumi.set(__self__, "secret_store_client_key_key", secret_store_client_key_key)
        if secret_store_client_key_path is not None:
            pulumi.set(__self__, "secret_store_client_key_path", secret_store_client_key_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_authority")

    @certificate_authority.setter
    def certificate_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_authority", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityKey")
    def secret_store_certificate_authority_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_key")

    @secret_store_certificate_authority_key.setter
    def secret_store_certificate_authority_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_key", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityPath")
    def secret_store_certificate_authority_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_path")

    @secret_store_certificate_authority_path.setter
    def secret_store_certificate_authority_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_path", value)

    @property
    @pulumi.getter(name="secretStoreClientCertificateKey")
    def secret_store_client_certificate_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_certificate_key")

    @secret_store_client_certificate_key.setter
    def secret_store_client_certificate_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_certificate_key", value)

    @property
    @pulumi.getter(name="secretStoreClientCertificatePath")
    def secret_store_client_certificate_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_certificate_path")

    @secret_store_client_certificate_path.setter
    def secret_store_client_certificate_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_certificate_path", value)

    @property
    @pulumi.getter(name="secretStoreClientKeyKey")
    def secret_store_client_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_key_key")

    @secret_store_client_key_key.setter
    def secret_store_client_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_key_key", value)

    @property
    @pulumi.getter(name="secretStoreClientKeyPath")
    def secret_store_client_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_key_path")

    @secret_store_client_key_path.setter
    def secret_store_client_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_key_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceMtlsPostgresArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 certificate_authority: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 override_database: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_certificate_authority_key: Optional[pulumi.Input[str]] = None,
                 secret_store_certificate_authority_path: Optional[pulumi.Input[str]] = None,
                 secret_store_client_certificate_key: Optional[pulumi.Input[str]] = None,
                 secret_store_client_certificate_path: Optional[pulumi.Input[str]] = None,
                 secret_store_client_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_client_key_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if override_database is not None:
            pulumi.set(__self__, "override_database", override_database)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_certificate_authority_key is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_key", secret_store_certificate_authority_key)
        if secret_store_certificate_authority_path is not None:
            pulumi.set(__self__, "secret_store_certificate_authority_path", secret_store_certificate_authority_path)
        if secret_store_client_certificate_key is not None:
            pulumi.set(__self__, "secret_store_client_certificate_key", secret_store_client_certificate_key)
        if secret_store_client_certificate_path is not None:
            pulumi.set(__self__, "secret_store_client_certificate_path", secret_store_client_certificate_path)
        if secret_store_client_key_key is not None:
            pulumi.set(__self__, "secret_store_client_key_key", secret_store_client_key_key)
        if secret_store_client_key_path is not None:
            pulumi.set(__self__, "secret_store_client_key_path", secret_store_client_key_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_authority")

    @certificate_authority.setter
    def certificate_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_authority", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="overrideDatabase")
    def override_database(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "override_database")

    @override_database.setter
    def override_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_database", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityKey")
    def secret_store_certificate_authority_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_key")

    @secret_store_certificate_authority_key.setter
    def secret_store_certificate_authority_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_key", value)

    @property
    @pulumi.getter(name="secretStoreCertificateAuthorityPath")
    def secret_store_certificate_authority_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_certificate_authority_path")

    @secret_store_certificate_authority_path.setter
    def secret_store_certificate_authority_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_certificate_authority_path", value)

    @property
    @pulumi.getter(name="secretStoreClientCertificateKey")
    def secret_store_client_certificate_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_certificate_key")

    @secret_store_client_certificate_key.setter
    def secret_store_client_certificate_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_certificate_key", value)

    @property
    @pulumi.getter(name="secretStoreClientCertificatePath")
    def secret_store_client_certificate_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_certificate_path")

    @secret_store_client_certificate_path.setter
    def secret_store_client_certificate_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_certificate_path", value)

    @property
    @pulumi.getter(name="secretStoreClientKeyKey")
    def secret_store_client_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_key_key")

    @secret_store_client_key_key.setter
    def secret_store_client_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_key_key", value)

    @property
    @pulumi.getter(name="secretStoreClientKeyPath")
    def secret_store_client_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_client_key_path")

    @secret_store_client_key_path.setter
    def secret_store_client_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_client_key_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceMysqlArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceNeptuneArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceNeptuneIamArgs:
    def __init__(__self__, *,
                 endpoint: pulumi.Input[str],
                 name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 role_external_id: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None,
                 secret_store_access_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_access_key_path: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_arn_path: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_key: Optional[pulumi.Input[str]] = None,
                 secret_store_role_external_id_path: Optional[pulumi.Input[str]] = None,
                 secret_store_secret_access_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_secret_access_key_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if role_external_id is not None:
            pulumi.set(__self__, "role_external_id", role_external_id)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if secret_store_access_key_key is not None:
            pulumi.set(__self__, "secret_store_access_key_key", secret_store_access_key_key)
        if secret_store_access_key_path is not None:
            pulumi.set(__self__, "secret_store_access_key_path", secret_store_access_key_path)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_role_arn_key is not None:
            pulumi.set(__self__, "secret_store_role_arn_key", secret_store_role_arn_key)
        if secret_store_role_arn_path is not None:
            pulumi.set(__self__, "secret_store_role_arn_path", secret_store_role_arn_path)
        if secret_store_role_external_id_key is not None:
            pulumi.set(__self__, "secret_store_role_external_id_key", secret_store_role_external_id_key)
        if secret_store_role_external_id_path is not None:
            pulumi.set(__self__, "secret_store_role_external_id_path", secret_store_role_external_id_path)
        if secret_store_secret_access_key_key is not None:
            pulumi.set(__self__, "secret_store_secret_access_key_key", secret_store_secret_access_key_key)
        if secret_store_secret_access_key_path is not None:
            pulumi.set(__self__, "secret_store_secret_access_key_path", secret_store_secret_access_key_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="roleExternalId")
    def role_external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_external_id")

    @role_external_id.setter
    def role_external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_external_id", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="secretStoreAccessKeyKey")
    def secret_store_access_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_access_key_key")

    @secret_store_access_key_key.setter
    def secret_store_access_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_access_key_key", value)

    @property
    @pulumi.getter(name="secretStoreAccessKeyPath")
    def secret_store_access_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_access_key_path")

    @secret_store_access_key_path.setter
    def secret_store_access_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_access_key_path", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnKey")
    def secret_store_role_arn_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_key")

    @secret_store_role_arn_key.setter
    def secret_store_role_arn_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleArnPath")
    def secret_store_role_arn_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_arn_path")

    @secret_store_role_arn_path.setter
    def secret_store_role_arn_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_arn_path", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdKey")
    def secret_store_role_external_id_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_key")

    @secret_store_role_external_id_key.setter
    def secret_store_role_external_id_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_key", value)

    @property
    @pulumi.getter(name="secretStoreRoleExternalIdPath")
    def secret_store_role_external_id_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_role_external_id_path")

    @secret_store_role_external_id_path.setter
    def secret_store_role_external_id_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_role_external_id_path", value)

    @property
    @pulumi.getter(name="secretStoreSecretAccessKeyKey")
    def secret_store_secret_access_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_secret_access_key_key")

    @secret_store_secret_access_key_key.setter
    def secret_store_secret_access_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_secret_access_key_key", value)

    @property
    @pulumi.getter(name="secretStoreSecretAccessKeyPath")
    def secret_store_secret_access_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_secret_access_key_path")

    @secret_store_secret_access_key_path.setter
    def secret_store_secret_access_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_secret_access_key_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceOracleArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tls_required: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tls_required is not None:
            pulumi.set(__self__, "tls_required", tls_required)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tlsRequired")
    def tls_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_required")

    @tls_required.setter
    def tls_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_required", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourcePostgresArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 override_database: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if override_database is not None:
            pulumi.set(__self__, "override_database", override_database)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="overrideDatabase")
    def override_database(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "override_database")

    @override_database.setter
    def override_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_database", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourcePrestoArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tls_required: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tls_required is not None:
            pulumi.set(__self__, "tls_required", tls_required)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tlsRequired")
    def tls_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_required")

    @tls_required.setter
    def tls_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_required", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceRabbitmqAmqp091Args:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tls_required: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tls_required is not None:
            pulumi.set(__self__, "tls_required", tls_required)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tlsRequired")
    def tls_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_required")

    @tls_required.setter
    def tls_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_required", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceRawTcpArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceRdpArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 downgrade_nla_connections: Optional[pulumi.Input[bool]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if downgrade_nla_connections is not None:
            pulumi.set(__self__, "downgrade_nla_connections", downgrade_nla_connections)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="downgradeNlaConnections")
    def downgrade_nla_connections(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "downgrade_nla_connections")

    @downgrade_nla_connections.setter
    def downgrade_nla_connections(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "downgrade_nla_connections", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceRedisArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tls_required: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tls_required is not None:
            pulumi.set(__self__, "tls_required", tls_required)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tlsRequired")
    def tls_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_required")

    @tls_required.setter
    def tls_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_required", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceRedshiftArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 override_database: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if override_database is not None:
            pulumi.set(__self__, "override_database", override_database)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="overrideDatabase")
    def override_database(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "override_database")

    @override_database.setter
    def override_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_database", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceSingleStoreArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceSnowflakeArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 schema: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceSnowsightArgs:
    def __init__(__self__, *,
                 healthcheck_username: pulumi.Input[str],
                 name: pulumi.Input[str],
                 subdomain: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 saml_metadata: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_saml_metadata_key: Optional[pulumi.Input[str]] = None,
                 secret_store_saml_metadata_path: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "healthcheck_username", healthcheck_username)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subdomain", subdomain)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if saml_metadata is not None:
            pulumi.set(__self__, "saml_metadata", saml_metadata)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_saml_metadata_key is not None:
            pulumi.set(__self__, "secret_store_saml_metadata_key", secret_store_saml_metadata_key)
        if secret_store_saml_metadata_path is not None:
            pulumi.set(__self__, "secret_store_saml_metadata_path", secret_store_saml_metadata_path)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="healthcheckUsername")
    def healthcheck_username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "healthcheck_username")

    @healthcheck_username.setter
    def healthcheck_username(self, value: pulumi.Input[str]):
        pulumi.set(self, "healthcheck_username", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subdomain(self) -> pulumi.Input[str]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: pulumi.Input[str]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="samlMetadata")
    def saml_metadata(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "saml_metadata")

    @saml_metadata.setter
    def saml_metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_metadata", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreSamlMetadataKey")
    def secret_store_saml_metadata_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_saml_metadata_key")

    @secret_store_saml_metadata_key.setter
    def secret_store_saml_metadata_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_saml_metadata_key", value)

    @property
    @pulumi.getter(name="secretStoreSamlMetadataPath")
    def secret_store_saml_metadata_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_saml_metadata_path")

    @secret_store_saml_metadata_path.setter
    def secret_store_saml_metadata_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_saml_metadata_path", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ResourceSqlServerArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 override_database: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 schema: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if override_database is not None:
            pulumi.set(__self__, "override_database", override_database)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="overrideDatabase")
    def override_database(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "override_database")

    @override_database.setter
    def override_database(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_database", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceSshArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 allow_deprecated_key_exchanges: Optional[pulumi.Input[bool]] = None,
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 port_forwarding: Optional[pulumi.Input[bool]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if allow_deprecated_key_exchanges is not None:
            pulumi.set(__self__, "allow_deprecated_key_exchanges", allow_deprecated_key_exchanges)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if port_forwarding is not None:
            pulumi.set(__self__, "port_forwarding", port_forwarding)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="allowDeprecatedKeyExchanges")
    def allow_deprecated_key_exchanges(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_deprecated_key_exchanges")

    @allow_deprecated_key_exchanges.setter
    def allow_deprecated_key_exchanges(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_deprecated_key_exchanges", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter(name="portForwarding")
    def port_forwarding(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "port_forwarding")

    @port_forwarding.setter
    def port_forwarding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "port_forwarding", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceSshCertArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 allow_deprecated_key_exchanges: Optional[pulumi.Input[bool]] = None,
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 port_forwarding: Optional[pulumi.Input[bool]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 remote_identity_group_id: Optional[pulumi.Input[str]] = None,
                 remote_identity_healthcheck_username: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if allow_deprecated_key_exchanges is not None:
            pulumi.set(__self__, "allow_deprecated_key_exchanges", allow_deprecated_key_exchanges)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if port_forwarding is not None:
            pulumi.set(__self__, "port_forwarding", port_forwarding)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if remote_identity_group_id is not None:
            pulumi.set(__self__, "remote_identity_group_id", remote_identity_group_id)
        if remote_identity_healthcheck_username is not None:
            pulumi.set(__self__, "remote_identity_healthcheck_username", remote_identity_healthcheck_username)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="allowDeprecatedKeyExchanges")
    def allow_deprecated_key_exchanges(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_deprecated_key_exchanges")

    @allow_deprecated_key_exchanges.setter
    def allow_deprecated_key_exchanges(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_deprecated_key_exchanges", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter(name="portForwarding")
    def port_forwarding(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "port_forwarding")

    @port_forwarding.setter
    def port_forwarding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "port_forwarding", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="remoteIdentityGroupId")
    def remote_identity_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_group_id")

    @remote_identity_group_id.setter
    def remote_identity_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_group_id", value)

    @property
    @pulumi.getter(name="remoteIdentityHealthcheckUsername")
    def remote_identity_healthcheck_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remote_identity_healthcheck_username")

    @remote_identity_healthcheck_username.setter
    def remote_identity_healthcheck_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_identity_healthcheck_username", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceSshCustomerKeyArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 allow_deprecated_key_exchanges: Optional[pulumi.Input[bool]] = None,
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 port_forwarding: Optional[pulumi.Input[bool]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_private_key_key: Optional[pulumi.Input[str]] = None,
                 secret_store_private_key_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if allow_deprecated_key_exchanges is not None:
            pulumi.set(__self__, "allow_deprecated_key_exchanges", allow_deprecated_key_exchanges)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if port_forwarding is not None:
            pulumi.set(__self__, "port_forwarding", port_forwarding)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_private_key_key is not None:
            pulumi.set(__self__, "secret_store_private_key_key", secret_store_private_key_key)
        if secret_store_private_key_path is not None:
            pulumi.set(__self__, "secret_store_private_key_path", secret_store_private_key_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="allowDeprecatedKeyExchanges")
    def allow_deprecated_key_exchanges(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_deprecated_key_exchanges")

    @allow_deprecated_key_exchanges.setter
    def allow_deprecated_key_exchanges(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_deprecated_key_exchanges", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter(name="portForwarding")
    def port_forwarding(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "port_forwarding")

    @port_forwarding.setter
    def port_forwarding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "port_forwarding", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePrivateKeyKey")
    def secret_store_private_key_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_private_key_key")

    @secret_store_private_key_key.setter
    def secret_store_private_key_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_private_key_key", value)

    @property
    @pulumi.getter(name="secretStorePrivateKeyPath")
    def secret_store_private_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_private_key_path")

    @secret_store_private_key_path.setter
    def secret_store_private_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_private_key_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceSybaseArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceSybaseIqArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceTeradataArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 secret_store_username_key: Optional[pulumi.Input[str]] = None,
                 secret_store_username_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] secret_store_username_key: * trino:
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if secret_store_username_key is not None:
            pulumi.set(__self__, "secret_store_username_key", secret_store_username_key)
        if secret_store_username_path is not None:
            pulumi.set(__self__, "secret_store_username_path", secret_store_username_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter(name="secretStoreUsernameKey")
    def secret_store_username_key(self) -> Optional[pulumi.Input[str]]:
        """
        * trino:
        """
        return pulumi.get(self, "secret_store_username_key")

    @secret_store_username_key.setter
    def secret_store_username_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_key", value)

    @property
    @pulumi.getter(name="secretStoreUsernamePath")
    def secret_store_username_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_username_path")

    @secret_store_username_path.setter
    def secret_store_username_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_username_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceTrinoArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 name: pulumi.Input[str],
                 bind_interface: Optional[pulumi.Input[str]] = None,
                 egress_filter: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_override: Optional[pulumi.Input[int]] = None,
                 secret_store_id: Optional[pulumi.Input[str]] = None,
                 secret_store_password_key: Optional[pulumi.Input[str]] = None,
                 secret_store_password_path: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the Resource.
        :param pulumi.Input[str] bind_interface: Bind interface
        :param pulumi.Input[str] egress_filter: A filter applied to the routing logic to pin datasource to nodes.
        :param pulumi.Input[str] secret_store_id: ID of the secret store containing credentials for this resource, if any.
        :param pulumi.Input[str] subdomain: Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "name", name)
        if bind_interface is not None:
            pulumi.set(__self__, "bind_interface", bind_interface)
        if egress_filter is not None:
            pulumi.set(__self__, "egress_filter", egress_filter)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_override is not None:
            pulumi.set(__self__, "port_override", port_override)
        if secret_store_id is not None:
            pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_password_key is not None:
            pulumi.set(__self__, "secret_store_password_key", secret_store_password_key)
        if secret_store_password_path is not None:
            pulumi.set(__self__, "secret_store_password_path", secret_store_password_path)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="bindInterface")
    def bind_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Bind interface
        """
        return pulumi.get(self, "bind_interface")

    @bind_interface.setter
    def bind_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_interface", value)

    @property
    @pulumi.getter(name="egressFilter")
    def egress_filter(self) -> Optional[pulumi.Input[str]]:
        """
        A filter applied to the routing logic to pin datasource to nodes.
        """
        return pulumi.get(self, "egress_filter")

    @egress_filter.setter
    def egress_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egress_filter", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portOverride")
    def port_override(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port_override")

    @port_override.setter
    def port_override(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_override", value)

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the secret store containing credentials for this resource, if any.
        """
        return pulumi.get(self, "secret_store_id")

    @secret_store_id.setter
    def secret_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_id", value)

    @property
    @pulumi.getter(name="secretStorePasswordKey")
    def secret_store_password_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_key")

    @secret_store_password_key.setter
    def secret_store_password_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_key", value)

    @property
    @pulumi.getter(name="secretStorePasswordPath")
    def secret_store_password_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_store_password_path")

    @secret_store_password_path.setter
    def secret_store_password_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_store_password_path", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class SecretStoreAwsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the SecretStore.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the SecretStore.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SecretStoreAzureStoreArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 vault_uri: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the SecretStore.
        :param pulumi.Input[str] vault_uri: * cyberark_conjur:
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vault_uri", vault_uri)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the SecretStore.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="vaultUri")
    def vault_uri(self) -> pulumi.Input[str]:
        """
        * cyberark_conjur:
        """
        return pulumi.get(self, "vault_uri")

    @vault_uri.setter
    def vault_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "vault_uri", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SecretStoreCyberarkConjurArgs:
    def __init__(__self__, *,
                 app_url: pulumi.Input[str],
                 name: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the SecretStore.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "app_url", app_url)
        pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="appUrl")
    def app_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_url")

    @app_url.setter
    def app_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_url", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the SecretStore.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SecretStoreCyberarkPamArgs:
    def __init__(__self__, *,
                 app_url: pulumi.Input[str],
                 name: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the SecretStore.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "app_url", app_url)
        pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="appUrl")
    def app_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_url")

    @app_url.setter
    def app_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_url", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the SecretStore.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SecretStoreCyberarkPamExperimentalArgs:
    def __init__(__self__, *,
                 app_url: pulumi.Input[str],
                 name: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the SecretStore.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "app_url", app_url)
        pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="appUrl")
    def app_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_url")

    @app_url.setter
    def app_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_url", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the SecretStore.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SecretStoreDelineaStoreArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 server_url: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tenant_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the SecretStore.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        :param pulumi.Input[str] tenant_name: * gcp_store:
        """
        pulumi.set(__self__, "name", name)
        if server_url is not None:
            pulumi.set(__self__, "server_url", server_url)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_name is not None:
            pulumi.set(__self__, "tenant_name", tenant_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the SecretStore.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_url")

    @server_url.setter
    def server_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_url", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> Optional[pulumi.Input[str]]:
        """
        * gcp_store:
        """
        return pulumi.get(self, "tenant_name")

    @tenant_name.setter
    def tenant_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_name", value)


@pulumi.input_type
class SecretStoreGcpStoreArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the SecretStore.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the SecretStore.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SecretStoreVaultApproleArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 server_address: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the SecretStore.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server_address", server_address)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the SecretStore.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server_address")

    @server_address.setter
    def server_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_address", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SecretStoreVaultTlsArgs:
    def __init__(__self__, *,
                 client_cert_path: pulumi.Input[str],
                 client_key_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 server_address: pulumi.Input[str],
                 ca_cert_path: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the SecretStore.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "client_cert_path", client_cert_path)
        pulumi.set(__self__, "client_key_path", client_key_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server_address", server_address)
        if ca_cert_path is not None:
            pulumi.set(__self__, "ca_cert_path", ca_cert_path)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="clientCertPath")
    def client_cert_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_cert_path")

    @client_cert_path.setter
    def client_cert_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_cert_path", value)

    @property
    @pulumi.getter(name="clientKeyPath")
    def client_key_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_key_path")

    @client_key_path.setter
    def client_key_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_key_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the SecretStore.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server_address")

    @server_address.setter
    def server_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_address", value)

    @property
    @pulumi.getter(name="caCertPath")
    def ca_cert_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_cert_path")

    @ca_cert_path.setter
    def ca_cert_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert_path", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SecretStoreVaultTokenArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 server_address: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Unique human-readable name of the SecretStore.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Tags is a map of key, value pairs.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server_address", server_address)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Unique human-readable name of the SecretStore.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server_address")

    @server_address.setter
    def server_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_address", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)



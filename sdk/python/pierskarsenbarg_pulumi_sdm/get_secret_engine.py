# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSecretEngineResult',
    'AwaitableGetSecretEngineResult',
    'get_secret_engine',
    'get_secret_engine_output',
]

@pulumi.output_type
class GetSecretEngineResult:
    """
    A collection of values returned by getSecretEngine.
    """
    def __init__(__self__, binddn=None, bindpass=None, certificate=None, connection_timeout=None, do_not_validate_timestamps=None, id=None, ids=None, insecure_tls=None, key_rotation_interval_days=None, name=None, request_timeout=None, secret_engines=None, secret_store_id=None, secret_store_root_path=None, start_tls=None, tags=None, type=None, upndomain=None, url=None, userdn=None):
        if binddn and not isinstance(binddn, str):
            raise TypeError("Expected argument 'binddn' to be a str")
        pulumi.set(__self__, "binddn", binddn)
        if bindpass and not isinstance(bindpass, str):
            raise TypeError("Expected argument 'bindpass' to be a str")
        pulumi.set(__self__, "bindpass", bindpass)
        if certificate and not isinstance(certificate, str):
            raise TypeError("Expected argument 'certificate' to be a str")
        pulumi.set(__self__, "certificate", certificate)
        if connection_timeout and not isinstance(connection_timeout, int):
            raise TypeError("Expected argument 'connection_timeout' to be a int")
        pulumi.set(__self__, "connection_timeout", connection_timeout)
        if do_not_validate_timestamps and not isinstance(do_not_validate_timestamps, bool):
            raise TypeError("Expected argument 'do_not_validate_timestamps' to be a bool")
        pulumi.set(__self__, "do_not_validate_timestamps", do_not_validate_timestamps)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if insecure_tls and not isinstance(insecure_tls, bool):
            raise TypeError("Expected argument 'insecure_tls' to be a bool")
        pulumi.set(__self__, "insecure_tls", insecure_tls)
        if key_rotation_interval_days and not isinstance(key_rotation_interval_days, int):
            raise TypeError("Expected argument 'key_rotation_interval_days' to be a int")
        pulumi.set(__self__, "key_rotation_interval_days", key_rotation_interval_days)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if request_timeout and not isinstance(request_timeout, int):
            raise TypeError("Expected argument 'request_timeout' to be a int")
        pulumi.set(__self__, "request_timeout", request_timeout)
        if secret_engines and not isinstance(secret_engines, list):
            raise TypeError("Expected argument 'secret_engines' to be a list")
        pulumi.set(__self__, "secret_engines", secret_engines)
        if secret_store_id and not isinstance(secret_store_id, str):
            raise TypeError("Expected argument 'secret_store_id' to be a str")
        pulumi.set(__self__, "secret_store_id", secret_store_id)
        if secret_store_root_path and not isinstance(secret_store_root_path, str):
            raise TypeError("Expected argument 'secret_store_root_path' to be a str")
        pulumi.set(__self__, "secret_store_root_path", secret_store_root_path)
        if start_tls and not isinstance(start_tls, bool):
            raise TypeError("Expected argument 'start_tls' to be a bool")
        pulumi.set(__self__, "start_tls", start_tls)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if upndomain and not isinstance(upndomain, str):
            raise TypeError("Expected argument 'upndomain' to be a str")
        pulumi.set(__self__, "upndomain", upndomain)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)
        if userdn and not isinstance(userdn, str):
            raise TypeError("Expected argument 'userdn' to be a str")
        pulumi.set(__self__, "userdn", userdn)

    @property
    @pulumi.getter
    def binddn(self) -> Optional[builtins.str]:
        """
        Distinguished name of object to bind when performing user and group search. Example: cn=vault,ou=Users,dc=example,dc=com
        """
        return pulumi.get(self, "binddn")

    @property
    @pulumi.getter
    def bindpass(self) -> Optional[builtins.str]:
        """
        Password to use along with binddn when performing user search.
        """
        return pulumi.get(self, "bindpass")

    @property
    @pulumi.getter
    def certificate(self) -> Optional[builtins.str]:
        """
        CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="connectionTimeout")
    def connection_timeout(self) -> Optional[builtins.int]:
        """
        Timeout, in seconds, when attempting to connect to the LDAP server before trying the next URL in the configuration.
        """
        return pulumi.get(self, "connection_timeout")

    @property
    @pulumi.getter(name="doNotValidateTimestamps")
    def do_not_validate_timestamps(self) -> Optional[builtins.bool]:
        """
        If set to true this will prevent password change timestamp validation in Active Directory when validating credentials
        """
        return pulumi.get(self, "do_not_validate_timestamps")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        Unique identifier of the Secret Engine.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[builtins.str]:
        """
        a list of strings of ids of data sources that match the given arguments.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="insecureTls")
    def insecure_tls(self) -> Optional[builtins.bool]:
        """
        If true, skips LDAP server SSL certificate verification - insecure, use with caution!
        """
        return pulumi.get(self, "insecure_tls")

    @property
    @pulumi.getter(name="keyRotationIntervalDays")
    def key_rotation_interval_days(self) -> Optional[builtins.int]:
        """
        An interval of public/private key rotation for secret engine in days
        """
        return pulumi.get(self, "key_rotation_interval_days")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Unique human-readable name of the Secret Engine.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requestTimeout")
    def request_timeout(self) -> Optional[builtins.int]:
        """
        Timeout, in seconds, for the connection when making requests against the server before returning back an error.
        """
        return pulumi.get(self, "request_timeout")

    @property
    @pulumi.getter(name="secretEngines")
    def secret_engines(self) -> Sequence['outputs.GetSecretEngineSecretEngineResult']:
        """
        A single element list containing a map, where each key lists one of the following objects:
        * active_directory:
        """
        return pulumi.get(self, "secret_engines")

    @property
    @pulumi.getter(name="secretStoreId")
    def secret_store_id(self) -> Optional[builtins.str]:
        """
        Backing secret store identifier
        """
        return pulumi.get(self, "secret_store_id")

    @property
    @pulumi.getter(name="secretStoreRootPath")
    def secret_store_root_path(self) -> Optional[builtins.str]:
        """
        Backing Secret Store root path where managed secrets are going to be stored
        """
        return pulumi.get(self, "secret_store_root_path")

    @property
    @pulumi.getter(name="startTls")
    def start_tls(self) -> Optional[builtins.bool]:
        """
        If true, issues a StartTLS command after establishing an unencrypted connection.
        """
        return pulumi.get(self, "start_tls")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def upndomain(self) -> Optional[builtins.str]:
        """
        The domain (userPrincipalDomain) used to construct a UPN string for authentication.
        """
        return pulumi.get(self, "upndomain")

    @property
    @pulumi.getter
    def url(self) -> Optional[builtins.str]:
        """
        The LDAP server to connect to.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def userdn(self) -> Optional[builtins.str]:
        """
        Base DN under which to perform user search. Example: ou=Users,dc=example,dc=com
        * key_value:
        """
        return pulumi.get(self, "userdn")


class AwaitableGetSecretEngineResult(GetSecretEngineResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecretEngineResult(
            binddn=self.binddn,
            bindpass=self.bindpass,
            certificate=self.certificate,
            connection_timeout=self.connection_timeout,
            do_not_validate_timestamps=self.do_not_validate_timestamps,
            id=self.id,
            ids=self.ids,
            insecure_tls=self.insecure_tls,
            key_rotation_interval_days=self.key_rotation_interval_days,
            name=self.name,
            request_timeout=self.request_timeout,
            secret_engines=self.secret_engines,
            secret_store_id=self.secret_store_id,
            secret_store_root_path=self.secret_store_root_path,
            start_tls=self.start_tls,
            tags=self.tags,
            type=self.type,
            upndomain=self.upndomain,
            url=self.url,
            userdn=self.userdn)


def get_secret_engine(binddn: Optional[builtins.str] = None,
                      bindpass: Optional[builtins.str] = None,
                      certificate: Optional[builtins.str] = None,
                      connection_timeout: Optional[builtins.int] = None,
                      do_not_validate_timestamps: Optional[builtins.bool] = None,
                      id: Optional[builtins.str] = None,
                      insecure_tls: Optional[builtins.bool] = None,
                      key_rotation_interval_days: Optional[builtins.int] = None,
                      name: Optional[builtins.str] = None,
                      request_timeout: Optional[builtins.int] = None,
                      secret_store_id: Optional[builtins.str] = None,
                      secret_store_root_path: Optional[builtins.str] = None,
                      start_tls: Optional[builtins.bool] = None,
                      tags: Optional[Mapping[str, builtins.str]] = None,
                      type: Optional[builtins.str] = None,
                      upndomain: Optional[builtins.str] = None,
                      url: Optional[builtins.str] = None,
                      userdn: Optional[builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecretEngineResult:
    """
    A SecretEngine is managing secrets in SecretStores.


    :param builtins.str binddn: Distinguished name of object to bind when performing user and group search. Example: cn=vault,ou=Users,dc=example,dc=com
    :param builtins.str bindpass: Password to use along with binddn when performing user search.
    :param builtins.str certificate: CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
    :param builtins.int connection_timeout: Timeout, in seconds, when attempting to connect to the LDAP server before trying the next URL in the configuration.
    :param builtins.bool do_not_validate_timestamps: If set to true this will prevent password change timestamp validation in Active Directory when validating credentials
    :param builtins.str id: Unique identifier of the Secret Engine.
    :param builtins.bool insecure_tls: If true, skips LDAP server SSL certificate verification - insecure, use with caution!
    :param builtins.int key_rotation_interval_days: An interval of public/private key rotation for secret engine in days
    :param builtins.str name: Unique human-readable name of the Secret Engine.
    :param builtins.int request_timeout: Timeout, in seconds, for the connection when making requests against the server before returning back an error.
    :param builtins.str secret_store_id: Backing secret store identifier
    :param builtins.str secret_store_root_path: Backing Secret Store root path where managed secrets are going to be stored
    :param builtins.bool start_tls: If true, issues a StartTLS command after establishing an unencrypted connection.
    :param Mapping[str, builtins.str] tags: Tags is a map of key, value pairs.
    :param builtins.str type: a filter to select all items of a certain subtype. See the [filter documentation](https://www.strongdm.com/docs/automation/getting-started/filters) for more information.
    :param builtins.str upndomain: The domain (userPrincipalDomain) used to construct a UPN string for authentication.
    :param builtins.str url: The LDAP server to connect to.
    :param builtins.str userdn: Base DN under which to perform user search. Example: ou=Users,dc=example,dc=com
    """
    __args__ = dict()
    __args__['binddn'] = binddn
    __args__['bindpass'] = bindpass
    __args__['certificate'] = certificate
    __args__['connectionTimeout'] = connection_timeout
    __args__['doNotValidateTimestamps'] = do_not_validate_timestamps
    __args__['id'] = id
    __args__['insecureTls'] = insecure_tls
    __args__['keyRotationIntervalDays'] = key_rotation_interval_days
    __args__['name'] = name
    __args__['requestTimeout'] = request_timeout
    __args__['secretStoreId'] = secret_store_id
    __args__['secretStoreRootPath'] = secret_store_root_path
    __args__['startTls'] = start_tls
    __args__['tags'] = tags
    __args__['type'] = type
    __args__['upndomain'] = upndomain
    __args__['url'] = url
    __args__['userdn'] = userdn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sdm:index/getSecretEngine:getSecretEngine', __args__, opts=opts, typ=GetSecretEngineResult).value

    return AwaitableGetSecretEngineResult(
        binddn=pulumi.get(__ret__, 'binddn'),
        bindpass=pulumi.get(__ret__, 'bindpass'),
        certificate=pulumi.get(__ret__, 'certificate'),
        connection_timeout=pulumi.get(__ret__, 'connection_timeout'),
        do_not_validate_timestamps=pulumi.get(__ret__, 'do_not_validate_timestamps'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        insecure_tls=pulumi.get(__ret__, 'insecure_tls'),
        key_rotation_interval_days=pulumi.get(__ret__, 'key_rotation_interval_days'),
        name=pulumi.get(__ret__, 'name'),
        request_timeout=pulumi.get(__ret__, 'request_timeout'),
        secret_engines=pulumi.get(__ret__, 'secret_engines'),
        secret_store_id=pulumi.get(__ret__, 'secret_store_id'),
        secret_store_root_path=pulumi.get(__ret__, 'secret_store_root_path'),
        start_tls=pulumi.get(__ret__, 'start_tls'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        upndomain=pulumi.get(__ret__, 'upndomain'),
        url=pulumi.get(__ret__, 'url'),
        userdn=pulumi.get(__ret__, 'userdn'))
def get_secret_engine_output(binddn: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             bindpass: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             certificate: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             connection_timeout: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                             do_not_validate_timestamps: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                             id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             insecure_tls: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                             key_rotation_interval_days: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                             name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             request_timeout: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                             secret_store_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             secret_store_root_path: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             start_tls: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                             tags: Optional[pulumi.Input[Optional[Mapping[str, builtins.str]]]] = None,
                             type: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             upndomain: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             url: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             userdn: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSecretEngineResult]:
    """
    A SecretEngine is managing secrets in SecretStores.


    :param builtins.str binddn: Distinguished name of object to bind when performing user and group search. Example: cn=vault,ou=Users,dc=example,dc=com
    :param builtins.str bindpass: Password to use along with binddn when performing user search.
    :param builtins.str certificate: CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
    :param builtins.int connection_timeout: Timeout, in seconds, when attempting to connect to the LDAP server before trying the next URL in the configuration.
    :param builtins.bool do_not_validate_timestamps: If set to true this will prevent password change timestamp validation in Active Directory when validating credentials
    :param builtins.str id: Unique identifier of the Secret Engine.
    :param builtins.bool insecure_tls: If true, skips LDAP server SSL certificate verification - insecure, use with caution!
    :param builtins.int key_rotation_interval_days: An interval of public/private key rotation for secret engine in days
    :param builtins.str name: Unique human-readable name of the Secret Engine.
    :param builtins.int request_timeout: Timeout, in seconds, for the connection when making requests against the server before returning back an error.
    :param builtins.str secret_store_id: Backing secret store identifier
    :param builtins.str secret_store_root_path: Backing Secret Store root path where managed secrets are going to be stored
    :param builtins.bool start_tls: If true, issues a StartTLS command after establishing an unencrypted connection.
    :param Mapping[str, builtins.str] tags: Tags is a map of key, value pairs.
    :param builtins.str type: a filter to select all items of a certain subtype. See the [filter documentation](https://www.strongdm.com/docs/automation/getting-started/filters) for more information.
    :param builtins.str upndomain: The domain (userPrincipalDomain) used to construct a UPN string for authentication.
    :param builtins.str url: The LDAP server to connect to.
    :param builtins.str userdn: Base DN under which to perform user search. Example: ou=Users,dc=example,dc=com
    """
    __args__ = dict()
    __args__['binddn'] = binddn
    __args__['bindpass'] = bindpass
    __args__['certificate'] = certificate
    __args__['connectionTimeout'] = connection_timeout
    __args__['doNotValidateTimestamps'] = do_not_validate_timestamps
    __args__['id'] = id
    __args__['insecureTls'] = insecure_tls
    __args__['keyRotationIntervalDays'] = key_rotation_interval_days
    __args__['name'] = name
    __args__['requestTimeout'] = request_timeout
    __args__['secretStoreId'] = secret_store_id
    __args__['secretStoreRootPath'] = secret_store_root_path
    __args__['startTls'] = start_tls
    __args__['tags'] = tags
    __args__['type'] = type
    __args__['upndomain'] = upndomain
    __args__['url'] = url
    __args__['userdn'] = userdn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sdm:index/getSecretEngine:getSecretEngine', __args__, opts=opts, typ=GetSecretEngineResult)
    return __ret__.apply(lambda __response__: GetSecretEngineResult(
        binddn=pulumi.get(__response__, 'binddn'),
        bindpass=pulumi.get(__response__, 'bindpass'),
        certificate=pulumi.get(__response__, 'certificate'),
        connection_timeout=pulumi.get(__response__, 'connection_timeout'),
        do_not_validate_timestamps=pulumi.get(__response__, 'do_not_validate_timestamps'),
        id=pulumi.get(__response__, 'id'),
        ids=pulumi.get(__response__, 'ids'),
        insecure_tls=pulumi.get(__response__, 'insecure_tls'),
        key_rotation_interval_days=pulumi.get(__response__, 'key_rotation_interval_days'),
        name=pulumi.get(__response__, 'name'),
        request_timeout=pulumi.get(__response__, 'request_timeout'),
        secret_engines=pulumi.get(__response__, 'secret_engines'),
        secret_store_id=pulumi.get(__response__, 'secret_store_id'),
        secret_store_root_path=pulumi.get(__response__, 'secret_store_root_path'),
        start_tls=pulumi.get(__response__, 'start_tls'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type'),
        upndomain=pulumi.get(__response__, 'upndomain'),
        url=pulumi.get(__response__, 'url'),
        userdn=pulumi.get(__response__, 'userdn')))

# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ManagedSecretArgs', 'ManagedSecret']

@pulumi.input_type
class ManagedSecretArgs:
    def __init__(__self__, *,
                 secret_engine_id: pulumi.Input[builtins.str],
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a ManagedSecret resource.
        :param pulumi.Input[builtins.str] secret_engine_id: An ID of a Secret Engine linked with the Managed Secret.
        :param pulumi.Input[builtins.str] name: Unique human-readable name of the Managed Secret.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Tags is a map of key, value pairs.
        :param pulumi.Input[builtins.str] value: Sensitive value of the secret.
        """
        pulumi.set(__self__, "secret_engine_id", secret_engine_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="secretEngineId")
    def secret_engine_id(self) -> pulumi.Input[builtins.str]:
        """
        An ID of a Secret Engine linked with the Managed Secret.
        """
        return pulumi.get(self, "secret_engine_id")

    @secret_engine_id.setter
    def secret_engine_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "secret_engine_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Unique human-readable name of the Managed Secret.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Sensitive value of the secret.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class _ManagedSecretState:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[builtins.str]] = None,
                 expires_at: Optional[pulumi.Input[builtins.str]] = None,
                 last_rotated_at: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 secret_engine_id: Optional[pulumi.Input[builtins.str]] = None,
                 secret_store_path: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering ManagedSecret resources.
        :param pulumi.Input[builtins.str] config: public part of the secret value
        :param pulumi.Input[builtins.str] expires_at: Timestamp of when secret is going to be rotated
        :param pulumi.Input[builtins.str] last_rotated_at: Timestamp of when secret was last rotated
        :param pulumi.Input[builtins.str] name: Unique human-readable name of the Managed Secret.
        :param pulumi.Input[builtins.str] secret_engine_id: An ID of a Secret Engine linked with the Managed Secret.
        :param pulumi.Input[builtins.str] secret_store_path: Path in a secret store.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Tags is a map of key, value pairs.
        :param pulumi.Input[builtins.str] value: Sensitive value of the secret.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if last_rotated_at is not None:
            pulumi.set(__self__, "last_rotated_at", last_rotated_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secret_engine_id is not None:
            pulumi.set(__self__, "secret_engine_id", secret_engine_id)
        if secret_store_path is not None:
            pulumi.set(__self__, "secret_store_path", secret_store_path)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        public part of the secret value
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Timestamp of when secret is going to be rotated
        """
        return pulumi.get(self, "expires_at")

    @expires_at.setter
    def expires_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "expires_at", value)

    @property
    @pulumi.getter(name="lastRotatedAt")
    def last_rotated_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Timestamp of when secret was last rotated
        """
        return pulumi.get(self, "last_rotated_at")

    @last_rotated_at.setter
    def last_rotated_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "last_rotated_at", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Unique human-readable name of the Managed Secret.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secretEngineId")
    def secret_engine_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        An ID of a Secret Engine linked with the Managed Secret.
        """
        return pulumi.get(self, "secret_engine_id")

    @secret_engine_id.setter
    def secret_engine_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret_engine_id", value)

    @property
    @pulumi.getter(name="secretStorePath")
    def secret_store_path(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Path in a secret store.
        """
        return pulumi.get(self, "secret_store_path")

    @secret_store_path.setter
    def secret_store_path(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "secret_store_path", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Sensitive value of the secret.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


@pulumi.type_token("sdm:index/managedSecret:ManagedSecret")
class ManagedSecret(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 secret_engine_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        ManagedSecret contains details about managed secret
        This resource can be imported using the import command.

        ## Import

        A ManagedSecret can be imported using the id, e.g.,

        ```sh
        $ pulumi import sdm:index/managedSecret:ManagedSecret example ms-12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] name: Unique human-readable name of the Managed Secret.
        :param pulumi.Input[builtins.str] secret_engine_id: An ID of a Secret Engine linked with the Managed Secret.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Tags is a map of key, value pairs.
        :param pulumi.Input[builtins.str] value: Sensitive value of the secret.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ManagedSecretArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ManagedSecret contains details about managed secret
        This resource can be imported using the import command.

        ## Import

        A ManagedSecret can be imported using the id, e.g.,

        ```sh
        $ pulumi import sdm:index/managedSecret:ManagedSecret example ms-12345678
        ```

        :param str resource_name: The name of the resource.
        :param ManagedSecretArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ManagedSecretArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 secret_engine_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ManagedSecretArgs.__new__(ManagedSecretArgs)

            __props__.__dict__["name"] = name
            if secret_engine_id is None and not opts.urn:
                raise TypeError("Missing required property 'secret_engine_id'")
            __props__.__dict__["secret_engine_id"] = secret_engine_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["value"] = None if value is None else pulumi.Output.secret(value)
            __props__.__dict__["config"] = None
            __props__.__dict__["expires_at"] = None
            __props__.__dict__["last_rotated_at"] = None
            __props__.__dict__["secret_store_path"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["value"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ManagedSecret, __self__).__init__(
            'sdm:index/managedSecret:ManagedSecret',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[builtins.str]] = None,
            expires_at: Optional[pulumi.Input[builtins.str]] = None,
            last_rotated_at: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            secret_engine_id: Optional[pulumi.Input[builtins.str]] = None,
            secret_store_path: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            value: Optional[pulumi.Input[builtins.str]] = None) -> 'ManagedSecret':
        """
        Get an existing ManagedSecret resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] config: public part of the secret value
        :param pulumi.Input[builtins.str] expires_at: Timestamp of when secret is going to be rotated
        :param pulumi.Input[builtins.str] last_rotated_at: Timestamp of when secret was last rotated
        :param pulumi.Input[builtins.str] name: Unique human-readable name of the Managed Secret.
        :param pulumi.Input[builtins.str] secret_engine_id: An ID of a Secret Engine linked with the Managed Secret.
        :param pulumi.Input[builtins.str] secret_store_path: Path in a secret store.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: Tags is a map of key, value pairs.
        :param pulumi.Input[builtins.str] value: Sensitive value of the secret.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ManagedSecretState.__new__(_ManagedSecretState)

        __props__.__dict__["config"] = config
        __props__.__dict__["expires_at"] = expires_at
        __props__.__dict__["last_rotated_at"] = last_rotated_at
        __props__.__dict__["name"] = name
        __props__.__dict__["secret_engine_id"] = secret_engine_id
        __props__.__dict__["secret_store_path"] = secret_store_path
        __props__.__dict__["tags"] = tags
        __props__.__dict__["value"] = value
        return ManagedSecret(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[builtins.str]:
        """
        public part of the secret value
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> pulumi.Output[builtins.str]:
        """
        Timestamp of when secret is going to be rotated
        """
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter(name="lastRotatedAt")
    def last_rotated_at(self) -> pulumi.Output[builtins.str]:
        """
        Timestamp of when secret was last rotated
        """
        return pulumi.get(self, "last_rotated_at")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Unique human-readable name of the Managed Secret.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="secretEngineId")
    def secret_engine_id(self) -> pulumi.Output[builtins.str]:
        """
        An ID of a Secret Engine linked with the Managed Secret.
        """
        return pulumi.get(self, "secret_engine_id")

    @property
    @pulumi.getter(name="secretStorePath")
    def secret_store_path(self) -> pulumi.Output[builtins.str]:
        """
        Path in a secret store.
        """
        return pulumi.get(self, "secret_store_path")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Sensitive value of the secret.
        """
        return pulumi.get(self, "value")


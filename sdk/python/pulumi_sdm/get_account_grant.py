# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetAccountGrantResult',
    'AwaitableGetAccountGrantResult',
    'get_account_grant',
    'get_account_grant_output',
]

@pulumi.output_type
class GetAccountGrantResult:
    """
    A collection of values returned by getAccountGrant.
    """
    def __init__(__self__, account_grants=None, account_id=None, id=None, ids=None, resource_id=None):
        if account_grants and not isinstance(account_grants, list):
            raise TypeError("Expected argument 'account_grants' to be a list")
        pulumi.set(__self__, "account_grants", account_grants)
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="accountGrants")
    def account_grants(self) -> Sequence['outputs.GetAccountGrantAccountGrantResult']:
        """
        A list where each element has the following attributes:
        """
        return pulumi.get(self, "account_grants")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        """
        The account id of this AccountGrant.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique identifier of the AccountGrant.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        """
        a list of strings of ids of data sources that match the given arguments.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        """
        The resource id of this AccountGrant.
        """
        return pulumi.get(self, "resource_id")


class AwaitableGetAccountGrantResult(GetAccountGrantResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccountGrantResult(
            account_grants=self.account_grants,
            account_id=self.account_id,
            id=self.id,
            ids=self.ids,
            resource_id=self.resource_id)


def get_account_grant(account_id: Optional[str] = None,
                      id: Optional[str] = None,
                      resource_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccountGrantResult:
    """
    AccountGrants connect a resource directly to an account, giving the account the permission to connect to that resource.
    This data source is deprecated.
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    account_grant_query = sdm.get_account_grant(account_id="a-00000054")
    ```


    :param str account_id: The account id of this AccountGrant.
    :param str id: Unique identifier of the AccountGrant.
    :param str resource_id: The resource id of this AccountGrant.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['id'] = id
    __args__['resourceId'] = resource_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('sdm:index/getAccountGrant:getAccountGrant', __args__, opts=opts, typ=GetAccountGrantResult).value

    return AwaitableGetAccountGrantResult(
        account_grants=__ret__.account_grants,
        account_id=__ret__.account_id,
        id=__ret__.id,
        ids=__ret__.ids,
        resource_id=__ret__.resource_id)


@_utilities.lift_output_func(get_account_grant)
def get_account_grant_output(account_id: Optional[pulumi.Input[Optional[str]]] = None,
                             id: Optional[pulumi.Input[Optional[str]]] = None,
                             resource_id: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAccountGrantResult]:
    """
    AccountGrants connect a resource directly to an account, giving the account the permission to connect to that resource.
    This data source is deprecated.
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    account_grant_query = sdm.get_account_grant(account_id="a-00000054")
    ```


    :param str account_id: The account id of this AccountGrant.
    :param str id: Unique identifier of the AccountGrant.
    :param str resource_id: The resource id of this AccountGrant.
    """
    ...

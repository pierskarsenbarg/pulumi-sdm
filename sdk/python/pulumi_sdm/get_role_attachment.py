# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetRoleAttachmentResult',
    'AwaitableGetRoleAttachmentResult',
    'get_role_attachment',
    'get_role_attachment_output',
]

@pulumi.output_type
class GetRoleAttachmentResult:
    """
    A collection of values returned by getRoleAttachment.
    """
    def __init__(__self__, attached_role_id=None, composite_role_id=None, id=None, ids=None, role_attachments=None):
        if attached_role_id and not isinstance(attached_role_id, str):
            raise TypeError("Expected argument 'attached_role_id' to be a str")
        pulumi.set(__self__, "attached_role_id", attached_role_id)
        if composite_role_id and not isinstance(composite_role_id, str):
            raise TypeError("Expected argument 'composite_role_id' to be a str")
        pulumi.set(__self__, "composite_role_id", composite_role_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if role_attachments and not isinstance(role_attachments, list):
            raise TypeError("Expected argument 'role_attachments' to be a list")
        pulumi.set(__self__, "role_attachments", role_attachments)

    @property
    @pulumi.getter(name="attachedRoleId")
    def attached_role_id(self) -> Optional[str]:
        """
        The id of the attached role of this RoleAttachment.
        """
        return pulumi.get(self, "attached_role_id")

    @property
    @pulumi.getter(name="compositeRoleId")
    def composite_role_id(self) -> Optional[str]:
        """
        The id of the composite role of this RoleAttachment.
        """
        return pulumi.get(self, "composite_role_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique identifier of the RoleAttachment.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        """
        a list of strings of ids of data sources that match the given arguments.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="roleAttachments")
    def role_attachments(self) -> Sequence['outputs.GetRoleAttachmentRoleAttachmentResult']:
        """
        A list where each element has the following attributes:
        """
        return pulumi.get(self, "role_attachments")


class AwaitableGetRoleAttachmentResult(GetRoleAttachmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRoleAttachmentResult(
            attached_role_id=self.attached_role_id,
            composite_role_id=self.composite_role_id,
            id=self.id,
            ids=self.ids,
            role_attachments=self.role_attachments)


def get_role_attachment(attached_role_id: Optional[str] = None,
                        composite_role_id: Optional[str] = None,
                        id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRoleAttachmentResult:
    """
    A RoleAttachment assigns a role to a composite role.

     Deprecated: use multi-role via AccountAttachments instead.
    This data source is deprecated.
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    role_attachment_query = sdm.get_role_attachment(composite_role_id="r-233332245")
    ```


    :param str attached_role_id: The id of the attached role of this RoleAttachment.
    :param str composite_role_id: The id of the composite role of this RoleAttachment.
    :param str id: Unique identifier of the RoleAttachment.
    """
    __args__ = dict()
    __args__['attachedRoleId'] = attached_role_id
    __args__['compositeRoleId'] = composite_role_id
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('sdm:index/getRoleAttachment:getRoleAttachment', __args__, opts=opts, typ=GetRoleAttachmentResult).value

    return AwaitableGetRoleAttachmentResult(
        attached_role_id=__ret__.attached_role_id,
        composite_role_id=__ret__.composite_role_id,
        id=__ret__.id,
        ids=__ret__.ids,
        role_attachments=__ret__.role_attachments)


@_utilities.lift_output_func(get_role_attachment)
def get_role_attachment_output(attached_role_id: Optional[pulumi.Input[Optional[str]]] = None,
                               composite_role_id: Optional[pulumi.Input[Optional[str]]] = None,
                               id: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRoleAttachmentResult]:
    """
    A RoleAttachment assigns a role to a composite role.

     Deprecated: use multi-role via AccountAttachments instead.
    This data source is deprecated.
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    role_attachment_query = sdm.get_role_attachment(composite_role_id="r-233332245")
    ```


    :param str attached_role_id: The id of the attached role of this RoleAttachment.
    :param str composite_role_id: The id of the composite role of this RoleAttachment.
    :param str id: Unique identifier of the RoleAttachment.
    """
    ...

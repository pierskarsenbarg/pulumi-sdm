# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RoleAttachmentArgs', 'RoleAttachment']

@pulumi.input_type
class RoleAttachmentArgs:
    def __init__(__self__, *,
                 attached_role_id: pulumi.Input[str],
                 composite_role_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a RoleAttachment resource.
        :param pulumi.Input[str] attached_role_id: The id of the attached role of this RoleAttachment.
        :param pulumi.Input[str] composite_role_id: The id of the composite role of this RoleAttachment.
        """
        pulumi.set(__self__, "attached_role_id", attached_role_id)
        pulumi.set(__self__, "composite_role_id", composite_role_id)

    @property
    @pulumi.getter(name="attachedRoleId")
    def attached_role_id(self) -> pulumi.Input[str]:
        """
        The id of the attached role of this RoleAttachment.
        """
        return pulumi.get(self, "attached_role_id")

    @attached_role_id.setter
    def attached_role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "attached_role_id", value)

    @property
    @pulumi.getter(name="compositeRoleId")
    def composite_role_id(self) -> pulumi.Input[str]:
        """
        The id of the composite role of this RoleAttachment.
        """
        return pulumi.get(self, "composite_role_id")

    @composite_role_id.setter
    def composite_role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "composite_role_id", value)


@pulumi.input_type
class _RoleAttachmentState:
    def __init__(__self__, *,
                 attached_role_id: Optional[pulumi.Input[str]] = None,
                 composite_role_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RoleAttachment resources.
        :param pulumi.Input[str] attached_role_id: The id of the attached role of this RoleAttachment.
        :param pulumi.Input[str] composite_role_id: The id of the composite role of this RoleAttachment.
        """
        if attached_role_id is not None:
            pulumi.set(__self__, "attached_role_id", attached_role_id)
        if composite_role_id is not None:
            pulumi.set(__self__, "composite_role_id", composite_role_id)

    @property
    @pulumi.getter(name="attachedRoleId")
    def attached_role_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the attached role of this RoleAttachment.
        """
        return pulumi.get(self, "attached_role_id")

    @attached_role_id.setter
    def attached_role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attached_role_id", value)

    @property
    @pulumi.getter(name="compositeRoleId")
    def composite_role_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the composite role of this RoleAttachment.
        """
        return pulumi.get(self, "composite_role_id")

    @composite_role_id.setter
    def composite_role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "composite_role_id", value)


class RoleAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attached_role_id: Optional[pulumi.Input[str]] = None,
                 composite_role_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Import

        RoleAttachment can be imported using the id, e.g.,

        ```sh
         $ pulumi import sdm:index/roleAttachment:RoleAttachment example ra-12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] attached_role_id: The id of the attached role of this RoleAttachment.
        :param pulumi.Input[str] composite_role_id: The id of the composite role of this RoleAttachment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RoleAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        RoleAttachment can be imported using the id, e.g.,

        ```sh
         $ pulumi import sdm:index/roleAttachment:RoleAttachment example ra-12345678
        ```

        :param str resource_name: The name of the resource.
        :param RoleAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RoleAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attached_role_id: Optional[pulumi.Input[str]] = None,
                 composite_role_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RoleAttachmentArgs.__new__(RoleAttachmentArgs)

            if attached_role_id is None and not opts.urn:
                raise TypeError("Missing required property 'attached_role_id'")
            __props__.__dict__["attached_role_id"] = attached_role_id
            if composite_role_id is None and not opts.urn:
                raise TypeError("Missing required property 'composite_role_id'")
            __props__.__dict__["composite_role_id"] = composite_role_id
        super(RoleAttachment, __self__).__init__(
            'sdm:index/roleAttachment:RoleAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attached_role_id: Optional[pulumi.Input[str]] = None,
            composite_role_id: Optional[pulumi.Input[str]] = None) -> 'RoleAttachment':
        """
        Get an existing RoleAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] attached_role_id: The id of the attached role of this RoleAttachment.
        :param pulumi.Input[str] composite_role_id: The id of the composite role of this RoleAttachment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RoleAttachmentState.__new__(_RoleAttachmentState)

        __props__.__dict__["attached_role_id"] = attached_role_id
        __props__.__dict__["composite_role_id"] = composite_role_id
        return RoleAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="attachedRoleId")
    def attached_role_id(self) -> pulumi.Output[str]:
        """
        The id of the attached role of this RoleAttachment.
        """
        return pulumi.get(self, "attached_role_id")

    @property
    @pulumi.getter(name="compositeRoleId")
    def composite_role_id(self) -> pulumi.Output[str]:
        """
        The id of the composite role of this RoleAttachment.
        """
        return pulumi.get(self, "composite_role_id")


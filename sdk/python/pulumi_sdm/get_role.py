# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetRoleResult',
    'AwaitableGetRoleResult',
    'get_role',
    'get_role_output',
]

@pulumi.output_type
class GetRoleResult:
    """
    A collection of values returned by getRole.
    """
    def __init__(__self__, composite=None, id=None, ids=None, name=None, roles=None, tags=None):
        if composite and not isinstance(composite, bool):
            raise TypeError("Expected argument 'composite' to be a bool")
        if composite is not None:
            warnings.warn("""composite is deprecated, see docs for more info""", DeprecationWarning)
            pulumi.log.warn("""composite is deprecated: composite is deprecated, see docs for more info""")

        pulumi.set(__self__, "composite", composite)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if roles and not isinstance(roles, list):
            raise TypeError("Expected argument 'roles' to be a list")
        pulumi.set(__self__, "roles", roles)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def composite(self) -> Optional[bool]:
        """
        Composite is true if the Role is a composite role.  Deprecated: composite roles are deprecated, use multi-role via AccountAttachments instead.
        """
        return pulumi.get(self, "composite")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique identifier of the Role.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        """
        a list of strings of ids of data sources that match the given arguments.
        """
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Unique human-readable name of the Role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def roles(self) -> Sequence['outputs.GetRoleRoleResult']:
        """
        A list where each element has the following attributes:
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Tags is a map of key, value pairs.
        """
        return pulumi.get(self, "tags")


class AwaitableGetRoleResult(GetRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRoleResult(
            composite=self.composite,
            id=self.id,
            ids=self.ids,
            name=self.name,
            roles=self.roles,
            tags=self.tags)


def get_role(composite: Optional[bool] = None,
             id: Optional[str] = None,
             name: Optional[str] = None,
             tags: Optional[Mapping[str, str]] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRoleResult:
    """
    A Role has a list of access rules which determine which Resources the members
     of the Role have access to. An Account can be a member of multiple Roles via
     AccountAttachments.
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    composite_role_query = sdm.get_role(composite=True,
        tags={
            "env": "dev",
            "region": "us-west",
        })
    ```


    :param bool composite: Composite is true if the Role is a composite role.  Deprecated: composite roles are deprecated, use multi-role via AccountAttachments instead.
    :param str id: Unique identifier of the Role.
    :param str name: Unique human-readable name of the Role.
    :param Mapping[str, str] tags: Tags is a map of key, value pairs.
    """
    __args__ = dict()
    __args__['composite'] = composite
    __args__['id'] = id
    __args__['name'] = name
    __args__['tags'] = tags
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('sdm:index/getRole:getRole', __args__, opts=opts, typ=GetRoleResult).value

    return AwaitableGetRoleResult(
        composite=__ret__.composite,
        id=__ret__.id,
        ids=__ret__.ids,
        name=__ret__.name,
        roles=__ret__.roles,
        tags=__ret__.tags)


@_utilities.lift_output_func(get_role)
def get_role_output(composite: Optional[pulumi.Input[Optional[bool]]] = None,
                    id: Optional[pulumi.Input[Optional[str]]] = None,
                    name: Optional[pulumi.Input[Optional[str]]] = None,
                    tags: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRoleResult]:
    """
    A Role has a list of access rules which determine which Resources the members
     of the Role have access to. An Account can be a member of multiple Roles via
     AccountAttachments.
    ## Example Usage

    ```python
    import pulumi
    import pulumi_sdm as sdm

    composite_role_query = sdm.get_role(composite=True,
        tags={
            "env": "dev",
            "region": "us-west",
        })
    ```


    :param bool composite: Composite is true if the Role is a composite role.  Deprecated: composite roles are deprecated, use multi-role via AccountAttachments instead.
    :param str id: Unique identifier of the Role.
    :param str name: Unique human-readable name of the Role.
    :param Mapping[str, str] tags: Tags is a map of key, value pairs.
    """
    ...

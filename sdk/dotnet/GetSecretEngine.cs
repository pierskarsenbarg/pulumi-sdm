// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Sdm
{
    public static class GetSecretEngine
    {
        /// <summary>
        /// A SecretEngine is managing secrets in SecretStores.
        /// </summary>
        public static Task<GetSecretEngineResult> InvokeAsync(GetSecretEngineArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecretEngineResult>("sdm:index/getSecretEngine:getSecretEngine", args ?? new GetSecretEngineArgs(), options.WithDefaults());

        /// <summary>
        /// A SecretEngine is managing secrets in SecretStores.
        /// </summary>
        public static Output<GetSecretEngineResult> Invoke(GetSecretEngineInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecretEngineResult>("sdm:index/getSecretEngine:getSecretEngine", args ?? new GetSecretEngineInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// A SecretEngine is managing secrets in SecretStores.
        /// </summary>
        public static Output<GetSecretEngineResult> Invoke(GetSecretEngineInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecretEngineResult>("sdm:index/getSecretEngine:getSecretEngine", args ?? new GetSecretEngineInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecretEngineArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Distinguished name of object to bind when performing user and group search. Example: cn=vault,ou=Users,dc=example,dc=com
        /// </summary>
        [Input("binddn")]
        public string? Binddn { get; set; }

        /// <summary>
        /// Password to use along with binddn when performing user search.
        /// </summary>
        [Input("bindpass")]
        public string? Bindpass { get; set; }

        /// <summary>
        /// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
        /// </summary>
        [Input("certificate")]
        public string? Certificate { get; set; }

        /// <summary>
        /// Timeout, in seconds, when attempting to connect to the LDAP server before trying the next URL in the configuration.
        /// </summary>
        [Input("connectionTimeout")]
        public int? ConnectionTimeout { get; set; }

        /// <summary>
        /// If set to true this will prevent password change timestamp validation in Active Directory when validating credentials
        /// </summary>
        [Input("doNotValidateTimestamps")]
        public bool? DoNotValidateTimestamps { get; set; }

        /// <summary>
        /// Unique identifier of the Secret Engine.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// If true, skips LDAP server SSL certificate verification - insecure, use with caution!
        /// </summary>
        [Input("insecureTls")]
        public bool? InsecureTls { get; set; }

        /// <summary>
        /// An interval of public/private key rotation for secret engine in days
        /// </summary>
        [Input("keyRotationIntervalDays")]
        public int? KeyRotationIntervalDays { get; set; }

        /// <summary>
        /// Unique human-readable name of the Secret Engine.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
        /// </summary>
        [Input("requestTimeout")]
        public int? RequestTimeout { get; set; }

        /// <summary>
        /// Backing secret store identifier
        /// </summary>
        [Input("secretStoreId")]
        public string? SecretStoreId { get; set; }

        /// <summary>
        /// Backing Secret Store root path where managed secrets are going to be stored
        /// </summary>
        [Input("secretStoreRootPath")]
        public string? SecretStoreRootPath { get; set; }

        /// <summary>
        /// If true, issues a StartTLS command after establishing an unencrypted connection.
        /// </summary>
        [Input("startTls")]
        public bool? StartTls { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// a filter to select all items of a certain subtype. See the [filter documentation](https://www.strongdm.com/docs/automation/getting-started/filters) for more information.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        /// <summary>
        /// The domain (userPrincipalDomain) used to construct a UPN string for authentication.
        /// </summary>
        [Input("upndomain")]
        public string? Upndomain { get; set; }

        /// <summary>
        /// The LDAP server to connect to.
        /// </summary>
        [Input("url")]
        public string? Url { get; set; }

        /// <summary>
        /// Base DN under which to perform user search. Example: ou=Users,dc=example,dc=com
        /// </summary>
        [Input("userdn")]
        public string? Userdn { get; set; }

        public GetSecretEngineArgs()
        {
        }
        public static new GetSecretEngineArgs Empty => new GetSecretEngineArgs();
    }

    public sealed class GetSecretEngineInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Distinguished name of object to bind when performing user and group search. Example: cn=vault,ou=Users,dc=example,dc=com
        /// </summary>
        [Input("binddn")]
        public Input<string>? Binddn { get; set; }

        /// <summary>
        /// Password to use along with binddn when performing user search.
        /// </summary>
        [Input("bindpass")]
        public Input<string>? Bindpass { get; set; }

        /// <summary>
        /// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// Timeout, in seconds, when attempting to connect to the LDAP server before trying the next URL in the configuration.
        /// </summary>
        [Input("connectionTimeout")]
        public Input<int>? ConnectionTimeout { get; set; }

        /// <summary>
        /// If set to true this will prevent password change timestamp validation in Active Directory when validating credentials
        /// </summary>
        [Input("doNotValidateTimestamps")]
        public Input<bool>? DoNotValidateTimestamps { get; set; }

        /// <summary>
        /// Unique identifier of the Secret Engine.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// If true, skips LDAP server SSL certificate verification - insecure, use with caution!
        /// </summary>
        [Input("insecureTls")]
        public Input<bool>? InsecureTls { get; set; }

        /// <summary>
        /// An interval of public/private key rotation for secret engine in days
        /// </summary>
        [Input("keyRotationIntervalDays")]
        public Input<int>? KeyRotationIntervalDays { get; set; }

        /// <summary>
        /// Unique human-readable name of the Secret Engine.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
        /// </summary>
        [Input("requestTimeout")]
        public Input<int>? RequestTimeout { get; set; }

        /// <summary>
        /// Backing secret store identifier
        /// </summary>
        [Input("secretStoreId")]
        public Input<string>? SecretStoreId { get; set; }

        /// <summary>
        /// Backing Secret Store root path where managed secrets are going to be stored
        /// </summary>
        [Input("secretStoreRootPath")]
        public Input<string>? SecretStoreRootPath { get; set; }

        /// <summary>
        /// If true, issues a StartTLS command after establishing an unencrypted connection.
        /// </summary>
        [Input("startTls")]
        public Input<bool>? StartTls { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// a filter to select all items of a certain subtype. See the [filter documentation](https://www.strongdm.com/docs/automation/getting-started/filters) for more information.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The domain (userPrincipalDomain) used to construct a UPN string for authentication.
        /// </summary>
        [Input("upndomain")]
        public Input<string>? Upndomain { get; set; }

        /// <summary>
        /// The LDAP server to connect to.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// Base DN under which to perform user search. Example: ou=Users,dc=example,dc=com
        /// </summary>
        [Input("userdn")]
        public Input<string>? Userdn { get; set; }

        public GetSecretEngineInvokeArgs()
        {
        }
        public static new GetSecretEngineInvokeArgs Empty => new GetSecretEngineInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecretEngineResult
    {
        /// <summary>
        /// Distinguished name of object to bind when performing user and group search. Example: cn=vault,ou=Users,dc=example,dc=com
        /// </summary>
        public readonly string? Binddn;
        /// <summary>
        /// Password to use along with binddn when performing user search.
        /// </summary>
        public readonly string? Bindpass;
        /// <summary>
        /// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
        /// </summary>
        public readonly string? Certificate;
        /// <summary>
        /// Timeout, in seconds, when attempting to connect to the LDAP server before trying the next URL in the configuration.
        /// </summary>
        public readonly int? ConnectionTimeout;
        /// <summary>
        /// If set to true this will prevent password change timestamp validation in Active Directory when validating credentials
        /// </summary>
        public readonly bool? DoNotValidateTimestamps;
        /// <summary>
        /// Unique identifier of the Secret Engine.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// a list of strings of ids of data sources that match the given arguments.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// If true, skips LDAP server SSL certificate verification - insecure, use with caution!
        /// </summary>
        public readonly bool? InsecureTls;
        /// <summary>
        /// An interval of public/private key rotation for secret engine in days
        /// </summary>
        public readonly int? KeyRotationIntervalDays;
        /// <summary>
        /// Unique human-readable name of the Secret Engine.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
        /// </summary>
        public readonly int? RequestTimeout;
        /// <summary>
        /// A single element list containing a map, where each key lists one of the following objects:
        /// * active_directory:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecretEngineSecretEngineResult> SecretEngines;
        /// <summary>
        /// Backing secret store identifier
        /// </summary>
        public readonly string? SecretStoreId;
        /// <summary>
        /// Backing Secret Store root path where managed secrets are going to be stored
        /// </summary>
        public readonly string? SecretStoreRootPath;
        /// <summary>
        /// If true, issues a StartTLS command after establishing an unencrypted connection.
        /// </summary>
        public readonly bool? StartTls;
        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly string? Type;
        /// <summary>
        /// The domain (userPrincipalDomain) used to construct a UPN string for authentication.
        /// </summary>
        public readonly string? Upndomain;
        /// <summary>
        /// The LDAP server to connect to.
        /// </summary>
        public readonly string? Url;
        /// <summary>
        /// Base DN under which to perform user search. Example: ou=Users,dc=example,dc=com
        /// * key_value:
        /// </summary>
        public readonly string? Userdn;

        [OutputConstructor]
        private GetSecretEngineResult(
            string? binddn,

            string? bindpass,

            string? certificate,

            int? connectionTimeout,

            bool? doNotValidateTimestamps,

            string? id,

            ImmutableArray<string> ids,

            bool? insecureTls,

            int? keyRotationIntervalDays,

            string? name,

            int? requestTimeout,

            ImmutableArray<Outputs.GetSecretEngineSecretEngineResult> secretEngines,

            string? secretStoreId,

            string? secretStoreRootPath,

            bool? startTls,

            ImmutableDictionary<string, string>? tags,

            string? type,

            string? upndomain,

            string? url,

            string? userdn)
        {
            Binddn = binddn;
            Bindpass = bindpass;
            Certificate = certificate;
            ConnectionTimeout = connectionTimeout;
            DoNotValidateTimestamps = doNotValidateTimestamps;
            Id = id;
            Ids = ids;
            InsecureTls = insecureTls;
            KeyRotationIntervalDays = keyRotationIntervalDays;
            Name = name;
            RequestTimeout = requestTimeout;
            SecretEngines = secretEngines;
            SecretStoreId = secretStoreId;
            SecretStoreRootPath = secretStoreRootPath;
            StartTls = startTls;
            Tags = tags;
            Type = type;
            Upndomain = upndomain;
            Url = url;
            Userdn = userdn;
        }
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Sdm
{
    /// <summary>
    /// ManagedSecret contains details about managed secret
    /// This resource can be imported using the import command.
    /// 
    /// ## Import
    /// 
    /// A ManagedSecret can be imported using the id, e.g.,
    /// 
    /// ```sh
    /// $ pulumi import sdm:index/managedSecret:ManagedSecret example ms-12345678
    /// ```
    /// </summary>
    [SdmResourceType("sdm:index/managedSecret:ManagedSecret")]
    public partial class ManagedSecret : global::Pulumi.CustomResource
    {
        /// <summary>
        /// public part of the secret value
        /// </summary>
        [Output("config")]
        public Output<string> Config { get; private set; } = null!;

        /// <summary>
        /// Timestamp of when secret is going to be rotated
        /// </summary>
        [Output("expiresAt")]
        public Output<string> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// Timestamp of when secret was last rotated
        /// </summary>
        [Output("lastRotatedAt")]
        public Output<string> LastRotatedAt { get; private set; } = null!;

        /// <summary>
        /// Unique human-readable name of the Managed Secret.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An ID of a Secret Engine linked with the Managed Secret.
        /// </summary>
        [Output("secretEngineId")]
        public Output<string> SecretEngineId { get; private set; } = null!;

        /// <summary>
        /// Path in a secret store.
        /// </summary>
        [Output("secretStorePath")]
        public Output<string> SecretStorePath { get; private set; } = null!;

        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Sensitive value of the secret.
        /// </summary>
        [Output("value")]
        public Output<string?> Value { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedSecret resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedSecret(string name, ManagedSecretArgs args, CustomResourceOptions? options = null)
            : base("sdm:index/managedSecret:ManagedSecret", name, args ?? new ManagedSecretArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedSecret(string name, Input<string> id, ManagedSecretState? state = null, CustomResourceOptions? options = null)
            : base("sdm:index/managedSecret:ManagedSecret", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-sdm",
                AdditionalSecretOutputs =
                {
                    "value",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedSecret resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedSecret Get(string name, Input<string> id, ManagedSecretState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedSecret(name, id, state, options);
        }
    }

    public sealed class ManagedSecretArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Unique human-readable name of the Managed Secret.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// An ID of a Secret Engine linked with the Managed Secret.
        /// </summary>
        [Input("secretEngineId", required: true)]
        public Input<string> SecretEngineId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("value")]
        private Input<string>? _value;

        /// <summary>
        /// Sensitive value of the secret.
        /// </summary>
        public Input<string>? Value
        {
            get => _value;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _value = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ManagedSecretArgs()
        {
        }
        public static new ManagedSecretArgs Empty => new ManagedSecretArgs();
    }

    public sealed class ManagedSecretState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// public part of the secret value
        /// </summary>
        [Input("config")]
        public Input<string>? Config { get; set; }

        /// <summary>
        /// Timestamp of when secret is going to be rotated
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// Timestamp of when secret was last rotated
        /// </summary>
        [Input("lastRotatedAt")]
        public Input<string>? LastRotatedAt { get; set; }

        /// <summary>
        /// Unique human-readable name of the Managed Secret.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// An ID of a Secret Engine linked with the Managed Secret.
        /// </summary>
        [Input("secretEngineId")]
        public Input<string>? SecretEngineId { get; set; }

        /// <summary>
        /// Path in a secret store.
        /// </summary>
        [Input("secretStorePath")]
        public Input<string>? SecretStorePath { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("value")]
        private Input<string>? _value;

        /// <summary>
        /// Sensitive value of the secret.
        /// </summary>
        public Input<string>? Value
        {
            get => _value;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _value = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ManagedSecretState()
        {
        }
        public static new ManagedSecretState Empty => new ManagedSecretState();
    }
}

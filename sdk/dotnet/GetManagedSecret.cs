// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Sdm
{
    public static class GetManagedSecret
    {
        /// <summary>
        /// ManagedSecret contains details about managed secret
        /// </summary>
        public static Task<GetManagedSecretResult> InvokeAsync(GetManagedSecretArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetManagedSecretResult>("sdm:index/getManagedSecret:getManagedSecret", args ?? new GetManagedSecretArgs(), options.WithDefaults());

        /// <summary>
        /// ManagedSecret contains details about managed secret
        /// </summary>
        public static Output<GetManagedSecretResult> Invoke(GetManagedSecretInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedSecretResult>("sdm:index/getManagedSecret:getManagedSecret", args ?? new GetManagedSecretInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ManagedSecret contains details about managed secret
        /// </summary>
        public static Output<GetManagedSecretResult> Invoke(GetManagedSecretInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetManagedSecretResult>("sdm:index/getManagedSecret:getManagedSecret", args ?? new GetManagedSecretInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedSecretArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the Managed Secret.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Unique human-readable name of the Managed Secret.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// An ID of a Secret Engine linked with the Managed Secret.
        /// </summary>
        [Input("secretEngineId")]
        public string? SecretEngineId { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        [Input("value")]
        private string? _value;

        /// <summary>
        /// Sensitive value of the secret.
        /// </summary>
        public string? Value
        {
            get => _value;
            set => _value = value;
        }

        public GetManagedSecretArgs()
        {
        }
        public static new GetManagedSecretArgs Empty => new GetManagedSecretArgs();
    }

    public sealed class GetManagedSecretInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the Managed Secret.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Unique human-readable name of the Managed Secret.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// An ID of a Secret Engine linked with the Managed Secret.
        /// </summary>
        [Input("secretEngineId")]
        public Input<string>? SecretEngineId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("value")]
        private Input<string>? _value;

        /// <summary>
        /// Sensitive value of the secret.
        /// </summary>
        public Input<string>? Value
        {
            get => _value;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _value = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public GetManagedSecretInvokeArgs()
        {
        }
        public static new GetManagedSecretInvokeArgs Empty => new GetManagedSecretInvokeArgs();
    }


    [OutputType]
    public sealed class GetManagedSecretResult
    {
        /// <summary>
        /// public part of the secret value
        /// </summary>
        public readonly string Config;
        /// <summary>
        /// Timestamp of when secret is going to be rotated
        /// </summary>
        public readonly string ExpiresAt;
        /// <summary>
        /// Unique identifier of the Managed Secret.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// a list of strings of ids of data sources that match the given arguments.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// Timestamp of when secret was last rotated
        /// </summary>
        public readonly string LastRotatedAt;
        /// <summary>
        /// A list where each element has the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManagedSecretManagedSecretResult> ManagedSecrets;
        /// <summary>
        /// Unique human-readable name of the Managed Secret.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// An ID of a Secret Engine linked with the Managed Secret.
        /// </summary>
        public readonly string? SecretEngineId;
        /// <summary>
        /// Path in a secret store.
        /// </summary>
        public readonly string SecretStorePath;
        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Sensitive value of the secret.
        /// </summary>
        public readonly string? Value;

        [OutputConstructor]
        private GetManagedSecretResult(
            string config,

            string expiresAt,

            string? id,

            ImmutableArray<string> ids,

            string lastRotatedAt,

            ImmutableArray<Outputs.GetManagedSecretManagedSecretResult> managedSecrets,

            string? name,

            string? secretEngineId,

            string secretStorePath,

            ImmutableDictionary<string, string>? tags,

            string? value)
        {
            Config = config;
            ExpiresAt = expiresAt;
            Id = id;
            Ids = ids;
            LastRotatedAt = lastRotatedAt;
            ManagedSecrets = managedSecrets;
            Name = name;
            SecretEngineId = secretEngineId;
            SecretStorePath = secretStorePath;
            Tags = tags;
            Value = value;
        }
    }
}

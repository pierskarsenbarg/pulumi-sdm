// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Sdm
{
    public static class GetSecretStore
    {
        /// <summary>
        /// A SecretStore is a server where resource secrets (passwords, keys) are stored.
        ///  Coming soon support for HashiCorp Vault and AWS Secret Store.
        /// </summary>
        public static Task<GetSecretStoreResult> InvokeAsync(GetSecretStoreArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecretStoreResult>("sdm:index/getSecretStore:getSecretStore", args ?? new GetSecretStoreArgs(), options.WithDefaults());

        /// <summary>
        /// A SecretStore is a server where resource secrets (passwords, keys) are stored.
        ///  Coming soon support for HashiCorp Vault and AWS Secret Store.
        /// </summary>
        public static Output<GetSecretStoreResult> Invoke(GetSecretStoreInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecretStoreResult>("sdm:index/getSecretStore:getSecretStore", args ?? new GetSecretStoreInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// A SecretStore is a server where resource secrets (passwords, keys) are stored.
        ///  Coming soon support for HashiCorp Vault and AWS Secret Store.
        /// </summary>
        public static Output<GetSecretStoreResult> Invoke(GetSecretStoreInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecretStoreResult>("sdm:index/getSecretStore:getSecretStore", args ?? new GetSecretStoreInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecretStoreArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the SecretStore.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Unique human-readable name of the SecretStore.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// a filter to select all items of a certain subtype. See the [filter documentation](https://www.strongdm.com/docs/cli/filters/) for more information.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetSecretStoreArgs()
        {
        }
        public static new GetSecretStoreArgs Empty => new GetSecretStoreArgs();
    }

    public sealed class GetSecretStoreInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the SecretStore.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Unique human-readable name of the SecretStore.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// a filter to select all items of a certain subtype. See the [filter documentation](https://www.strongdm.com/docs/cli/filters/) for more information.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetSecretStoreInvokeArgs()
        {
        }
        public static new GetSecretStoreInvokeArgs Empty => new GetSecretStoreInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecretStoreResult
    {
        /// <summary>
        /// Unique identifier of the SecretStore.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// a list of strings of ids of data sources that match the given arguments.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// Unique human-readable name of the SecretStore.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// A single element list containing a map, where each key lists one of the following objects:
        /// * active_directory_store:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecretStoreSecretStoreResult> SecretStores;
        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly string? Type;

        [OutputConstructor]
        private GetSecretStoreResult(
            string? id,

            ImmutableArray<string> ids,

            string? name,

            ImmutableArray<Outputs.GetSecretStoreSecretStoreResult> secretStores,

            ImmutableDictionary<string, string>? tags,

            string? type)
        {
            Id = id;
            Ids = ids;
            Name = name;
            SecretStores = secretStores;
            Tags = tags;
            Type = type;
        }
    }
}

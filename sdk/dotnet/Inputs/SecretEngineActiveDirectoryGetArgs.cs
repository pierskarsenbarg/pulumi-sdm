// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Sdm.Inputs
{

    public sealed class SecretEngineActiveDirectoryGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default time-to-live duration of the password after it's read. Once the ttl has passed, a password will be rotated.
        /// </summary>
        [Input("afterReadTtl")]
        public Input<string>? AfterReadTtl { get; set; }

        /// <summary>
        /// Distinguished name of object to bind when performing user and group search. Example: cn=vault,ou=Users,dc=example,dc=com
        /// </summary>
        [Input("binddn", required: true)]
        public Input<string> Binddn { get; set; } = null!;

        /// <summary>
        /// Password to use along with binddn when performing user search.
        /// </summary>
        [Input("bindpass", required: true)]
        public Input<string> Bindpass { get; set; } = null!;

        /// <summary>
        /// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// Timeout, in seconds, when attempting to connect to the LDAP server before trying the next URL in the configuration.
        /// </summary>
        [Input("connectionTimeout")]
        public Input<int>? ConnectionTimeout { get; set; }

        /// <summary>
        /// If set to true this will prevent password change timestamp validation in Active Directory when validating credentials
        /// </summary>
        [Input("doNotValidateTimestamps")]
        public Input<bool>? DoNotValidateTimestamps { get; set; }

        /// <summary>
        /// If true, skips LDAP server SSL certificate verification - insecure, use with caution!
        /// </summary>
        [Input("insecureTls")]
        public Input<bool>? InsecureTls { get; set; }

        /// <summary>
        /// An interval of public/private key rotation for secret engine in days
        /// </summary>
        [Input("keyRotationIntervalDays")]
        public Input<int>? KeyRotationIntervalDays { get; set; }

        /// <summary>
        /// The maximum retry duration in case of automatic failure. On failed ttl rotation attempt it will be retried in an increasing intervals until it reaches max_backoff_duration
        /// </summary>
        [Input("maxBackoffDuration")]
        public Input<string>? MaxBackoffDuration { get; set; }

        /// <summary>
        /// Unique human-readable name of the Secret Engine.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Public key linked with a secret engine
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
        /// </summary>
        [Input("requestTimeout")]
        public Input<int>? RequestTimeout { get; set; }

        /// <summary>
        /// Backing secret store identifier
        /// </summary>
        [Input("secretStoreId", required: true)]
        public Input<string> SecretStoreId { get; set; } = null!;

        /// <summary>
        /// Backing Secret Store root path where managed secrets are going to be stored
        /// </summary>
        [Input("secretStoreRootPath", required: true)]
        public Input<string> SecretStoreRootPath { get; set; } = null!;

        /// <summary>
        /// If true, issues a StartTLS command after establishing an unencrypted connection.
        /// </summary>
        [Input("startTls")]
        public Input<bool>? StartTls { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The default password time-to-live duration. Once the ttl has passed, a password will be rotated the next time it's requested.
        /// </summary>
        [Input("ttl")]
        public Input<string>? Ttl { get; set; }

        /// <summary>
        /// The domain (userPrincipalDomain) used to construct a UPN string for authentication.
        /// </summary>
        [Input("upndomain")]
        public Input<string>? Upndomain { get; set; }

        /// <summary>
        /// The LDAP server to connect to.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        /// <summary>
        /// Base DN under which to perform user search. Example: ou=Users,dc=example,dc=com
        /// * key_value:
        /// </summary>
        [Input("userdn")]
        public Input<string>? Userdn { get; set; }

        public SecretEngineActiveDirectoryGetArgs()
        {
        }
        public static new SecretEngineActiveDirectoryGetArgs Empty => new SecretEngineActiveDirectoryGetArgs();
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Sdm.Inputs
{

    public sealed class SecretStoreVaultTlsCertSshArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A path to a CA file accessible by a Node
        /// </summary>
        [Input("caCertPath")]
        public Input<string>? CaCertPath { get; set; }

        /// <summary>
        /// A path to a client certificate file accessible by a Node
        /// </summary>
        [Input("clientCertPath", required: true)]
        public Input<string> ClientCertPath { get; set; } = null!;

        /// <summary>
        /// A path to a client key file accessible by a Node
        /// </summary>
        [Input("clientKeyPath", required: true)]
        public Input<string> ClientKeyPath { get; set; } = null!;

        /// <summary>
        /// The lifetime of certificates issued by this CA represented in minutes.
        /// </summary>
        [Input("issuedCertTtlMinutes", required: true)]
        public Input<int> IssuedCertTtlMinutes { get; set; } = null!;

        /// <summary>
        /// Unique human-readable name of the SecretStore.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The namespace to make requests within
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The URL of the Vault to target
        /// </summary>
        [Input("serverAddress", required: true)]
        public Input<string> ServerAddress { get; set; } = null!;

        /// <summary>
        /// The signing role to be used for signing certificates
        /// </summary>
        [Input("signingRole", required: true)]
        public Input<string> SigningRole { get; set; } = null!;

        /// <summary>
        /// The mount point of the SSH engine configured with the desired CA
        /// </summary>
        [Input("sshMountPoint", required: true)]
        public Input<string> SshMountPoint { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public SecretStoreVaultTlsCertSshArgs()
        {
        }
        public static new SecretStoreVaultTlsCertSshArgs Empty => new SecretStoreVaultTlsCertSshArgs();
    }
}

// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Sdm
{
    /// <summary>
    /// A SecretStore is a server where resource secrets (passwords, keys) are stored.
    ///  Coming soon support for HashiCorp Vault and AWS Secret Store.
    /// This resource can be imported using the import command.
    /// 
    /// ## Import
    /// 
    /// A SecretStore can be imported using the id, e.g.,
    /// 
    /// ```sh
    /// $ pulumi import sdm:index/secretStore:SecretStore example se-12345678
    /// ```
    /// </summary>
    [SdmResourceType("sdm:index/secretStore:SecretStore")]
    public partial class SecretStore : global::Pulumi.CustomResource
    {
        [Output("activeDirectoryStore")]
        public Output<Outputs.SecretStoreActiveDirectoryStore?> ActiveDirectoryStore { get; private set; } = null!;

        [Output("aws")]
        public Output<Outputs.SecretStoreAws?> Aws { get; private set; } = null!;

        [Output("awsCertX509")]
        public Output<Outputs.SecretStoreAwsCertX509?> AwsCertX509 { get; private set; } = null!;

        [Output("azureStore")]
        public Output<Outputs.SecretStoreAzureStore?> AzureStore { get; private set; } = null!;

        [Output("cyberarkConjur")]
        public Output<Outputs.SecretStoreCyberarkConjur?> CyberarkConjur { get; private set; } = null!;

        [Output("cyberarkPam")]
        public Output<Outputs.SecretStoreCyberarkPam?> CyberarkPam { get; private set; } = null!;

        /// <summary>
        /// CyberarkPAMExperimentalStore is currently unstable, and its API may change, or it may be removed, without a major
        /// version bump.
        /// </summary>
        [Output("cyberarkPamExperimental")]
        public Output<Outputs.SecretStoreCyberarkPamExperimental?> CyberarkPamExperimental { get; private set; } = null!;

        [Output("delineaStore")]
        public Output<Outputs.SecretStoreDelineaStore?> DelineaStore { get; private set; } = null!;

        [Output("gcpCertX509Store")]
        public Output<Outputs.SecretStoreGcpCertX509Store?> GcpCertX509Store { get; private set; } = null!;

        [Output("gcpStore")]
        public Output<Outputs.SecretStoreGcpStore?> GcpStore { get; private set; } = null!;

        [Output("keyfactorSshStore")]
        public Output<Outputs.SecretStoreKeyfactorSshStore?> KeyfactorSshStore { get; private set; } = null!;

        [Output("keyfactorX509Store")]
        public Output<Outputs.SecretStoreKeyfactorX509Store?> KeyfactorX509Store { get; private set; } = null!;

        [Output("vaultApprole")]
        public Output<Outputs.SecretStoreVaultApprole?> VaultApprole { get; private set; } = null!;

        [Output("vaultApproleCertSsh")]
        public Output<Outputs.SecretStoreVaultApproleCertSsh?> VaultApproleCertSsh { get; private set; } = null!;

        [Output("vaultApproleCertX509")]
        public Output<Outputs.SecretStoreVaultApproleCertX509?> VaultApproleCertX509 { get; private set; } = null!;

        [Output("vaultAwsEc2")]
        public Output<Outputs.SecretStoreVaultAwsEc2?> VaultAwsEc2 { get; private set; } = null!;

        [Output("vaultAwsIam")]
        public Output<Outputs.SecretStoreVaultAwsIam?> VaultAwsIam { get; private set; } = null!;

        [Output("vaultTls")]
        public Output<Outputs.SecretStoreVaultTls?> VaultTls { get; private set; } = null!;

        [Output("vaultTlsCertSsh")]
        public Output<Outputs.SecretStoreVaultTlsCertSsh?> VaultTlsCertSsh { get; private set; } = null!;

        [Output("vaultTlsCertX509")]
        public Output<Outputs.SecretStoreVaultTlsCertX509?> VaultTlsCertX509 { get; private set; } = null!;

        [Output("vaultToken")]
        public Output<Outputs.SecretStoreVaultToken?> VaultToken { get; private set; } = null!;

        [Output("vaultTokenCertSsh")]
        public Output<Outputs.SecretStoreVaultTokenCertSsh?> VaultTokenCertSsh { get; private set; } = null!;

        [Output("vaultTokenCertX509")]
        public Output<Outputs.SecretStoreVaultTokenCertX509?> VaultTokenCertX509 { get; private set; } = null!;


        /// <summary>
        /// Create a SecretStore resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecretStore(string name, SecretStoreArgs? args = null, CustomResourceOptions? options = null)
            : base("sdm:index/secretStore:SecretStore", name, args ?? new SecretStoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecretStore(string name, Input<string> id, SecretStoreState? state = null, CustomResourceOptions? options = null)
            : base("sdm:index/secretStore:SecretStore", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-sdm",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecretStore resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecretStore Get(string name, Input<string> id, SecretStoreState? state = null, CustomResourceOptions? options = null)
        {
            return new SecretStore(name, id, state, options);
        }
    }

    public sealed class SecretStoreArgs : global::Pulumi.ResourceArgs
    {
        [Input("activeDirectoryStore")]
        public Input<Inputs.SecretStoreActiveDirectoryStoreArgs>? ActiveDirectoryStore { get; set; }

        [Input("aws")]
        public Input<Inputs.SecretStoreAwsArgs>? Aws { get; set; }

        [Input("awsCertX509")]
        public Input<Inputs.SecretStoreAwsCertX509Args>? AwsCertX509 { get; set; }

        [Input("azureStore")]
        public Input<Inputs.SecretStoreAzureStoreArgs>? AzureStore { get; set; }

        [Input("cyberarkConjur")]
        public Input<Inputs.SecretStoreCyberarkConjurArgs>? CyberarkConjur { get; set; }

        [Input("cyberarkPam")]
        public Input<Inputs.SecretStoreCyberarkPamArgs>? CyberarkPam { get; set; }

        /// <summary>
        /// CyberarkPAMExperimentalStore is currently unstable, and its API may change, or it may be removed, without a major
        /// version bump.
        /// </summary>
        [Input("cyberarkPamExperimental")]
        public Input<Inputs.SecretStoreCyberarkPamExperimentalArgs>? CyberarkPamExperimental { get; set; }

        [Input("delineaStore")]
        public Input<Inputs.SecretStoreDelineaStoreArgs>? DelineaStore { get; set; }

        [Input("gcpCertX509Store")]
        public Input<Inputs.SecretStoreGcpCertX509StoreArgs>? GcpCertX509Store { get; set; }

        [Input("gcpStore")]
        public Input<Inputs.SecretStoreGcpStoreArgs>? GcpStore { get; set; }

        [Input("keyfactorSshStore")]
        public Input<Inputs.SecretStoreKeyfactorSshStoreArgs>? KeyfactorSshStore { get; set; }

        [Input("keyfactorX509Store")]
        public Input<Inputs.SecretStoreKeyfactorX509StoreArgs>? KeyfactorX509Store { get; set; }

        [Input("vaultApprole")]
        public Input<Inputs.SecretStoreVaultApproleArgs>? VaultApprole { get; set; }

        [Input("vaultApproleCertSsh")]
        public Input<Inputs.SecretStoreVaultApproleCertSshArgs>? VaultApproleCertSsh { get; set; }

        [Input("vaultApproleCertX509")]
        public Input<Inputs.SecretStoreVaultApproleCertX509Args>? VaultApproleCertX509 { get; set; }

        [Input("vaultAwsEc2")]
        public Input<Inputs.SecretStoreVaultAwsEc2Args>? VaultAwsEc2 { get; set; }

        [Input("vaultAwsIam")]
        public Input<Inputs.SecretStoreVaultAwsIamArgs>? VaultAwsIam { get; set; }

        [Input("vaultTls")]
        public Input<Inputs.SecretStoreVaultTlsArgs>? VaultTls { get; set; }

        [Input("vaultTlsCertSsh")]
        public Input<Inputs.SecretStoreVaultTlsCertSshArgs>? VaultTlsCertSsh { get; set; }

        [Input("vaultTlsCertX509")]
        public Input<Inputs.SecretStoreVaultTlsCertX509Args>? VaultTlsCertX509 { get; set; }

        [Input("vaultToken")]
        public Input<Inputs.SecretStoreVaultTokenArgs>? VaultToken { get; set; }

        [Input("vaultTokenCertSsh")]
        public Input<Inputs.SecretStoreVaultTokenCertSshArgs>? VaultTokenCertSsh { get; set; }

        [Input("vaultTokenCertX509")]
        public Input<Inputs.SecretStoreVaultTokenCertX509Args>? VaultTokenCertX509 { get; set; }

        public SecretStoreArgs()
        {
        }
        public static new SecretStoreArgs Empty => new SecretStoreArgs();
    }

    public sealed class SecretStoreState : global::Pulumi.ResourceArgs
    {
        [Input("activeDirectoryStore")]
        public Input<Inputs.SecretStoreActiveDirectoryStoreGetArgs>? ActiveDirectoryStore { get; set; }

        [Input("aws")]
        public Input<Inputs.SecretStoreAwsGetArgs>? Aws { get; set; }

        [Input("awsCertX509")]
        public Input<Inputs.SecretStoreAwsCertX509GetArgs>? AwsCertX509 { get; set; }

        [Input("azureStore")]
        public Input<Inputs.SecretStoreAzureStoreGetArgs>? AzureStore { get; set; }

        [Input("cyberarkConjur")]
        public Input<Inputs.SecretStoreCyberarkConjurGetArgs>? CyberarkConjur { get; set; }

        [Input("cyberarkPam")]
        public Input<Inputs.SecretStoreCyberarkPamGetArgs>? CyberarkPam { get; set; }

        /// <summary>
        /// CyberarkPAMExperimentalStore is currently unstable, and its API may change, or it may be removed, without a major
        /// version bump.
        /// </summary>
        [Input("cyberarkPamExperimental")]
        public Input<Inputs.SecretStoreCyberarkPamExperimentalGetArgs>? CyberarkPamExperimental { get; set; }

        [Input("delineaStore")]
        public Input<Inputs.SecretStoreDelineaStoreGetArgs>? DelineaStore { get; set; }

        [Input("gcpCertX509Store")]
        public Input<Inputs.SecretStoreGcpCertX509StoreGetArgs>? GcpCertX509Store { get; set; }

        [Input("gcpStore")]
        public Input<Inputs.SecretStoreGcpStoreGetArgs>? GcpStore { get; set; }

        [Input("keyfactorSshStore")]
        public Input<Inputs.SecretStoreKeyfactorSshStoreGetArgs>? KeyfactorSshStore { get; set; }

        [Input("keyfactorX509Store")]
        public Input<Inputs.SecretStoreKeyfactorX509StoreGetArgs>? KeyfactorX509Store { get; set; }

        [Input("vaultApprole")]
        public Input<Inputs.SecretStoreVaultApproleGetArgs>? VaultApprole { get; set; }

        [Input("vaultApproleCertSsh")]
        public Input<Inputs.SecretStoreVaultApproleCertSshGetArgs>? VaultApproleCertSsh { get; set; }

        [Input("vaultApproleCertX509")]
        public Input<Inputs.SecretStoreVaultApproleCertX509GetArgs>? VaultApproleCertX509 { get; set; }

        [Input("vaultAwsEc2")]
        public Input<Inputs.SecretStoreVaultAwsEc2GetArgs>? VaultAwsEc2 { get; set; }

        [Input("vaultAwsIam")]
        public Input<Inputs.SecretStoreVaultAwsIamGetArgs>? VaultAwsIam { get; set; }

        [Input("vaultTls")]
        public Input<Inputs.SecretStoreVaultTlsGetArgs>? VaultTls { get; set; }

        [Input("vaultTlsCertSsh")]
        public Input<Inputs.SecretStoreVaultTlsCertSshGetArgs>? VaultTlsCertSsh { get; set; }

        [Input("vaultTlsCertX509")]
        public Input<Inputs.SecretStoreVaultTlsCertX509GetArgs>? VaultTlsCertX509 { get; set; }

        [Input("vaultToken")]
        public Input<Inputs.SecretStoreVaultTokenGetArgs>? VaultToken { get; set; }

        [Input("vaultTokenCertSsh")]
        public Input<Inputs.SecretStoreVaultTokenCertSshGetArgs>? VaultTokenCertSsh { get; set; }

        [Input("vaultTokenCertX509")]
        public Input<Inputs.SecretStoreVaultTokenCertX509GetArgs>? VaultTokenCertX509 { get; set; }

        public SecretStoreState()
        {
        }
        public static new SecretStoreState Empty => new SecretStoreState();
    }
}

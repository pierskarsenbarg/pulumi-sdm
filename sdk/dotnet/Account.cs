// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Sdm
{
    /// <summary>
    /// Accounts are users that have access to strongDM. The types of accounts are:
    ///  1. **Users:** humans who are authenticated through username and password or SSO.
    ///  2. **Service Accounts:** machines that are authenticated using a service token.
    ///  3. **Tokens** are access keys with permissions that can be used for authentication.
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdm = PiersKarsenbarg.Sdm;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test_user = new Sdm.Account("test-user", new()
    ///     {
    ///         User = new Sdm.Inputs.AccountUserArgs
    ///         {
    ///             Email = "albob@strongdm.com",
    ///             FirstName = "al",
    ///             LastName = "bob",
    ///             ManagerId = "a-1234abc",
    ///             PermissionLevel = "database-admin",
    ///             Tags = 
    ///             {
    ///                 { "env", "dev" },
    ///                 { "region", "us-west" },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var test_service = new Sdm.Account("test-service", new()
    ///     {
    ///         Service = new Sdm.Inputs.AccountServiceArgs
    ///         {
    ///             Name = "test-service",
    ///             Tags = 
    ///             {
    ///                 { "env", "dev" },
    ///                 { "region", "us-west" },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// This resource can be imported using the import command.
    /// 
    /// ## Import
    /// 
    /// A Account can be imported using the id, e.g.,
    /// 
    /// ```sh
    /// $ pulumi import sdm:index/account:Account example a-12345678
    /// ```
    /// </summary>
    [SdmResourceType("sdm:index/account:Account")]
    public partial class Account : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A Service is a service account that can connect to resources they are granted directly, or granted via roles. Services are typically automated jobs.
        /// </summary>
        [Output("service")]
        public Output<Outputs.AccountService?> Service { get; private set; } = null!;

        /// <summary>
        /// A User can connect to resources they are granted directly, or granted via roles.
        /// </summary>
        [Output("user")]
        public Output<Outputs.AccountUser?> User { get; private set; } = null!;


        /// <summary>
        /// Create a Account resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Account(string name, AccountArgs? args = null, CustomResourceOptions? options = null)
            : base("sdm:index/account:Account", name, args ?? new AccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Account(string name, Input<string> id, AccountState? state = null, CustomResourceOptions? options = null)
            : base("sdm:index/account:Account", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pierskarsenbarg/pulumi-sdm",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Account resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Account Get(string name, Input<string> id, AccountState? state = null, CustomResourceOptions? options = null)
        {
            return new Account(name, id, state, options);
        }
    }

    public sealed class AccountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Service is a service account that can connect to resources they are granted directly, or granted via roles. Services are typically automated jobs.
        /// </summary>
        [Input("service")]
        public Input<Inputs.AccountServiceArgs>? Service { get; set; }

        /// <summary>
        /// A User can connect to resources they are granted directly, or granted via roles.
        /// </summary>
        [Input("user")]
        public Input<Inputs.AccountUserArgs>? User { get; set; }

        public AccountArgs()
        {
        }
        public static new AccountArgs Empty => new AccountArgs();
    }

    public sealed class AccountState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Service is a service account that can connect to resources they are granted directly, or granted via roles. Services are typically automated jobs.
        /// </summary>
        [Input("service")]
        public Input<Inputs.AccountServiceGetArgs>? Service { get; set; }

        /// <summary>
        /// A User can connect to resources they are granted directly, or granted via roles.
        /// </summary>
        [Input("user")]
        public Input<Inputs.AccountUserGetArgs>? User { get; set; }

        public AccountState()
        {
        }
        public static new AccountState Empty => new AccountState();
    }
}

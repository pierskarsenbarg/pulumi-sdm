// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Sdm
{
    public static class GetWorkflowRole
    {
        /// <summary>
        /// WorkflowRole links a role to a workflow. The linked roles indicate which roles a user must be a part of
        ///  to request access to a resource via the workflow.
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdm = Pulumi.Sdm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var workflowRoleQuery = Sdm.GetWorkflowRole.Invoke(new()
        ///     {
        ///         RoleId = "r-9862923",
        ///         WorkflowId = "aw-7935485",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetWorkflowRoleResult> InvokeAsync(GetWorkflowRoleArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkflowRoleResult>("sdm:index/getWorkflowRole:getWorkflowRole", args ?? new GetWorkflowRoleArgs(), options.WithDefaults());

        /// <summary>
        /// WorkflowRole links a role to a workflow. The linked roles indicate which roles a user must be a part of
        ///  to request access to a resource via the workflow.
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdm = Pulumi.Sdm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var workflowRoleQuery = Sdm.GetWorkflowRole.Invoke(new()
        ///     {
        ///         RoleId = "r-9862923",
        ///         WorkflowId = "aw-7935485",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWorkflowRoleResult> Invoke(GetWorkflowRoleInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkflowRoleResult>("sdm:index/getWorkflowRole:getWorkflowRole", args ?? new GetWorkflowRoleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// WorkflowRole links a role to a workflow. The linked roles indicate which roles a user must be a part of
        ///  to request access to a resource via the workflow.
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdm = Pulumi.Sdm;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var workflowRoleQuery = Sdm.GetWorkflowRole.Invoke(new()
        ///     {
        ///         RoleId = "r-9862923",
        ///         WorkflowId = "aw-7935485",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWorkflowRoleResult> Invoke(GetWorkflowRoleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkflowRoleResult>("sdm:index/getWorkflowRole:getWorkflowRole", args ?? new GetWorkflowRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkflowRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the WorkflowRole.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The role id.
        /// </summary>
        [Input("roleId")]
        public string? RoleId { get; set; }

        /// <summary>
        /// The workflow id.
        /// </summary>
        [Input("workflowId")]
        public string? WorkflowId { get; set; }

        public GetWorkflowRoleArgs()
        {
        }
        public static new GetWorkflowRoleArgs Empty => new GetWorkflowRoleArgs();
    }

    public sealed class GetWorkflowRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier of the WorkflowRole.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The role id.
        /// </summary>
        [Input("roleId")]
        public Input<string>? RoleId { get; set; }

        /// <summary>
        /// The workflow id.
        /// </summary>
        [Input("workflowId")]
        public Input<string>? WorkflowId { get; set; }

        public GetWorkflowRoleInvokeArgs()
        {
        }
        public static new GetWorkflowRoleInvokeArgs Empty => new GetWorkflowRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkflowRoleResult
    {
        /// <summary>
        /// Unique identifier of the WorkflowRole.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// a list of strings of ids of data sources that match the given arguments.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The role id.
        /// </summary>
        public readonly string? RoleId;
        /// <summary>
        /// The workflow id.
        /// </summary>
        public readonly string? WorkflowId;
        /// <summary>
        /// A list where each element has the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkflowRoleWorkflowRoleResult> WorkflowRoles;

        [OutputConstructor]
        private GetWorkflowRoleResult(
            string? id,

            ImmutableArray<string> ids,

            string? roleId,

            string? workflowId,

            ImmutableArray<Outputs.GetWorkflowRoleWorkflowRoleResult> workflowRoles)
        {
            Id = id;
            Ids = ids;
            RoleId = roleId;
            WorkflowId = workflowId;
            WorkflowRoles = workflowRoles;
        }
    }
}

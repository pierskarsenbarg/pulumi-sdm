// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Sdm.Outputs
{

    [OutputType]
    public sealed class ResourceGoogleGkeUserImpersonation
    {
        /// <summary>
        /// Bind interface
        /// </summary>
        public readonly string? BindInterface;
        public readonly string? CertificateAuthority;
        /// <summary>
        /// A filter applied to the routing logic to pin datasource to nodes.
        /// </summary>
        public readonly string? EgressFilter;
        public readonly string Endpoint;
        /// <summary>
        /// The path used to check the health of your connection.  Defaults to `default`.  This field is required, and is only marked as optional for backwards compatibility.
        /// </summary>
        public readonly string? HealthcheckNamespace;
        /// <summary>
        /// Unique human-readable name of the Resource.
        /// </summary>
        public readonly string Name;
        public readonly string? SecretStoreCertificateAuthorityKey;
        public readonly string? SecretStoreCertificateAuthorityPath;
        /// <summary>
        /// ID of the secret store containing credentials for this resource, if any.
        /// </summary>
        public readonly string? SecretStoreId;
        public readonly string? SecretStoreServiceAccountKeyKey;
        public readonly string? SecretStoreServiceAccountKeyPath;
        public readonly string? ServiceAccountKey;
        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;

        [OutputConstructor]
        private ResourceGoogleGkeUserImpersonation(
            string? bindInterface,

            string? certificateAuthority,

            string? egressFilter,

            string endpoint,

            string? healthcheckNamespace,

            string name,

            string? secretStoreCertificateAuthorityKey,

            string? secretStoreCertificateAuthorityPath,

            string? secretStoreId,

            string? secretStoreServiceAccountKeyKey,

            string? secretStoreServiceAccountKeyPath,

            string? serviceAccountKey,

            ImmutableDictionary<string, string>? tags)
        {
            BindInterface = bindInterface;
            CertificateAuthority = certificateAuthority;
            EgressFilter = egressFilter;
            Endpoint = endpoint;
            HealthcheckNamespace = healthcheckNamespace;
            Name = name;
            SecretStoreCertificateAuthorityKey = secretStoreCertificateAuthorityKey;
            SecretStoreCertificateAuthorityPath = secretStoreCertificateAuthorityPath;
            SecretStoreId = secretStoreId;
            SecretStoreServiceAccountKeyKey = secretStoreServiceAccountKeyKey;
            SecretStoreServiceAccountKeyPath = secretStoreServiceAccountKeyPath;
            ServiceAccountKey = serviceAccountKey;
            Tags = tags;
        }
    }
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Sdm.Outputs
{

    [OutputType]
    public sealed class GetResourceResourceAwsConsoleResult
    {
        /// <summary>
        /// Bind interface
        /// </summary>
        public readonly string? BindInterface;
        /// <summary>
        /// A filter applied to the routing logic to pin datasource to nodes.
        /// </summary>
        public readonly string? EgressFilter;
        public readonly bool? EnableEnvVariables;
        /// <summary>
        /// Unique identifier of the Resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Unique human-readable name of the Resource.
        /// </summary>
        public readonly string? Name;
        public readonly int? PortOverride;
        public readonly string? Region;
        public readonly string? RemoteIdentityGroupId;
        public readonly string? RemoteIdentityHealthcheckUsername;
        public readonly string? RoleArn;
        public readonly string? RoleExternalId;
        /// <summary>
        /// ID of the secret store containing credentials for this resource, if any.
        /// </summary>
        public readonly string? SecretStoreId;
        public readonly int? SessionExpiry;
        public readonly string? Subdomain;
        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;

        [OutputConstructor]
        private GetResourceResourceAwsConsoleResult(
            string? bindInterface,

            string? egressFilter,

            bool? enableEnvVariables,

            string? id,

            string? name,

            int? portOverride,

            string? region,

            string? remoteIdentityGroupId,

            string? remoteIdentityHealthcheckUsername,

            string? roleArn,

            string? roleExternalId,

            string? secretStoreId,

            int? sessionExpiry,

            string? subdomain,

            ImmutableDictionary<string, string>? tags)
        {
            BindInterface = bindInterface;
            EgressFilter = egressFilter;
            EnableEnvVariables = enableEnvVariables;
            Id = id;
            Name = name;
            PortOverride = portOverride;
            Region = region;
            RemoteIdentityGroupId = remoteIdentityGroupId;
            RemoteIdentityHealthcheckUsername = remoteIdentityHealthcheckUsername;
            RoleArn = roleArn;
            RoleExternalId = roleExternalId;
            SecretStoreId = secretStoreId;
            SessionExpiry = sessionExpiry;
            Subdomain = subdomain;
            Tags = tags;
        }
    }
}

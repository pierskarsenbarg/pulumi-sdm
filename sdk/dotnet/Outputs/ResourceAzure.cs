// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Sdm.Outputs
{

    [OutputType]
    public sealed class ResourceAzure
    {
        public readonly string? AppId;
        /// <summary>
        /// Bind interface
        /// </summary>
        public readonly string? BindInterface;
        /// <summary>
        /// A filter applied to the routing logic to pin datasource to nodes.
        /// </summary>
        public readonly string? EgressFilter;
        /// <summary>
        /// Unique human-readable name of the Resource.
        /// </summary>
        public readonly string Name;
        public readonly string? Password;
        public readonly string? SecretStoreAppIdKey;
        public readonly string? SecretStoreAppIdPath;
        /// <summary>
        /// ID of the secret store containing credentials for this resource, if any.
        /// </summary>
        public readonly string? SecretStoreId;
        public readonly string? SecretStorePasswordKey;
        public readonly string? SecretStorePasswordPath;
        /// <summary>
        /// * azure_postgres:
        /// </summary>
        public readonly string? SecretStoreTenantIdKey;
        public readonly string? SecretStoreTenantIdPath;
        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly string? TenantId;

        [OutputConstructor]
        private ResourceAzure(
            string? appId,

            string? bindInterface,

            string? egressFilter,

            string name,

            string? password,

            string? secretStoreAppIdKey,

            string? secretStoreAppIdPath,

            string? secretStoreId,

            string? secretStorePasswordKey,

            string? secretStorePasswordPath,

            string? secretStoreTenantIdKey,

            string? secretStoreTenantIdPath,

            ImmutableDictionary<string, string>? tags,

            string? tenantId)
        {
            AppId = appId;
            BindInterface = bindInterface;
            EgressFilter = egressFilter;
            Name = name;
            Password = password;
            SecretStoreAppIdKey = secretStoreAppIdKey;
            SecretStoreAppIdPath = secretStoreAppIdPath;
            SecretStoreId = secretStoreId;
            SecretStorePasswordKey = secretStorePasswordKey;
            SecretStorePasswordPath = secretStorePasswordPath;
            SecretStoreTenantIdKey = secretStoreTenantIdKey;
            SecretStoreTenantIdPath = secretStoreTenantIdPath;
            Tags = tags;
            TenantId = tenantId;
        }
    }
}

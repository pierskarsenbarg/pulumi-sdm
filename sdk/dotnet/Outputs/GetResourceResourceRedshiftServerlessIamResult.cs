// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Sdm.Outputs
{

    [OutputType]
    public sealed class GetResourceResourceRedshiftServerlessIamResult
    {
        /// <summary>
        /// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided.
        /// </summary>
        public readonly string? BindInterface;
        /// <summary>
        /// The initial database to connect to. This setting does not by itself prevent switching to another database after connecting.
        /// </summary>
        public readonly string? Database;
        /// <summary>
        /// A filter applied to the routing logic to pin datasource to nodes.
        /// </summary>
        public readonly string? EgressFilter;
        /// <summary>
        /// The host to dial to initiate a connection from the egress node to this resource.
        /// </summary>
        public readonly string? Hostname;
        /// <summary>
        /// Unique identifier of the Resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Unique human-readable name of the Resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// If set, the database configured cannot be changed by users. This setting is not recommended for most use cases, as some clients will insist their database has changed when it has not, leading to user confusion.
        /// </summary>
        public readonly bool? OverrideDatabase;
        /// <summary>
        /// The port to dial to initiate a connection from the egress node to this resource.
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// The local port used by clients to connect to this resource.
        /// </summary>
        public readonly int? PortOverride;
        /// <summary>
        /// ID of the proxy cluster for this resource, if any.
        /// </summary>
        public readonly string? ProxyClusterId;
        /// <summary>
        /// The AWS region to connect to.
        /// </summary>
        public readonly string? Region;
        /// <summary>
        /// If provided, the gateway/relay will try to assume this role instead of the underlying compute's role.
        /// </summary>
        public readonly string? RoleAssumptionArn;
        /// <summary>
        /// ID of the secret store containing credentials for this resource, if any.
        /// </summary>
        public readonly string? SecretStoreId;
        /// <summary>
        /// Subdomain is the local DNS address.  (e.g. app-prod1 turns into app-prod1.your-org-name.sdm.network)
        /// </summary>
        public readonly string? Subdomain;
        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Workgroup name in the serverless Redshift
        /// * single_store:
        /// </summary>
        public readonly string? Workgroup;

        [OutputConstructor]
        private GetResourceResourceRedshiftServerlessIamResult(
            string? bindInterface,

            string? database,

            string? egressFilter,

            string? hostname,

            string? id,

            string? name,

            bool? overrideDatabase,

            int? port,

            int? portOverride,

            string? proxyClusterId,

            string? region,

            string? roleAssumptionArn,

            string? secretStoreId,

            string? subdomain,

            ImmutableDictionary<string, string>? tags,

            string? workgroup)
        {
            BindInterface = bindInterface;
            Database = database;
            EgressFilter = egressFilter;
            Hostname = hostname;
            Id = id;
            Name = name;
            OverrideDatabase = overrideDatabase;
            Port = port;
            PortOverride = portOverride;
            ProxyClusterId = proxyClusterId;
            Region = region;
            RoleAssumptionArn = roleAssumptionArn;
            SecretStoreId = secretStoreId;
            Subdomain = subdomain;
            Tags = tags;
            Workgroup = workgroup;
        }
    }
}

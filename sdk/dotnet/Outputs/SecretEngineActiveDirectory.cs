// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Sdm.Outputs
{

    [OutputType]
    public sealed class SecretEngineActiveDirectory
    {
        /// <summary>
        /// The default time-to-live duration of the password after it's read. Once the ttl has passed, a password will be rotated.
        /// </summary>
        public readonly string? AfterReadTtl;
        /// <summary>
        /// Distinguished name of object to bind when performing user and group search. Example: cn=vault,ou=Users,dc=example,dc=com
        /// </summary>
        public readonly string Binddn;
        /// <summary>
        /// Password to use along with binddn when performing user search.
        /// </summary>
        public readonly string Bindpass;
        /// <summary>
        /// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
        /// </summary>
        public readonly string? Certificate;
        /// <summary>
        /// Timeout, in seconds, when attempting to connect to the LDAP server before trying the next URL in the configuration.
        /// </summary>
        public readonly int? ConnectionTimeout;
        /// <summary>
        /// If set to true this will prevent password change timestamp validation in Active Directory when validating credentials
        /// </summary>
        public readonly bool? DoNotValidateTimestamps;
        /// <summary>
        /// If true, skips LDAP server SSL certificate verification - insecure, use with caution!
        /// </summary>
        public readonly bool? InsecureTls;
        /// <summary>
        /// An interval of public/private key rotation for secret engine in days
        /// </summary>
        public readonly int? KeyRotationIntervalDays;
        /// <summary>
        /// The maximum retry duration in case of automatic failure. On failed ttl rotation attempt it will be retried in an increasing intervals until it reaches max_backoff_duration
        /// </summary>
        public readonly string? MaxBackoffDuration;
        /// <summary>
        /// Unique human-readable name of the Secret Engine.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Public key linked with a secret engine
        /// </summary>
        public readonly string? PublicKey;
        /// <summary>
        /// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
        /// </summary>
        public readonly int? RequestTimeout;
        /// <summary>
        /// Backing secret store identifier
        /// </summary>
        public readonly string SecretStoreId;
        /// <summary>
        /// Backing Secret Store root path where managed secrets are going to be stored
        /// </summary>
        public readonly string SecretStoreRootPath;
        /// <summary>
        /// If true, issues a StartTLS command after establishing an unencrypted connection.
        /// </summary>
        public readonly bool? StartTls;
        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The default password time-to-live duration. Once the ttl has passed, a password will be rotated the next time it's requested.
        /// </summary>
        public readonly string? Ttl;
        /// <summary>
        /// The domain (userPrincipalDomain) used to construct a UPN string for authentication.
        /// </summary>
        public readonly string? Upndomain;
        /// <summary>
        /// The LDAP server to connect to.
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// Base DN under which to perform user search. Example: ou=Users,dc=example,dc=com
        /// * key_value:
        /// </summary>
        public readonly string? Userdn;

        [OutputConstructor]
        private SecretEngineActiveDirectory(
            string? afterReadTtl,

            string binddn,

            string bindpass,

            string? certificate,

            int? connectionTimeout,

            bool? doNotValidateTimestamps,

            bool? insecureTls,

            int? keyRotationIntervalDays,

            string? maxBackoffDuration,

            string name,

            string? publicKey,

            int? requestTimeout,

            string secretStoreId,

            string secretStoreRootPath,

            bool? startTls,

            ImmutableDictionary<string, string>? tags,

            string? ttl,

            string? upndomain,

            string url,

            string? userdn)
        {
            AfterReadTtl = afterReadTtl;
            Binddn = binddn;
            Bindpass = bindpass;
            Certificate = certificate;
            ConnectionTimeout = connectionTimeout;
            DoNotValidateTimestamps = doNotValidateTimestamps;
            InsecureTls = insecureTls;
            KeyRotationIntervalDays = keyRotationIntervalDays;
            MaxBackoffDuration = maxBackoffDuration;
            Name = name;
            PublicKey = publicKey;
            RequestTimeout = requestTimeout;
            SecretStoreId = secretStoreId;
            SecretStoreRootPath = secretStoreRootPath;
            StartTls = startTls;
            Tags = tags;
            Ttl = ttl;
            Upndomain = upndomain;
            Url = url;
            Userdn = userdn;
        }
    }
}

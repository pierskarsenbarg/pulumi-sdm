// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Sdm.Outputs
{

    [OutputType]
    public sealed class GetResourceResourceBigQueryResult
    {
        /// <summary>
        /// Bind interface
        /// </summary>
        public readonly string? BindInterface;
        /// <summary>
        /// A filter applied to the routing logic to pin datasource to nodes.
        /// </summary>
        public readonly string? EgressFilter;
        public readonly string? Endpoint;
        /// <summary>
        /// Unique identifier of the Resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Unique human-readable name of the Resource.
        /// </summary>
        public readonly string? Name;
        public readonly int? PortOverride;
        public readonly string? PrivateKey;
        public readonly string? Project;
        /// <summary>
        /// ID of the secret store containing credentials for this resource, if any.
        /// </summary>
        public readonly string? SecretStoreId;
        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        public readonly string? Username;

        [OutputConstructor]
        private GetResourceResourceBigQueryResult(
            string? bindInterface,

            string? egressFilter,

            string? endpoint,

            string? id,

            string? name,

            int? portOverride,

            string? privateKey,

            string? project,

            string? secretStoreId,

            ImmutableDictionary<string, string>? tags,

            string? username)
        {
            BindInterface = bindInterface;
            EgressFilter = egressFilter;
            Endpoint = endpoint;
            Id = id;
            Name = name;
            PortOverride = portOverride;
            PrivateKey = privateKey;
            Project = project;
            SecretStoreId = secretStoreId;
            Tags = tags;
            Username = username;
        }
    }
}

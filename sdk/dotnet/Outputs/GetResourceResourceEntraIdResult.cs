// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PiersKarsenbarg.Sdm.Outputs
{

    [OutputType]
    public sealed class GetResourceResourceEntraIdResult
    {
        /// <summary>
        /// The bind interface is the IP address to which the port override of a resource is bound (for example, 127.0.0.1). It is automatically generated if not provided and may also be set to one of the ResourceIPAllocationMode constants to select between VNM, loopback, or default allocation.
        /// </summary>
        public readonly string? BindInterface;
        /// <summary>
        /// If true, configures discovery of a cluster to be run from a node.
        /// </summary>
        public readonly bool? DiscoveryEnabled;
        /// <summary>
        /// A filter applied to the routing logic to pin datasource to nodes.
        /// </summary>
        public readonly string? EgressFilter;
        /// <summary>
        /// comma separated list of group names to filter by. Supports wildcards (*)
        /// </summary>
        public readonly string? GroupNames;
        /// <summary>
        /// Unique identifier of the Resource.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The ID of the identity set to use for identity connections.
        /// </summary>
        public readonly string? IdentitySetId;
        /// <summary>
        /// The management group ID to authenticate scope Privileges to.
        /// </summary>
        public readonly string? ManagementGroupId;
        /// <summary>
        /// Unique human-readable name of the Resource.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The privilege levels specify which Groups are managed externally
        /// </summary>
        public readonly string? PrivilegeLevels;
        /// <summary>
        /// ID of the proxy cluster for this resource, if any.
        /// </summary>
        public readonly string? ProxyClusterId;
        /// <summary>
        /// filters discovered groups to the specified Resource Group
        /// </summary>
        public readonly string? ResourceGroupId;
        /// <summary>
        /// ID of the secret store containing credentials for this resource, if any.
        /// </summary>
        public readonly string? SecretStoreId;
        /// <summary>
        /// DNS subdomain through which this resource may be accessed on clients.  (e.g. "app-prod1" allows the resource to be accessed at "app-prod1.your-org-name.sdm-proxy-domain"). Only applicable to HTTP-based resources or resources using virtual networking mode.
        /// </summary>
        public readonly string? Subdomain;
        /// <summary>
        /// The subscription ID to authenticate scope Privileges to.
        /// </summary>
        public readonly string? SubscriptionId;
        /// <summary>
        /// Tags is a map of key, value pairs.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// The Azure AD directory (tenant) ID with which to authenticate.
        /// * sql_server_kerberos_ad:
        /// </summary>
        public readonly string? TenantId;

        [OutputConstructor]
        private GetResourceResourceEntraIdResult(
            string? bindInterface,

            bool? discoveryEnabled,

            string? egressFilter,

            string? groupNames,

            string? id,

            string? identitySetId,

            string? managementGroupId,

            string? name,

            string? privilegeLevels,

            string? proxyClusterId,

            string? resourceGroupId,

            string? secretStoreId,

            string? subdomain,

            string? subscriptionId,

            ImmutableDictionary<string, string>? tags,

            string? tenantId)
        {
            BindInterface = bindInterface;
            DiscoveryEnabled = discoveryEnabled;
            EgressFilter = egressFilter;
            GroupNames = groupNames;
            Id = id;
            IdentitySetId = identitySetId;
            ManagementGroupId = managementGroupId;
            Name = name;
            PrivilegeLevels = privilegeLevels;
            ProxyClusterId = proxyClusterId;
            ResourceGroupId = resourceGroupId;
            SecretStoreId = secretStoreId;
            Subdomain = subdomain;
            SubscriptionId = subscriptionId;
            Tags = tags;
            TenantId = tenantId;
        }
    }
}
